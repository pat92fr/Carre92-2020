
RM_stm32sw_v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072c8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a4  08007498  08007498  00017498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800793c  0800793c  0001793c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007944  08007944  00017944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007948  08007948  00017948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000300  20000000  0800794c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000c1c  20000300  08007c4c  00020300  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000f1c  08007c4c  00020f1c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020300  2**0
                  CONTENTS, READONLY
 10 .debug_info   00020d86  00000000  00000000  00020330  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00004088  00000000  00000000  000410b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000e250  00000000  00000000  0004513e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001158  00000000  00000000  00053390  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001860  00000000  00000000  000544e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000a751  00000000  00000000  00055d48  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000067d2  00000000  00000000  00060499  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00066c6b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004404  00000000  00000000  00066ce8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000300 	.word	0x20000300
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007480 	.word	0x08007480

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000304 	.word	0x20000304
 800020c:	08007480 	.word	0x08007480

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800041e:	f1a4 0401 	sub.w	r4, r4, #1
 8000422:	d1e9      	bne.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f092 0f00 	teq	r2, #0
 80005ca:	bf14      	ite	ne
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	4770      	bxeq	lr
 80005d2:	b530      	push	{r4, r5, lr}
 80005d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	e720      	b.n	8000424 <__adddf3+0x138>
 80005e2:	bf00      	nop

080005e4 <__aeabi_ul2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	e00a      	b.n	800060a <__aeabi_l2d+0x16>

080005f4 <__aeabi_l2d>:
 80005f4:	ea50 0201 	orrs.w	r2, r0, r1
 80005f8:	bf08      	it	eq
 80005fa:	4770      	bxeq	lr
 80005fc:	b530      	push	{r4, r5, lr}
 80005fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000602:	d502      	bpl.n	800060a <__aeabi_l2d+0x16>
 8000604:	4240      	negs	r0, r0
 8000606:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800060a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800060e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000612:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000616:	f43f aedc 	beq.w	80003d2 <__adddf3+0xe6>
 800061a:	f04f 0203 	mov.w	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000632:	f1c2 0320 	rsb	r3, r2, #32
 8000636:	fa00 fc03 	lsl.w	ip, r0, r3
 800063a:	fa20 f002 	lsr.w	r0, r0, r2
 800063e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000642:	ea40 000e 	orr.w	r0, r0, lr
 8000646:	fa21 f102 	lsr.w	r1, r1, r2
 800064a:	4414      	add	r4, r2
 800064c:	e6c1      	b.n	80003d2 <__adddf3+0xe6>
 800064e:	bf00      	nop

08000650 <__aeabi_dmul>:
 8000650:	b570      	push	{r4, r5, r6, lr}
 8000652:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000656:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800065a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800065e:	bf1d      	ittte	ne
 8000660:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000664:	ea94 0f0c 	teqne	r4, ip
 8000668:	ea95 0f0c 	teqne	r5, ip
 800066c:	f000 f8de 	bleq	800082c <__aeabi_dmul+0x1dc>
 8000670:	442c      	add	r4, r5
 8000672:	ea81 0603 	eor.w	r6, r1, r3
 8000676:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800067a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800067e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000682:	bf18      	it	ne
 8000684:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000688:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800068c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000690:	d038      	beq.n	8000704 <__aeabi_dmul+0xb4>
 8000692:	fba0 ce02 	umull	ip, lr, r0, r2
 8000696:	f04f 0500 	mov.w	r5, #0
 800069a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800069e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006a6:	f04f 0600 	mov.w	r6, #0
 80006aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006ae:	f09c 0f00 	teq	ip, #0
 80006b2:	bf18      	it	ne
 80006b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006c4:	d204      	bcs.n	80006d0 <__aeabi_dmul+0x80>
 80006c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ca:	416d      	adcs	r5, r5
 80006cc:	eb46 0606 	adc.w	r6, r6, r6
 80006d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e8:	bf88      	it	hi
 80006ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ee:	d81e      	bhi.n	800072e <__aeabi_dmul+0xde>
 80006f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006f4:	bf08      	it	eq
 80006f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006fa:	f150 0000 	adcs.w	r0, r0, #0
 80006fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000708:	ea46 0101 	orr.w	r1, r6, r1
 800070c:	ea40 0002 	orr.w	r0, r0, r2
 8000710:	ea81 0103 	eor.w	r1, r1, r3
 8000714:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000718:	bfc2      	ittt	gt
 800071a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800071e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000722:	bd70      	popgt	{r4, r5, r6, pc}
 8000724:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000728:	f04f 0e00 	mov.w	lr, #0
 800072c:	3c01      	subs	r4, #1
 800072e:	f300 80ab 	bgt.w	8000888 <__aeabi_dmul+0x238>
 8000732:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000736:	bfde      	ittt	le
 8000738:	2000      	movle	r0, #0
 800073a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800073e:	bd70      	pople	{r4, r5, r6, pc}
 8000740:	f1c4 0400 	rsb	r4, r4, #0
 8000744:	3c20      	subs	r4, #32
 8000746:	da35      	bge.n	80007b4 <__aeabi_dmul+0x164>
 8000748:	340c      	adds	r4, #12
 800074a:	dc1b      	bgt.n	8000784 <__aeabi_dmul+0x134>
 800074c:	f104 0414 	add.w	r4, r4, #20
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f305 	lsl.w	r3, r0, r5
 8000758:	fa20 f004 	lsr.w	r0, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000768:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800076c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000770:	fa21 f604 	lsr.w	r6, r1, r4
 8000774:	eb42 0106 	adc.w	r1, r2, r6
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f1c4 040c 	rsb	r4, r4, #12
 8000788:	f1c4 0520 	rsb	r5, r4, #32
 800078c:	fa00 f304 	lsl.w	r3, r0, r4
 8000790:	fa20 f005 	lsr.w	r0, r0, r5
 8000794:	fa01 f204 	lsl.w	r2, r1, r4
 8000798:	ea40 0002 	orr.w	r0, r0, r2
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007a4:	f141 0100 	adc.w	r1, r1, #0
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f1c4 0520 	rsb	r5, r4, #32
 80007b8:	fa00 f205 	lsl.w	r2, r0, r5
 80007bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c0:	fa20 f304 	lsr.w	r3, r0, r4
 80007c4:	fa01 f205 	lsl.w	r2, r1, r5
 80007c8:	ea43 0302 	orr.w	r3, r3, r2
 80007cc:	fa21 f004 	lsr.w	r0, r1, r4
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	fa21 f204 	lsr.w	r2, r1, r4
 80007d8:	ea20 0002 	bic.w	r0, r0, r2
 80007dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007e4:	bf08      	it	eq
 80007e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ea:	bd70      	pop	{r4, r5, r6, pc}
 80007ec:	f094 0f00 	teq	r4, #0
 80007f0:	d10f      	bne.n	8000812 <__aeabi_dmul+0x1c2>
 80007f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007f6:	0040      	lsls	r0, r0, #1
 80007f8:	eb41 0101 	adc.w	r1, r1, r1
 80007fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000800:	bf08      	it	eq
 8000802:	3c01      	subeq	r4, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1a6>
 8000806:	ea41 0106 	orr.w	r1, r1, r6
 800080a:	f095 0f00 	teq	r5, #0
 800080e:	bf18      	it	ne
 8000810:	4770      	bxne	lr
 8000812:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000816:	0052      	lsls	r2, r2, #1
 8000818:	eb43 0303 	adc.w	r3, r3, r3
 800081c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000820:	bf08      	it	eq
 8000822:	3d01      	subeq	r5, #1
 8000824:	d0f7      	beq.n	8000816 <__aeabi_dmul+0x1c6>
 8000826:	ea43 0306 	orr.w	r3, r3, r6
 800082a:	4770      	bx	lr
 800082c:	ea94 0f0c 	teq	r4, ip
 8000830:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000834:	bf18      	it	ne
 8000836:	ea95 0f0c 	teqne	r5, ip
 800083a:	d00c      	beq.n	8000856 <__aeabi_dmul+0x206>
 800083c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000840:	bf18      	it	ne
 8000842:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000846:	d1d1      	bne.n	80007ec <__aeabi_dmul+0x19c>
 8000848:	ea81 0103 	eor.w	r1, r1, r3
 800084c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000850:	f04f 0000 	mov.w	r0, #0
 8000854:	bd70      	pop	{r4, r5, r6, pc}
 8000856:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800085a:	bf06      	itte	eq
 800085c:	4610      	moveq	r0, r2
 800085e:	4619      	moveq	r1, r3
 8000860:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000864:	d019      	beq.n	800089a <__aeabi_dmul+0x24a>
 8000866:	ea94 0f0c 	teq	r4, ip
 800086a:	d102      	bne.n	8000872 <__aeabi_dmul+0x222>
 800086c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000870:	d113      	bne.n	800089a <__aeabi_dmul+0x24a>
 8000872:	ea95 0f0c 	teq	r5, ip
 8000876:	d105      	bne.n	8000884 <__aeabi_dmul+0x234>
 8000878:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800087c:	bf1c      	itt	ne
 800087e:	4610      	movne	r0, r2
 8000880:	4619      	movne	r1, r3
 8000882:	d10a      	bne.n	800089a <__aeabi_dmul+0x24a>
 8000884:	ea81 0103 	eor.w	r1, r1, r3
 8000888:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800088c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000890:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000894:	f04f 0000 	mov.w	r0, #0
 8000898:	bd70      	pop	{r4, r5, r6, pc}
 800089a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800089e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008a2:	bd70      	pop	{r4, r5, r6, pc}

080008a4 <__aeabi_ddiv>:
 80008a4:	b570      	push	{r4, r5, r6, lr}
 80008a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008b2:	bf1d      	ittte	ne
 80008b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b8:	ea94 0f0c 	teqne	r4, ip
 80008bc:	ea95 0f0c 	teqne	r5, ip
 80008c0:	f000 f8a7 	bleq	8000a12 <__aeabi_ddiv+0x16e>
 80008c4:	eba4 0405 	sub.w	r4, r4, r5
 80008c8:	ea81 0e03 	eor.w	lr, r1, r3
 80008cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008d4:	f000 8088 	beq.w	80009e8 <__aeabi_ddiv+0x144>
 80008d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008fc:	429d      	cmp	r5, r3
 80008fe:	bf08      	it	eq
 8000900:	4296      	cmpeq	r6, r2
 8000902:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000906:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800090a:	d202      	bcs.n	8000912 <__aeabi_ddiv+0x6e>
 800090c:	085b      	lsrs	r3, r3, #1
 800090e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000912:	1ab6      	subs	r6, r6, r2
 8000914:	eb65 0503 	sbc.w	r5, r5, r3
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000922:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 000c 	orrcs.w	r0, r0, ip
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000980:	ea55 0e06 	orrs.w	lr, r5, r6
 8000984:	d018      	beq.n	80009b8 <__aeabi_ddiv+0x114>
 8000986:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800098a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800098e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000992:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000996:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800099a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800099e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009a2:	d1c0      	bne.n	8000926 <__aeabi_ddiv+0x82>
 80009a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a8:	d10b      	bne.n	80009c2 <__aeabi_ddiv+0x11e>
 80009aa:	ea41 0100 	orr.w	r1, r1, r0
 80009ae:	f04f 0000 	mov.w	r0, #0
 80009b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009b6:	e7b6      	b.n	8000926 <__aeabi_ddiv+0x82>
 80009b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009bc:	bf04      	itt	eq
 80009be:	4301      	orreq	r1, r0
 80009c0:	2000      	moveq	r0, #0
 80009c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009c6:	bf88      	it	hi
 80009c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009cc:	f63f aeaf 	bhi.w	800072e <__aeabi_dmul+0xde>
 80009d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009d4:	bf04      	itt	eq
 80009d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009de:	f150 0000 	adcs.w	r0, r0, #0
 80009e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	pop	{r4, r5, r6, pc}
 80009e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009f4:	bfc2      	ittt	gt
 80009f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000a00:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a04:	f04f 0e00 	mov.w	lr, #0
 8000a08:	3c01      	subs	r4, #1
 8000a0a:	e690      	b.n	800072e <__aeabi_dmul+0xde>
 8000a0c:	ea45 0e06 	orr.w	lr, r5, r6
 8000a10:	e68d      	b.n	800072e <__aeabi_dmul+0xde>
 8000a12:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a16:	ea94 0f0c 	teq	r4, ip
 8000a1a:	bf08      	it	eq
 8000a1c:	ea95 0f0c 	teqeq	r5, ip
 8000a20:	f43f af3b 	beq.w	800089a <__aeabi_dmul+0x24a>
 8000a24:	ea94 0f0c 	teq	r4, ip
 8000a28:	d10a      	bne.n	8000a40 <__aeabi_ddiv+0x19c>
 8000a2a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a2e:	f47f af34 	bne.w	800089a <__aeabi_dmul+0x24a>
 8000a32:	ea95 0f0c 	teq	r5, ip
 8000a36:	f47f af25 	bne.w	8000884 <__aeabi_dmul+0x234>
 8000a3a:	4610      	mov	r0, r2
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	e72c      	b.n	800089a <__aeabi_dmul+0x24a>
 8000a40:	ea95 0f0c 	teq	r5, ip
 8000a44:	d106      	bne.n	8000a54 <__aeabi_ddiv+0x1b0>
 8000a46:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a4a:	f43f aefd 	beq.w	8000848 <__aeabi_dmul+0x1f8>
 8000a4e:	4610      	mov	r0, r2
 8000a50:	4619      	mov	r1, r3
 8000a52:	e722      	b.n	800089a <__aeabi_dmul+0x24a>
 8000a54:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a58:	bf18      	it	ne
 8000a5a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a5e:	f47f aec5 	bne.w	80007ec <__aeabi_dmul+0x19c>
 8000a62:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a66:	f47f af0d 	bne.w	8000884 <__aeabi_dmul+0x234>
 8000a6a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a6e:	f47f aeeb 	bne.w	8000848 <__aeabi_dmul+0x1f8>
 8000a72:	e712      	b.n	800089a <__aeabi_dmul+0x24a>

08000a74 <__gedf2>:
 8000a74:	f04f 3cff 	mov.w	ip, #4294967295
 8000a78:	e006      	b.n	8000a88 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__ledf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	e002      	b.n	8000a88 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__cmpdf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	bf18      	it	ne
 8000a9a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a9e:	d01b      	beq.n	8000ad8 <__cmpdf2+0x54>
 8000aa0:	b001      	add	sp, #4
 8000aa2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aa6:	bf0c      	ite	eq
 8000aa8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aac:	ea91 0f03 	teqne	r1, r3
 8000ab0:	bf02      	ittt	eq
 8000ab2:	ea90 0f02 	teqeq	r0, r2
 8000ab6:	2000      	moveq	r0, #0
 8000ab8:	4770      	bxeq	lr
 8000aba:	f110 0f00 	cmn.w	r0, #0
 8000abe:	ea91 0f03 	teq	r1, r3
 8000ac2:	bf58      	it	pl
 8000ac4:	4299      	cmppl	r1, r3
 8000ac6:	bf08      	it	eq
 8000ac8:	4290      	cmpeq	r0, r2
 8000aca:	bf2c      	ite	cs
 8000acc:	17d8      	asrcs	r0, r3, #31
 8000ace:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ad2:	f040 0001 	orr.w	r0, r0, #1
 8000ad6:	4770      	bx	lr
 8000ad8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d102      	bne.n	8000ae8 <__cmpdf2+0x64>
 8000ae2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ae6:	d107      	bne.n	8000af8 <__cmpdf2+0x74>
 8000ae8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af0:	d1d6      	bne.n	8000aa0 <__cmpdf2+0x1c>
 8000af2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000af6:	d0d3      	beq.n	8000aa0 <__cmpdf2+0x1c>
 8000af8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdrcmple>:
 8000b00:	4684      	mov	ip, r0
 8000b02:	4610      	mov	r0, r2
 8000b04:	4662      	mov	r2, ip
 8000b06:	468c      	mov	ip, r1
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4663      	mov	r3, ip
 8000b0c:	e000      	b.n	8000b10 <__aeabi_cdcmpeq>
 8000b0e:	bf00      	nop

08000b10 <__aeabi_cdcmpeq>:
 8000b10:	b501      	push	{r0, lr}
 8000b12:	f7ff ffb7 	bl	8000a84 <__cmpdf2>
 8000b16:	2800      	cmp	r0, #0
 8000b18:	bf48      	it	mi
 8000b1a:	f110 0f00 	cmnmi.w	r0, #0
 8000b1e:	bd01      	pop	{r0, pc}

08000b20 <__aeabi_dcmpeq>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff fff4 	bl	8000b10 <__aeabi_cdcmpeq>
 8000b28:	bf0c      	ite	eq
 8000b2a:	2001      	moveq	r0, #1
 8000b2c:	2000      	movne	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmplt>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffea 	bl	8000b10 <__aeabi_cdcmpeq>
 8000b3c:	bf34      	ite	cc
 8000b3e:	2001      	movcc	r0, #1
 8000b40:	2000      	movcs	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmple>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffe0 	bl	8000b10 <__aeabi_cdcmpeq>
 8000b50:	bf94      	ite	ls
 8000b52:	2001      	movls	r0, #1
 8000b54:	2000      	movhi	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpge>:
 8000b5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b60:	f7ff ffce 	bl	8000b00 <__aeabi_cdrcmple>
 8000b64:	bf94      	ite	ls
 8000b66:	2001      	movls	r0, #1
 8000b68:	2000      	movhi	r0, #0
 8000b6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6e:	bf00      	nop

08000b70 <__aeabi_dcmpgt>:
 8000b70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b74:	f7ff ffc4 	bl	8000b00 <__aeabi_cdrcmple>
 8000b78:	bf34      	ite	cc
 8000b7a:	2001      	movcc	r0, #1
 8000b7c:	2000      	movcs	r0, #0
 8000b7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b82:	bf00      	nop

08000b84 <__aeabi_dcmpun>:
 8000b84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d102      	bne.n	8000b94 <__aeabi_dcmpun+0x10>
 8000b8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b92:	d10a      	bne.n	8000baa <__aeabi_dcmpun+0x26>
 8000b94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b9c:	d102      	bne.n	8000ba4 <__aeabi_dcmpun+0x20>
 8000b9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ba2:	d102      	bne.n	8000baa <__aeabi_dcmpun+0x26>
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	f04f 0001 	mov.w	r0, #1
 8000bae:	4770      	bx	lr

08000bb0 <__aeabi_d2iz>:
 8000bb0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb8:	d215      	bcs.n	8000be6 <__aeabi_d2iz+0x36>
 8000bba:	d511      	bpl.n	8000be0 <__aeabi_d2iz+0x30>
 8000bbc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc4:	d912      	bls.n	8000bec <__aeabi_d2iz+0x3c>
 8000bc6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bce:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bd2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bd6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bda:	bf18      	it	ne
 8000bdc:	4240      	negne	r0, r0
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d105      	bne.n	8000bf8 <__aeabi_d2iz+0x48>
 8000bec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf0:	bf08      	it	eq
 8000bf2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop

08000c00 <__aeabi_d2f>:
 8000c00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c08:	bf24      	itt	cs
 8000c0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c12:	d90d      	bls.n	8000c30 <__aeabi_d2f+0x30>
 8000c14:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c20:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c28:	bf08      	it	eq
 8000c2a:	f020 0001 	biceq.w	r0, r0, #1
 8000c2e:	4770      	bx	lr
 8000c30:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c34:	d121      	bne.n	8000c7a <__aeabi_d2f+0x7a>
 8000c36:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c3a:	bfbc      	itt	lt
 8000c3c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c40:	4770      	bxlt	lr
 8000c42:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c46:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c4a:	f1c2 0218 	rsb	r2, r2, #24
 8000c4e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c52:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c56:	fa20 f002 	lsr.w	r0, r0, r2
 8000c5a:	bf18      	it	ne
 8000c5c:	f040 0001 	orrne.w	r0, r0, #1
 8000c60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c68:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c6c:	ea40 000c 	orr.w	r0, r0, ip
 8000c70:	fa23 f302 	lsr.w	r3, r3, r2
 8000c74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c78:	e7cc      	b.n	8000c14 <__aeabi_d2f+0x14>
 8000c7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c7e:	d107      	bne.n	8000c90 <__aeabi_d2f+0x90>
 8000c80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c84:	bf1e      	ittt	ne
 8000c86:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c8a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c8e:	4770      	bxne	lr
 8000c90:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop

08000ca0 <__aeabi_uldivmod>:
 8000ca0:	b953      	cbnz	r3, 8000cb8 <__aeabi_uldivmod+0x18>
 8000ca2:	b94a      	cbnz	r2, 8000cb8 <__aeabi_uldivmod+0x18>
 8000ca4:	2900      	cmp	r1, #0
 8000ca6:	bf08      	it	eq
 8000ca8:	2800      	cmpeq	r0, #0
 8000caa:	bf1c      	itt	ne
 8000cac:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb0:	f04f 30ff 	movne.w	r0, #4294967295
 8000cb4:	f000 b97a 	b.w	8000fac <__aeabi_idiv0>
 8000cb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc0:	f000 f806 	bl	8000cd0 <__udivmoddi4>
 8000cc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ccc:	b004      	add	sp, #16
 8000cce:	4770      	bx	lr

08000cd0 <__udivmoddi4>:
 8000cd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cd4:	468c      	mov	ip, r1
 8000cd6:	460d      	mov	r5, r1
 8000cd8:	4604      	mov	r4, r0
 8000cda:	9e08      	ldr	r6, [sp, #32]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d151      	bne.n	8000d84 <__udivmoddi4+0xb4>
 8000ce0:	428a      	cmp	r2, r1
 8000ce2:	4617      	mov	r7, r2
 8000ce4:	d96d      	bls.n	8000dc2 <__udivmoddi4+0xf2>
 8000ce6:	fab2 fe82 	clz	lr, r2
 8000cea:	f1be 0f00 	cmp.w	lr, #0
 8000cee:	d00b      	beq.n	8000d08 <__udivmoddi4+0x38>
 8000cf0:	f1ce 0c20 	rsb	ip, lr, #32
 8000cf4:	fa01 f50e 	lsl.w	r5, r1, lr
 8000cf8:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000cfc:	fa02 f70e 	lsl.w	r7, r2, lr
 8000d00:	ea4c 0c05 	orr.w	ip, ip, r5
 8000d04:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d08:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000d0c:	0c25      	lsrs	r5, r4, #16
 8000d0e:	fbbc f8fa 	udiv	r8, ip, sl
 8000d12:	fa1f f987 	uxth.w	r9, r7
 8000d16:	fb0a cc18 	mls	ip, sl, r8, ip
 8000d1a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000d1e:	fb08 f309 	mul.w	r3, r8, r9
 8000d22:	42ab      	cmp	r3, r5
 8000d24:	d90a      	bls.n	8000d3c <__udivmoddi4+0x6c>
 8000d26:	19ed      	adds	r5, r5, r7
 8000d28:	f108 32ff 	add.w	r2, r8, #4294967295
 8000d2c:	f080 8123 	bcs.w	8000f76 <__udivmoddi4+0x2a6>
 8000d30:	42ab      	cmp	r3, r5
 8000d32:	f240 8120 	bls.w	8000f76 <__udivmoddi4+0x2a6>
 8000d36:	f1a8 0802 	sub.w	r8, r8, #2
 8000d3a:	443d      	add	r5, r7
 8000d3c:	1aed      	subs	r5, r5, r3
 8000d3e:	b2a4      	uxth	r4, r4
 8000d40:	fbb5 f0fa 	udiv	r0, r5, sl
 8000d44:	fb0a 5510 	mls	r5, sl, r0, r5
 8000d48:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d4c:	fb00 f909 	mul.w	r9, r0, r9
 8000d50:	45a1      	cmp	r9, r4
 8000d52:	d909      	bls.n	8000d68 <__udivmoddi4+0x98>
 8000d54:	19e4      	adds	r4, r4, r7
 8000d56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d5a:	f080 810a 	bcs.w	8000f72 <__udivmoddi4+0x2a2>
 8000d5e:	45a1      	cmp	r9, r4
 8000d60:	f240 8107 	bls.w	8000f72 <__udivmoddi4+0x2a2>
 8000d64:	3802      	subs	r0, #2
 8000d66:	443c      	add	r4, r7
 8000d68:	eba4 0409 	sub.w	r4, r4, r9
 8000d6c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d70:	2100      	movs	r1, #0
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	d061      	beq.n	8000e3a <__udivmoddi4+0x16a>
 8000d76:	fa24 f40e 	lsr.w	r4, r4, lr
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	6034      	str	r4, [r6, #0]
 8000d7e:	6073      	str	r3, [r6, #4]
 8000d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d84:	428b      	cmp	r3, r1
 8000d86:	d907      	bls.n	8000d98 <__udivmoddi4+0xc8>
 8000d88:	2e00      	cmp	r6, #0
 8000d8a:	d054      	beq.n	8000e36 <__udivmoddi4+0x166>
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000d92:	4608      	mov	r0, r1
 8000d94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d98:	fab3 f183 	clz	r1, r3
 8000d9c:	2900      	cmp	r1, #0
 8000d9e:	f040 808e 	bne.w	8000ebe <__udivmoddi4+0x1ee>
 8000da2:	42ab      	cmp	r3, r5
 8000da4:	d302      	bcc.n	8000dac <__udivmoddi4+0xdc>
 8000da6:	4282      	cmp	r2, r0
 8000da8:	f200 80fa 	bhi.w	8000fa0 <__udivmoddi4+0x2d0>
 8000dac:	1a84      	subs	r4, r0, r2
 8000dae:	eb65 0503 	sbc.w	r5, r5, r3
 8000db2:	2001      	movs	r0, #1
 8000db4:	46ac      	mov	ip, r5
 8000db6:	2e00      	cmp	r6, #0
 8000db8:	d03f      	beq.n	8000e3a <__udivmoddi4+0x16a>
 8000dba:	e886 1010 	stmia.w	r6, {r4, ip}
 8000dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc2:	b912      	cbnz	r2, 8000dca <__udivmoddi4+0xfa>
 8000dc4:	2701      	movs	r7, #1
 8000dc6:	fbb7 f7f2 	udiv	r7, r7, r2
 8000dca:	fab7 fe87 	clz	lr, r7
 8000dce:	f1be 0f00 	cmp.w	lr, #0
 8000dd2:	d134      	bne.n	8000e3e <__udivmoddi4+0x16e>
 8000dd4:	1beb      	subs	r3, r5, r7
 8000dd6:	0c3a      	lsrs	r2, r7, #16
 8000dd8:	fa1f fc87 	uxth.w	ip, r7
 8000ddc:	2101      	movs	r1, #1
 8000dde:	fbb3 f8f2 	udiv	r8, r3, r2
 8000de2:	0c25      	lsrs	r5, r4, #16
 8000de4:	fb02 3318 	mls	r3, r2, r8, r3
 8000de8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000dec:	fb0c f308 	mul.w	r3, ip, r8
 8000df0:	42ab      	cmp	r3, r5
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x134>
 8000df4:	19ed      	adds	r5, r5, r7
 8000df6:	f108 30ff 	add.w	r0, r8, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x132>
 8000dfc:	42ab      	cmp	r3, r5
 8000dfe:	f200 80d1 	bhi.w	8000fa4 <__udivmoddi4+0x2d4>
 8000e02:	4680      	mov	r8, r0
 8000e04:	1aed      	subs	r5, r5, r3
 8000e06:	b2a3      	uxth	r3, r4
 8000e08:	fbb5 f0f2 	udiv	r0, r5, r2
 8000e0c:	fb02 5510 	mls	r5, r2, r0, r5
 8000e10:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000e14:	fb0c fc00 	mul.w	ip, ip, r0
 8000e18:	45a4      	cmp	ip, r4
 8000e1a:	d907      	bls.n	8000e2c <__udivmoddi4+0x15c>
 8000e1c:	19e4      	adds	r4, r4, r7
 8000e1e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e22:	d202      	bcs.n	8000e2a <__udivmoddi4+0x15a>
 8000e24:	45a4      	cmp	ip, r4
 8000e26:	f200 80b8 	bhi.w	8000f9a <__udivmoddi4+0x2ca>
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	eba4 040c 	sub.w	r4, r4, ip
 8000e30:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e34:	e79d      	b.n	8000d72 <__udivmoddi4+0xa2>
 8000e36:	4631      	mov	r1, r6
 8000e38:	4630      	mov	r0, r6
 8000e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3e:	f1ce 0420 	rsb	r4, lr, #32
 8000e42:	fa05 f30e 	lsl.w	r3, r5, lr
 8000e46:	fa07 f70e 	lsl.w	r7, r7, lr
 8000e4a:	fa20 f804 	lsr.w	r8, r0, r4
 8000e4e:	0c3a      	lsrs	r2, r7, #16
 8000e50:	fa25 f404 	lsr.w	r4, r5, r4
 8000e54:	ea48 0803 	orr.w	r8, r8, r3
 8000e58:	fbb4 f1f2 	udiv	r1, r4, r2
 8000e5c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000e60:	fb02 4411 	mls	r4, r2, r1, r4
 8000e64:	fa1f fc87 	uxth.w	ip, r7
 8000e68:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000e6c:	fb01 f30c 	mul.w	r3, r1, ip
 8000e70:	42ab      	cmp	r3, r5
 8000e72:	fa00 f40e 	lsl.w	r4, r0, lr
 8000e76:	d909      	bls.n	8000e8c <__udivmoddi4+0x1bc>
 8000e78:	19ed      	adds	r5, r5, r7
 8000e7a:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e7e:	f080 808a 	bcs.w	8000f96 <__udivmoddi4+0x2c6>
 8000e82:	42ab      	cmp	r3, r5
 8000e84:	f240 8087 	bls.w	8000f96 <__udivmoddi4+0x2c6>
 8000e88:	3902      	subs	r1, #2
 8000e8a:	443d      	add	r5, r7
 8000e8c:	1aeb      	subs	r3, r5, r3
 8000e8e:	fa1f f588 	uxth.w	r5, r8
 8000e92:	fbb3 f0f2 	udiv	r0, r3, r2
 8000e96:	fb02 3310 	mls	r3, r2, r0, r3
 8000e9a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000e9e:	fb00 f30c 	mul.w	r3, r0, ip
 8000ea2:	42ab      	cmp	r3, r5
 8000ea4:	d907      	bls.n	8000eb6 <__udivmoddi4+0x1e6>
 8000ea6:	19ed      	adds	r5, r5, r7
 8000ea8:	f100 38ff 	add.w	r8, r0, #4294967295
 8000eac:	d26f      	bcs.n	8000f8e <__udivmoddi4+0x2be>
 8000eae:	42ab      	cmp	r3, r5
 8000eb0:	d96d      	bls.n	8000f8e <__udivmoddi4+0x2be>
 8000eb2:	3802      	subs	r0, #2
 8000eb4:	443d      	add	r5, r7
 8000eb6:	1aeb      	subs	r3, r5, r3
 8000eb8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ebc:	e78f      	b.n	8000dde <__udivmoddi4+0x10e>
 8000ebe:	f1c1 0720 	rsb	r7, r1, #32
 8000ec2:	fa22 f807 	lsr.w	r8, r2, r7
 8000ec6:	408b      	lsls	r3, r1
 8000ec8:	fa05 f401 	lsl.w	r4, r5, r1
 8000ecc:	ea48 0303 	orr.w	r3, r8, r3
 8000ed0:	fa20 fe07 	lsr.w	lr, r0, r7
 8000ed4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000ed8:	40fd      	lsrs	r5, r7
 8000eda:	ea4e 0e04 	orr.w	lr, lr, r4
 8000ede:	fbb5 f9fc 	udiv	r9, r5, ip
 8000ee2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000ee6:	fb0c 5519 	mls	r5, ip, r9, r5
 8000eea:	fa1f f883 	uxth.w	r8, r3
 8000eee:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000ef2:	fb09 f408 	mul.w	r4, r9, r8
 8000ef6:	42ac      	cmp	r4, r5
 8000ef8:	fa02 f201 	lsl.w	r2, r2, r1
 8000efc:	fa00 fa01 	lsl.w	sl, r0, r1
 8000f00:	d908      	bls.n	8000f14 <__udivmoddi4+0x244>
 8000f02:	18ed      	adds	r5, r5, r3
 8000f04:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f08:	d243      	bcs.n	8000f92 <__udivmoddi4+0x2c2>
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	d941      	bls.n	8000f92 <__udivmoddi4+0x2c2>
 8000f0e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f12:	441d      	add	r5, r3
 8000f14:	1b2d      	subs	r5, r5, r4
 8000f16:	fa1f fe8e 	uxth.w	lr, lr
 8000f1a:	fbb5 f0fc 	udiv	r0, r5, ip
 8000f1e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000f22:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000f26:	fb00 f808 	mul.w	r8, r0, r8
 8000f2a:	45a0      	cmp	r8, r4
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x26e>
 8000f2e:	18e4      	adds	r4, r4, r3
 8000f30:	f100 35ff 	add.w	r5, r0, #4294967295
 8000f34:	d229      	bcs.n	8000f8a <__udivmoddi4+0x2ba>
 8000f36:	45a0      	cmp	r8, r4
 8000f38:	d927      	bls.n	8000f8a <__udivmoddi4+0x2ba>
 8000f3a:	3802      	subs	r0, #2
 8000f3c:	441c      	add	r4, r3
 8000f3e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f42:	eba4 0408 	sub.w	r4, r4, r8
 8000f46:	fba0 8902 	umull	r8, r9, r0, r2
 8000f4a:	454c      	cmp	r4, r9
 8000f4c:	46c6      	mov	lr, r8
 8000f4e:	464d      	mov	r5, r9
 8000f50:	d315      	bcc.n	8000f7e <__udivmoddi4+0x2ae>
 8000f52:	d012      	beq.n	8000f7a <__udivmoddi4+0x2aa>
 8000f54:	b156      	cbz	r6, 8000f6c <__udivmoddi4+0x29c>
 8000f56:	ebba 030e 	subs.w	r3, sl, lr
 8000f5a:	eb64 0405 	sbc.w	r4, r4, r5
 8000f5e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f62:	40cb      	lsrs	r3, r1
 8000f64:	431f      	orrs	r7, r3
 8000f66:	40cc      	lsrs	r4, r1
 8000f68:	6037      	str	r7, [r6, #0]
 8000f6a:	6074      	str	r4, [r6, #4]
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f72:	4618      	mov	r0, r3
 8000f74:	e6f8      	b.n	8000d68 <__udivmoddi4+0x98>
 8000f76:	4690      	mov	r8, r2
 8000f78:	e6e0      	b.n	8000d3c <__udivmoddi4+0x6c>
 8000f7a:	45c2      	cmp	sl, r8
 8000f7c:	d2ea      	bcs.n	8000f54 <__udivmoddi4+0x284>
 8000f7e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f82:	eb69 0503 	sbc.w	r5, r9, r3
 8000f86:	3801      	subs	r0, #1
 8000f88:	e7e4      	b.n	8000f54 <__udivmoddi4+0x284>
 8000f8a:	4628      	mov	r0, r5
 8000f8c:	e7d7      	b.n	8000f3e <__udivmoddi4+0x26e>
 8000f8e:	4640      	mov	r0, r8
 8000f90:	e791      	b.n	8000eb6 <__udivmoddi4+0x1e6>
 8000f92:	4681      	mov	r9, r0
 8000f94:	e7be      	b.n	8000f14 <__udivmoddi4+0x244>
 8000f96:	4601      	mov	r1, r0
 8000f98:	e778      	b.n	8000e8c <__udivmoddi4+0x1bc>
 8000f9a:	3802      	subs	r0, #2
 8000f9c:	443c      	add	r4, r7
 8000f9e:	e745      	b.n	8000e2c <__udivmoddi4+0x15c>
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	e708      	b.n	8000db6 <__udivmoddi4+0xe6>
 8000fa4:	f1a8 0802 	sub.w	r8, r8, #2
 8000fa8:	443d      	add	r5, r7
 8000faa:	e72b      	b.n	8000e04 <__udivmoddi4+0x134>

08000fac <__aeabi_idiv0>:
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop

08000fb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fb0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fb2:	4a0e      	ldr	r2, [pc, #56]	; (8000fec <HAL_InitTick+0x3c>)
 8000fb4:	4b0e      	ldr	r3, [pc, #56]	; (8000ff0 <HAL_InitTick+0x40>)
{
 8000fb6:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fb8:	7818      	ldrb	r0, [r3, #0]
 8000fba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fbe:	fbb3 f3f0 	udiv	r3, r3, r0
 8000fc2:	6810      	ldr	r0, [r2, #0]
 8000fc4:	fbb0 f0f3 	udiv	r0, r0, r3
 8000fc8:	f000 f9f2 	bl	80013b0 <HAL_SYSTICK_Config>
 8000fcc:	4604      	mov	r4, r0
 8000fce:	b958      	cbnz	r0, 8000fe8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fd0:	2d0f      	cmp	r5, #15
 8000fd2:	d809      	bhi.n	8000fe8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	4629      	mov	r1, r5
 8000fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fdc:	f000 f9a6 	bl	800132c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fe0:	4b04      	ldr	r3, [pc, #16]	; (8000ff4 <HAL_InitTick+0x44>)
 8000fe2:	4620      	mov	r0, r4
 8000fe4:	601d      	str	r5, [r3, #0]
 8000fe6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000fe8:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000fea:	bd38      	pop	{r3, r4, r5, pc}
 8000fec:	20000128 	.word	0x20000128
 8000ff0:	20000000 	.word	0x20000000
 8000ff4:	20000004 	.word	0x20000004

08000ff8 <HAL_Init>:
{
 8000ff8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ffa:	4b0b      	ldr	r3, [pc, #44]	; (8001028 <HAL_Init+0x30>)
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001002:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800100a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001012:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001014:	2003      	movs	r0, #3
 8001016:	f000 f977 	bl	8001308 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800101a:	2000      	movs	r0, #0
 800101c:	f7ff ffc8 	bl	8000fb0 <HAL_InitTick>
  HAL_MspInit();
 8001020:	f003 fd3c 	bl	8004a9c <HAL_MspInit>
}
 8001024:	2000      	movs	r0, #0
 8001026:	bd08      	pop	{r3, pc}
 8001028:	40023c00 	.word	0x40023c00

0800102c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800102c:	4a03      	ldr	r2, [pc, #12]	; (800103c <HAL_IncTick+0x10>)
 800102e:	4b04      	ldr	r3, [pc, #16]	; (8001040 <HAL_IncTick+0x14>)
 8001030:	6811      	ldr	r1, [r2, #0]
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	440b      	add	r3, r1
 8001036:	6013      	str	r3, [r2, #0]
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	2000033c 	.word	0x2000033c
 8001040:	20000000 	.word	0x20000000

08001044 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001044:	4b01      	ldr	r3, [pc, #4]	; (800104c <HAL_GetTick+0x8>)
 8001046:	6818      	ldr	r0, [r3, #0]
}
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	2000033c 	.word	0x2000033c

08001050 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001050:	b538      	push	{r3, r4, r5, lr}
 8001052:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001054:	f7ff fff6 	bl	8001044 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001058:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800105a:	bf1c      	itt	ne
 800105c:	4b05      	ldrne	r3, [pc, #20]	; (8001074 <HAL_Delay+0x24>)
 800105e:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8001060:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8001062:	bf18      	it	ne
 8001064:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001066:	f7ff ffed 	bl	8001044 <HAL_GetTick>
 800106a:	1b40      	subs	r0, r0, r5
 800106c:	4284      	cmp	r4, r0
 800106e:	d8fa      	bhi.n	8001066 <HAL_Delay+0x16>
  {
  }
}
 8001070:	bd38      	pop	{r3, r4, r5, pc}
 8001072:	bf00      	nop
 8001074:	20000000 	.word	0x20000000

08001078 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001078:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 800107a:	4604      	mov	r4, r0
 800107c:	2800      	cmp	r0, #0
 800107e:	f000 809b 	beq.w	80011b8 <HAL_ADC_Init+0x140>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001082:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8001084:	b925      	cbnz	r5, 8001090 <HAL_ADC_Init+0x18>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001086:	f003 fd25 	bl	8004ad4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800108a:	6465      	str	r5, [r4, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800108c:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001090:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001092:	06db      	lsls	r3, r3, #27
 8001094:	f100 808e 	bmi.w	80011b4 <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001098:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800109a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800109e:	f023 0302 	bic.w	r3, r3, #2
 80010a2:	f043 0302 	orr.w	r3, r3, #2
 80010a6:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80010a8:	4b44      	ldr	r3, [pc, #272]	; (80011bc <HAL_ADC_Init+0x144>)
 80010aa:	685a      	ldr	r2, [r3, #4]
 80010ac:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80010b0:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80010b2:	685a      	ldr	r2, [r3, #4]
 80010b4:	6861      	ldr	r1, [r4, #4]
 80010b6:	430a      	orrs	r2, r1
 80010b8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80010ba:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80010bc:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80010be:	685a      	ldr	r2, [r3, #4]
 80010c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80010c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80010c6:	685a      	ldr	r2, [r3, #4]
 80010c8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80010cc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80010ce:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80010d0:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80010d2:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80010d6:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80010d8:	685a      	ldr	r2, [r3, #4]
 80010da:	430a      	orrs	r2, r1
 80010dc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80010de:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80010e0:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80010e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80010e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80010e8:	689a      	ldr	r2, [r3, #8]
 80010ea:	430a      	orrs	r2, r1
 80010ec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80010ee:	4934      	ldr	r1, [pc, #208]	; (80011c0 <HAL_ADC_Init+0x148>)
 80010f0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80010f2:	428a      	cmp	r2, r1
 80010f4:	d052      	beq.n	800119c <HAL_ADC_Init+0x124>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80010f6:	6899      	ldr	r1, [r3, #8]
 80010f8:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 80010fc:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80010fe:	6899      	ldr	r1, [r3, #8]
 8001100:	430a      	orrs	r2, r1
 8001102:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001104:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001106:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001108:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800110c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800110e:	689a      	ldr	r2, [r3, #8]
 8001110:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001112:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001114:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001116:	7e21      	ldrb	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001118:	f022 0202 	bic.w	r2, r2, #2
 800111c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800111e:	689a      	ldr	r2, [r3, #8]
 8001120:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8001124:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001126:	f894 2020 	ldrb.w	r2, [r4, #32]
 800112a:	2a00      	cmp	r2, #0
 800112c:	d03e      	beq.n	80011ac <HAL_ADC_Init+0x134>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800112e:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001130:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001132:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001136:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001138:	685a      	ldr	r2, [r3, #4]
 800113a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800113e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001140:	685a      	ldr	r2, [r3, #4]
 8001142:	3901      	subs	r1, #1
 8001144:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001148:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800114a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800114c:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800114e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001152:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001154:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001156:	3901      	subs	r1, #1
 8001158:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800115c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800115e:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001160:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001164:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001168:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800116a:	689a      	ldr	r2, [r3, #8]
 800116c:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8001170:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001172:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001174:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001176:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800117a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800117c:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800117e:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001180:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8001184:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8001186:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8001188:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800118a:	f023 0303 	bic.w	r3, r3, #3
 800118e:	f043 0301 	orr.w	r3, r3, #1
 8001192:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8001194:	2300      	movs	r3, #0
 8001196:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 800119a:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800119c:	689a      	ldr	r2, [r3, #8]
 800119e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80011a2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80011a4:	689a      	ldr	r2, [r3, #8]
 80011a6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80011aa:	e7b2      	b.n	8001112 <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80011ac:	685a      	ldr	r2, [r3, #4]
 80011ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80011b2:	e7c9      	b.n	8001148 <HAL_ADC_Init+0xd0>
    tmp_hal_status = HAL_ERROR;
 80011b4:	2001      	movs	r0, #1
 80011b6:	e7ed      	b.n	8001194 <HAL_ADC_Init+0x11c>
    return HAL_ERROR;
 80011b8:	2001      	movs	r0, #1
}
 80011ba:	bd38      	pop	{r3, r4, r5, pc}
 80011bc:	40012300 	.word	0x40012300
 80011c0:	0f000001 	.word	0x0f000001

080011c4 <HAL_ADC_ConfigChannel>:
{
 80011c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 80011c6:	2300      	movs	r3, #0
 80011c8:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80011ca:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d06e      	beq.n	80012b0 <HAL_ADC_ConfigChannel+0xec>
  if (sConfig->Channel > ADC_CHANNEL_9)
 80011d2:	680d      	ldr	r5, [r1, #0]
 80011d4:	6804      	ldr	r4, [r0, #0]
 80011d6:	688a      	ldr	r2, [r1, #8]
  __HAL_LOCK(hadc);
 80011d8:	2301      	movs	r3, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 80011da:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 80011dc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 80011e0:	b2ae      	uxth	r6, r5
  if (sConfig->Channel > ADC_CHANNEL_9)
 80011e2:	d92a      	bls.n	800123a <HAL_ADC_ConfigChannel+0x76>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80011e4:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 80011e8:	68e7      	ldr	r7, [r4, #12]
 80011ea:	3b1e      	subs	r3, #30
 80011ec:	f04f 0e07 	mov.w	lr, #7
 80011f0:	fa0e fe03 	lsl.w	lr, lr, r3
 80011f4:	ea27 070e 	bic.w	r7, r7, lr
 80011f8:	60e7      	str	r7, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80011fa:	68e7      	ldr	r7, [r4, #12]
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	433b      	orrs	r3, r7
 8001202:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 8001204:	684a      	ldr	r2, [r1, #4]
 8001206:	2a06      	cmp	r2, #6
 8001208:	ea4f 0382 	mov.w	r3, r2, lsl #2
 800120c:	d825      	bhi.n	800125a <HAL_ADC_ConfigChannel+0x96>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800120e:	4413      	add	r3, r2
 8001210:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8001212:	1f59      	subs	r1, r3, #5
 8001214:	231f      	movs	r3, #31
 8001216:	408b      	lsls	r3, r1
 8001218:	ea27 0303 	bic.w	r3, r7, r3
 800121c:	6363      	str	r3, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800121e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001220:	fa06 f101 	lsl.w	r1, r6, r1
 8001224:	4311      	orrs	r1, r2
 8001226:	6361      	str	r1, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001228:	4b32      	ldr	r3, [pc, #200]	; (80012f4 <HAL_ADC_ConfigChannel+0x130>)
 800122a:	429c      	cmp	r4, r3
 800122c:	d034      	beq.n	8001298 <HAL_ADC_ConfigChannel+0xd4>
  __HAL_UNLOCK(hadc);
 800122e:	2300      	movs	r3, #0
 8001230:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8001234:	4618      	mov	r0, r3
}
 8001236:	b003      	add	sp, #12
 8001238:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800123a:	6927      	ldr	r7, [r4, #16]
 800123c:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8001240:	f04f 0e07 	mov.w	lr, #7
 8001244:	fa0e fe03 	lsl.w	lr, lr, r3
 8001248:	ea27 070e 	bic.w	r7, r7, lr
 800124c:	6127      	str	r7, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800124e:	6927      	ldr	r7, [r4, #16]
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	433b      	orrs	r3, r7
 8001256:	6123      	str	r3, [r4, #16]
 8001258:	e7d4      	b.n	8001204 <HAL_ADC_ConfigChannel+0x40>
  else if (sConfig->Rank < 13U)
 800125a:	2a0c      	cmp	r2, #12
 800125c:	d80e      	bhi.n	800127c <HAL_ADC_ConfigChannel+0xb8>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800125e:	4413      	add	r3, r2
 8001260:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001262:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 8001266:	231f      	movs	r3, #31
 8001268:	4093      	lsls	r3, r2
 800126a:	ea21 0303 	bic.w	r3, r1, r3
 800126e:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001270:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001272:	fa06 f202 	lsl.w	r2, r6, r2
 8001276:	431a      	orrs	r2, r3
 8001278:	6322      	str	r2, [r4, #48]	; 0x30
 800127a:	e7d5      	b.n	8001228 <HAL_ADC_ConfigChannel+0x64>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800127c:	4413      	add	r3, r2
 800127e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001280:	3b41      	subs	r3, #65	; 0x41
 8001282:	221f      	movs	r2, #31
 8001284:	409a      	lsls	r2, r3
 8001286:	ea21 0202 	bic.w	r2, r1, r2
 800128a:	62e2      	str	r2, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800128c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800128e:	fa06 f103 	lsl.w	r1, r6, r3
 8001292:	4311      	orrs	r1, r2
 8001294:	62e1      	str	r1, [r4, #44]	; 0x2c
 8001296:	e7c7      	b.n	8001228 <HAL_ADC_ConfigChannel+0x64>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001298:	2d12      	cmp	r5, #18
 800129a:	d10b      	bne.n	80012b4 <HAL_ADC_ConfigChannel+0xf0>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800129c:	4b16      	ldr	r3, [pc, #88]	; (80012f8 <HAL_ADC_ConfigChannel+0x134>)
 800129e:	685a      	ldr	r2, [r3, #4]
 80012a0:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80012a4:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80012a6:	685a      	ldr	r2, [r3, #4]
 80012a8:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	e7be      	b.n	800122e <HAL_ADC_ConfigChannel+0x6a>
  __HAL_LOCK(hadc);
 80012b0:	2002      	movs	r0, #2
 80012b2:	e7c0      	b.n	8001236 <HAL_ADC_ConfigChannel+0x72>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80012b4:	4b11      	ldr	r3, [pc, #68]	; (80012fc <HAL_ADC_ConfigChannel+0x138>)
 80012b6:	429d      	cmp	r5, r3
 80012b8:	d001      	beq.n	80012be <HAL_ADC_ConfigChannel+0xfa>
 80012ba:	2d11      	cmp	r5, #17
 80012bc:	d1b7      	bne.n	800122e <HAL_ADC_ConfigChannel+0x6a>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80012be:	4b0e      	ldr	r3, [pc, #56]	; (80012f8 <HAL_ADC_ConfigChannel+0x134>)
 80012c0:	685a      	ldr	r2, [r3, #4]
 80012c2:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 80012c6:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80012c8:	685a      	ldr	r2, [r3, #4]
 80012ca:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80012ce:	605a      	str	r2, [r3, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80012d0:	4b0a      	ldr	r3, [pc, #40]	; (80012fc <HAL_ADC_ConfigChannel+0x138>)
 80012d2:	429d      	cmp	r5, r3
 80012d4:	d1ab      	bne.n	800122e <HAL_ADC_ConfigChannel+0x6a>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80012d6:	4b0a      	ldr	r3, [pc, #40]	; (8001300 <HAL_ADC_ConfigChannel+0x13c>)
 80012d8:	4a0a      	ldr	r2, [pc, #40]	; (8001304 <HAL_ADC_ConfigChannel+0x140>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	fbb3 f2f2 	udiv	r2, r3, r2
 80012e0:	230a      	movs	r3, #10
 80012e2:	4353      	muls	r3, r2
        counter--;
 80012e4:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 80012e6:	9b01      	ldr	r3, [sp, #4]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d0a0      	beq.n	800122e <HAL_ADC_ConfigChannel+0x6a>
        counter--;
 80012ec:	9b01      	ldr	r3, [sp, #4]
 80012ee:	3b01      	subs	r3, #1
 80012f0:	e7f8      	b.n	80012e4 <HAL_ADC_ConfigChannel+0x120>
 80012f2:	bf00      	nop
 80012f4:	40012000 	.word	0x40012000
 80012f8:	40012300 	.word	0x40012300
 80012fc:	10000012 	.word	0x10000012
 8001300:	20000128 	.word	0x20000128
 8001304:	000f4240 	.word	0x000f4240

08001308 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001308:	4a07      	ldr	r2, [pc, #28]	; (8001328 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800130a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800130c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001310:	041b      	lsls	r3, r3, #16
 8001312:	0c1b      	lsrs	r3, r3, #16
 8001314:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001318:	0200      	lsls	r0, r0, #8
 800131a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800131e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8001322:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001324:	60d3      	str	r3, [r2, #12]
 8001326:	4770      	bx	lr
 8001328:	e000ed00 	.word	0xe000ed00

0800132c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800132c:	4b17      	ldr	r3, [pc, #92]	; (800138c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800132e:	b530      	push	{r4, r5, lr}
 8001330:	68dc      	ldr	r4, [r3, #12]
 8001332:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001336:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800133a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800133c:	2b04      	cmp	r3, #4
 800133e:	bf28      	it	cs
 8001340:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001342:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001344:	f04f 0501 	mov.w	r5, #1
 8001348:	fa05 f303 	lsl.w	r3, r5, r3
 800134c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001350:	bf8c      	ite	hi
 8001352:	3c03      	subhi	r4, #3
 8001354:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001356:	4019      	ands	r1, r3
 8001358:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800135a:	fa05 f404 	lsl.w	r4, r5, r4
 800135e:	3c01      	subs	r4, #1
 8001360:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8001362:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001364:	ea42 0201 	orr.w	r2, r2, r1
 8001368:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800136c:	bfad      	iteet	ge
 800136e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001372:	f000 000f 	andlt.w	r0, r0, #15
 8001376:	4b06      	ldrlt	r3, [pc, #24]	; (8001390 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001378:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800137c:	bfb5      	itete	lt
 800137e:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001380:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001382:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001384:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001388:	bd30      	pop	{r4, r5, pc}
 800138a:	bf00      	nop
 800138c:	e000ed00 	.word	0xe000ed00
 8001390:	e000ed14 	.word	0xe000ed14

08001394 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001394:	2800      	cmp	r0, #0
 8001396:	db08      	blt.n	80013aa <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001398:	0942      	lsrs	r2, r0, #5
 800139a:	2301      	movs	r3, #1
 800139c:	f000 001f 	and.w	r0, r0, #31
 80013a0:	fa03 f000 	lsl.w	r0, r3, r0
 80013a4:	4b01      	ldr	r3, [pc, #4]	; (80013ac <HAL_NVIC_EnableIRQ+0x18>)
 80013a6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80013aa:	4770      	bx	lr
 80013ac:	e000e100 	.word	0xe000e100

080013b0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013b0:	3801      	subs	r0, #1
 80013b2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80013b6:	d20a      	bcs.n	80013ce <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013b8:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ba:	4a07      	ldr	r2, [pc, #28]	; (80013d8 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013bc:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013be:	21f0      	movs	r1, #240	; 0xf0
 80013c0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013c4:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013c6:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013c8:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80013ce:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	e000e010 	.word	0xe000e010
 80013d8:	e000ed00 	.word	0xe000ed00

080013dc <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80013dc:	6803      	ldr	r3, [r0, #0]
 80013de:	b2da      	uxtb	r2, r3
 80013e0:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80013e4:	f023 0303 	bic.w	r3, r3, #3
 80013e8:	2118      	movs	r1, #24
 80013ea:	3a10      	subs	r2, #16
 80013ec:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80013f0:	4904      	ldr	r1, [pc, #16]	; (8001404 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 80013f2:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80013f4:	bf88      	it	hi
 80013f6:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80013f8:	5c89      	ldrb	r1, [r1, r2]
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80013fa:	6583      	str	r3, [r0, #88]	; 0x58
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80013fc:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  
  return hdma->StreamBaseAddress;
}
 80013fe:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	080074a4 	.word	0x080074a4

08001408 <HAL_DMA_Init>:
{
 8001408:	b570      	push	{r4, r5, r6, lr}
 800140a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800140c:	f7ff fe1a 	bl	8001044 <HAL_GetTick>
 8001410:	4605      	mov	r5, r0
  if(hdma == NULL)
 8001412:	2c00      	cmp	r4, #0
 8001414:	d071      	beq.n	80014fa <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 8001416:	2300      	movs	r3, #0
 8001418:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 800141c:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 800141e:	2302      	movs	r3, #2
 8001420:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8001424:	6813      	ldr	r3, [r2, #0]
 8001426:	f023 0301 	bic.w	r3, r3, #1
 800142a:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800142c:	6821      	ldr	r1, [r4, #0]
 800142e:	680b      	ldr	r3, [r1, #0]
 8001430:	07d8      	lsls	r0, r3, #31
 8001432:	d43c      	bmi.n	80014ae <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 8001434:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001436:	4d32      	ldr	r5, [pc, #200]	; (8001500 <HAL_DMA_Init+0xf8>)
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001438:	6862      	ldr	r2, [r4, #4]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800143a:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800143c:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800143e:	68a3      	ldr	r3, [r4, #8]
 8001440:	4313      	orrs	r3, r2
 8001442:	68e2      	ldr	r2, [r4, #12]
 8001444:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001446:	6922      	ldr	r2, [r4, #16]
 8001448:	4313      	orrs	r3, r2
 800144a:	6962      	ldr	r2, [r4, #20]
 800144c:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800144e:	69e2      	ldr	r2, [r4, #28]
 8001450:	4303      	orrs	r3, r0
 8001452:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8001454:	6a22      	ldr	r2, [r4, #32]
 8001456:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001458:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800145a:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800145c:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001460:	bf01      	itttt	eq
 8001462:	6b26      	ldreq	r6, [r4, #48]	; 0x30
 8001464:	6ae5      	ldreq	r5, [r4, #44]	; 0x2c
 8001466:	4335      	orreq	r5, r6
 8001468:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 800146a:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 800146c:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800146e:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001470:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8001474:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001478:	d10b      	bne.n	8001492 <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 800147a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800147c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 800147e:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001480:	b13d      	cbz	r5, 8001492 <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001482:	b9f8      	cbnz	r0, 80014c4 <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 8001484:	2a01      	cmp	r2, #1
 8001486:	d02d      	beq.n	80014e4 <HAL_DMA_Init+0xdc>
 8001488:	d301      	bcc.n	800148e <HAL_DMA_Init+0x86>
 800148a:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800148c:	d101      	bne.n	8001492 <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800148e:	01ea      	lsls	r2, r5, #7
 8001490:	d42b      	bmi.n	80014ea <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 8001492:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001494:	4620      	mov	r0, r4
 8001496:	f7ff ffa1 	bl	80013dc <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800149a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800149c:	233f      	movs	r3, #63	; 0x3f
 800149e:	4093      	lsls	r3, r2
 80014a0:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014a2:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 80014a4:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014a6:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80014a8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 80014ac:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80014ae:	f7ff fdc9 	bl	8001044 <HAL_GetTick>
 80014b2:	1b40      	subs	r0, r0, r5
 80014b4:	2805      	cmp	r0, #5
 80014b6:	d9b9      	bls.n	800142c <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80014b8:	2320      	movs	r3, #32
 80014ba:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80014bc:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 80014be:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 80014c2:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80014c4:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 80014c8:	d113      	bne.n	80014f2 <HAL_DMA_Init+0xea>
    switch (tmp)
 80014ca:	2a03      	cmp	r2, #3
 80014cc:	d8e1      	bhi.n	8001492 <HAL_DMA_Init+0x8a>
 80014ce:	a001      	add	r0, pc, #4	; (adr r0, 80014d4 <HAL_DMA_Init+0xcc>)
 80014d0:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 80014d4:	080014eb 	.word	0x080014eb
 80014d8:	0800148f 	.word	0x0800148f
 80014dc:	080014eb 	.word	0x080014eb
 80014e0:	080014e5 	.word	0x080014e5
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80014e4:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 80014e8:	d1d3      	bne.n	8001492 <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80014ea:	2340      	movs	r3, #64	; 0x40
 80014ec:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80014ee:	2001      	movs	r0, #1
 80014f0:	e7e5      	b.n	80014be <HAL_DMA_Init+0xb6>
    switch (tmp)
 80014f2:	2a02      	cmp	r2, #2
 80014f4:	d9f9      	bls.n	80014ea <HAL_DMA_Init+0xe2>
 80014f6:	2a03      	cmp	r2, #3
 80014f8:	e7c8      	b.n	800148c <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 80014fa:	2001      	movs	r0, #1
 80014fc:	bd70      	pop	{r4, r5, r6, pc}
 80014fe:	bf00      	nop
 8001500:	f010803f 	.word	0xf010803f

08001504 <HAL_DMA_Start_IT>:
{
 8001504:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8001506:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 800150a:	2c01      	cmp	r4, #1
 800150c:	d032      	beq.n	8001574 <HAL_DMA_Start_IT+0x70>
 800150e:	2401      	movs	r4, #1
 8001510:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8001514:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001518:	6d86      	ldr	r6, [r0, #88]	; 0x58
  if(HAL_DMA_STATE_READY == hdma->State)
 800151a:	2c01      	cmp	r4, #1
 800151c:	f04f 0500 	mov.w	r5, #0
 8001520:	f04f 0402 	mov.w	r4, #2
 8001524:	d124      	bne.n	8001570 <HAL_DMA_Start_IT+0x6c>
    hdma->State = HAL_DMA_STATE_BUSY;
 8001526:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800152a:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800152c:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800152e:	6825      	ldr	r5, [r4, #0]
 8001530:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8001534:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8001536:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001538:	6883      	ldr	r3, [r0, #8]
 800153a:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 800153c:	bf0e      	itee	eq
 800153e:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 8001540:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8001542:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001544:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 8001546:	bf08      	it	eq
 8001548:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800154a:	233f      	movs	r3, #63	; 0x3f
 800154c:	4093      	lsls	r3, r2
 800154e:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001550:	6823      	ldr	r3, [r4, #0]
 8001552:	f043 0316 	orr.w	r3, r3, #22
 8001556:	6023      	str	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8001558:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800155a:	b11b      	cbz	r3, 8001564 <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 800155c:	6823      	ldr	r3, [r4, #0]
 800155e:	f043 0308 	orr.w	r3, r3, #8
 8001562:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8001564:	6823      	ldr	r3, [r4, #0]
 8001566:	f043 0301 	orr.w	r3, r3, #1
 800156a:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800156c:	2000      	movs	r0, #0
 800156e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hdma);	  
 8001570:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 8001574:	2002      	movs	r0, #2
}
 8001576:	bd70      	pop	{r4, r5, r6, pc}

08001578 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001578:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800157c:	2b02      	cmp	r3, #2
 800157e:	d003      	beq.n	8001588 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001580:	2380      	movs	r3, #128	; 0x80
 8001582:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8001584:	2001      	movs	r0, #1
 8001586:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8001588:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 800158a:	2305      	movs	r3, #5
 800158c:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8001590:	6813      	ldr	r3, [r2, #0]
 8001592:	f023 0301 	bic.w	r3, r3, #1
 8001596:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8001598:	2000      	movs	r0, #0
}
 800159a:	4770      	bx	lr

0800159c <HAL_DMA_IRQHandler>:
{
 800159c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 800159e:	2300      	movs	r3, #0
 80015a0:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 80015a2:	4b5a      	ldr	r3, [pc, #360]	; (800170c <HAL_DMA_IRQHandler+0x170>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015a4:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 80015a6:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80015a8:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 80015aa:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80015ac:	2208      	movs	r2, #8
 80015ae:	409a      	lsls	r2, r3
 80015b0:	4216      	tst	r6, r2
{
 80015b2:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80015b4:	d00c      	beq.n	80015d0 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80015b6:	6801      	ldr	r1, [r0, #0]
 80015b8:	6808      	ldr	r0, [r1, #0]
 80015ba:	0740      	lsls	r0, r0, #29
 80015bc:	d508      	bpl.n	80015d0 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80015be:	6808      	ldr	r0, [r1, #0]
 80015c0:	f020 0004 	bic.w	r0, r0, #4
 80015c4:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80015c6:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80015c8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80015ca:	f042 0201 	orr.w	r2, r2, #1
 80015ce:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80015d0:	2201      	movs	r2, #1
 80015d2:	409a      	lsls	r2, r3
 80015d4:	4216      	tst	r6, r2
 80015d6:	d008      	beq.n	80015ea <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80015d8:	6821      	ldr	r1, [r4, #0]
 80015da:	6949      	ldr	r1, [r1, #20]
 80015dc:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80015de:	bf41      	itttt	mi
 80015e0:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80015e2:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 80015e4:	f042 0202 	orrmi.w	r2, r2, #2
 80015e8:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80015ea:	2204      	movs	r2, #4
 80015ec:	409a      	lsls	r2, r3
 80015ee:	4216      	tst	r6, r2
 80015f0:	d008      	beq.n	8001604 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80015f2:	6821      	ldr	r1, [r4, #0]
 80015f4:	6809      	ldr	r1, [r1, #0]
 80015f6:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80015f8:	bf41      	itttt	mi
 80015fa:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80015fc:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 80015fe:	f042 0204 	orrmi.w	r2, r2, #4
 8001602:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001604:	2210      	movs	r2, #16
 8001606:	409a      	lsls	r2, r3
 8001608:	4216      	tst	r6, r2
 800160a:	d010      	beq.n	800162e <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800160c:	6823      	ldr	r3, [r4, #0]
 800160e:	6819      	ldr	r1, [r3, #0]
 8001610:	0709      	lsls	r1, r1, #28
 8001612:	d50c      	bpl.n	800162e <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001614:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	0350      	lsls	r0, r2, #13
 800161a:	d535      	bpl.n	8001688 <HAL_DMA_IRQHandler+0xec>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	0319      	lsls	r1, r3, #12
 8001620:	d401      	bmi.n	8001626 <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 8001622:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001624:	e000      	b.n	8001628 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001626:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8001628:	b10b      	cbz	r3, 800162e <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 800162a:	4620      	mov	r0, r4
 800162c:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800162e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8001630:	2220      	movs	r2, #32
 8001632:	408a      	lsls	r2, r1
 8001634:	4216      	tst	r6, r2
 8001636:	d038      	beq.n	80016aa <HAL_DMA_IRQHandler+0x10e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001638:	6823      	ldr	r3, [r4, #0]
 800163a:	6818      	ldr	r0, [r3, #0]
 800163c:	06c6      	lsls	r6, r0, #27
 800163e:	d534      	bpl.n	80016aa <HAL_DMA_IRQHandler+0x10e>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001640:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001642:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8001646:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001648:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800164a:	d125      	bne.n	8001698 <HAL_DMA_IRQHandler+0xfc>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800164c:	f022 0216 	bic.w	r2, r2, #22
 8001650:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001652:	695a      	ldr	r2, [r3, #20]
 8001654:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001658:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800165a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800165c:	b90a      	cbnz	r2, 8001662 <HAL_DMA_IRQHandler+0xc6>
 800165e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001660:	b11a      	cbz	r2, 800166a <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	f022 0208 	bic.w	r2, r2, #8
 8001668:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800166a:	233f      	movs	r3, #63	; 0x3f
 800166c:	408b      	lsls	r3, r1
 800166e:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 8001670:	2300      	movs	r3, #0
 8001672:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8001676:	2301      	movs	r3, #1
 8001678:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 800167c:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 800167e:	b10b      	cbz	r3, 8001684 <HAL_DMA_IRQHandler+0xe8>
      hdma->XferErrorCallback(hdma);
 8001680:	4620      	mov	r0, r4
 8001682:	4798      	blx	r3
}
 8001684:	b003      	add	sp, #12
 8001686:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800168c:	bf5e      	ittt	pl
 800168e:	681a      	ldrpl	r2, [r3, #0]
 8001690:	f022 0208 	bicpl.w	r2, r2, #8
 8001694:	601a      	strpl	r2, [r3, #0]
 8001696:	e7c4      	b.n	8001622 <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001698:	0350      	lsls	r0, r2, #13
 800169a:	d528      	bpl.n	80016ee <HAL_DMA_IRQHandler+0x152>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	0319      	lsls	r1, r3, #12
 80016a0:	d432      	bmi.n	8001708 <HAL_DMA_IRQHandler+0x16c>
          if(hdma->XferM1CpltCallback != NULL)
 80016a2:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 80016a4:	b10b      	cbz	r3, 80016aa <HAL_DMA_IRQHandler+0x10e>
          hdma->XferCpltCallback(hdma);
 80016a6:	4620      	mov	r0, r4
 80016a8:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80016aa:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d0e9      	beq.n	8001684 <HAL_DMA_IRQHandler+0xe8>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80016b0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80016b2:	07da      	lsls	r2, r3, #31
 80016b4:	d519      	bpl.n	80016ea <HAL_DMA_IRQHandler+0x14e>
      hdma->State = HAL_DMA_STATE_ABORT;
 80016b6:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 80016b8:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 80016ba:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80016be:	6813      	ldr	r3, [r2, #0]
 80016c0:	f023 0301 	bic.w	r3, r3, #1
 80016c4:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80016c6:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80016ca:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 80016ce:	9b01      	ldr	r3, [sp, #4]
 80016d0:	3301      	adds	r3, #1
 80016d2:	429f      	cmp	r7, r3
 80016d4:	9301      	str	r3, [sp, #4]
 80016d6:	d302      	bcc.n	80016de <HAL_DMA_IRQHandler+0x142>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80016d8:	6813      	ldr	r3, [r2, #0]
 80016da:	07db      	lsls	r3, r3, #31
 80016dc:	d4f7      	bmi.n	80016ce <HAL_DMA_IRQHandler+0x132>
      __HAL_UNLOCK(hdma);
 80016de:	2300      	movs	r3, #0
 80016e0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 80016e4:	2301      	movs	r3, #1
 80016e6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 80016ea:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80016ec:	e7c7      	b.n	800167e <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 80016f4:	d108      	bne.n	8001708 <HAL_DMA_IRQHandler+0x16c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80016f6:	6819      	ldr	r1, [r3, #0]
 80016f8:	f021 0110 	bic.w	r1, r1, #16
 80016fc:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80016fe:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8001700:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8001704:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8001708:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800170a:	e7cb      	b.n	80016a4 <HAL_DMA_IRQHandler+0x108>
 800170c:	20000128 	.word	0x20000128

08001710 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001714:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001716:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001718:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80018bc <HAL_GPIO_Init+0x1ac>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800171c:	4a65      	ldr	r2, [pc, #404]	; (80018b4 <HAL_GPIO_Init+0x1a4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800171e:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 80018c0 <HAL_GPIO_Init+0x1b0>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001722:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001724:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8001726:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001728:	9d01      	ldr	r5, [sp, #4]
    ioposition = 0x01U << position;
 800172a:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800172c:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 800172e:	42ac      	cmp	r4, r5
 8001730:	f040 80ac 	bne.w	800188c <HAL_GPIO_Init+0x17c>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001734:	684c      	ldr	r4, [r1, #4]
 8001736:	f024 0c10 	bic.w	ip, r4, #16
 800173a:	f10c 36ff 	add.w	r6, ip, #4294967295
 800173e:	2e01      	cmp	r6, #1
 8001740:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001744:	d812      	bhi.n	800176c <HAL_GPIO_Init+0x5c>
        temp = GPIOx->OSPEEDR; 
 8001746:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001748:	2603      	movs	r6, #3
 800174a:	fa06 f60e 	lsl.w	r6, r6, lr
 800174e:	ea27 0706 	bic.w	r7, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001752:	68ce      	ldr	r6, [r1, #12]
 8001754:	fa06 f60e 	lsl.w	r6, r6, lr
 8001758:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 800175a:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 800175c:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800175e:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001762:	ea27 0705 	bic.w	r7, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001766:	409e      	lsls	r6, r3
 8001768:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 800176a:	6046      	str	r6, [r0, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800176c:	2603      	movs	r6, #3
      temp = GPIOx->PUPDR;
 800176e:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001770:	fa06 f60e 	lsl.w	r6, r6, lr
 8001774:	43f6      	mvns	r6, r6
 8001776:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800177a:	688f      	ldr	r7, [r1, #8]
 800177c:	fa07 f70e 	lsl.w	r7, r7, lr
 8001780:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001784:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 8001788:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800178a:	d116      	bne.n	80017ba <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3U];
 800178c:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8001790:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001794:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001798:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800179c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80017a0:	f04f 0c0f 	mov.w	ip, #15
 80017a4:	fa0c fc0b 	lsl.w	ip, ip, fp
 80017a8:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017ac:	690f      	ldr	r7, [r1, #16]
 80017ae:	fa07 f70b 	lsl.w	r7, r7, fp
 80017b2:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 80017b6:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 80017ba:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017bc:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017be:	f004 0703 	and.w	r7, r4, #3
 80017c2:	fa07 fe0e 	lsl.w	lr, r7, lr
 80017c6:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 80017ca:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017cc:	00e6      	lsls	r6, r4, #3
 80017ce:	d55d      	bpl.n	800188c <HAL_GPIO_Init+0x17c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017d0:	f04f 0b00 	mov.w	fp, #0
 80017d4:	f8cd b00c 	str.w	fp, [sp, #12]
 80017d8:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017dc:	4e36      	ldr	r6, [pc, #216]	; (80018b8 <HAL_GPIO_Init+0x1a8>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017de:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80017e2:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80017e6:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80017ea:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80017ee:	9703      	str	r7, [sp, #12]
 80017f0:	9f03      	ldr	r7, [sp, #12]
 80017f2:	f023 0703 	bic.w	r7, r3, #3
 80017f6:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80017fa:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017fe:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8001802:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001806:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800180a:	f04f 0e0f 	mov.w	lr, #15
 800180e:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001812:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001814:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001818:	d03f      	beq.n	800189a <HAL_GPIO_Init+0x18a>
 800181a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800181e:	42b0      	cmp	r0, r6
 8001820:	d03d      	beq.n	800189e <HAL_GPIO_Init+0x18e>
 8001822:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001826:	42b0      	cmp	r0, r6
 8001828:	d03b      	beq.n	80018a2 <HAL_GPIO_Init+0x192>
 800182a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800182e:	42b0      	cmp	r0, r6
 8001830:	d039      	beq.n	80018a6 <HAL_GPIO_Init+0x196>
 8001832:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001836:	42b0      	cmp	r0, r6
 8001838:	d037      	beq.n	80018aa <HAL_GPIO_Init+0x19a>
 800183a:	4548      	cmp	r0, r9
 800183c:	d037      	beq.n	80018ae <HAL_GPIO_Init+0x19e>
 800183e:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8001842:	42b0      	cmp	r0, r6
 8001844:	bf14      	ite	ne
 8001846:	2607      	movne	r6, #7
 8001848:	2606      	moveq	r6, #6
 800184a:	fa06 f60c 	lsl.w	r6, r6, ip
 800184e:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001852:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8001854:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001856:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001858:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 800185c:	bf0c      	ite	eq
 800185e:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8001860:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 8001862:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 8001864:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001866:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 800186a:	bf0c      	ite	eq
 800186c:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 800186e:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 8001870:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001872:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001874:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001878:	bf0c      	ite	eq
 800187a:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 800187c:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 800187e:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8001880:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001882:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8001884:	bf54      	ite	pl
 8001886:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8001888:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 800188a:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800188c:	3301      	adds	r3, #1
 800188e:	2b10      	cmp	r3, #16
 8001890:	f47f af49 	bne.w	8001726 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8001894:	b005      	add	sp, #20
 8001896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800189a:	465e      	mov	r6, fp
 800189c:	e7d5      	b.n	800184a <HAL_GPIO_Init+0x13a>
 800189e:	2601      	movs	r6, #1
 80018a0:	e7d3      	b.n	800184a <HAL_GPIO_Init+0x13a>
 80018a2:	2602      	movs	r6, #2
 80018a4:	e7d1      	b.n	800184a <HAL_GPIO_Init+0x13a>
 80018a6:	2603      	movs	r6, #3
 80018a8:	e7cf      	b.n	800184a <HAL_GPIO_Init+0x13a>
 80018aa:	2604      	movs	r6, #4
 80018ac:	e7cd      	b.n	800184a <HAL_GPIO_Init+0x13a>
 80018ae:	2605      	movs	r6, #5
 80018b0:	e7cb      	b.n	800184a <HAL_GPIO_Init+0x13a>
 80018b2:	bf00      	nop
 80018b4:	40013c00 	.word	0x40013c00
 80018b8:	40020000 	.word	0x40020000
 80018bc:	40023800 	.word	0x40023800
 80018c0:	40021400 	.word	0x40021400

080018c4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80018c4:	6903      	ldr	r3, [r0, #16]
 80018c6:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80018c8:	bf14      	ite	ne
 80018ca:	2001      	movne	r0, #1
 80018cc:	2000      	moveq	r0, #0
 80018ce:	4770      	bx	lr

080018d0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018d0:	b10a      	cbz	r2, 80018d6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018d2:	6181      	str	r1, [r0, #24]
 80018d4:	4770      	bx	lr
 80018d6:	0409      	lsls	r1, r1, #16
 80018d8:	e7fb      	b.n	80018d2 <HAL_GPIO_WritePin+0x2>

080018da <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80018da:	6943      	ldr	r3, [r0, #20]
 80018dc:	ea31 0303 	bics.w	r3, r1, r3
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80018e0:	bf08      	it	eq
 80018e2:	0409      	lsleq	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 80018e4:	6181      	str	r1, [r0, #24]
 80018e6:	4770      	bx	lr

080018e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80018e8:	b570      	push	{r4, r5, r6, lr}
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018ea:	4604      	mov	r4, r0
 80018ec:	b908      	cbnz	r0, 80018f2 <HAL_I2C_Init+0xa>
  {
    return HAL_ERROR;
 80018ee:	2001      	movs	r0, #1
 80018f0:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018f2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80018f6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80018fa:	b91b      	cbnz	r3, 8001904 <HAL_I2C_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80018fc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001900:	f003 f91a 	bl	8004b38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001904:	2324      	movs	r3, #36	; 0x24
 8001906:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800190a:	6823      	ldr	r3, [r4, #0]
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	f022 0201 	bic.w	r2, r2, #1
 8001912:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800191a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001922:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001924:	f000 f964 	bl	8001bf0 <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001928:	6865      	ldr	r5, [r4, #4]
 800192a:	4b41      	ldr	r3, [pc, #260]	; (8001a30 <HAL_I2C_Init+0x148>)
 800192c:	429d      	cmp	r5, r3
 800192e:	d84d      	bhi.n	80019cc <HAL_I2C_Init+0xe4>
 8001930:	4b40      	ldr	r3, [pc, #256]	; (8001a34 <HAL_I2C_Init+0x14c>)
 8001932:	4298      	cmp	r0, r3
 8001934:	d9db      	bls.n	80018ee <HAL_I2C_Init+0x6>
  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001936:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8001938:	493f      	ldr	r1, [pc, #252]	; (8001a38 <HAL_I2C_Init+0x150>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800193a:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 800193c:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001940:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001944:	430b      	orrs	r3, r1
 8001946:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001948:	6a13      	ldr	r3, [r2, #32]
 800194a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800194e:	3101      	adds	r1, #1
 8001950:	4319      	orrs	r1, r3
 8001952:	6211      	str	r1, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001954:	69d1      	ldr	r1, [r2, #28]
 8001956:	4b36      	ldr	r3, [pc, #216]	; (8001a30 <HAL_I2C_Init+0x148>)
 8001958:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 800195c:	429d      	cmp	r5, r3
 800195e:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001962:	f100 30ff 	add.w	r0, r0, #4294967295
 8001966:	d848      	bhi.n	80019fa <HAL_I2C_Init+0x112>
 8001968:	006d      	lsls	r5, r5, #1
 800196a:	fbb0 f0f5 	udiv	r0, r0, r5
 800196e:	3001      	adds	r0, #1
 8001970:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8001974:	2b04      	cmp	r3, #4
 8001976:	bf38      	it	cc
 8001978:	2304      	movcc	r3, #4
 800197a:	430b      	orrs	r3, r1
 800197c:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800197e:	6811      	ldr	r1, [r2, #0]
 8001980:	6a20      	ldr	r0, [r4, #32]
 8001982:	69e3      	ldr	r3, [r4, #28]
 8001984:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8001988:	4303      	orrs	r3, r0
 800198a:	430b      	orrs	r3, r1
 800198c:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800198e:	6891      	ldr	r1, [r2, #8]
 8001990:	68e0      	ldr	r0, [r4, #12]
 8001992:	6923      	ldr	r3, [r4, #16]
 8001994:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8001998:	4303      	orrs	r3, r0
 800199a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800199e:	430b      	orrs	r3, r1
 80019a0:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80019a2:	68d1      	ldr	r1, [r2, #12]
 80019a4:	69a0      	ldr	r0, [r4, #24]
 80019a6:	6963      	ldr	r3, [r4, #20]
 80019a8:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80019ac:	4303      	orrs	r3, r0
 80019ae:	430b      	orrs	r3, r1
 80019b0:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80019b2:	6813      	ldr	r3, [r2, #0]
 80019b4:	f043 0301 	orr.w	r3, r3, #1
 80019b8:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019ba:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 80019bc:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019be:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80019c0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80019c4:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019c6:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e

  return HAL_OK;
 80019ca:	bd70      	pop	{r4, r5, r6, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80019cc:	4b1b      	ldr	r3, [pc, #108]	; (8001a3c <HAL_I2C_Init+0x154>)
 80019ce:	4298      	cmp	r0, r3
 80019d0:	d98d      	bls.n	80018ee <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80019d2:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80019d4:	4e18      	ldr	r6, [pc, #96]	; (8001a38 <HAL_I2C_Init+0x150>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80019d6:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 80019d8:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80019dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80019e0:	4333      	orrs	r3, r6
 80019e2:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80019e4:	6a13      	ldr	r3, [r2, #32]
 80019e6:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80019ea:	4371      	muls	r1, r6
 80019ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80019f0:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 80019f4:	fbb1 f1f6 	udiv	r1, r1, r6
 80019f8:	e7a9      	b.n	800194e <HAL_I2C_Init+0x66>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80019fa:	68a3      	ldr	r3, [r4, #8]
 80019fc:	b953      	cbnz	r3, 8001a14 <HAL_I2C_Init+0x12c>
 80019fe:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8001a02:	fbb0 f0f3 	udiv	r0, r0, r3
 8001a06:	1c43      	adds	r3, r0, #1
 8001a08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a0c:	b16b      	cbz	r3, 8001a2a <HAL_I2C_Init+0x142>
 8001a0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a12:	e7b2      	b.n	800197a <HAL_I2C_Init+0x92>
 8001a14:	2319      	movs	r3, #25
 8001a16:	436b      	muls	r3, r5
 8001a18:	fbb0 f0f3 	udiv	r0, r0, r3
 8001a1c:	1c43      	adds	r3, r0, #1
 8001a1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a22:	b113      	cbz	r3, 8001a2a <HAL_I2C_Init+0x142>
 8001a24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a28:	e7a7      	b.n	800197a <HAL_I2C_Init+0x92>
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e7a5      	b.n	800197a <HAL_I2C_Init+0x92>
 8001a2e:	bf00      	nop
 8001a30:	000186a0 	.word	0x000186a0
 8001a34:	001e847f 	.word	0x001e847f
 8001a38:	000f4240 	.word	0x000f4240
 8001a3c:	003d08ff 	.word	0x003d08ff

08001a40 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001a40:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 8001a42:	2300      	movs	r3, #0
 8001a44:	9301      	str	r3, [sp, #4]
 8001a46:	4b18      	ldr	r3, [pc, #96]	; (8001aa8 <HAL_PWREx_EnableOverDrive+0x68>)
  __HAL_PWR_OVERDRIVE_ENABLE();

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001a48:	4c18      	ldr	r4, [pc, #96]	; (8001aac <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a4c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001a50:	641a      	str	r2, [r3, #64]	; 0x40
 8001a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a58:	9301      	str	r3, [sp, #4]
 8001a5a:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001a5c:	4b14      	ldr	r3, [pc, #80]	; (8001ab0 <HAL_PWREx_EnableOverDrive+0x70>)
 8001a5e:	2201      	movs	r2, #1
 8001a60:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8001a62:	f7ff faef 	bl	8001044 <HAL_GetTick>
 8001a66:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001a68:	6863      	ldr	r3, [r4, #4]
 8001a6a:	03da      	lsls	r2, r3, #15
 8001a6c:	d50b      	bpl.n	8001a86 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001a6e:	4b11      	ldr	r3, [pc, #68]	; (8001ab4 <HAL_PWREx_EnableOverDrive+0x74>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001a70:	4c0e      	ldr	r4, [pc, #56]	; (8001aac <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001a72:	2201      	movs	r2, #1
 8001a74:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8001a76:	f7ff fae5 	bl	8001044 <HAL_GetTick>
 8001a7a:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001a7c:	6863      	ldr	r3, [r4, #4]
 8001a7e:	039b      	lsls	r3, r3, #14
 8001a80:	d50a      	bpl.n	8001a98 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8001a82:	2000      	movs	r0, #0
 8001a84:	e006      	b.n	8001a94 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001a86:	f7ff fadd 	bl	8001044 <HAL_GetTick>
 8001a8a:	1b40      	subs	r0, r0, r5
 8001a8c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001a90:	d9ea      	bls.n	8001a68 <HAL_PWREx_EnableOverDrive+0x28>
      return HAL_TIMEOUT;
 8001a92:	2003      	movs	r0, #3
}
 8001a94:	b003      	add	sp, #12
 8001a96:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001a98:	f7ff fad4 	bl	8001044 <HAL_GetTick>
 8001a9c:	1b40      	subs	r0, r0, r5
 8001a9e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001aa2:	d9eb      	bls.n	8001a7c <HAL_PWREx_EnableOverDrive+0x3c>
 8001aa4:	e7f5      	b.n	8001a92 <HAL_PWREx_EnableOverDrive+0x52>
 8001aa6:	bf00      	nop
 8001aa8:	40023800 	.word	0x40023800
 8001aac:	40007000 	.word	0x40007000
 8001ab0:	420e0040 	.word	0x420e0040
 8001ab4:	420e0044 	.word	0x420e0044

08001ab8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001abc:	460d      	mov	r5, r1
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001abe:	4604      	mov	r4, r0
 8001ac0:	b910      	cbnz	r0, 8001ac8 <HAL_RCC_ClockConfig+0x10>
  {
    return HAL_ERROR;
 8001ac2:	2001      	movs	r0, #1
 8001ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ac8:	4b44      	ldr	r3, [pc, #272]	; (8001bdc <HAL_RCC_ClockConfig+0x124>)
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	f002 020f 	and.w	r2, r2, #15
 8001ad0:	428a      	cmp	r2, r1
 8001ad2:	d329      	bcc.n	8001b28 <HAL_RCC_ClockConfig+0x70>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ad4:	6821      	ldr	r1, [r4, #0]
 8001ad6:	078f      	lsls	r7, r1, #30
 8001ad8:	d42e      	bmi.n	8001b38 <HAL_RCC_ClockConfig+0x80>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ada:	07c8      	lsls	r0, r1, #31
 8001adc:	d441      	bmi.n	8001b62 <HAL_RCC_ClockConfig+0xaa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ade:	4b3f      	ldr	r3, [pc, #252]	; (8001bdc <HAL_RCC_ClockConfig+0x124>)
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	f002 020f 	and.w	r2, r2, #15
 8001ae6:	4295      	cmp	r5, r2
 8001ae8:	d367      	bcc.n	8001bba <HAL_RCC_ClockConfig+0x102>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aea:	6822      	ldr	r2, [r4, #0]
 8001aec:	0751      	lsls	r1, r2, #29
 8001aee:	d46d      	bmi.n	8001bcc <HAL_RCC_ClockConfig+0x114>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001af0:	0713      	lsls	r3, r2, #28
 8001af2:	d507      	bpl.n	8001b04 <HAL_RCC_ClockConfig+0x4c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001af4:	4a3a      	ldr	r2, [pc, #232]	; (8001be0 <HAL_RCC_ClockConfig+0x128>)
 8001af6:	6921      	ldr	r1, [r4, #16]
 8001af8:	6893      	ldr	r3, [r2, #8]
 8001afa:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001afe:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001b02:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b04:	f000 fa9c 	bl	8002040 <HAL_RCC_GetSysClockFreq>
 8001b08:	4b35      	ldr	r3, [pc, #212]	; (8001be0 <HAL_RCC_ClockConfig+0x128>)
 8001b0a:	4a36      	ldr	r2, [pc, #216]	; (8001be4 <HAL_RCC_ClockConfig+0x12c>)
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001b12:	5cd3      	ldrb	r3, [r2, r3]
 8001b14:	40d8      	lsrs	r0, r3
 8001b16:	4b34      	ldr	r3, [pc, #208]	; (8001be8 <HAL_RCC_ClockConfig+0x130>)
 8001b18:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b1a:	4b34      	ldr	r3, [pc, #208]	; (8001bec <HAL_RCC_ClockConfig+0x134>)
 8001b1c:	6818      	ldr	r0, [r3, #0]
 8001b1e:	f7ff fa47 	bl	8000fb0 <HAL_InitTick>

  return HAL_OK;
 8001b22:	2000      	movs	r0, #0
 8001b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b28:	b2ca      	uxtb	r2, r1
 8001b2a:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 030f 	and.w	r3, r3, #15
 8001b32:	4299      	cmp	r1, r3
 8001b34:	d1c5      	bne.n	8001ac2 <HAL_RCC_ClockConfig+0xa>
 8001b36:	e7cd      	b.n	8001ad4 <HAL_RCC_ClockConfig+0x1c>
 8001b38:	4b29      	ldr	r3, [pc, #164]	; (8001be0 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b3a:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b3e:	bf1e      	ittt	ne
 8001b40:	689a      	ldrne	r2, [r3, #8]
 8001b42:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8001b46:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b48:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b4a:	bf42      	ittt	mi
 8001b4c:	689a      	ldrmi	r2, [r3, #8]
 8001b4e:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8001b52:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b54:	689a      	ldr	r2, [r3, #8]
 8001b56:	68a0      	ldr	r0, [r4, #8]
 8001b58:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001b5c:	4302      	orrs	r2, r0
 8001b5e:	609a      	str	r2, [r3, #8]
 8001b60:	e7bb      	b.n	8001ada <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b62:	6862      	ldr	r2, [r4, #4]
 8001b64:	4b1e      	ldr	r3, [pc, #120]	; (8001be0 <HAL_RCC_ClockConfig+0x128>)
 8001b66:	2a01      	cmp	r2, #1
 8001b68:	d11d      	bne.n	8001ba6 <HAL_RCC_ClockConfig+0xee>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b70:	d0a7      	beq.n	8001ac2 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b72:	4e1b      	ldr	r6, [pc, #108]	; (8001be0 <HAL_RCC_ClockConfig+0x128>)
 8001b74:	68b3      	ldr	r3, [r6, #8]
 8001b76:	f023 0303 	bic.w	r3, r3, #3
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001b7e:	f7ff fa61 	bl	8001044 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b82:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001b86:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b88:	68b3      	ldr	r3, [r6, #8]
 8001b8a:	6862      	ldr	r2, [r4, #4]
 8001b8c:	f003 030c 	and.w	r3, r3, #12
 8001b90:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001b94:	d0a3      	beq.n	8001ade <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b96:	f7ff fa55 	bl	8001044 <HAL_GetTick>
 8001b9a:	1bc0      	subs	r0, r0, r7
 8001b9c:	4540      	cmp	r0, r8
 8001b9e:	d9f3      	bls.n	8001b88 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8001ba0:	2003      	movs	r0, #3
}
 8001ba2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ba6:	1e91      	subs	r1, r2, #2
 8001ba8:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001baa:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bac:	d802      	bhi.n	8001bb4 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bae:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001bb2:	e7dd      	b.n	8001b70 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bb4:	f013 0f02 	tst.w	r3, #2
 8001bb8:	e7da      	b.n	8001b70 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bba:	b2ea      	uxtb	r2, r5
 8001bbc:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 030f 	and.w	r3, r3, #15
 8001bc4:	429d      	cmp	r5, r3
 8001bc6:	f47f af7c 	bne.w	8001ac2 <HAL_RCC_ClockConfig+0xa>
 8001bca:	e78e      	b.n	8001aea <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bcc:	4904      	ldr	r1, [pc, #16]	; (8001be0 <HAL_RCC_ClockConfig+0x128>)
 8001bce:	68e0      	ldr	r0, [r4, #12]
 8001bd0:	688b      	ldr	r3, [r1, #8]
 8001bd2:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001bd6:	4303      	orrs	r3, r0
 8001bd8:	608b      	str	r3, [r1, #8]
 8001bda:	e789      	b.n	8001af0 <HAL_RCC_ClockConfig+0x38>
 8001bdc:	40023c00 	.word	0x40023c00
 8001be0:	40023800 	.word	0x40023800
 8001be4:	08007736 	.word	0x08007736
 8001be8:	20000128 	.word	0x20000128
 8001bec:	20000004 	.word	0x20000004

08001bf0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001bf0:	4b04      	ldr	r3, [pc, #16]	; (8001c04 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001bf2:	4a05      	ldr	r2, [pc, #20]	; (8001c08 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001bfa:	5cd3      	ldrb	r3, [r2, r3]
 8001bfc:	4a03      	ldr	r2, [pc, #12]	; (8001c0c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001bfe:	6810      	ldr	r0, [r2, #0]
}
 8001c00:	40d8      	lsrs	r0, r3
 8001c02:	4770      	bx	lr
 8001c04:	40023800 	.word	0x40023800
 8001c08:	08007746 	.word	0x08007746
 8001c0c:	20000128 	.word	0x20000128

08001c10 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c10:	4b04      	ldr	r3, [pc, #16]	; (8001c24 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001c12:	4a05      	ldr	r2, [pc, #20]	; (8001c28 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001c1a:	5cd3      	ldrb	r3, [r2, r3]
 8001c1c:	4a03      	ldr	r2, [pc, #12]	; (8001c2c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001c1e:	6810      	ldr	r0, [r2, #0]
}
 8001c20:	40d8      	lsrs	r0, r3
 8001c22:	4770      	bx	lr
 8001c24:	40023800 	.word	0x40023800
 8001c28:	08007746 	.word	0x08007746
 8001c2c:	20000128 	.word	0x20000128

08001c30 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001c30:	6803      	ldr	r3, [r0, #0]
{
 8001c32:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001c36:	f013 0601 	ands.w	r6, r3, #1
{
 8001c3a:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001c3c:	d00b      	beq.n	8001c56 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001c3e:	49aa      	ldr	r1, [pc, #680]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8001c40:	6b86      	ldr	r6, [r0, #56]	; 0x38
 8001c42:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8001c46:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8001c4a:	4332      	orrs	r2, r6
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8001c4c:	fab6 f686 	clz	r6, r6
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001c50:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8001c54:	0976      	lsrs	r6, r6, #5
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8001c56:	079d      	lsls	r5, r3, #30
 8001c58:	d50b      	bpl.n	8001c72 <HAL_RCCEx_PeriphCLKConfig+0x42>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8001c5a:	48a3      	ldr	r0, [pc, #652]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8001c5c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001c5e:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8001c62:	f022 52c0 	bic.w	r2, r2, #402653184	; 0x18000000
 8001c66:	430a      	orrs	r2, r1
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
    {
      plli2sused = 1U;
 8001c68:	2900      	cmp	r1, #0
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8001c6a:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
      plli2sused = 1U;
 8001c6e:	bf08      	it	eq
 8001c70:	2601      	moveq	r6, #1
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001c72:	f013 0504 	ands.w	r5, r3, #4
 8001c76:	d012      	beq.n	8001c9e <HAL_RCCEx_PeriphCLKConfig+0x6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001c78:	499b      	ldr	r1, [pc, #620]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8001c7a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8001c7c:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001c80:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001c84:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001c88:	ea42 0205 	orr.w	r2, r2, r5
    {
      plli2sused = 1U;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001c8c:	bf18      	it	ne
 8001c8e:	fab5 f585 	clzne	r5, r5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001c92:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001c96:	bf12      	itee	ne
 8001c98:	096d      	lsrne	r5, r5, #5
  uint32_t pllsaiused = 0U;
 8001c9a:	2500      	moveq	r5, #0
      plli2sused = 1U;
 8001c9c:	2601      	moveq	r6, #1
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001c9e:	0718      	lsls	r0, r3, #28
 8001ca0:	d50f      	bpl.n	8001cc2 <HAL_RCCEx_PeriphCLKConfig+0x92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001ca2:	4891      	ldr	r0, [pc, #580]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8001ca4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001ca6:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8001caa:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8001cae:	430a      	orrs	r2, r1

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001cb0:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001cb4:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001cb8:	f000 8109 	beq.w	8001ece <HAL_RCCEx_PeriphCLKConfig+0x29e>
      plli2sused = 1U;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1U;
 8001cbc:	2900      	cmp	r1, #0
 8001cbe:	bf08      	it	eq
 8001cc0:	2501      	moveq	r5, #1
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001cc2:	0699      	lsls	r1, r3, #26
 8001cc4:	d533      	bpl.n	8001d2e <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	9301      	str	r3, [sp, #4]
 8001cca:	4b87      	ldr	r3, [pc, #540]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001ccc:	4f87      	ldr	r7, [pc, #540]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8001cce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cd0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001cd4:	641a      	str	r2, [r3, #64]	; 0x40
 8001cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cdc:	9301      	str	r3, [sp, #4]
 8001cde:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ce6:	603b      	str	r3, [r7, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001ce8:	f7ff f9ac 	bl	8001044 <HAL_GetTick>
 8001cec:	4680      	mov	r8, r0

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	05da      	lsls	r2, r3, #23
 8001cf2:	f140 80ee 	bpl.w	8001ed2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
      {
        return HAL_TIMEOUT;
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001cf6:	4f7c      	ldr	r7, [pc, #496]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8001cf8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001cfa:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001cfe:	f040 80fb 	bne.w	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d04:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8001d08:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8001d0c:	4a76      	ldr	r2, [pc, #472]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8001d0e:	f040 8116 	bne.w	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x30e>
 8001d12:	6891      	ldr	r1, [r2, #8]
 8001d14:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8001d18:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001d1c:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8001d20:	4301      	orrs	r1, r0
 8001d22:	6091      	str	r1, [r2, #8]
 8001d24:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8001d26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d2a:	430b      	orrs	r3, r1
 8001d2c:	6713      	str	r3, [r2, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001d2e:	6823      	ldr	r3, [r4, #0]
 8001d30:	06d9      	lsls	r1, r3, #27
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001d32:	bf42      	ittt	mi
 8001d34:	4b6e      	ldrmi	r3, [pc, #440]	; (8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8001d36:	f894 2058 	ldrbmi.w	r2, [r4, #88]	; 0x58
 8001d3a:	601a      	strmi	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8001d3c:	6823      	ldr	r3, [r4, #0]
 8001d3e:	061a      	lsls	r2, r3, #24
 8001d40:	d508      	bpl.n	8001d54 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8001d42:	4969      	ldr	r1, [pc, #420]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8001d44:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8001d46:	f8d1 2094 	ldr.w	r2, [r1, #148]	; 0x94
 8001d4a:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8001d4e:	4302      	orrs	r2, r0
 8001d50:	f8c1 2094 	str.w	r2, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001d54:	065f      	lsls	r7, r3, #25
 8001d56:	d508      	bpl.n	8001d6a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001d58:	4963      	ldr	r1, [pc, #396]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8001d5a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8001d5c:	f8d1 2094 	ldr.w	r2, [r1, #148]	; 0x94
 8001d60:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8001d64:	4302      	orrs	r2, r0
 8001d66:	f8c1 2094 	str.w	r2, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001d6a:	05d8      	lsls	r0, r3, #23
 8001d6c:	d50c      	bpl.n	8001d88 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001d6e:	485e      	ldr	r0, [pc, #376]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8001d70:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8001d72:	f8d0 2094 	ldr.w	r2, [r0, #148]	; 0x94
 8001d76:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
 8001d7a:	430a      	orrs	r2, r1

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
    {
      pllsaiused = 1U;
 8001d7c:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001d80:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
      pllsaiused = 1U;
 8001d84:	bf08      	it	eq
 8001d86:	2501      	moveq	r5, #1
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8001d88:	0599      	lsls	r1, r3, #22
 8001d8a:	d508      	bpl.n	8001d9e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8001d8c:	4956      	ldr	r1, [pc, #344]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8001d8e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8001d90:	f8d1 2094 	ldr.w	r2, [r1, #148]	; 0x94
 8001d94:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001d98:	4302      	orrs	r2, r0
 8001d9a:	f8c1 2094 	str.w	r2, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001d9e:	055a      	lsls	r2, r3, #21
 8001da0:	f100 80d1 	bmi.w	8001f46 <HAL_RCCEx_PeriphCLKConfig+0x316>
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001da4:	2e01      	cmp	r6, #1
 8001da6:	f040 80dc 	bne.w	8001f62 <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001daa:	4e52      	ldr	r6, [pc, #328]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
    /* Get tick */
    tickstart = HAL_GetTick();
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001dac:	4f4e      	ldr	r7, [pc, #312]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
    __HAL_RCC_PLLI2S_DISABLE();
 8001dae:	2300      	movs	r3, #0
 8001db0:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001db2:	f7ff f947 	bl	8001044 <HAL_GetTick>
 8001db6:	4680      	mov	r8, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	011b      	lsls	r3, r3, #4
 8001dbc:	f100 8125 	bmi.w	800200a <HAL_RCCEx_PeriphCLKConfig+0x3da>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001dc0:	6822      	ldr	r2, [r4, #0]
 8001dc2:	07d0      	lsls	r0, r2, #31
 8001dc4:	d501      	bpl.n	8001dca <HAL_RCCEx_PeriphCLKConfig+0x19a>
 8001dc6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001dc8:	b11b      	cbz	r3, 8001dd2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8001dca:	0791      	lsls	r1, r2, #30
 8001dcc:	d515      	bpl.n	8001dfa <HAL_RCCEx_PeriphCLKConfig+0x1ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001dce:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001dd0:	b99b      	cbnz	r3, 8001dfa <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001dd2:	4945      	ldr	r1, [pc, #276]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8001dd4:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001dd8:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8001ddc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001de0:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8001de4:	4303      	orrs	r3, r0
 8001de6:	6860      	ldr	r0, [r4, #4]
 8001de8:	4303      	orrs	r3, r0
 8001dea:	68a0      	ldr	r0, [r4, #8]
 8001dec:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001df0:	6960      	ldr	r0, [r4, #20]
 8001df2:	ea43 7300 	orr.w	r3, r3, r0, lsl #28
 8001df6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001dfa:	0753      	lsls	r3, r2, #29
 8001dfc:	d503      	bpl.n	8001e06 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
 8001dfe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001e00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e04:	d005      	beq.n	8001e12 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8001e06:	0717      	lsls	r7, r2, #28
 8001e08:	d520      	bpl.n	8001e4c <HAL_RCCEx_PeriphCLKConfig+0x21c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001e0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001e0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e10:	d11c      	bne.n	8001e4c <HAL_RCCEx_PeriphCLKConfig+0x21c>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001e12:	4935      	ldr	r1, [pc, #212]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8001e14:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001e18:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8001e1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e20:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8001e24:	4303      	orrs	r3, r0
 8001e26:	6860      	ldr	r0, [r4, #4]
 8001e28:	4303      	orrs	r3, r0
 8001e2a:	68a0      	ldr	r0, [r4, #8]
 8001e2c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001e30:	6920      	ldr	r0, [r4, #16]
 8001e32:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8001e36:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001e3a:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 8001e3e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001e40:	f020 001f 	bic.w	r0, r0, #31
 8001e44:	3b01      	subs	r3, #1
 8001e46:	4303      	orrs	r3, r0
 8001e48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8001e4c:	0550      	lsls	r0, r2, #21
 8001e4e:	d51b      	bpl.n	8001e88 <HAL_RCCEx_PeriphCLKConfig+0x258>
 8001e50:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001e52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e56:	d117      	bne.n	8001e88 <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001e58:	4823      	ldr	r0, [pc, #140]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8001e5a:	6867      	ldr	r7, [r4, #4]
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001e5c:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001e60:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8001e64:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8001e68:	433b      	orrs	r3, r7
 8001e6a:	68a7      	ldr	r7, [r4, #8]
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001e6c:	f3c1 4101 	ubfx	r1, r1, #16, #2
 8001e70:	3101      	adds	r1, #1
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8001e72:	ea43 1387 	orr.w	r3, r3, r7, lsl #6
 8001e76:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 8001e7a:	68e1      	ldr	r1, [r4, #12]
 8001e7c:	0849      	lsrs	r1, r1, #1
 8001e7e:	3901      	subs	r1, #1
 8001e80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001e84:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001e88:	0511      	lsls	r1, r2, #20
 8001e8a:	d511      	bpl.n	8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x280>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001e8c:	6923      	ldr	r3, [r4, #16]
 8001e8e:	68a2      	ldr	r2, [r4, #8]
 8001e90:	061b      	lsls	r3, r3, #24
 8001e92:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001e96:	6862      	ldr	r2, [r4, #4]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	6962      	ldr	r2, [r4, #20]
 8001e9c:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001ea0:	68e2      	ldr	r2, [r4, #12]
 8001ea2:	0852      	lsrs	r2, r2, #1
 8001ea4:	3a01      	subs	r2, #1
 8001ea6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001eaa:	4a0f      	ldr	r2, [pc, #60]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8001eac:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	6033      	str	r3, [r6, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001eb4:	f7ff f8c6 	bl	8001044 <HAL_GetTick>
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001eb8:	4e0b      	ldr	r6, [pc, #44]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
    tickstart = HAL_GetTick();
 8001eba:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001ebc:	6833      	ldr	r3, [r6, #0]
 8001ebe:	011a      	lsls	r2, r3, #4
 8001ec0:	d453      	bmi.n	8001f6a <HAL_RCCEx_PeriphCLKConfig+0x33a>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001ec2:	f7ff f8bf 	bl	8001044 <HAL_GetTick>
 8001ec6:	1bc0      	subs	r0, r0, r7
 8001ec8:	2802      	cmp	r0, #2
 8001eca:	d9f7      	bls.n	8001ebc <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8001ecc:	e008      	b.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
      plli2sused = 1U;
 8001ece:	2601      	movs	r6, #1
 8001ed0:	e6f7      	b.n	8001cc2 <HAL_RCCEx_PeriphCLKConfig+0x92>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001ed2:	f7ff f8b7 	bl	8001044 <HAL_GetTick>
 8001ed6:	eba0 0008 	sub.w	r0, r0, r8
 8001eda:	2802      	cmp	r0, #2
 8001edc:	f67f af07 	bls.w	8001cee <HAL_RCCEx_PeriphCLKConfig+0xbe>
        return HAL_TIMEOUT;
 8001ee0:	2003      	movs	r0, #3
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
}
 8001ee2:	b003      	add	sp, #12
 8001ee4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001ee8:	40023800 	.word	0x40023800
 8001eec:	40007000 	.word	0x40007000
 8001ef0:	424711e0 	.word	0x424711e0
 8001ef4:	42470068 	.word	0x42470068
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001ef8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001efa:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001efe:	4293      	cmp	r3, r2
 8001f00:	f43f aeff 	beq.w	8001d02 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f04:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f06:	4a4b      	ldr	r2, [pc, #300]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x404>)
 8001f08:	2101      	movs	r1, #1
 8001f0a:	6011      	str	r1, [r2, #0]
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f10:	2100      	movs	r1, #0
 8001f12:	6011      	str	r1, [r2, #0]
      RCC->BDCR = tmpreg1;
 8001f14:	673b      	str	r3, [r7, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001f16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f18:	07db      	lsls	r3, r3, #31
 8001f1a:	f57f aef2 	bpl.w	8001d02 <HAL_RCCEx_PeriphCLKConfig+0xd2>
        tickstart = HAL_GetTick();
 8001f1e:	f7ff f891 	bl	8001044 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f22:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001f26:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f28:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f2a:	0798      	lsls	r0, r3, #30
 8001f2c:	f53f aee9 	bmi.w	8001d02 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f30:	f7ff f888 	bl	8001044 <HAL_GetTick>
 8001f34:	eba0 0008 	sub.w	r0, r0, r8
 8001f38:	4548      	cmp	r0, r9
 8001f3a:	d9f5      	bls.n	8001f28 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 8001f3c:	e7d0      	b.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f3e:	6891      	ldr	r1, [r2, #8]
 8001f40:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001f44:	e6ed      	b.n	8001d22 <HAL_RCCEx_PeriphCLKConfig+0xf2>
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8001f46:	483c      	ldr	r0, [pc, #240]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x408>)
 8001f48:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8001f4a:	f8d0 2094 	ldr.w	r2, [r0, #148]	; 0x94
 8001f4e:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8001f52:	430a      	orrs	r2, r1
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8001f54:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8001f58:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8001f5c:	f47f af22 	bne.w	8001da4 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8001f60:	e723      	b.n	8001daa <HAL_RCCEx_PeriphCLKConfig+0x17a>
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001f62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f66:	f43f af20 	beq.w	8001daa <HAL_RCCEx_PeriphCLKConfig+0x17a>
  if(pllsaiused == 1U)
 8001f6a:	2d01      	cmp	r5, #1
 8001f6c:	d14b      	bne.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
    __HAL_RCC_PLLSAI_DISABLE();
 8001f6e:	4d33      	ldr	r5, [pc, #204]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x40c>)
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001f70:	4e31      	ldr	r6, [pc, #196]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x408>)
    __HAL_RCC_PLLSAI_DISABLE();
 8001f72:	2300      	movs	r3, #0
 8001f74:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8001f76:	f7ff f865 	bl	8001044 <HAL_GetTick>
 8001f7a:	4607      	mov	r7, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001f7c:	6833      	ldr	r3, [r6, #0]
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	d44b      	bmi.n	800201a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001f82:	6821      	ldr	r1, [r4, #0]
 8001f84:	074e      	lsls	r6, r1, #29
 8001f86:	d501      	bpl.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8001f88:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001f8a:	b11b      	cbz	r3, 8001f94 <HAL_RCCEx_PeriphCLKConfig+0x364>
 8001f8c:	0708      	lsls	r0, r1, #28
 8001f8e:	d51a      	bpl.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x396>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001f90:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001f92:	b9c3      	cbnz	r3, 8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x396>
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8001f94:	4a28      	ldr	r2, [pc, #160]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x408>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8001f96:	69a0      	ldr	r0, [r4, #24]
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8001f98:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8001f9c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fa0:	4303      	orrs	r3, r0
 8001fa2:	69e0      	ldr	r0, [r4, #28]
 8001fa4:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001fa8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001faa:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8001fae:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001fb2:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001fb6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001fb8:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8001fbc:	3801      	subs	r0, #1
 8001fbe:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8001fc2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8001fc6:	05ca      	lsls	r2, r1, #23
 8001fc8:	d514      	bpl.n	8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8001fca:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001fcc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001fd0:	d110      	bne.n	8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001fd2:	4919      	ldr	r1, [pc, #100]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x408>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8001fd4:	69a2      	ldr	r2, [r4, #24]
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001fd6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8001fda:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	69e2      	ldr	r2, [r4, #28]
 8001fe2:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001fe6:	6a22      	ldr	r2, [r4, #32]
 8001fe8:	0852      	lsrs	r2, r2, #1
 8001fea:	3a01      	subs	r2, #1
 8001fec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001ff0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    __HAL_RCC_PLLSAI_ENABLE();
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8001ff8:	f7ff f824 	bl	8001044 <HAL_GetTick>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001ffc:	4c0e      	ldr	r4, [pc, #56]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x408>)
    tickstart = HAL_GetTick();
 8001ffe:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002000:	6823      	ldr	r3, [r4, #0]
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	d50f      	bpl.n	8002026 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
  return HAL_OK;
 8002006:	2000      	movs	r0, #0
 8002008:	e76b      	b.n	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800200a:	f7ff f81b 	bl	8001044 <HAL_GetTick>
 800200e:	eba0 0008 	sub.w	r0, r0, r8
 8002012:	2802      	cmp	r0, #2
 8002014:	f67f aed0 	bls.w	8001db8 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8002018:	e762      	b.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800201a:	f7ff f813 	bl	8001044 <HAL_GetTick>
 800201e:	1bc0      	subs	r0, r0, r7
 8002020:	2802      	cmp	r0, #2
 8002022:	d9ab      	bls.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8002024:	e75c      	b.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002026:	f7ff f80d 	bl	8001044 <HAL_GetTick>
 800202a:	1b40      	subs	r0, r0, r5
 800202c:	2802      	cmp	r0, #2
 800202e:	d9e7      	bls.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8002030:	e756      	b.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002032:	bf00      	nop
 8002034:	42470e40 	.word	0x42470e40
 8002038:	40023800 	.word	0x40023800
 800203c:	42470070 	.word	0x42470070

08002040 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002040:	4920      	ldr	r1, [pc, #128]	; (80020c4 <HAL_RCC_GetSysClockFreq+0x84>)
{
 8002042:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002044:	688b      	ldr	r3, [r1, #8]
 8002046:	f003 030c 	and.w	r3, r3, #12
 800204a:	2b08      	cmp	r3, #8
 800204c:	d007      	beq.n	800205e <HAL_RCC_GetSysClockFreq+0x1e>
 800204e:	2b0c      	cmp	r3, #12
 8002050:	d020      	beq.n	8002094 <HAL_RCC_GetSysClockFreq+0x54>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002052:	4a1d      	ldr	r2, [pc, #116]	; (80020c8 <HAL_RCC_GetSysClockFreq+0x88>)
 8002054:	481d      	ldr	r0, [pc, #116]	; (80020cc <HAL_RCC_GetSysClockFreq+0x8c>)
 8002056:	2b04      	cmp	r3, #4
 8002058:	bf18      	it	ne
 800205a:	4610      	movne	r0, r2
 800205c:	bd08      	pop	{r3, pc}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800205e:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002060:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002062:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002064:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002068:	bf14      	ite	ne
 800206a:	4818      	ldrne	r0, [pc, #96]	; (80020cc <HAL_RCC_GetSysClockFreq+0x8c>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800206c:	4816      	ldreq	r0, [pc, #88]	; (80020c8 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800206e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002072:	bf18      	it	ne
 8002074:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002076:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800207a:	fba1 0100 	umull	r0, r1, r1, r0
 800207e:	f7fe fe0f 	bl	8000ca0 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002082:	4b10      	ldr	r3, [pc, #64]	; (80020c4 <HAL_RCC_GetSysClockFreq+0x84>)
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800208a:	3301      	adds	r3, #1
 800208c:	005b      	lsls	r3, r3, #1
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);

      sysclockfreq = pllvco/pllr;
 800208e:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002092:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002094:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002096:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002098:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800209a:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800209e:	bf14      	ite	ne
 80020a0:	480a      	ldrne	r0, [pc, #40]	; (80020cc <HAL_RCC_GetSysClockFreq+0x8c>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020a2:	4809      	ldreq	r0, [pc, #36]	; (80020c8 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020a4:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80020a8:	bf18      	it	ne
 80020aa:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020ac:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020b0:	fba1 0100 	umull	r0, r1, r1, r0
 80020b4:	f7fe fdf4 	bl	8000ca0 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80020b8:	4b02      	ldr	r3, [pc, #8]	; (80020c4 <HAL_RCC_GetSysClockFreq+0x84>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f3c3 7302 	ubfx	r3, r3, #28, #3
 80020c0:	e7e5      	b.n	800208e <HAL_RCC_GetSysClockFreq+0x4e>
 80020c2:	bf00      	nop
 80020c4:	40023800 	.word	0x40023800
 80020c8:	00f42400 	.word	0x00f42400
 80020cc:	017d7840 	.word	0x017d7840

080020d0 <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020d0:	6803      	ldr	r3, [r0, #0]
{
 80020d2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020d6:	07df      	lsls	r7, r3, #31
{
 80020d8:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020da:	d410      	bmi.n	80020fe <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020dc:	6823      	ldr	r3, [r4, #0]
 80020de:	079e      	lsls	r6, r3, #30
 80020e0:	d467      	bmi.n	80021b2 <HAL_RCC_OscConfig+0xe2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020e2:	6823      	ldr	r3, [r4, #0]
 80020e4:	071a      	lsls	r2, r3, #28
 80020e6:	f100 80b2 	bmi.w	800224e <HAL_RCC_OscConfig+0x17e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020ea:	6823      	ldr	r3, [r4, #0]
 80020ec:	075b      	lsls	r3, r3, #29
 80020ee:	f100 80d0 	bmi.w	8002292 <HAL_RCC_OscConfig+0x1c2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020f2:	69a2      	ldr	r2, [r4, #24]
 80020f4:	2a00      	cmp	r2, #0
 80020f6:	f040 8139 	bne.w	800236c <HAL_RCC_OscConfig+0x29c>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 80020fa:	2000      	movs	r0, #0
 80020fc:	e01e      	b.n	800213c <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80020fe:	4b97      	ldr	r3, [pc, #604]	; (800235c <HAL_RCC_OscConfig+0x28c>)
 8002100:	689a      	ldr	r2, [r3, #8]
 8002102:	f002 020c 	and.w	r2, r2, #12
 8002106:	2a04      	cmp	r2, #4
 8002108:	d010      	beq.n	800212c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800210a:	689a      	ldr	r2, [r3, #8]
 800210c:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002110:	2a08      	cmp	r2, #8
 8002112:	d102      	bne.n	800211a <HAL_RCC_OscConfig+0x4a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	025d      	lsls	r5, r3, #9
 8002118:	d408      	bmi.n	800212c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800211a:	4b90      	ldr	r3, [pc, #576]	; (800235c <HAL_RCC_OscConfig+0x28c>)
 800211c:	689a      	ldr	r2, [r3, #8]
 800211e:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002122:	2a0c      	cmp	r2, #12
 8002124:	d10d      	bne.n	8002142 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002126:	685a      	ldr	r2, [r3, #4]
 8002128:	0250      	lsls	r0, r2, #9
 800212a:	d50a      	bpl.n	8002142 <HAL_RCC_OscConfig+0x72>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800212c:	4b8b      	ldr	r3, [pc, #556]	; (800235c <HAL_RCC_OscConfig+0x28c>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	0399      	lsls	r1, r3, #14
 8002132:	d5d3      	bpl.n	80020dc <HAL_RCC_OscConfig+0xc>
 8002134:	6863      	ldr	r3, [r4, #4]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d1d0      	bne.n	80020dc <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 800213a:	2001      	movs	r0, #1
}
 800213c:	b002      	add	sp, #8
 800213e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002142:	6862      	ldr	r2, [r4, #4]
 8002144:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8002148:	d111      	bne.n	800216e <HAL_RCC_OscConfig+0x9e>
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002150:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002152:	f7fe ff77 	bl	8001044 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002156:	4d81      	ldr	r5, [pc, #516]	; (800235c <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8002158:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800215a:	682b      	ldr	r3, [r5, #0]
 800215c:	039a      	lsls	r2, r3, #14
 800215e:	d4bd      	bmi.n	80020dc <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002160:	f7fe ff70 	bl	8001044 <HAL_GetTick>
 8002164:	1b80      	subs	r0, r0, r6
 8002166:	2864      	cmp	r0, #100	; 0x64
 8002168:	d9f7      	bls.n	800215a <HAL_RCC_OscConfig+0x8a>
            return HAL_TIMEOUT;
 800216a:	2003      	movs	r0, #3
 800216c:	e7e6      	b.n	800213c <HAL_RCC_OscConfig+0x6c>
 800216e:	4d7b      	ldr	r5, [pc, #492]	; (800235c <HAL_RCC_OscConfig+0x28c>)
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002170:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8002174:	682b      	ldr	r3, [r5, #0]
 8002176:	d107      	bne.n	8002188 <HAL_RCC_OscConfig+0xb8>
 8002178:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800217c:	602b      	str	r3, [r5, #0]
 800217e:	682b      	ldr	r3, [r5, #0]
 8002180:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002184:	602b      	str	r3, [r5, #0]
 8002186:	e7e4      	b.n	8002152 <HAL_RCC_OscConfig+0x82>
 8002188:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800218c:	602b      	str	r3, [r5, #0]
 800218e:	682b      	ldr	r3, [r5, #0]
 8002190:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002194:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002196:	2a00      	cmp	r2, #0
 8002198:	d1db      	bne.n	8002152 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 800219a:	f7fe ff53 	bl	8001044 <HAL_GetTick>
 800219e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021a0:	682b      	ldr	r3, [r5, #0]
 80021a2:	039b      	lsls	r3, r3, #14
 80021a4:	d59a      	bpl.n	80020dc <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021a6:	f7fe ff4d 	bl	8001044 <HAL_GetTick>
 80021aa:	1b80      	subs	r0, r0, r6
 80021ac:	2864      	cmp	r0, #100	; 0x64
 80021ae:	d9f7      	bls.n	80021a0 <HAL_RCC_OscConfig+0xd0>
 80021b0:	e7db      	b.n	800216a <HAL_RCC_OscConfig+0x9a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80021b2:	4b6a      	ldr	r3, [pc, #424]	; (800235c <HAL_RCC_OscConfig+0x28c>)
 80021b4:	689a      	ldr	r2, [r3, #8]
 80021b6:	f012 0f0c 	tst.w	r2, #12
 80021ba:	d010      	beq.n	80021de <HAL_RCC_OscConfig+0x10e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80021bc:	689a      	ldr	r2, [r3, #8]
 80021be:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80021c2:	2a08      	cmp	r2, #8
 80021c4:	d102      	bne.n	80021cc <HAL_RCC_OscConfig+0xfc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	025f      	lsls	r7, r3, #9
 80021ca:	d508      	bpl.n	80021de <HAL_RCC_OscConfig+0x10e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021cc:	4a63      	ldr	r2, [pc, #396]	; (800235c <HAL_RCC_OscConfig+0x28c>)
 80021ce:	6893      	ldr	r3, [r2, #8]
 80021d0:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80021d4:	2b0c      	cmp	r3, #12
 80021d6:	d111      	bne.n	80021fc <HAL_RCC_OscConfig+0x12c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021d8:	6853      	ldr	r3, [r2, #4]
 80021da:	025e      	lsls	r6, r3, #9
 80021dc:	d40e      	bmi.n	80021fc <HAL_RCC_OscConfig+0x12c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021de:	4b5f      	ldr	r3, [pc, #380]	; (800235c <HAL_RCC_OscConfig+0x28c>)
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	0795      	lsls	r5, r2, #30
 80021e4:	d502      	bpl.n	80021ec <HAL_RCC_OscConfig+0x11c>
 80021e6:	68e2      	ldr	r2, [r4, #12]
 80021e8:	2a01      	cmp	r2, #1
 80021ea:	d1a6      	bne.n	800213a <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	6921      	ldr	r1, [r4, #16]
 80021f0:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80021f4:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80021f8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021fa:	e772      	b.n	80020e2 <HAL_RCC_OscConfig+0x12>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80021fc:	68e2      	ldr	r2, [r4, #12]
 80021fe:	4b58      	ldr	r3, [pc, #352]	; (8002360 <HAL_RCC_OscConfig+0x290>)
 8002200:	b1b2      	cbz	r2, 8002230 <HAL_RCC_OscConfig+0x160>
        __HAL_RCC_HSI_ENABLE();
 8002202:	2201      	movs	r2, #1
 8002204:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002206:	f7fe ff1d 	bl	8001044 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800220a:	4d54      	ldr	r5, [pc, #336]	; (800235c <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 800220c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800220e:	682b      	ldr	r3, [r5, #0]
 8002210:	0798      	lsls	r0, r3, #30
 8002212:	d507      	bpl.n	8002224 <HAL_RCC_OscConfig+0x154>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002214:	682b      	ldr	r3, [r5, #0]
 8002216:	6922      	ldr	r2, [r4, #16]
 8002218:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800221c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002220:	602b      	str	r3, [r5, #0]
 8002222:	e75e      	b.n	80020e2 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002224:	f7fe ff0e 	bl	8001044 <HAL_GetTick>
 8002228:	1b80      	subs	r0, r0, r6
 800222a:	2802      	cmp	r0, #2
 800222c:	d9ef      	bls.n	800220e <HAL_RCC_OscConfig+0x13e>
 800222e:	e79c      	b.n	800216a <HAL_RCC_OscConfig+0x9a>
        __HAL_RCC_HSI_DISABLE();
 8002230:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002232:	f7fe ff07 	bl	8001044 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002236:	4d49      	ldr	r5, [pc, #292]	; (800235c <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8002238:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800223a:	682b      	ldr	r3, [r5, #0]
 800223c:	0799      	lsls	r1, r3, #30
 800223e:	f57f af50 	bpl.w	80020e2 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002242:	f7fe feff 	bl	8001044 <HAL_GetTick>
 8002246:	1b80      	subs	r0, r0, r6
 8002248:	2802      	cmp	r0, #2
 800224a:	d9f6      	bls.n	800223a <HAL_RCC_OscConfig+0x16a>
 800224c:	e78d      	b.n	800216a <HAL_RCC_OscConfig+0x9a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800224e:	6962      	ldr	r2, [r4, #20]
 8002250:	4b44      	ldr	r3, [pc, #272]	; (8002364 <HAL_RCC_OscConfig+0x294>)
 8002252:	b17a      	cbz	r2, 8002274 <HAL_RCC_OscConfig+0x1a4>
      __HAL_RCC_LSI_ENABLE();
 8002254:	2201      	movs	r2, #1
 8002256:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002258:	f7fe fef4 	bl	8001044 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800225c:	4d3f      	ldr	r5, [pc, #252]	; (800235c <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 800225e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002260:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002262:	079f      	lsls	r7, r3, #30
 8002264:	f53f af41 	bmi.w	80020ea <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002268:	f7fe feec 	bl	8001044 <HAL_GetTick>
 800226c:	1b80      	subs	r0, r0, r6
 800226e:	2802      	cmp	r0, #2
 8002270:	d9f6      	bls.n	8002260 <HAL_RCC_OscConfig+0x190>
 8002272:	e77a      	b.n	800216a <HAL_RCC_OscConfig+0x9a>
      __HAL_RCC_LSI_DISABLE();
 8002274:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002276:	f7fe fee5 	bl	8001044 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800227a:	4d38      	ldr	r5, [pc, #224]	; (800235c <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 800227c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800227e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002280:	0798      	lsls	r0, r3, #30
 8002282:	f57f af32 	bpl.w	80020ea <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002286:	f7fe fedd 	bl	8001044 <HAL_GetTick>
 800228a:	1b80      	subs	r0, r0, r6
 800228c:	2802      	cmp	r0, #2
 800228e:	d9f6      	bls.n	800227e <HAL_RCC_OscConfig+0x1ae>
 8002290:	e76b      	b.n	800216a <HAL_RCC_OscConfig+0x9a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002292:	4b32      	ldr	r3, [pc, #200]	; (800235c <HAL_RCC_OscConfig+0x28c>)
 8002294:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002296:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 800229a:	d128      	bne.n	80022ee <HAL_RCC_OscConfig+0x21e>
      __HAL_RCC_PWR_CLK_ENABLE();
 800229c:	9201      	str	r2, [sp, #4]
 800229e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022a0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80022a4:	641a      	str	r2, [r3, #64]	; 0x40
 80022a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ac:	9301      	str	r3, [sp, #4]
 80022ae:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80022b0:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022b2:	4d2d      	ldr	r5, [pc, #180]	; (8002368 <HAL_RCC_OscConfig+0x298>)
 80022b4:	682b      	ldr	r3, [r5, #0]
 80022b6:	05d9      	lsls	r1, r3, #23
 80022b8:	d51b      	bpl.n	80022f2 <HAL_RCC_OscConfig+0x222>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022ba:	68a3      	ldr	r3, [r4, #8]
 80022bc:	4d27      	ldr	r5, [pc, #156]	; (800235c <HAL_RCC_OscConfig+0x28c>)
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d127      	bne.n	8002312 <HAL_RCC_OscConfig+0x242>
 80022c2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80022c4:	f043 0301 	orr.w	r3, r3, #1
 80022c8:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80022ca:	f7fe febb 	bl	8001044 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022ce:	4d23      	ldr	r5, [pc, #140]	; (800235c <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 80022d0:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022d2:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022d6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80022d8:	079b      	lsls	r3, r3, #30
 80022da:	d539      	bpl.n	8002350 <HAL_RCC_OscConfig+0x280>
    if(pwrclkchanged == SET)
 80022dc:	2e00      	cmp	r6, #0
 80022de:	f43f af08 	beq.w	80020f2 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 80022e2:	4a1e      	ldr	r2, [pc, #120]	; (800235c <HAL_RCC_OscConfig+0x28c>)
 80022e4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80022e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022ea:	6413      	str	r3, [r2, #64]	; 0x40
 80022ec:	e701      	b.n	80020f2 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 80022ee:	2600      	movs	r6, #0
 80022f0:	e7df      	b.n	80022b2 <HAL_RCC_OscConfig+0x1e2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022f2:	682b      	ldr	r3, [r5, #0]
 80022f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022f8:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80022fa:	f7fe fea3 	bl	8001044 <HAL_GetTick>
 80022fe:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002300:	682b      	ldr	r3, [r5, #0]
 8002302:	05da      	lsls	r2, r3, #23
 8002304:	d4d9      	bmi.n	80022ba <HAL_RCC_OscConfig+0x1ea>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002306:	f7fe fe9d 	bl	8001044 <HAL_GetTick>
 800230a:	1bc0      	subs	r0, r0, r7
 800230c:	2802      	cmp	r0, #2
 800230e:	d9f7      	bls.n	8002300 <HAL_RCC_OscConfig+0x230>
 8002310:	e72b      	b.n	800216a <HAL_RCC_OscConfig+0x9a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002312:	2b05      	cmp	r3, #5
 8002314:	d104      	bne.n	8002320 <HAL_RCC_OscConfig+0x250>
 8002316:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002318:	f043 0304 	orr.w	r3, r3, #4
 800231c:	672b      	str	r3, [r5, #112]	; 0x70
 800231e:	e7d0      	b.n	80022c2 <HAL_RCC_OscConfig+0x1f2>
 8002320:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002322:	f022 0201 	bic.w	r2, r2, #1
 8002326:	672a      	str	r2, [r5, #112]	; 0x70
 8002328:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800232a:	f022 0204 	bic.w	r2, r2, #4
 800232e:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002330:	2b00      	cmp	r3, #0
 8002332:	d1ca      	bne.n	80022ca <HAL_RCC_OscConfig+0x1fa>
      tickstart = HAL_GetTick();
 8002334:	f7fe fe86 	bl	8001044 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002338:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800233c:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800233e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002340:	0798      	lsls	r0, r3, #30
 8002342:	d5cb      	bpl.n	80022dc <HAL_RCC_OscConfig+0x20c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002344:	f7fe fe7e 	bl	8001044 <HAL_GetTick>
 8002348:	1bc0      	subs	r0, r0, r7
 800234a:	4540      	cmp	r0, r8
 800234c:	d9f7      	bls.n	800233e <HAL_RCC_OscConfig+0x26e>
 800234e:	e70c      	b.n	800216a <HAL_RCC_OscConfig+0x9a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002350:	f7fe fe78 	bl	8001044 <HAL_GetTick>
 8002354:	1bc0      	subs	r0, r0, r7
 8002356:	4540      	cmp	r0, r8
 8002358:	d9bd      	bls.n	80022d6 <HAL_RCC_OscConfig+0x206>
 800235a:	e706      	b.n	800216a <HAL_RCC_OscConfig+0x9a>
 800235c:	40023800 	.word	0x40023800
 8002360:	42470000 	.word	0x42470000
 8002364:	42470e80 	.word	0x42470e80
 8002368:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800236c:	4d23      	ldr	r5, [pc, #140]	; (80023fc <HAL_RCC_OscConfig+0x32c>)
 800236e:	68ab      	ldr	r3, [r5, #8]
 8002370:	f003 030c 	and.w	r3, r3, #12
 8002374:	2b08      	cmp	r3, #8
 8002376:	f43f aee0 	beq.w	800213a <HAL_RCC_OscConfig+0x6a>
 800237a:	4e21      	ldr	r6, [pc, #132]	; (8002400 <HAL_RCC_OscConfig+0x330>)
 800237c:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800237e:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8002380:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002382:	d12d      	bne.n	80023e0 <HAL_RCC_OscConfig+0x310>
        tickstart = HAL_GetTick();
 8002384:	f7fe fe5e 	bl	8001044 <HAL_GetTick>
 8002388:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800238a:	682b      	ldr	r3, [r5, #0]
 800238c:	0199      	lsls	r1, r3, #6
 800238e:	d421      	bmi.n	80023d4 <HAL_RCC_OscConfig+0x304>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002390:	6a22      	ldr	r2, [r4, #32]
 8002392:	69e3      	ldr	r3, [r4, #28]
 8002394:	4313      	orrs	r3, r2
 8002396:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002398:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800239c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800239e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80023a2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80023a4:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80023a8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023aa:	4c14      	ldr	r4, [pc, #80]	; (80023fc <HAL_RCC_OscConfig+0x32c>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023ac:	0852      	lsrs	r2, r2, #1
 80023ae:	3a01      	subs	r2, #1
 80023b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80023b4:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80023b6:	2301      	movs	r3, #1
 80023b8:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80023ba:	f7fe fe43 	bl	8001044 <HAL_GetTick>
 80023be:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023c0:	6823      	ldr	r3, [r4, #0]
 80023c2:	019a      	lsls	r2, r3, #6
 80023c4:	f53f ae99 	bmi.w	80020fa <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023c8:	f7fe fe3c 	bl	8001044 <HAL_GetTick>
 80023cc:	1b40      	subs	r0, r0, r5
 80023ce:	2802      	cmp	r0, #2
 80023d0:	d9f6      	bls.n	80023c0 <HAL_RCC_OscConfig+0x2f0>
 80023d2:	e6ca      	b.n	800216a <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023d4:	f7fe fe36 	bl	8001044 <HAL_GetTick>
 80023d8:	1bc0      	subs	r0, r0, r7
 80023da:	2802      	cmp	r0, #2
 80023dc:	d9d5      	bls.n	800238a <HAL_RCC_OscConfig+0x2ba>
 80023de:	e6c4      	b.n	800216a <HAL_RCC_OscConfig+0x9a>
        tickstart = HAL_GetTick();
 80023e0:	f7fe fe30 	bl	8001044 <HAL_GetTick>
 80023e4:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023e6:	682b      	ldr	r3, [r5, #0]
 80023e8:	019b      	lsls	r3, r3, #6
 80023ea:	f57f ae86 	bpl.w	80020fa <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023ee:	f7fe fe29 	bl	8001044 <HAL_GetTick>
 80023f2:	1b00      	subs	r0, r0, r4
 80023f4:	2802      	cmp	r0, #2
 80023f6:	d9f6      	bls.n	80023e6 <HAL_RCC_OscConfig+0x316>
 80023f8:	e6b7      	b.n	800216a <HAL_RCC_OscConfig+0x9a>
 80023fa:	bf00      	nop
 80023fc:	40023800 	.word	0x40023800
 8002400:	42470060 	.word	0x42470060

08002404 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002404:	6802      	ldr	r2, [r0, #0]
{
 8002406:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002408:	68d3      	ldr	r3, [r2, #12]
 800240a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800240e:	60d3      	str	r3, [r2, #12]
{
 8002410:	4604      	mov	r4, r0

    /* Get tick */
    tickstart = HAL_GetTick();
 8002412:	f7fe fe17 	bl	8001044 <HAL_GetTick>
 8002416:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002418:	6823      	ldr	r3, [r4, #0]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	069b      	lsls	r3, r3, #26
 800241e:	d501      	bpl.n	8002424 <HAL_RTC_WaitForSynchro+0x20>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8002420:	2000      	movs	r0, #0
 8002422:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002424:	f7fe fe0e 	bl	8001044 <HAL_GetTick>
 8002428:	1b40      	subs	r0, r0, r5
 800242a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800242e:	d9f3      	bls.n	8002418 <HAL_RTC_WaitForSynchro+0x14>
      return HAL_TIMEOUT;
 8002430:	2003      	movs	r0, #3
}
 8002432:	bd38      	pop	{r3, r4, r5, pc}

08002434 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8002434:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002436:	6803      	ldr	r3, [r0, #0]
 8002438:	68da      	ldr	r2, [r3, #12]
 800243a:	0652      	lsls	r2, r2, #25
{
 800243c:	4604      	mov	r4, r0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800243e:	d501      	bpl.n	8002444 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8002440:	2000      	movs	r0, #0
 8002442:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002444:	f04f 32ff 	mov.w	r2, #4294967295
 8002448:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 800244a:	f7fe fdfb 	bl	8001044 <HAL_GetTick>
 800244e:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002450:	6823      	ldr	r3, [r4, #0]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	065b      	lsls	r3, r3, #25
 8002456:	d4f3      	bmi.n	8002440 <RTC_EnterInitMode+0xc>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002458:	f7fe fdf4 	bl	8001044 <HAL_GetTick>
 800245c:	1b40      	subs	r0, r0, r5
 800245e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002462:	d9f5      	bls.n	8002450 <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 8002464:	2003      	movs	r0, #3
}
 8002466:	bd38      	pop	{r3, r4, r5, pc}

08002468 <HAL_RTC_Init>:
{
 8002468:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 800246a:	4604      	mov	r4, r0
 800246c:	b1b8      	cbz	r0, 800249e <HAL_RTC_Init+0x36>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800246e:	7f43      	ldrb	r3, [r0, #29]
 8002470:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002474:	b913      	cbnz	r3, 800247c <HAL_RTC_Init+0x14>
    hrtc->Lock = HAL_UNLOCKED;
 8002476:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8002478:	f002 fb96 	bl	8004ba8 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 800247c:	2302      	movs	r3, #2
 800247e:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002480:	6823      	ldr	r3, [r4, #0]
 8002482:	22ca      	movs	r2, #202	; 0xca
 8002484:	625a      	str	r2, [r3, #36]	; 0x24
 8002486:	2253      	movs	r2, #83	; 0x53
 8002488:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800248a:	4620      	mov	r0, r4
 800248c:	f7ff ffd2 	bl	8002434 <RTC_EnterInitMode>
 8002490:	6823      	ldr	r3, [r4, #0]
 8002492:	4605      	mov	r5, r0
 8002494:	b128      	cbz	r0, 80024a2 <HAL_RTC_Init+0x3a>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002496:	22ff      	movs	r2, #255	; 0xff
 8002498:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 800249a:	2304      	movs	r3, #4
 800249c:	7763      	strb	r3, [r4, #29]
     return HAL_ERROR;
 800249e:	2501      	movs	r5, #1
 80024a0:	e02e      	b.n	8002500 <HAL_RTC_Init+0x98>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80024a2:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80024a4:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80024a6:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 80024aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024ae:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80024b0:	6862      	ldr	r2, [r4, #4]
 80024b2:	6899      	ldr	r1, [r3, #8]
 80024b4:	4302      	orrs	r2, r0
 80024b6:	6960      	ldr	r0, [r4, #20]
 80024b8:	4302      	orrs	r2, r0
 80024ba:	430a      	orrs	r2, r1
 80024bc:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80024be:	68e2      	ldr	r2, [r4, #12]
 80024c0:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80024c2:	691a      	ldr	r2, [r3, #16]
 80024c4:	68a1      	ldr	r1, [r4, #8]
 80024c6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80024ca:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80024cc:	68da      	ldr	r2, [r3, #12]
 80024ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024d2:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	069b      	lsls	r3, r3, #26
 80024d8:	d405      	bmi.n	80024e6 <HAL_RTC_Init+0x7e>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80024da:	4620      	mov	r0, r4
 80024dc:	f7ff ff92 	bl	8002404 <HAL_RTC_WaitForSynchro>
 80024e0:	b108      	cbz	r0, 80024e6 <HAL_RTC_Init+0x7e>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80024e2:	6823      	ldr	r3, [r4, #0]
 80024e4:	e7d7      	b.n	8002496 <HAL_RTC_Init+0x2e>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80024e6:	6823      	ldr	r3, [r4, #0]
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80024e8:	69a1      	ldr	r1, [r4, #24]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80024ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80024f0:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80024f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024f4:	430a      	orrs	r2, r1
 80024f6:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80024f8:	22ff      	movs	r2, #255	; 0xff
 80024fa:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 80024fc:	2301      	movs	r3, #1
 80024fe:	7763      	strb	r3, [r4, #29]
}
 8002500:	4628      	mov	r0, r5
 8002502:	bd38      	pop	{r3, r4, r5, pc}

08002504 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002504:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002506:	4604      	mov	r4, r0
 8002508:	2800      	cmp	r0, #0
 800250a:	d036      	beq.n	800257a <HAL_SPI_Init+0x76>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800250c:	2300      	movs	r3, #0
 800250e:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002510:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8002514:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002518:	b91b      	cbnz	r3, 8002522 <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800251a:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800251e:	f002 fb4f 	bl	8004bc0 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002522:	6821      	ldr	r1, [r4, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002524:	68a0      	ldr	r0, [r4, #8]
 8002526:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 8002528:	2302      	movs	r3, #2
 800252a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 800252e:	680b      	ldr	r3, [r1, #0]
 8002530:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002534:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002536:	6863      	ldr	r3, [r4, #4]
 8002538:	4303      	orrs	r3, r0
 800253a:	68e0      	ldr	r0, [r4, #12]
 800253c:	4303      	orrs	r3, r0
 800253e:	6920      	ldr	r0, [r4, #16]
 8002540:	4303      	orrs	r3, r0
 8002542:	6960      	ldr	r0, [r4, #20]
 8002544:	4303      	orrs	r3, r0
 8002546:	69e0      	ldr	r0, [r4, #28]
 8002548:	4303      	orrs	r3, r0
 800254a:	6a20      	ldr	r0, [r4, #32]
 800254c:	4303      	orrs	r3, r0
 800254e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002550:	4303      	orrs	r3, r0
 8002552:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8002556:	4303      	orrs	r3, r0
 8002558:	600b      	str	r3, [r1, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800255a:	0c12      	lsrs	r2, r2, #16
 800255c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800255e:	f002 0204 	and.w	r2, r2, #4
 8002562:	431a      	orrs	r2, r3
 8002564:	604a      	str	r2, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002566:	69cb      	ldr	r3, [r1, #28]
 8002568:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800256c:	61cb      	str	r3, [r1, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800256e:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8002570:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002572:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002574:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
 8002578:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800257a:	2001      	movs	r0, #1
}
 800257c:	bd10      	pop	{r4, pc}
	...

08002580 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002580:	6a03      	ldr	r3, [r0, #32]
 8002582:	f023 0301 	bic.w	r3, r3, #1
 8002586:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002588:	6a03      	ldr	r3, [r0, #32]
{
 800258a:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800258c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800258e:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002590:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002592:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8002596:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002598:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 800259a:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 800259e:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80025a0:	4d0e      	ldr	r5, [pc, #56]	; (80025dc <TIM_OC1_SetConfig+0x5c>)
 80025a2:	42a8      	cmp	r0, r5
 80025a4:	d002      	beq.n	80025ac <TIM_OC1_SetConfig+0x2c>
 80025a6:	4e0e      	ldr	r6, [pc, #56]	; (80025e0 <TIM_OC1_SetConfig+0x60>)
 80025a8:	42b0      	cmp	r0, r6
 80025aa:	d110      	bne.n	80025ce <TIM_OC1_SetConfig+0x4e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80025ac:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80025ae:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80025b2:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025b4:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80025b6:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025ba:	d002      	beq.n	80025c2 <TIM_OC1_SetConfig+0x42>
 80025bc:	4d08      	ldr	r5, [pc, #32]	; (80025e0 <TIM_OC1_SetConfig+0x60>)
 80025be:	42a8      	cmp	r0, r5
 80025c0:	d105      	bne.n	80025ce <TIM_OC1_SetConfig+0x4e>
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80025c2:	694d      	ldr	r5, [r1, #20]
 80025c4:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80025c6:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80025ca:	4335      	orrs	r5, r6
 80025cc:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025ce:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80025d0:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80025d2:	684a      	ldr	r2, [r1, #4]
 80025d4:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025d6:	6203      	str	r3, [r0, #32]
 80025d8:	bd70      	pop	{r4, r5, r6, pc}
 80025da:	bf00      	nop
 80025dc:	40010000 	.word	0x40010000
 80025e0:	40010400 	.word	0x40010400

080025e4 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80025e4:	6a03      	ldr	r3, [r0, #32]
 80025e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025ea:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025ec:	6a03      	ldr	r3, [r0, #32]
{
 80025ee:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025f0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80025f2:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80025f4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80025f6:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80025fa:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80025fc:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 80025fe:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002602:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002606:	4d11      	ldr	r5, [pc, #68]	; (800264c <TIM_OC3_SetConfig+0x68>)
 8002608:	42a8      	cmp	r0, r5
 800260a:	d003      	beq.n	8002614 <TIM_OC3_SetConfig+0x30>
 800260c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002610:	42a8      	cmp	r0, r5
 8002612:	d114      	bne.n	800263e <TIM_OC3_SetConfig+0x5a>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002614:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8002616:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800261a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800261e:	4d0b      	ldr	r5, [pc, #44]	; (800264c <TIM_OC3_SetConfig+0x68>)
 8002620:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 8002622:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002626:	d003      	beq.n	8002630 <TIM_OC3_SetConfig+0x4c>
 8002628:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800262c:	42a8      	cmp	r0, r5
 800262e:	d106      	bne.n	800263e <TIM_OC3_SetConfig+0x5a>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002630:	694d      	ldr	r5, [r1, #20]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002632:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002634:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002638:	4335      	orrs	r5, r6
 800263a:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800263e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002640:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002642:	684a      	ldr	r2, [r1, #4]
 8002644:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002646:	6203      	str	r3, [r0, #32]
 8002648:	bd70      	pop	{r4, r5, r6, pc}
 800264a:	bf00      	nop
 800264c:	40010000 	.word	0x40010000

08002650 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002650:	6a03      	ldr	r3, [r0, #32]
 8002652:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002656:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002658:	6a03      	ldr	r3, [r0, #32]
{
 800265a:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800265c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800265e:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002660:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002662:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002666:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800266a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 800266c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002670:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002674:	4d08      	ldr	r5, [pc, #32]	; (8002698 <TIM_OC4_SetConfig+0x48>)
 8002676:	42a8      	cmp	r0, r5
 8002678:	d003      	beq.n	8002682 <TIM_OC4_SetConfig+0x32>
 800267a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800267e:	42a8      	cmp	r0, r5
 8002680:	d104      	bne.n	800268c <TIM_OC4_SetConfig+0x3c>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002682:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002684:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002688:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800268c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800268e:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002690:	684a      	ldr	r2, [r1, #4]
 8002692:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002694:	6203      	str	r3, [r0, #32]
 8002696:	bd30      	pop	{r4, r5, pc}
 8002698:	40010000 	.word	0x40010000

0800269c <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800269c:	6803      	ldr	r3, [r0, #0]
 800269e:	68da      	ldr	r2, [r3, #12]
 80026a0:	f042 0201 	orr.w	r2, r2, #1
 80026a4:	60da      	str	r2, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026a6:	689a      	ldr	r2, [r3, #8]
 80026a8:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026ac:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 80026ae:	bf1e      	ittt	ne
 80026b0:	681a      	ldrne	r2, [r3, #0]
 80026b2:	f042 0201 	orrne.w	r2, r2, #1
 80026b6:	601a      	strne	r2, [r3, #0]
}
 80026b8:	2000      	movs	r0, #0
 80026ba:	4770      	bx	lr

080026bc <HAL_TIM_OC_DelayElapsedCallback>:
 80026bc:	4770      	bx	lr

080026be <HAL_TIM_IC_CaptureCallback>:
 80026be:	4770      	bx	lr

080026c0 <HAL_TIM_PWM_PulseFinishedCallback>:
 80026c0:	4770      	bx	lr

080026c2 <HAL_TIM_TriggerCallback>:
 80026c2:	4770      	bx	lr

080026c4 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80026c4:	6803      	ldr	r3, [r0, #0]
 80026c6:	691a      	ldr	r2, [r3, #16]
 80026c8:	0791      	lsls	r1, r2, #30
{
 80026ca:	b510      	push	{r4, lr}
 80026cc:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80026ce:	d50e      	bpl.n	80026ee <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80026d0:	68da      	ldr	r2, [r3, #12]
 80026d2:	0792      	lsls	r2, r2, #30
 80026d4:	d50b      	bpl.n	80026ee <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80026d6:	f06f 0202 	mvn.w	r2, #2
 80026da:	611a      	str	r2, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026dc:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026de:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026e0:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026e2:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026e4:	d077      	beq.n	80027d6 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 80026e6:	f7ff ffea 	bl	80026be <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026ea:	2300      	movs	r3, #0
 80026ec:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80026ee:	6823      	ldr	r3, [r4, #0]
 80026f0:	691a      	ldr	r2, [r3, #16]
 80026f2:	0750      	lsls	r0, r2, #29
 80026f4:	d510      	bpl.n	8002718 <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80026f6:	68da      	ldr	r2, [r3, #12]
 80026f8:	0751      	lsls	r1, r2, #29
 80026fa:	d50d      	bpl.n	8002718 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80026fc:	f06f 0204 	mvn.w	r2, #4
 8002700:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002702:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002704:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002706:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800270a:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 800270c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800270e:	d068      	beq.n	80027e2 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8002710:	f7ff ffd5 	bl	80026be <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002714:	2300      	movs	r3, #0
 8002716:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002718:	6823      	ldr	r3, [r4, #0]
 800271a:	691a      	ldr	r2, [r3, #16]
 800271c:	0712      	lsls	r2, r2, #28
 800271e:	d50f      	bpl.n	8002740 <HAL_TIM_IRQHandler+0x7c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002720:	68da      	ldr	r2, [r3, #12]
 8002722:	0710      	lsls	r0, r2, #28
 8002724:	d50c      	bpl.n	8002740 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002726:	f06f 0208 	mvn.w	r2, #8
 800272a:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800272c:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800272e:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002730:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002732:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8002734:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002736:	d05a      	beq.n	80027ee <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8002738:	f7ff ffc1 	bl	80026be <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800273c:	2300      	movs	r3, #0
 800273e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002740:	6823      	ldr	r3, [r4, #0]
 8002742:	691a      	ldr	r2, [r3, #16]
 8002744:	06d2      	lsls	r2, r2, #27
 8002746:	d510      	bpl.n	800276a <HAL_TIM_IRQHandler+0xa6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002748:	68da      	ldr	r2, [r3, #12]
 800274a:	06d0      	lsls	r0, r2, #27
 800274c:	d50d      	bpl.n	800276a <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800274e:	f06f 0210 	mvn.w	r2, #16
 8002752:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002754:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002756:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002758:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800275c:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 800275e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002760:	d04b      	beq.n	80027fa <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8002762:	f7ff ffac 	bl	80026be <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002766:	2300      	movs	r3, #0
 8002768:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800276a:	6823      	ldr	r3, [r4, #0]
 800276c:	691a      	ldr	r2, [r3, #16]
 800276e:	07d1      	lsls	r1, r2, #31
 8002770:	d508      	bpl.n	8002784 <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002772:	68da      	ldr	r2, [r3, #12]
 8002774:	07d2      	lsls	r2, r2, #31
 8002776:	d505      	bpl.n	8002784 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002778:	f06f 0201 	mvn.w	r2, #1
 800277c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800277e:	4620      	mov	r0, r4
 8002780:	f001 fb3e 	bl	8003e00 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002784:	6823      	ldr	r3, [r4, #0]
 8002786:	691a      	ldr	r2, [r3, #16]
 8002788:	0610      	lsls	r0, r2, #24
 800278a:	d508      	bpl.n	800279e <HAL_TIM_IRQHandler+0xda>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800278c:	68da      	ldr	r2, [r3, #12]
 800278e:	0611      	lsls	r1, r2, #24
 8002790:	d505      	bpl.n	800279e <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002792:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002796:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002798:	4620      	mov	r0, r4
 800279a:	f000 face 	bl	8002d3a <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800279e:	6823      	ldr	r3, [r4, #0]
 80027a0:	691a      	ldr	r2, [r3, #16]
 80027a2:	0652      	lsls	r2, r2, #25
 80027a4:	d508      	bpl.n	80027b8 <HAL_TIM_IRQHandler+0xf4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80027a6:	68da      	ldr	r2, [r3, #12]
 80027a8:	0650      	lsls	r0, r2, #25
 80027aa:	d505      	bpl.n	80027b8 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80027ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80027b0:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80027b2:	4620      	mov	r0, r4
 80027b4:	f7ff ff85 	bl	80026c2 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80027b8:	6823      	ldr	r3, [r4, #0]
 80027ba:	691a      	ldr	r2, [r3, #16]
 80027bc:	0691      	lsls	r1, r2, #26
 80027be:	d522      	bpl.n	8002806 <HAL_TIM_IRQHandler+0x142>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80027c0:	68da      	ldr	r2, [r3, #12]
 80027c2:	0692      	lsls	r2, r2, #26
 80027c4:	d51f      	bpl.n	8002806 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80027c6:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 80027ca:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80027cc:	611a      	str	r2, [r3, #16]
}
 80027ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 80027d2:	f000 bab1 	b.w	8002d38 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027d6:	f7ff ff71 	bl	80026bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027da:	4620      	mov	r0, r4
 80027dc:	f7ff ff70 	bl	80026c0 <HAL_TIM_PWM_PulseFinishedCallback>
 80027e0:	e783      	b.n	80026ea <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027e2:	f7ff ff6b 	bl	80026bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027e6:	4620      	mov	r0, r4
 80027e8:	f7ff ff6a 	bl	80026c0 <HAL_TIM_PWM_PulseFinishedCallback>
 80027ec:	e792      	b.n	8002714 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027ee:	f7ff ff65 	bl	80026bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027f2:	4620      	mov	r0, r4
 80027f4:	f7ff ff64 	bl	80026c0 <HAL_TIM_PWM_PulseFinishedCallback>
 80027f8:	e7a0      	b.n	800273c <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027fa:	f7ff ff5f 	bl	80026bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027fe:	4620      	mov	r0, r4
 8002800:	f7ff ff5e 	bl	80026c0 <HAL_TIM_PWM_PulseFinishedCallback>
 8002804:	e7af      	b.n	8002766 <HAL_TIM_IRQHandler+0xa2>
 8002806:	bd10      	pop	{r4, pc}

08002808 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002808:	4a30      	ldr	r2, [pc, #192]	; (80028cc <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 800280a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800280c:	4290      	cmp	r0, r2
 800280e:	d012      	beq.n	8002836 <TIM_Base_SetConfig+0x2e>
 8002810:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002814:	d00f      	beq.n	8002836 <TIM_Base_SetConfig+0x2e>
 8002816:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800281a:	4290      	cmp	r0, r2
 800281c:	d00b      	beq.n	8002836 <TIM_Base_SetConfig+0x2e>
 800281e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002822:	4290      	cmp	r0, r2
 8002824:	d007      	beq.n	8002836 <TIM_Base_SetConfig+0x2e>
 8002826:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800282a:	4290      	cmp	r0, r2
 800282c:	d003      	beq.n	8002836 <TIM_Base_SetConfig+0x2e>
 800282e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002832:	4290      	cmp	r0, r2
 8002834:	d119      	bne.n	800286a <TIM_Base_SetConfig+0x62>
    tmpcr1 |= Structure->CounterMode;
 8002836:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002838:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800283c:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800283e:	4a23      	ldr	r2, [pc, #140]	; (80028cc <TIM_Base_SetConfig+0xc4>)
 8002840:	4290      	cmp	r0, r2
 8002842:	d029      	beq.n	8002898 <TIM_Base_SetConfig+0x90>
 8002844:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002848:	d026      	beq.n	8002898 <TIM_Base_SetConfig+0x90>
 800284a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800284e:	4290      	cmp	r0, r2
 8002850:	d022      	beq.n	8002898 <TIM_Base_SetConfig+0x90>
 8002852:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002856:	4290      	cmp	r0, r2
 8002858:	d01e      	beq.n	8002898 <TIM_Base_SetConfig+0x90>
 800285a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800285e:	4290      	cmp	r0, r2
 8002860:	d01a      	beq.n	8002898 <TIM_Base_SetConfig+0x90>
 8002862:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002866:	4290      	cmp	r0, r2
 8002868:	d016      	beq.n	8002898 <TIM_Base_SetConfig+0x90>
 800286a:	4a19      	ldr	r2, [pc, #100]	; (80028d0 <TIM_Base_SetConfig+0xc8>)
 800286c:	4290      	cmp	r0, r2
 800286e:	d013      	beq.n	8002898 <TIM_Base_SetConfig+0x90>
 8002870:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002874:	4290      	cmp	r0, r2
 8002876:	d00f      	beq.n	8002898 <TIM_Base_SetConfig+0x90>
 8002878:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800287c:	4290      	cmp	r0, r2
 800287e:	d00b      	beq.n	8002898 <TIM_Base_SetConfig+0x90>
 8002880:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8002884:	4290      	cmp	r0, r2
 8002886:	d007      	beq.n	8002898 <TIM_Base_SetConfig+0x90>
 8002888:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800288c:	4290      	cmp	r0, r2
 800288e:	d003      	beq.n	8002898 <TIM_Base_SetConfig+0x90>
 8002890:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002894:	4290      	cmp	r0, r2
 8002896:	d103      	bne.n	80028a0 <TIM_Base_SetConfig+0x98>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002898:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800289a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800289e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028a0:	694a      	ldr	r2, [r1, #20]
 80028a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028a6:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80028a8:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028aa:	688b      	ldr	r3, [r1, #8]
 80028ac:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80028ae:	680b      	ldr	r3, [r1, #0]
 80028b0:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028b2:	4b06      	ldr	r3, [pc, #24]	; (80028cc <TIM_Base_SetConfig+0xc4>)
 80028b4:	4298      	cmp	r0, r3
 80028b6:	d003      	beq.n	80028c0 <TIM_Base_SetConfig+0xb8>
 80028b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80028bc:	4298      	cmp	r0, r3
 80028be:	d101      	bne.n	80028c4 <TIM_Base_SetConfig+0xbc>
    TIMx->RCR = Structure->RepetitionCounter;
 80028c0:	690b      	ldr	r3, [r1, #16]
 80028c2:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80028c4:	2301      	movs	r3, #1
 80028c6:	6143      	str	r3, [r0, #20]
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	40010000 	.word	0x40010000
 80028d0:	40014000 	.word	0x40014000

080028d4 <HAL_TIM_Base_Init>:
{
 80028d4:	b510      	push	{r4, lr}
  if (htim == NULL)
 80028d6:	4604      	mov	r4, r0
 80028d8:	b1a0      	cbz	r0, 8002904 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 80028da:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80028de:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80028e2:	b91b      	cbnz	r3, 80028ec <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80028e4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80028e8:	f002 f9e0 	bl	8004cac <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80028ec:	2302      	movs	r3, #2
 80028ee:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028f2:	6820      	ldr	r0, [r4, #0]
 80028f4:	1d21      	adds	r1, r4, #4
 80028f6:	f7ff ff87 	bl	8002808 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80028fa:	2301      	movs	r3, #1
 80028fc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002900:	2000      	movs	r0, #0
 8002902:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002904:	2001      	movs	r0, #1
}
 8002906:	bd10      	pop	{r4, pc}

08002908 <HAL_TIM_PWM_Init>:
{
 8002908:	b510      	push	{r4, lr}
  if (htim == NULL)
 800290a:	4604      	mov	r4, r0
 800290c:	b1a0      	cbz	r0, 8002938 <HAL_TIM_PWM_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 800290e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002912:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002916:	b91b      	cbnz	r3, 8002920 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002918:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800291c:	f002 fa74 	bl	8004e08 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002920:	2302      	movs	r3, #2
 8002922:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002926:	6820      	ldr	r0, [r4, #0]
 8002928:	1d21      	adds	r1, r4, #4
 800292a:	f7ff ff6d 	bl	8002808 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800292e:	2301      	movs	r3, #1
 8002930:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002934:	2000      	movs	r0, #0
 8002936:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002938:	2001      	movs	r0, #1
}
 800293a:	bd10      	pop	{r4, pc}

0800293c <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800293c:	6a03      	ldr	r3, [r0, #32]
 800293e:	f023 0310 	bic.w	r3, r3, #16
 8002942:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002944:	6a03      	ldr	r3, [r0, #32]
{
 8002946:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 =  TIMx->CR2;
 8002948:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800294a:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800294c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800294e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002952:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002956:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8002958:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800295c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002960:	4d10      	ldr	r5, [pc, #64]	; (80029a4 <TIM_OC2_SetConfig+0x68>)
 8002962:	42a8      	cmp	r0, r5
 8002964:	d003      	beq.n	800296e <TIM_OC2_SetConfig+0x32>
 8002966:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800296a:	42a8      	cmp	r0, r5
 800296c:	d114      	bne.n	8002998 <TIM_OC2_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800296e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8002970:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002974:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002978:	4d0a      	ldr	r5, [pc, #40]	; (80029a4 <TIM_OC2_SetConfig+0x68>)
 800297a:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 800297c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002980:	d003      	beq.n	800298a <TIM_OC2_SetConfig+0x4e>
 8002982:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002986:	42a8      	cmp	r0, r5
 8002988:	d106      	bne.n	8002998 <TIM_OC2_SetConfig+0x5c>
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800298a:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800298c:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800298e:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002992:	4335      	orrs	r5, r6
 8002994:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8002998:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800299a:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800299c:	684a      	ldr	r2, [r1, #4]
 800299e:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80029a0:	6203      	str	r3, [r0, #32]
 80029a2:	bd70      	pop	{r4, r5, r6, pc}
 80029a4:	40010000 	.word	0x40010000

080029a8 <HAL_TIM_PWM_ConfigChannel>:
{
 80029a8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80029aa:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80029ae:	2b01      	cmp	r3, #1
{
 80029b0:	4604      	mov	r4, r0
 80029b2:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 80029b6:	d025      	beq.n	8002a04 <HAL_TIM_PWM_ConfigChannel+0x5c>
 80029b8:	2301      	movs	r3, #1
 80029ba:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80029be:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  switch (Channel)
 80029c2:	2a0c      	cmp	r2, #12
 80029c4:	d818      	bhi.n	80029f8 <HAL_TIM_PWM_ConfigChannel+0x50>
 80029c6:	e8df f002 	tbb	[pc, r2]
 80029ca:	1707      	.short	0x1707
 80029cc:	171e1717 	.word	0x171e1717
 80029d0:	172f1717 	.word	0x172f1717
 80029d4:	1717      	.short	0x1717
 80029d6:	40          	.byte	0x40
 80029d7:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80029d8:	6820      	ldr	r0, [r4, #0]
 80029da:	f7ff fdd1 	bl	8002580 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80029de:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80029e0:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80029e2:	699a      	ldr	r2, [r3, #24]
 80029e4:	f042 0208 	orr.w	r2, r2, #8
 80029e8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80029ea:	699a      	ldr	r2, [r3, #24]
 80029ec:	f022 0204 	bic.w	r2, r2, #4
 80029f0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80029f2:	699a      	ldr	r2, [r3, #24]
 80029f4:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80029f6:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 80029f8:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80029fa:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80029fc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002a00:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002a04:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002a06:	6820      	ldr	r0, [r4, #0]
 8002a08:	f7ff ff98 	bl	800293c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002a0c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002a0e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002a10:	699a      	ldr	r2, [r3, #24]
 8002a12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002a18:	699a      	ldr	r2, [r3, #24]
 8002a1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002a20:	699a      	ldr	r2, [r3, #24]
 8002a22:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002a26:	e7e6      	b.n	80029f6 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002a28:	6820      	ldr	r0, [r4, #0]
 8002a2a:	f7ff fddb 	bl	80025e4 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002a2e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002a30:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002a32:	69da      	ldr	r2, [r3, #28]
 8002a34:	f042 0208 	orr.w	r2, r2, #8
 8002a38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002a3a:	69da      	ldr	r2, [r3, #28]
 8002a3c:	f022 0204 	bic.w	r2, r2, #4
 8002a40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002a42:	69da      	ldr	r2, [r3, #28]
 8002a44:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002a46:	61da      	str	r2, [r3, #28]
      break;
 8002a48:	e7d6      	b.n	80029f8 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002a4a:	6820      	ldr	r0, [r4, #0]
 8002a4c:	f7ff fe00 	bl	8002650 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002a50:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002a52:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002a54:	69da      	ldr	r2, [r3, #28]
 8002a56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a5a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002a5c:	69da      	ldr	r2, [r3, #28]
 8002a5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a62:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002a64:	69da      	ldr	r2, [r3, #28]
 8002a66:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002a6a:	e7ec      	b.n	8002a46 <HAL_TIM_PWM_ConfigChannel+0x9e>

08002a6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a6c:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a6e:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a70:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a72:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a76:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8002a7a:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a7c:	6083      	str	r3, [r0, #8]
 8002a7e:	bd10      	pop	{r4, pc}

08002a80 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002a80:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002a84:	2b01      	cmp	r3, #1
{
 8002a86:	b570      	push	{r4, r5, r6, lr}
 8002a88:	4604      	mov	r4, r0
 8002a8a:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8002a8e:	d019      	beq.n	8002ac4 <HAL_TIM_ConfigClockSource+0x44>
  htim->State = HAL_TIM_STATE_BUSY;
 8002a90:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8002a94:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8002a96:	2301      	movs	r3, #1
 8002a98:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8002a9c:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002aa2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8002aa6:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8002aa8:	680b      	ldr	r3, [r1, #0]
 8002aaa:	2b40      	cmp	r3, #64	; 0x40
 8002aac:	d065      	beq.n	8002b7a <HAL_TIM_ConfigClockSource+0xfa>
 8002aae:	d815      	bhi.n	8002adc <HAL_TIM_ConfigClockSource+0x5c>
 8002ab0:	2b10      	cmp	r3, #16
 8002ab2:	d00c      	beq.n	8002ace <HAL_TIM_ConfigClockSource+0x4e>
 8002ab4:	d807      	bhi.n	8002ac6 <HAL_TIM_ConfigClockSource+0x46>
 8002ab6:	b153      	cbz	r3, 8002ace <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 8002ab8:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8002aba:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002abc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002ac0:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002ac4:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8002ac6:	2b20      	cmp	r3, #32
 8002ac8:	d001      	beq.n	8002ace <HAL_TIM_ConfigClockSource+0x4e>
 8002aca:	2b30      	cmp	r3, #48	; 0x30
 8002acc:	d1f4      	bne.n	8002ab8 <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = TIMx->SMCR;
 8002ace:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ad0:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ad4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	e01a      	b.n	8002b12 <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 8002adc:	2b60      	cmp	r3, #96	; 0x60
 8002ade:	d034      	beq.n	8002b4a <HAL_TIM_ConfigClockSource+0xca>
 8002ae0:	d819      	bhi.n	8002b16 <HAL_TIM_ConfigClockSource+0x96>
 8002ae2:	2b50      	cmp	r3, #80	; 0x50
 8002ae4:	d1e8      	bne.n	8002ab8 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ae6:	684a      	ldr	r2, [r1, #4]
 8002ae8:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002aea:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002aec:	6a05      	ldr	r5, [r0, #32]
 8002aee:	f025 0501 	bic.w	r5, r5, #1
 8002af2:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002af4:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002af6:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002afa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002afe:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8002b02:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8002b04:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002b06:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002b08:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b0e:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8002b12:	6083      	str	r3, [r0, #8]
 8002b14:	e7d0      	b.n	8002ab8 <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 8002b16:	2b70      	cmp	r3, #112	; 0x70
 8002b18:	d00c      	beq.n	8002b34 <HAL_TIM_ConfigClockSource+0xb4>
 8002b1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b1e:	d1cb      	bne.n	8002ab8 <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 8002b20:	68cb      	ldr	r3, [r1, #12]
 8002b22:	684a      	ldr	r2, [r1, #4]
 8002b24:	6889      	ldr	r1, [r1, #8]
 8002b26:	f7ff ffa1 	bl	8002a6c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b2a:	6822      	ldr	r2, [r4, #0]
 8002b2c:	6893      	ldr	r3, [r2, #8]
 8002b2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b32:	e008      	b.n	8002b46 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 8002b34:	68cb      	ldr	r3, [r1, #12]
 8002b36:	684a      	ldr	r2, [r1, #4]
 8002b38:	6889      	ldr	r1, [r1, #8]
 8002b3a:	f7ff ff97 	bl	8002a6c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002b3e:	6822      	ldr	r2, [r4, #0]
 8002b40:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b42:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b46:	6093      	str	r3, [r2, #8]
      break;
 8002b48:	e7b6      	b.n	8002ab8 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b4a:	684d      	ldr	r5, [r1, #4]
 8002b4c:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b4e:	6a01      	ldr	r1, [r0, #32]
 8002b50:	f021 0110 	bic.w	r1, r1, #16
 8002b54:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b56:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8002b58:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b5a:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b5e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b62:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b66:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8002b6a:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002b6c:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002b6e:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b74:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8002b78:	e7cb      	b.n	8002b12 <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b7a:	684a      	ldr	r2, [r1, #4]
 8002b7c:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002b7e:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b80:	6a05      	ldr	r5, [r0, #32]
 8002b82:	f025 0501 	bic.w	r5, r5, #1
 8002b86:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b88:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b8a:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b92:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8002b96:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8002b98:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002b9a:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002b9c:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ba2:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8002ba6:	e7b4      	b.n	8002b12 <HAL_TIM_ConfigClockSource+0x92>

08002ba8 <TIM_CCxChannelCmd>:
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002ba8:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002baa:	f001 011f 	and.w	r1, r1, #31
{
 8002bae:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002bb0:	2401      	movs	r4, #1
 8002bb2:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8002bb4:	ea23 0304 	bic.w	r3, r3, r4
 8002bb8:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002bba:	6a03      	ldr	r3, [r0, #32]
 8002bbc:	408a      	lsls	r2, r1
 8002bbe:	431a      	orrs	r2, r3
 8002bc0:	6202      	str	r2, [r0, #32]
 8002bc2:	bd10      	pop	{r4, pc}

08002bc4 <HAL_TIM_PWM_Start>:
{
 8002bc4:	b510      	push	{r4, lr}
 8002bc6:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002bc8:	2201      	movs	r2, #1
 8002bca:	6800      	ldr	r0, [r0, #0]
 8002bcc:	f7ff ffec 	bl	8002ba8 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002bd0:	6823      	ldr	r3, [r4, #0]
 8002bd2:	4a0b      	ldr	r2, [pc, #44]	; (8002c00 <HAL_TIM_PWM_Start+0x3c>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d00e      	beq.n	8002bf6 <HAL_TIM_PWM_Start+0x32>
 8002bd8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d00a      	beq.n	8002bf6 <HAL_TIM_PWM_Start+0x32>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002be0:	689a      	ldr	r2, [r3, #8]
 8002be2:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002be6:	2a06      	cmp	r2, #6
 8002be8:	d003      	beq.n	8002bf2 <HAL_TIM_PWM_Start+0x2e>
    __HAL_TIM_ENABLE(htim);
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	f042 0201 	orr.w	r2, r2, #1
 8002bf0:	601a      	str	r2, [r3, #0]
}
 8002bf2:	2000      	movs	r0, #0
 8002bf4:	bd10      	pop	{r4, pc}
    __HAL_TIM_MOE_ENABLE(htim);
 8002bf6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002bf8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bfc:	645a      	str	r2, [r3, #68]	; 0x44
 8002bfe:	e7ef      	b.n	8002be0 <HAL_TIM_PWM_Start+0x1c>
 8002c00:	40010000 	.word	0x40010000

08002c04 <HAL_TIM_PWM_Stop>:
{
 8002c04:	b510      	push	{r4, lr}
 8002c06:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002c08:	2200      	movs	r2, #0
 8002c0a:	6800      	ldr	r0, [r0, #0]
 8002c0c:	f7ff ffcc 	bl	8002ba8 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c10:	6823      	ldr	r3, [r4, #0]
 8002c12:	4a14      	ldr	r2, [pc, #80]	; (8002c64 <HAL_TIM_PWM_Stop+0x60>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d003      	beq.n	8002c20 <HAL_TIM_PWM_Stop+0x1c>
 8002c18:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d10d      	bne.n	8002c3c <HAL_TIM_PWM_Stop+0x38>
    __HAL_TIM_MOE_DISABLE(htim);
 8002c20:	6a19      	ldr	r1, [r3, #32]
 8002c22:	f241 1211 	movw	r2, #4369	; 0x1111
 8002c26:	4211      	tst	r1, r2
 8002c28:	d108      	bne.n	8002c3c <HAL_TIM_PWM_Stop+0x38>
 8002c2a:	6a19      	ldr	r1, [r3, #32]
 8002c2c:	f240 4244 	movw	r2, #1092	; 0x444
 8002c30:	4211      	tst	r1, r2
 8002c32:	bf02      	ittt	eq
 8002c34:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 8002c36:	f422 4200 	biceq.w	r2, r2, #32768	; 0x8000
 8002c3a:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 8002c3c:	6a19      	ldr	r1, [r3, #32]
 8002c3e:	f241 1211 	movw	r2, #4369	; 0x1111
 8002c42:	4211      	tst	r1, r2
 8002c44:	d108      	bne.n	8002c58 <HAL_TIM_PWM_Stop+0x54>
 8002c46:	6a19      	ldr	r1, [r3, #32]
 8002c48:	f240 4244 	movw	r2, #1092	; 0x444
 8002c4c:	4211      	tst	r1, r2
 8002c4e:	d103      	bne.n	8002c58 <HAL_TIM_PWM_Stop+0x54>
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	f022 0201 	bic.w	r2, r2, #1
 8002c56:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8002c5e:	2000      	movs	r0, #0
 8002c60:	bd10      	pop	{r4, pc}
 8002c62:	bf00      	nop
 8002c64:	40010000 	.word	0x40010000

08002c68 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c68:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002c6c:	2b01      	cmp	r3, #1
{
 8002c6e:	b530      	push	{r4, r5, lr}
 8002c70:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8002c74:	d035      	beq.n	8002ce2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c76:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c7a:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c7c:	680d      	ldr	r5, [r1, #0]
  tmpcr2 = htim->Instance->CR2;
 8002c7e:	685c      	ldr	r4, [r3, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c80:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  __HAL_LOCK(htim);
 8002c84:	2201      	movs	r2, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c86:	432c      	orrs	r4, r5
  __HAL_LOCK(htim);
 8002c88:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8002c8c:	689a      	ldr	r2, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c8e:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c90:	4c15      	ldr	r4, [pc, #84]	; (8002ce8 <HAL_TIMEx_MasterConfigSynchronization+0x80>)
 8002c92:	42a3      	cmp	r3, r4
 8002c94:	d01a      	beq.n	8002ccc <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8002c96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c9a:	d017      	beq.n	8002ccc <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8002c9c:	f5a4 447c 	sub.w	r4, r4, #64512	; 0xfc00
 8002ca0:	42a3      	cmp	r3, r4
 8002ca2:	d013      	beq.n	8002ccc <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8002ca4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002ca8:	42a3      	cmp	r3, r4
 8002caa:	d00f      	beq.n	8002ccc <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8002cac:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002cb0:	42a3      	cmp	r3, r4
 8002cb2:	d00b      	beq.n	8002ccc <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8002cb4:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 8002cb8:	42a3      	cmp	r3, r4
 8002cba:	d007      	beq.n	8002ccc <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8002cbc:	f504 5470 	add.w	r4, r4, #15360	; 0x3c00
 8002cc0:	42a3      	cmp	r3, r4
 8002cc2:	d003      	beq.n	8002ccc <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8002cc4:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 8002cc8:	42a3      	cmp	r3, r4
 8002cca:	d104      	bne.n	8002cd6 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ccc:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002cce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002cd2:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002cd4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002cdc:	2300      	movs	r3, #0
 8002cde:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8002ce2:	4618      	mov	r0, r3

  return HAL_OK;
}
 8002ce4:	bd30      	pop	{r4, r5, pc}
 8002ce6:	bf00      	nop
 8002ce8:	40010000 	.word	0x40010000

08002cec <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002cec:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d01f      	beq.n	8002d34 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002cf4:	68cb      	ldr	r3, [r1, #12]
 8002cf6:	688a      	ldr	r2, [r1, #8]
 8002cf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cfc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002cfe:	684a      	ldr	r2, [r1, #4]
 8002d00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d04:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002d06:	680a      	ldr	r2, [r1, #0]
 8002d08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002d0c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002d0e:	690a      	ldr	r2, [r1, #16]
 8002d10:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d14:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002d16:	694a      	ldr	r2, [r1, #20]
 8002d18:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002d1c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002d1e:	69ca      	ldr	r2, [r1, #28]
 8002d20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d24:	4313      	orrs	r3, r2


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002d26:	6802      	ldr	r2, [r0, #0]
 8002d28:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8002d30:	4618      	mov	r0, r3
 8002d32:	4770      	bx	lr
  __HAL_LOCK(htim);
 8002d34:	2002      	movs	r0, #2
}
 8002d36:	4770      	bx	lr

08002d38 <HAL_TIMEx_CommutCallback>:
 8002d38:	4770      	bx	lr

08002d3a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d3a:	4770      	bx	lr

08002d3c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d3c:	6803      	ldr	r3, [r0, #0]
 8002d3e:	68da      	ldr	r2, [r3, #12]
 8002d40:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002d44:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d46:	695a      	ldr	r2, [r3, #20]
 8002d48:	f022 0201 	bic.w	r2, r2, #1
 8002d4c:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d4e:	2320      	movs	r3, #32
 8002d50:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8002d54:	4770      	bx	lr
	...

08002d58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d58:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d5a:	6803      	ldr	r3, [r0, #0]
 8002d5c:	68c1      	ldr	r1, [r0, #12]
 8002d5e:	691a      	ldr	r2, [r3, #16]
{
 8002d60:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d62:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002d66:	430a      	orrs	r2, r1
 8002d68:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002d6a:	6925      	ldr	r5, [r4, #16]
 8002d6c:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002d6e:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002d70:	69c0      	ldr	r0, [r0, #28]
 8002d72:	432a      	orrs	r2, r5
 8002d74:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8002d76:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002d7a:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 8002d7c:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002d80:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8002d82:	430a      	orrs	r2, r1
 8002d84:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d86:	695a      	ldr	r2, [r3, #20]
 8002d88:	69a1      	ldr	r1, [r4, #24]
 8002d8a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002d8e:	430a      	orrs	r2, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d90:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d94:	615a      	str	r2, [r3, #20]
 8002d96:	4a25      	ldr	r2, [pc, #148]	; (8002e2c <UART_SetConfig+0xd4>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d98:	d129      	bne.n	8002dee <UART_SetConfig+0x96>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d003      	beq.n	8002da6 <UART_SetConfig+0x4e>
 8002d9e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d120      	bne.n	8002de8 <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002da6:	f7fe ff33 	bl	8001c10 <HAL_RCC_GetPCLK2Freq>
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002daa:	6862      	ldr	r2, [r4, #4]
 8002dac:	6825      	ldr	r5, [r4, #0]
 8002dae:	1892      	adds	r2, r2, r2
 8002db0:	f04f 0300 	mov.w	r3, #0
 8002db4:	f04f 0119 	mov.w	r1, #25
 8002db8:	415b      	adcs	r3, r3
 8002dba:	fba0 0101 	umull	r0, r1, r0, r1
 8002dbe:	f7fd ff6f 	bl	8000ca0 <__aeabi_uldivmod>
 8002dc2:	2164      	movs	r1, #100	; 0x64
 8002dc4:	fbb0 f4f1 	udiv	r4, r0, r1
 8002dc8:	fb01 0314 	mls	r3, r1, r4, r0
 8002dcc:	00db      	lsls	r3, r3, #3
 8002dce:	3332      	adds	r3, #50	; 0x32
 8002dd0:	fbb3 f3f1 	udiv	r3, r3, r1
 8002dd4:	f003 0207 	and.w	r2, r3, #7
 8002dd8:	005b      	lsls	r3, r3, #1
 8002dda:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 8002dde:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002de2:	4413      	add	r3, r2
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002de4:	60ab      	str	r3, [r5, #8]
 8002de6:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 8002de8:	f7fe ff02 	bl	8001bf0 <HAL_RCC_GetPCLK1Freq>
 8002dec:	e7dd      	b.n	8002daa <UART_SetConfig+0x52>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d002      	beq.n	8002df8 <UART_SetConfig+0xa0>
 8002df2:	4a0f      	ldr	r2, [pc, #60]	; (8002e30 <UART_SetConfig+0xd8>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d116      	bne.n	8002e26 <UART_SetConfig+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002df8:	f7fe ff0a 	bl	8001c10 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002dfc:	6863      	ldr	r3, [r4, #4]
 8002dfe:	6825      	ldr	r5, [r4, #0]
 8002e00:	2119      	movs	r1, #25
 8002e02:	009a      	lsls	r2, r3, #2
 8002e04:	fba0 0101 	umull	r0, r1, r0, r1
 8002e08:	0f9b      	lsrs	r3, r3, #30
 8002e0a:	f7fd ff49 	bl	8000ca0 <__aeabi_uldivmod>
 8002e0e:	2264      	movs	r2, #100	; 0x64
 8002e10:	fbb0 f1f2 	udiv	r1, r0, r2
 8002e14:	fb02 0311 	mls	r3, r2, r1, r0
 8002e18:	011b      	lsls	r3, r3, #4
 8002e1a:	3332      	adds	r3, #50	; 0x32
 8002e1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002e20:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8002e24:	e7de      	b.n	8002de4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002e26:	f7fe fee3 	bl	8001bf0 <HAL_RCC_GetPCLK1Freq>
 8002e2a:	e7e7      	b.n	8002dfc <UART_SetConfig+0xa4>
 8002e2c:	40011000 	.word	0x40011000
 8002e30:	40011400 	.word	0x40011400

08002e34 <HAL_UART_Init>:
{
 8002e34:	b510      	push	{r4, lr}
  if (huart == NULL)
 8002e36:	4604      	mov	r4, r0
 8002e38:	b340      	cbz	r0, 8002e8c <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8002e3a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002e3e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002e42:	b91b      	cbnz	r3, 8002e4c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002e44:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8002e48:	f002 f90c 	bl	8005064 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8002e4c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002e4e:	2324      	movs	r3, #36	; 0x24
 8002e50:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002e54:	68d3      	ldr	r3, [r2, #12]
 8002e56:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002e5a:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002e5c:	4620      	mov	r0, r4
 8002e5e:	f7ff ff7b 	bl	8002d58 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e62:	6823      	ldr	r3, [r4, #0]
 8002e64:	691a      	ldr	r2, [r3, #16]
 8002e66:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e6a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e6c:	695a      	ldr	r2, [r3, #20]
 8002e6e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e72:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8002e74:	68da      	ldr	r2, [r3, #12]
 8002e76:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e7a:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e7c:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002e7e:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e80:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002e82:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002e86:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8002e8a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002e8c:	2001      	movs	r0, #1
}
 8002e8e:	bd10      	pop	{r4, pc}

08002e90 <HAL_UART_Transmit_DMA>:
{
 8002e90:	b538      	push	{r3, r4, r5, lr}
 8002e92:	4604      	mov	r4, r0
 8002e94:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8002e96:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8002e9a:	2a20      	cmp	r2, #32
 8002e9c:	d12a      	bne.n	8002ef4 <HAL_UART_Transmit_DMA+0x64>
    if ((pData == NULL) || (Size == 0U))
 8002e9e:	b339      	cbz	r1, 8002ef0 <HAL_UART_Transmit_DMA+0x60>
 8002ea0:	b333      	cbz	r3, 8002ef0 <HAL_UART_Transmit_DMA+0x60>
    __HAL_LOCK(huart);
 8002ea2:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8002ea6:	2a01      	cmp	r2, #1
 8002ea8:	d024      	beq.n	8002ef4 <HAL_UART_Transmit_DMA+0x64>
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002eb0:	6b20      	ldr	r0, [r4, #48]	; 0x30
    huart->TxXferCount = Size;
 8002eb2:	84e3      	strh	r3, [r4, #38]	; 0x26
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002eb4:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002eb6:	2221      	movs	r2, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002eb8:	63e5      	str	r5, [r4, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002eba:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002ebe:	4a0e      	ldr	r2, [pc, #56]	; (8002ef8 <HAL_UART_Transmit_DMA+0x68>)
    huart->TxXferSize = Size;
 8002ec0:	84a3      	strh	r3, [r4, #36]	; 0x24
    huart->pTxBuffPtr = pData;
 8002ec2:	6221      	str	r1, [r4, #32]
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002ec4:	63c2      	str	r2, [r0, #60]	; 0x3c
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002ec6:	4a0d      	ldr	r2, [pc, #52]	; (8002efc <HAL_UART_Transmit_DMA+0x6c>)
 8002ec8:	6402      	str	r2, [r0, #64]	; 0x40
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002eca:	4a0d      	ldr	r2, [pc, #52]	; (8002f00 <HAL_UART_Transmit_DMA+0x70>)
 8002ecc:	64c2      	str	r2, [r0, #76]	; 0x4c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8002ece:	6822      	ldr	r2, [r4, #0]
    huart->hdmatx->XferAbortCallback = NULL;
 8002ed0:	6505      	str	r5, [r0, #80]	; 0x50
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8002ed2:	3204      	adds	r2, #4
 8002ed4:	f7fe fb16 	bl	8001504 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8002ed8:	6823      	ldr	r3, [r4, #0]
 8002eda:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ede:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002ee0:	695a      	ldr	r2, [r3, #20]
    __HAL_UNLOCK(huart);
 8002ee2:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002ee6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002eea:	615a      	str	r2, [r3, #20]
    return HAL_OK;
 8002eec:	4628      	mov	r0, r5
 8002eee:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8002ef0:	2001      	movs	r0, #1
 8002ef2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_BUSY;
 8002ef4:	2002      	movs	r0, #2
}
 8002ef6:	bd38      	pop	{r3, r4, r5, pc}
 8002ef8:	08002f95 	.word	0x08002f95
 8002efc:	08002fc3 	.word	0x08002fc3
 8002f00:	0800308f 	.word	0x0800308f

08002f04 <HAL_UART_Receive_DMA>:
{
 8002f04:	4613      	mov	r3, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f06:	f890 203a 	ldrb.w	r2, [r0, #58]	; 0x3a
 8002f0a:	2a20      	cmp	r2, #32
{
 8002f0c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002f0e:	4605      	mov	r5, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f10:	d138      	bne.n	8002f84 <HAL_UART_Receive_DMA+0x80>
    if ((pData == NULL) || (Size == 0U))
 8002f12:	2900      	cmp	r1, #0
 8002f14:	d034      	beq.n	8002f80 <HAL_UART_Receive_DMA+0x7c>
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d032      	beq.n	8002f80 <HAL_UART_Receive_DMA+0x7c>
    __HAL_LOCK(huart);
 8002f1a:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 8002f1e:	2a01      	cmp	r2, #1
 8002f20:	d030      	beq.n	8002f84 <HAL_UART_Receive_DMA+0x80>
 8002f22:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f24:	2400      	movs	r4, #0
    __HAL_LOCK(huart);
 8002f26:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002f2a:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f2c:	63c4      	str	r4, [r0, #60]	; 0x3c
    huart->pRxBuffPtr = pData;
 8002f2e:	6281      	str	r1, [r0, #40]	; 0x28
    huart->RxXferSize = Size;
 8002f30:	8583      	strh	r3, [r0, #44]	; 0x2c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002f32:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002f36:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8002f38:	4a13      	ldr	r2, [pc, #76]	; (8002f88 <HAL_UART_Receive_DMA+0x84>)
 8002f3a:	63c2      	str	r2, [r0, #60]	; 0x3c
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002f3c:	682e      	ldr	r6, [r5, #0]
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002f3e:	4a13      	ldr	r2, [pc, #76]	; (8002f8c <HAL_UART_Receive_DMA+0x88>)
 8002f40:	6402      	str	r2, [r0, #64]	; 0x40
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002f42:	4a13      	ldr	r2, [pc, #76]	; (8002f90 <HAL_UART_Receive_DMA+0x8c>)
 8002f44:	64c2      	str	r2, [r0, #76]	; 0x4c
    huart->hdmarx->XferAbortCallback = NULL;
 8002f46:	6504      	str	r4, [r0, #80]	; 0x50
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002f48:	460a      	mov	r2, r1
 8002f4a:	1d31      	adds	r1, r6, #4
 8002f4c:	f7fe fada 	bl	8001504 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_OREFLAG(huart);
 8002f50:	682b      	ldr	r3, [r5, #0]
 8002f52:	9401      	str	r4, [sp, #4]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	9201      	str	r2, [sp, #4]
 8002f58:	685a      	ldr	r2, [r3, #4]
 8002f5a:	9201      	str	r2, [sp, #4]
 8002f5c:	9a01      	ldr	r2, [sp, #4]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f5e:	68da      	ldr	r2, [r3, #12]
    __HAL_UNLOCK(huart);
 8002f60:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f68:	60da      	str	r2, [r3, #12]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f6a:	695a      	ldr	r2, [r3, #20]
 8002f6c:	f042 0201 	orr.w	r2, r2, #1
 8002f70:	615a      	str	r2, [r3, #20]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f72:	695a      	ldr	r2, [r3, #20]
 8002f74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f78:	615a      	str	r2, [r3, #20]
    return HAL_OK;
 8002f7a:	4620      	mov	r0, r4
}
 8002f7c:	b002      	add	sp, #8
 8002f7e:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002f80:	2001      	movs	r0, #1
 8002f82:	e7fb      	b.n	8002f7c <HAL_UART_Receive_DMA+0x78>
    return HAL_BUSY;
 8002f84:	2002      	movs	r0, #2
 8002f86:	e7f9      	b.n	8002f7c <HAL_UART_Receive_DMA+0x78>
 8002f88:	08002fcf 	.word	0x08002fcf
 8002f8c:	08003085 	.word	0x08003085
 8002f90:	0800308f 	.word	0x0800308f

08002f94 <UART_DMATransmitCplt>:
{
 8002f94:	b508      	push	{r3, lr}
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002f96:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f98:	6b82      	ldr	r2, [r0, #56]	; 0x38
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8002fa0:	d10a      	bne.n	8002fb8 <UART_DMATransmitCplt+0x24>
    huart->TxXferCount = 0x00U;
 8002fa2:	84d3      	strh	r3, [r2, #38]	; 0x26
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002fa4:	6813      	ldr	r3, [r2, #0]
 8002fa6:	695a      	ldr	r2, [r3, #20]
 8002fa8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fac:	615a      	str	r2, [r3, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002fae:	68da      	ldr	r2, [r3, #12]
 8002fb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fb4:	60da      	str	r2, [r3, #12]
 8002fb6:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8002fb8:	4610      	mov	r0, r2
 8002fba:	f001 fb6f 	bl	800469c <HAL_UART_TxCpltCallback>
 8002fbe:	bd08      	pop	{r3, pc}

08002fc0 <HAL_UART_TxHalfCpltCallback>:
 8002fc0:	4770      	bx	lr

08002fc2 <UART_DMATxHalfCplt>:
{
 8002fc2:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8002fc4:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8002fc6:	f7ff fffb 	bl	8002fc0 <HAL_UART_TxHalfCpltCallback>
 8002fca:	bd08      	pop	{r3, pc}

08002fcc <HAL_UART_RxCpltCallback>:
 8002fcc:	4770      	bx	lr

08002fce <UART_DMAReceiveCplt>:
{
 8002fce:	b508      	push	{r3, lr}
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002fd0:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fd2:	6b82      	ldr	r2, [r0, #56]	; 0x38
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8002fda:	d110      	bne.n	8002ffe <UART_DMAReceiveCplt+0x30>
    huart->RxXferCount = 0U;
 8002fdc:	85d3      	strh	r3, [r2, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002fde:	6813      	ldr	r3, [r2, #0]
 8002fe0:	68d9      	ldr	r1, [r3, #12]
 8002fe2:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8002fe6:	60d9      	str	r1, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fe8:	6959      	ldr	r1, [r3, #20]
 8002fea:	f021 0101 	bic.w	r1, r1, #1
 8002fee:	6159      	str	r1, [r3, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ff0:	6959      	ldr	r1, [r3, #20]
 8002ff2:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8002ff6:	6159      	str	r1, [r3, #20]
    huart->RxState = HAL_UART_STATE_READY;
 8002ff8:	2320      	movs	r3, #32
 8002ffa:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
  HAL_UART_RxCpltCallback(huart);
 8002ffe:	4610      	mov	r0, r2
 8003000:	f7ff ffe4 	bl	8002fcc <HAL_UART_RxCpltCallback>
 8003004:	bd08      	pop	{r3, pc}

08003006 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003006:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 800300a:	2b22      	cmp	r3, #34	; 0x22
{
 800300c:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800300e:	d136      	bne.n	800307e <UART_Receive_IT+0x78>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003010:	6883      	ldr	r3, [r0, #8]
 8003012:	6901      	ldr	r1, [r0, #16]
 8003014:	6802      	ldr	r2, [r0, #0]
 8003016:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800301a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800301c:	d123      	bne.n	8003066 <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800301e:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003020:	b9e9      	cbnz	r1, 800305e <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003022:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003026:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 800302a:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 800302c:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 800302e:	3c01      	subs	r4, #1
 8003030:	b2a4      	uxth	r4, r4
 8003032:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8003034:	b98c      	cbnz	r4, 800305a <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003036:	6803      	ldr	r3, [r0, #0]
 8003038:	68da      	ldr	r2, [r3, #12]
 800303a:	f022 0220 	bic.w	r2, r2, #32
 800303e:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003040:	68da      	ldr	r2, [r3, #12]
 8003042:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003046:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003048:	695a      	ldr	r2, [r3, #20]
 800304a:	f022 0201 	bic.w	r2, r2, #1
 800304e:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8003050:	2320      	movs	r3, #32
 8003052:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8003056:	f7ff ffb9 	bl	8002fcc <HAL_UART_RxCpltCallback>
    if (--huart->RxXferCount == 0U)
 800305a:	2000      	movs	r0, #0
}
 800305c:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800305e:	b2d2      	uxtb	r2, r2
 8003060:	f823 2b01 	strh.w	r2, [r3], #1
 8003064:	e7e1      	b.n	800302a <UART_Receive_IT+0x24>
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003066:	b921      	cbnz	r1, 8003072 <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003068:	1c59      	adds	r1, r3, #1
 800306a:	6852      	ldr	r2, [r2, #4]
 800306c:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800306e:	701a      	strb	r2, [r3, #0]
 8003070:	e7dc      	b.n	800302c <UART_Receive_IT+0x26>
 8003072:	6852      	ldr	r2, [r2, #4]
 8003074:	1c59      	adds	r1, r3, #1
 8003076:	6281      	str	r1, [r0, #40]	; 0x28
 8003078:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800307c:	e7f7      	b.n	800306e <UART_Receive_IT+0x68>
    return HAL_BUSY;
 800307e:	2002      	movs	r0, #2
 8003080:	bd10      	pop	{r4, pc}

08003082 <HAL_UART_RxHalfCpltCallback>:
 8003082:	4770      	bx	lr

08003084 <UART_DMARxHalfCplt>:
{
 8003084:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart);
 8003086:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8003088:	f7ff fffb 	bl	8003082 <HAL_UART_RxHalfCpltCallback>
 800308c:	bd08      	pop	{r3, pc}

0800308e <UART_DMAError>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800308e:	6b81      	ldr	r1, [r0, #56]	; 0x38
{
 8003090:	b508      	push	{r3, lr}
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003092:	680b      	ldr	r3, [r1, #0]
 8003094:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003096:	f891 0039 	ldrb.w	r0, [r1, #57]	; 0x39
 800309a:	2821      	cmp	r0, #33	; 0x21
 800309c:	d10a      	bne.n	80030b4 <UART_DMAError+0x26>
 800309e:	0612      	lsls	r2, r2, #24
 80030a0:	d508      	bpl.n	80030b4 <UART_DMAError+0x26>
    huart->TxXferCount = 0x00U;
 80030a2:	2200      	movs	r2, #0
 80030a4:	84ca      	strh	r2, [r1, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80030a6:	68da      	ldr	r2, [r3, #12]
 80030a8:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80030ac:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80030ae:	2220      	movs	r2, #32
 80030b0:	f881 2039 	strb.w	r2, [r1, #57]	; 0x39
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80030b4:	695b      	ldr	r3, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80030b6:	f891 203a 	ldrb.w	r2, [r1, #58]	; 0x3a
 80030ba:	2a22      	cmp	r2, #34	; 0x22
 80030bc:	d106      	bne.n	80030cc <UART_DMAError+0x3e>
 80030be:	065b      	lsls	r3, r3, #25
 80030c0:	d504      	bpl.n	80030cc <UART_DMAError+0x3e>
    huart->RxXferCount = 0x00U;
 80030c2:	2300      	movs	r3, #0
 80030c4:	85cb      	strh	r3, [r1, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80030c6:	4608      	mov	r0, r1
 80030c8:	f7ff fe38 	bl	8002d3c <UART_EndRxTransfer>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80030cc:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 80030ce:	f043 0310 	orr.w	r3, r3, #16
 80030d2:	63cb      	str	r3, [r1, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 80030d4:	4608      	mov	r0, r1
 80030d6:	f001 fa3b 	bl	8004550 <HAL_UART_ErrorCallback>
 80030da:	bd08      	pop	{r3, pc}

080030dc <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80030dc:	6803      	ldr	r3, [r0, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80030e0:	68d9      	ldr	r1, [r3, #12]
{
 80030e2:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 80030e4:	0716      	lsls	r6, r2, #28
{
 80030e6:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80030e8:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 80030ea:	d107      	bne.n	80030fc <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80030ec:	0696      	lsls	r6, r2, #26
 80030ee:	d55c      	bpl.n	80031aa <HAL_UART_IRQHandler+0xce>
 80030f0:	068d      	lsls	r5, r1, #26
 80030f2:	d55a      	bpl.n	80031aa <HAL_UART_IRQHandler+0xce>
}
 80030f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 80030f8:	f7ff bf85 	b.w	8003006 <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80030fc:	f015 0501 	ands.w	r5, r5, #1
 8003100:	d102      	bne.n	8003108 <HAL_UART_IRQHandler+0x2c>
 8003102:	f411 7f90 	tst.w	r1, #288	; 0x120
 8003106:	d050      	beq.n	80031aa <HAL_UART_IRQHandler+0xce>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003108:	07d0      	lsls	r0, r2, #31
 800310a:	d505      	bpl.n	8003118 <HAL_UART_IRQHandler+0x3c>
 800310c:	05cb      	lsls	r3, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800310e:	bf42      	ittt	mi
 8003110:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8003112:	f043 0301 	orrmi.w	r3, r3, #1
 8003116:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003118:	0756      	lsls	r6, r2, #29
 800311a:	d504      	bpl.n	8003126 <HAL_UART_IRQHandler+0x4a>
 800311c:	b11d      	cbz	r5, 8003126 <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800311e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003120:	f043 0302 	orr.w	r3, r3, #2
 8003124:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003126:	0790      	lsls	r0, r2, #30
 8003128:	d504      	bpl.n	8003134 <HAL_UART_IRQHandler+0x58>
 800312a:	b11d      	cbz	r5, 8003134 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800312c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800312e:	f043 0304 	orr.w	r3, r3, #4
 8003132:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003134:	0713      	lsls	r3, r2, #28
 8003136:	d506      	bpl.n	8003146 <HAL_UART_IRQHandler+0x6a>
 8003138:	068e      	lsls	r6, r1, #26
 800313a:	d400      	bmi.n	800313e <HAL_UART_IRQHandler+0x62>
 800313c:	b11d      	cbz	r5, 8003146 <HAL_UART_IRQHandler+0x6a>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800313e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003140:	f043 0308 	orr.w	r3, r3, #8
 8003144:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003146:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003148:	2b00      	cmp	r3, #0
 800314a:	d066      	beq.n	800321a <HAL_UART_IRQHandler+0x13e>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800314c:	0695      	lsls	r5, r2, #26
 800314e:	d504      	bpl.n	800315a <HAL_UART_IRQHandler+0x7e>
 8003150:	0688      	lsls	r0, r1, #26
 8003152:	d502      	bpl.n	800315a <HAL_UART_IRQHandler+0x7e>
        UART_Receive_IT(huart);
 8003154:	4620      	mov	r0, r4
 8003156:	f7ff ff56 	bl	8003006 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800315a:	6823      	ldr	r3, [r4, #0]
 800315c:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800315e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003160:	0711      	lsls	r1, r2, #28
        UART_EndRxTransfer(huart);
 8003162:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003164:	d402      	bmi.n	800316c <HAL_UART_IRQHandler+0x90>
 8003166:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 800316a:	d01a      	beq.n	80031a2 <HAL_UART_IRQHandler+0xc6>
        UART_EndRxTransfer(huart);
 800316c:	f7ff fde6 	bl	8002d3c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003170:	6823      	ldr	r3, [r4, #0]
 8003172:	695a      	ldr	r2, [r3, #20]
 8003174:	0652      	lsls	r2, r2, #25
 8003176:	d510      	bpl.n	800319a <HAL_UART_IRQHandler+0xbe>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003178:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 800317a:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800317c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003180:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8003182:	b150      	cbz	r0, 800319a <HAL_UART_IRQHandler+0xbe>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003184:	4b25      	ldr	r3, [pc, #148]	; (800321c <HAL_UART_IRQHandler+0x140>)
 8003186:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003188:	f7fe f9f6 	bl	8001578 <HAL_DMA_Abort_IT>
 800318c:	2800      	cmp	r0, #0
 800318e:	d044      	beq.n	800321a <HAL_UART_IRQHandler+0x13e>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003190:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8003192:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003196:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003198:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 800319a:	4620      	mov	r0, r4
 800319c:	f001 f9d8 	bl	8004550 <HAL_UART_ErrorCallback>
 80031a0:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 80031a2:	f001 f9d5 	bl	8004550 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031a6:	63e5      	str	r5, [r4, #60]	; 0x3c
 80031a8:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80031aa:	0616      	lsls	r6, r2, #24
 80031ac:	d527      	bpl.n	80031fe <HAL_UART_IRQHandler+0x122>
 80031ae:	060d      	lsls	r5, r1, #24
 80031b0:	d525      	bpl.n	80031fe <HAL_UART_IRQHandler+0x122>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80031b2:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 80031b6:	2a21      	cmp	r2, #33	; 0x21
 80031b8:	d12f      	bne.n	800321a <HAL_UART_IRQHandler+0x13e>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80031ba:	68a2      	ldr	r2, [r4, #8]
 80031bc:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80031c0:	6a22      	ldr	r2, [r4, #32]
 80031c2:	d117      	bne.n	80031f4 <HAL_UART_IRQHandler+0x118>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80031c4:	8811      	ldrh	r1, [r2, #0]
 80031c6:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80031ca:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80031cc:	6921      	ldr	r1, [r4, #16]
 80031ce:	b979      	cbnz	r1, 80031f0 <HAL_UART_IRQHandler+0x114>
        huart->pTxBuffPtr += 2U;
 80031d0:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 80031d2:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 80031d4:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80031d6:	3a01      	subs	r2, #1
 80031d8:	b292      	uxth	r2, r2
 80031da:	84e2      	strh	r2, [r4, #38]	; 0x26
 80031dc:	b9ea      	cbnz	r2, 800321a <HAL_UART_IRQHandler+0x13e>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80031de:	68da      	ldr	r2, [r3, #12]
 80031e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031e4:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80031e6:	68da      	ldr	r2, [r3, #12]
 80031e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031ec:	60da      	str	r2, [r3, #12]
 80031ee:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 80031f0:	3201      	adds	r2, #1
 80031f2:	e7ee      	b.n	80031d2 <HAL_UART_IRQHandler+0xf6>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80031f4:	1c51      	adds	r1, r2, #1
 80031f6:	6221      	str	r1, [r4, #32]
 80031f8:	7812      	ldrb	r2, [r2, #0]
 80031fa:	605a      	str	r2, [r3, #4]
 80031fc:	e7ea      	b.n	80031d4 <HAL_UART_IRQHandler+0xf8>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80031fe:	0650      	lsls	r0, r2, #25
 8003200:	d50b      	bpl.n	800321a <HAL_UART_IRQHandler+0x13e>
 8003202:	064a      	lsls	r2, r1, #25
 8003204:	d509      	bpl.n	800321a <HAL_UART_IRQHandler+0x13e>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003206:	68da      	ldr	r2, [r3, #12]
 8003208:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800320c:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800320e:	2320      	movs	r3, #32
 8003210:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8003214:	4620      	mov	r0, r4
 8003216:	f001 fa41 	bl	800469c <HAL_UART_TxCpltCallback>
 800321a:	bd70      	pop	{r4, r5, r6, pc}
 800321c:	08003221 	.word	0x08003221

08003220 <UART_DMAAbortOnError>:
{
 8003220:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003222:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 8003224:	2300      	movs	r3, #0
 8003226:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003228:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 800322a:	f001 f991 	bl	8004550 <HAL_UART_ErrorCallback>
 800322e:	bd08      	pop	{r3, pc}

08003230 <Leg_Init>:
{
  float t1;

  hleg->hservoH=hservoH;
  hleg->hservoM=hservoM;
  hleg->hservoL=hservoL;
 8003230:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  hleg->reverse=reverse;
 8003234:	9b00      	ldr	r3, [sp, #0]
 8003236:	60c3      	str	r3, [r0, #12]

  // Set start position
  t1=(LEG_LENGTH_L-LEG_HEIGHT)*(LEG_LENGTH_L-LEG_HEIGHT);
  hleg->span_min=LEG_LENGTH_H+sqrtf(LEG_LENGTH_M*LEG_LENGTH_M-t1);
 8003238:	4b06      	ldr	r3, [pc, #24]	; (8003254 <Leg_Init+0x24>)
 800323a:	6243      	str	r3, [r0, #36]	; 0x24
  t1=(LEG_LENGTH_M+LEG_LENGTH_L)*(LEG_LENGTH_M+LEG_LENGTH_L);
  hleg->span_max=LEG_LENGTH_H+sqrtf(t1-LEG_HEIGHT*LEG_HEIGHT);
 800323c:	4b06      	ldr	r3, [pc, #24]	; (8003258 <Leg_Init+0x28>)
 800323e:	6283      	str	r3, [r0, #40]	; 0x28
  hleg->origin_y=hleg->span_max*cosf(SERVO_ANGLE_MAX);
 8003240:	4b06      	ldr	r3, [pc, #24]	; (800325c <Leg_Init+0x2c>)
 8003242:	6203      	str	r3, [r0, #32]
  hleg->origin_x=hleg->span_max*sinf(SERVO_ANGLE_MAX);
 8003244:	61c3      	str	r3, [r0, #28]
  hleg->x_min=-hleg->origin_x;
 8003246:	4a06      	ldr	r2, [pc, #24]	; (8003260 <Leg_Init+0x30>)
  hleg->x_max=hleg->origin_x;
 8003248:	6303      	str	r3, [r0, #48]	; 0x30
  hleg->x_amplitude=2*hleg->origin_x;
 800324a:	4b06      	ldr	r3, [pc, #24]	; (8003264 <Leg_Init+0x34>)
  hleg->x_min=-hleg->origin_x;
 800324c:	62c2      	str	r2, [r0, #44]	; 0x2c
  hleg->x_amplitude=2*hleg->origin_x;
 800324e:	6343      	str	r3, [r0, #52]	; 0x34
 8003250:	4770      	bx	lr
 8003252:	bf00      	nop
 8003254:	42b175ac 	.word	0x42b175ac
 8003258:	42faff27 	.word	0x42faff27
 800325c:	42b17b41 	.word	0x42b17b41
 8003260:	c2b17b41 	.word	0xc2b17b41
 8003264:	43317b41 	.word	0x43317b41

08003268 <Leg_Start>:

/**********************************************************
 * @brief Activate leg
 */
void Leg_Start(t_leg * hleg)
{
 8003268:	b510      	push	{r4, lr}
 800326a:	4604      	mov	r4, r0
  Servo_Start(hleg->hservoH);
 800326c:	6800      	ldr	r0, [r0, #0]
 800326e:	f001 fb8f 	bl	8004990 <Servo_Start>
  Servo_Start(hleg->hservoM);
 8003272:	6860      	ldr	r0, [r4, #4]
 8003274:	f001 fb8c 	bl	8004990 <Servo_Start>
  Servo_Start(hleg->hservoL);
 8003278:	68a0      	ldr	r0, [r4, #8]
}
 800327a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  Servo_Start(hleg->hservoL);
 800327e:	f001 bb87 	b.w	8004990 <Servo_Start>

08003282 <Leg_Stop>:

/**********************************************************
 * @brief Desactivate leg
 */
void Leg_Stop(t_leg * hleg)
{
 8003282:	b510      	push	{r4, lr}
 8003284:	4604      	mov	r4, r0
  Servo_Stop(hleg->hservoH);
 8003286:	6800      	ldr	r0, [r0, #0]
 8003288:	f001 fb85 	bl	8004996 <Servo_Stop>
  Servo_Stop(hleg->hservoM);
 800328c:	6860      	ldr	r0, [r4, #4]
 800328e:	f001 fb82 	bl	8004996 <Servo_Stop>
  Servo_Stop(hleg->hservoL);
 8003292:	68a0      	ldr	r0, [r4, #8]
}
 8003294:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  Servo_Stop(hleg->hservoL);
 8003298:	f001 bb7d 	b.w	8004996 <Servo_Stop>
 800329c:	0000      	movs	r0, r0
	...

080032a0 <Leg_SetPos>:

/**********************************************************
 *
 */
void Leg_SetPos(t_leg *hleg, float x, float y, float z)
{
 80032a0:	b510      	push	{r4, lr}
 80032a2:	4604      	mov	r4, r0
 80032a4:	ed2d 8b06 	vpush	{d8-d10}
  float alpha_h;
  float alpha_m;
  float alpha_l;
  float t1, t2;

  hleg->x=x;
 80032a8:	ed84 0a04 	vstr	s0, [r4, #16]
{
 80032ac:	eeb0 9a40 	vmov.f32	s18, s0
  hleg->y=y;
  hleg->z=z;

  // rho and angle
  rho=sqrtf(x*x+y*y);
 80032b0:	ee20 0aa0 	vmul.f32	s0, s1, s1
{
 80032b4:	b082      	sub	sp, #8
  hleg->y=y;
 80032b6:	edc4 0a05 	vstr	s1, [r4, #20]
  hleg->z=z;
 80032ba:	ed84 1a06 	vstr	s2, [r4, #24]
  rho=sqrtf(x*x+y*y);
 80032be:	eea9 0a09 	vfma.f32	s0, s18, s18
{
 80032c2:	eeb0 8a60 	vmov.f32	s16, s1
 80032c6:	eef0 8a41 	vmov.f32	s17, s2
  rho=sqrtf(x*x+y*y);
 80032ca:	f003 fc27 	bl	8006b1c <sqrtf>
  if(hleg->reverse)
 80032ce:	68e3      	ldr	r3, [r4, #12]
  rho=sqrtf(x*x+y*y);
 80032d0:	eef0 9a40 	vmov.f32	s19, s0
 80032d4:	ee89 0a08 	vdiv.f32	s0, s18, s16
  if(hleg->reverse)
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d06b      	beq.n	80033b4 <Leg_SetPos+0x114>
    alpha_h=-atanf(x/y);
 80032dc:	f003 fa52 	bl	8006784 <atanf>
 80032e0:	eeb1 aa40 	vneg.f32	s20, s0
  else
    alpha_h=atanf(x/y);

  c=sqrtf(rho*rho+z*z);
 80032e4:	ee28 0aa8 	vmul.f32	s0, s17, s17
 80032e8:	eea9 0aa9 	vfma.f32	s0, s19, s19
 80032ec:	f003 fc16 	bl	8006b1c <sqrtf>
  t1=c*c-LEG_LENGTH_M*LEG_LENGTH_M-LEG_LENGTH_L*LEG_LENGTH_L;
 80032f0:	ee60 7a00 	vmul.f32	s15, s0, s0
  c=sqrtf(rho*rho+z*z);
 80032f4:	eeb0 9a40 	vmov.f32	s18, s0
  t1=c*c-LEG_LENGTH_M*LEG_LENGTH_M-LEG_LENGTH_L*LEG_LENGTH_L;
 80032f8:	ee17 0a90 	vmov	r0, s15
 80032fc:	f7fd f954 	bl	80005a8 <__aeabi_f2d>
 8003300:	2200      	movs	r2, #0
 8003302:	4b33      	ldr	r3, [pc, #204]	; (80033d0 <Leg_SetPos+0x130>)
 8003304:	f7fc fff0 	bl	80002e8 <__aeabi_dsub>
 8003308:	a32d      	add	r3, pc, #180	; (adr r3, 80033c0 <Leg_SetPos+0x120>)
 800330a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800330e:	f7fc ffeb 	bl	80002e8 <__aeabi_dsub>
 8003312:	f7fd fc75 	bl	8000c00 <__aeabi_d2f>
  t2=2.*c*LEG_LENGTH_M;
  alpha_m=atanf(z/rho)-acosf(t1/t2);
 8003316:	ee88 0aa9 	vdiv.f32	s0, s17, s19
  t1=c*c-LEG_LENGTH_M*LEG_LENGTH_M-LEG_LENGTH_L*LEG_LENGTH_L;
 800331a:	ee08 0a10 	vmov	s16, r0
  alpha_m=atanf(z/rho)-acosf(t1/t2);
 800331e:	f003 fa31 	bl	8006784 <atanf>
  t2=2.*c*LEG_LENGTH_M;
 8003322:	ee19 0a10 	vmov	r0, s18
  alpha_m=atanf(z/rho)-acosf(t1/t2);
 8003326:	eef0 8a40 	vmov.f32	s17, s0
  t2=2.*c*LEG_LENGTH_M;
 800332a:	f7fd f93d 	bl	80005a8 <__aeabi_f2d>
 800332e:	4602      	mov	r2, r0
 8003330:	460b      	mov	r3, r1
 8003332:	f7fc ffdb 	bl	80002ec <__adddf3>
 8003336:	2200      	movs	r2, #0
 8003338:	4b26      	ldr	r3, [pc, #152]	; (80033d4 <Leg_SetPos+0x134>)
 800333a:	f7fd f989 	bl	8000650 <__aeabi_dmul>
 800333e:	f7fd fc5f 	bl	8000c00 <__aeabi_d2f>
  alpha_m=atanf(z/rho)-acosf(t1/t2);
 8003342:	ee07 0a90 	vmov	s15, r0
 8003346:	ee88 0a27 	vdiv.f32	s0, s16, s15
 800334a:	f003 fb8f 	bl	8006a6c <acosf>

  t2=2.*LEG_LENGTH_M*LEG_LENGTH_L;
  alpha_l=M_PI-acos(-t1/t2);
 800334e:	eddf 7a22 	vldr	s15, [pc, #136]	; 80033d8 <Leg_SetPos+0x138>
 8003352:	eeb1 8a48 	vneg.f32	s16, s16
 8003356:	ee88 7a27 	vdiv.f32	s14, s16, s15
  alpha_m=atanf(z/rho)-acosf(t1/t2);
 800335a:	ee78 8ac0 	vsub.f32	s17, s17, s0
  alpha_l=M_PI-acos(-t1/t2);
 800335e:	ee17 0a10 	vmov	r0, s14
 8003362:	f7fd f921 	bl	80005a8 <__aeabi_f2d>
 8003366:	ec41 0b10 	vmov	d0, r0, r1
 800336a:	f003 fb27 	bl	80069bc <acos>
 800336e:	ec53 2b10 	vmov	r2, r3, d0

  Servo_SetAngle(hleg->hservoH, alpha_h);
 8003372:	6820      	ldr	r0, [r4, #0]
 8003374:	eeb0 0a4a 	vmov.f32	s0, s20
  alpha_l=M_PI-acos(-t1/t2);
 8003378:	e9cd 2300 	strd	r2, r3, [sp]
  Servo_SetAngle(hleg->hservoH, alpha_h);
 800337c:	f001 fb20 	bl	80049c0 <Servo_SetAngle>
  Servo_SetAngle(hleg->hservoM, -alpha_m);
 8003380:	eeb1 0a68 	vneg.f32	s0, s17
 8003384:	6860      	ldr	r0, [r4, #4]
 8003386:	f001 fb1b 	bl	80049c0 <Servo_SetAngle>
  alpha_l=M_PI-acos(-t1/t2);
 800338a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800338e:	a10e      	add	r1, pc, #56	; (adr r1, 80033c8 <Leg_SetPos+0x128>)
 8003390:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003394:	f7fc ffa8 	bl	80002e8 <__aeabi_dsub>
 8003398:	f7fd fc32 	bl	8000c00 <__aeabi_d2f>
  Servo_SetAngle(hleg->hservoL, -alpha_l);
 800339c:	ee07 0a90 	vmov	s15, r0
 80033a0:	68a0      	ldr	r0, [r4, #8]
 80033a2:	eeb1 0a67 	vneg.f32	s0, s15
}
 80033a6:	b002      	add	sp, #8
 80033a8:	ecbd 8b06 	vpop	{d8-d10}
 80033ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  Servo_SetAngle(hleg->hservoL, -alpha_l);
 80033b0:	f001 bb06 	b.w	80049c0 <Servo_SetAngle>
    alpha_h=atanf(x/y);
 80033b4:	f003 f9e6 	bl	8006784 <atanf>
 80033b8:	eeb0 aa40 	vmov.f32	s20, s0
 80033bc:	e792      	b.n	80032e4 <Leg_SetPos+0x44>
 80033be:	bf00      	nop
 80033c0:	00000000 	.word	0x00000000
 80033c4:	40b32400 	.word	0x40b32400
 80033c8:	54442d18 	.word	0x54442d18
 80033cc:	400921fb 	.word	0x400921fb
 80033d0:	40990000 	.word	0x40990000
 80033d4:	40440000 	.word	0x40440000
 80033d8:	45af0000 	.word	0x45af0000

080033dc <Leg_Move>:
  float ny;
  float nz;

  nx=hleg->x+dx;
  ny=hleg->y+dy;
  nz=hleg->z+dz;
 80033dc:	edd0 6a06 	vldr	s13, [r0, #24]
  ny=hleg->y+dy;
 80033e0:	ed90 7a05 	vldr	s14, [r0, #20]
  nx=hleg->x+dx;
 80033e4:	edd0 7a04 	vldr	s15, [r0, #16]
  Leg_SetPos(hleg, nx, ny, nz);
 80033e8:	ee31 1a26 	vadd.f32	s2, s2, s13
 80033ec:	ee70 0a87 	vadd.f32	s1, s1, s14
 80033f0:	ee30 0a27 	vadd.f32	s0, s0, s15
 80033f4:	f7ff bf54 	b.w	80032a0 <Leg_SetPos>

080033f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80033f8:	b530      	push	{r4, r5, lr}
 80033fa:	b0ad      	sub	sp, #180	; 0xb4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80033fc:	2234      	movs	r2, #52	; 0x34
 80033fe:	2100      	movs	r1, #0
 8003400:	a808      	add	r0, sp, #32
 8003402:	f002 f878 	bl	80054f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003406:	2214      	movs	r2, #20
 8003408:	2100      	movs	r1, #0
 800340a:	a803      	add	r0, sp, #12
 800340c:	f002 f873 	bl	80054f6 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003410:	2100      	movs	r1, #0
 8003412:	225c      	movs	r2, #92	; 0x5c
 8003414:	a815      	add	r0, sp, #84	; 0x54
 8003416:	f002 f86e 	bl	80054f6 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800341a:	2400      	movs	r4, #0
 800341c:	4b21      	ldr	r3, [pc, #132]	; (80034a4 <SystemClock_Config+0xac>)
 800341e:	9401      	str	r4, [sp, #4]
 8003420:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003422:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003426:	641a      	str	r2, [r3, #64]	; 0x40
 8003428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800342e:	9301      	str	r3, [sp, #4]
 8003430:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003432:	4b1d      	ldr	r3, [pc, #116]	; (80034a8 <SystemClock_Config+0xb0>)
 8003434:	9402      	str	r4, [sp, #8]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800343c:	601a      	str	r2, [r3, #0]
 800343e:	681b      	ldr	r3, [r3, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 8003440:	940a      	str	r4, [sp, #40]	; 0x28
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003442:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003446:	9302      	str	r3, [sp, #8]
 8003448:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800344a:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800344c:	230a      	movs	r3, #10
 800344e:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003450:	2301      	movs	r3, #1
 8003452:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003454:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003456:	2308      	movs	r3, #8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003458:	2210      	movs	r2, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800345a:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLM = 8;
 800345c:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800345e:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLN = 180;
 8003460:	23b4      	movs	r3, #180	; 0xb4
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003462:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLN = 180;
 8003464:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003466:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003468:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800346a:	9513      	str	r5, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800346c:	9514      	str	r5, [sp, #80]	; 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800346e:	f7fe fe2f 	bl	80020d0 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003472:	f7fe fae5 	bl	8001a40 <HAL_PWREx_EnableOverDrive>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003476:	230f      	movs	r3, #15
 8003478:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800347a:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800347c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003480:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003482:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8003484:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003486:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003488:	9405      	str	r4, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800348a:	f7fe fb15 	bl	8001ab8 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800348e:	2320      	movs	r3, #32
 8003490:	9315      	str	r3, [sp, #84]	; 0x54
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003492:	a815      	add	r0, sp, #84	; 0x54
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003494:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003498:	9325      	str	r3, [sp, #148]	; 0x94
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800349a:	f7fe fbc9 	bl	8001c30 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 800349e:	b02d      	add	sp, #180	; 0xb4
 80034a0:	bd30      	pop	{r4, r5, pc}
 80034a2:	bf00      	nop
 80034a4:	40023800 	.word	0x40023800
 80034a8:	40007000 	.word	0x40007000

080034ac <main>:
{
 80034ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034b0:	f5ad 4da4 	sub.w	sp, sp, #20992	; 0x5200
 80034b4:	b085      	sub	sp, #20
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034b6:	f50d 5b26 	add.w	fp, sp, #10624	; 0x2980
 80034ba:	f10b 0b10 	add.w	fp, fp, #16
 80034be:	f1ab 0514 	sub.w	r5, fp, #20

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80034c2:	2400      	movs	r4, #0
 80034c4:	4ebf      	ldr	r6, [pc, #764]	; (80037c4 <main+0x318>)
  htim1.Instance = TIM1;
 80034c6:	f8df 9340 	ldr.w	r9, [pc, #832]	; 8003808 <main+0x35c>
  htim2.Instance = TIM2;
 80034ca:	f8df a340 	ldr.w	sl, [pc, #832]	; 800380c <main+0x360>
  htim3.Instance = TIM3;
 80034ce:	4fbe      	ldr	r7, [pc, #760]	; (80037c8 <main+0x31c>)
  HAL_Init();
 80034d0:	f7fd fd92 	bl	8000ff8 <HAL_Init>
  SystemClock_Config();
 80034d4:	f7ff ff90 	bl	80033f8 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034d8:	2214      	movs	r2, #20
 80034da:	2100      	movs	r1, #0
 80034dc:	4628      	mov	r0, r5
 80034de:	f002 f80a 	bl	80054f6 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80034e2:	9403      	str	r4, [sp, #12]
 80034e4:	6b33      	ldr	r3, [r6, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 80034e6:	48b9      	ldr	r0, [pc, #740]	; (80037cc <main+0x320>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80034e8:	f043 0304 	orr.w	r3, r3, #4
 80034ec:	6333      	str	r3, [r6, #48]	; 0x30
 80034ee:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80034f0:	f003 0304 	and.w	r3, r3, #4
 80034f4:	9303      	str	r3, [sp, #12]
 80034f6:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80034f8:	9404      	str	r4, [sp, #16]
 80034fa:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80034fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003500:	6333      	str	r3, [r6, #48]	; 0x30
 8003502:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8003504:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003508:	9304      	str	r3, [sp, #16]
 800350a:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800350c:	9405      	str	r4, [sp, #20]
 800350e:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8003510:	f043 0301 	orr.w	r3, r3, #1
 8003514:	6333      	str	r3, [r6, #48]	; 0x30
 8003516:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8003518:	f003 0301 	and.w	r3, r3, #1
 800351c:	9305      	str	r3, [sp, #20]
 800351e:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003520:	9406      	str	r4, [sp, #24]
 8003522:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8003524:	f043 0302 	orr.w	r3, r3, #2
 8003528:	6333      	str	r3, [r6, #48]	; 0x30
 800352a:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800352c:	f003 0302 	and.w	r3, r3, #2
 8003530:	9306      	str	r3, [sp, #24]
 8003532:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003534:	9407      	str	r4, [sp, #28]
 8003536:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8003538:	f043 0308 	orr.w	r3, r3, #8
 800353c:	6333      	str	r3, [r6, #48]	; 0x30
 800353e:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8003540:	f003 0308 	and.w	r3, r3, #8
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8003544:	4622      	mov	r2, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003546:	9307      	str	r3, [sp, #28]
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8003548:	2101      	movs	r1, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800354a:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 800354c:	f7fe f9c0 	bl	80018d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, IO_OUT_1_Pin|IO_OUT_2_Pin, GPIO_PIN_RESET);
 8003550:	4622      	mov	r2, r4
 8003552:	2109      	movs	r1, #9
 8003554:	489e      	ldr	r0, [pc, #632]	; (80037d0 <main+0x324>)
 8003556:	f7fe f9bb 	bl	80018d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 800355a:	4622      	mov	r2, r4
 800355c:	f241 0110 	movw	r1, #4112	; 0x1010
 8003560:	489c      	ldr	r0, [pc, #624]	; (80037d4 <main+0x328>)
 8003562:	f7fe f9b5 	bl	80018d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USR_BUTT_Pin */
  GPIO_InitStruct.Pin = USR_BUTT_Pin;
 8003566:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USR_BUTT_GPIO_Port, &GPIO_InitStruct);
 800356a:	4629      	mov	r1, r5
 800356c:	4898      	ldr	r0, [pc, #608]	; (80037d0 <main+0x324>)
  GPIO_InitStruct.Pin = USR_BUTT_Pin;
 800356e:	f84b 3c14 	str.w	r3, [fp, #-20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003572:	606c      	str	r4, [r5, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003574:	60ac      	str	r4, [r5, #8]
  HAL_GPIO_Init(USR_BUTT_GPIO_Port, &GPIO_InitStruct);
 8003576:	f7fe f8cb 	bl	8001710 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED4_Pin */
  GPIO_InitStruct.Pin = LED4_Pin;
 800357a:	2301      	movs	r3, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 800357c:	4629      	mov	r1, r5
 800357e:	4893      	ldr	r0, [pc, #588]	; (80037cc <main+0x320>)
  GPIO_InitStruct.Pin = LED4_Pin;
 8003580:	f84b 3c14 	str.w	r3, [fp, #-20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003584:	606b      	str	r3, [r5, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003586:	60ac      	str	r4, [r5, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003588:	60ec      	str	r4, [r5, #12]
  HAL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 800358a:	f7fe f8c1 	bl	8001710 <HAL_GPIO_Init>

  /*Configure GPIO pin : IO_IN_2_Pin */
  GPIO_InitStruct.Pin = IO_IN_2_Pin;
 800358e:	2302      	movs	r3, #2
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(IO_IN_2_GPIO_Port, &GPIO_InitStruct);
 8003590:	4629      	mov	r1, r5
 8003592:	488e      	ldr	r0, [pc, #568]	; (80037cc <main+0x320>)
  GPIO_InitStruct.Pin = IO_IN_2_Pin;
 8003594:	f84b 3c14 	str.w	r3, [fp, #-20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003598:	606c      	str	r4, [r5, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800359a:	60ac      	str	r4, [r5, #8]
  HAL_GPIO_Init(IO_IN_2_GPIO_Port, &GPIO_InitStruct);
 800359c:	f7fe f8b8 	bl	8001710 <HAL_GPIO_Init>

  /*Configure GPIO pins : IO_OUT_1_Pin IO_OUT_2_Pin */
  GPIO_InitStruct.Pin = IO_OUT_1_Pin|IO_OUT_2_Pin;
 80035a0:	2309      	movs	r3, #9
 80035a2:	f84b 3c14 	str.w	r3, [fp, #-20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035a6:	4629      	mov	r1, r5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035a8:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035aa:	4889      	ldr	r0, [pc, #548]	; (80037d0 <main+0x324>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035ac:	606b      	str	r3, [r5, #4]

  /*Configure GPIO pin : ADC_IN_Pin */
  GPIO_InitStruct.Pin = ADC_IN_Pin;
 80035ae:	f04f 0810 	mov.w	r8, #16
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b2:	60ac      	str	r4, [r5, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035b4:	60ec      	str	r4, [r5, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035b6:	f7fe f8ab 	bl	8001710 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80035ba:	2303      	movs	r3, #3
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(ADC_IN_GPIO_Port, &GPIO_InitStruct);
 80035bc:	4629      	mov	r1, r5
 80035be:	4886      	ldr	r0, [pc, #536]	; (80037d8 <main+0x32c>)
  GPIO_InitStruct.Pin = ADC_IN_Pin;
 80035c0:	f84b 8c14 	str.w	r8, [fp, #-20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80035c4:	606b      	str	r3, [r5, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035c6:	60ac      	str	r4, [r5, #8]
  HAL_GPIO_Init(ADC_IN_GPIO_Port, &GPIO_InitStruct);
 80035c8:	f7fe f8a2 	bl	8001710 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 80035cc:	f241 0310 	movw	r3, #4112	; 0x1010
 80035d0:	f84b 3c14 	str.w	r3, [fp, #-20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035d4:	4629      	mov	r1, r5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035d6:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035d8:	487e      	ldr	r0, [pc, #504]	; (80037d4 <main+0x328>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035da:	606b      	str	r3, [r5, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035dc:	60ac      	str	r4, [r5, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035de:	60ec      	str	r4, [r5, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035e0:	f7fe f896 	bl	8001710 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80035e4:	9402      	str	r4, [sp, #8]
 80035e6:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80035e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80035ec:	6333      	str	r3, [r6, #48]	; 0x30
 80035ee:	6b33      	ldr	r3, [r6, #48]	; 0x30
  hadc1.Instance = ADC1;
 80035f0:	4e7a      	ldr	r6, [pc, #488]	; (80037dc <main+0x330>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 80035f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80035f6:	4622      	mov	r2, r4
 80035f8:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 80035fa:	9302      	str	r3, [sp, #8]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80035fc:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 80035fe:	9b02      	ldr	r3, [sp, #8]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8003600:	f7fd fe94 	bl	800132c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8003604:	200b      	movs	r0, #11
 8003606:	f7fd fec5 	bl	8001394 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800360a:	4622      	mov	r2, r4
 800360c:	4621      	mov	r1, r4
 800360e:	200d      	movs	r0, #13
 8003610:	f7fd fe8c 	bl	800132c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8003614:	200d      	movs	r0, #13
 8003616:	f7fd febd 	bl	8001394 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800361a:	4622      	mov	r2, r4
 800361c:	4621      	mov	r1, r4
 800361e:	200e      	movs	r0, #14
 8003620:	f7fd fe84 	bl	800132c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8003624:	200e      	movs	r0, #14
 8003626:	f7fd feb5 	bl	8001394 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800362a:	4622      	mov	r2, r4
 800362c:	4621      	mov	r1, r4
 800362e:	200f      	movs	r0, #15
 8003630:	f7fd fe7c 	bl	800132c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8003634:	200f      	movs	r0, #15
 8003636:	f7fd fead 	bl	8001394 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800363a:	4622      	mov	r2, r4
 800363c:	4621      	mov	r1, r4
 800363e:	4640      	mov	r0, r8
 8003640:	f7fd fe74 	bl	800132c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8003644:	4640      	mov	r0, r8
 8003646:	f7fd fea5 	bl	8001394 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800364a:	4622      	mov	r2, r4
 800364c:	4621      	mov	r1, r4
 800364e:	2011      	movs	r0, #17
 8003650:	f7fd fe6c 	bl	800132c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8003654:	2011      	movs	r0, #17
 8003656:	f7fd fe9d 	bl	8001394 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 800365a:	4622      	mov	r2, r4
 800365c:	4621      	mov	r1, r4
 800365e:	202f      	movs	r0, #47	; 0x2f
 8003660:	f7fd fe64 	bl	800132c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8003664:	202f      	movs	r0, #47	; 0x2f
 8003666:	f7fd fe95 	bl	8001394 <HAL_NVIC_EnableIRQ>
  ADC_ChannelConfTypeDef sConfig = {0};
 800366a:	4642      	mov	r2, r8
 800366c:	4621      	mov	r1, r4
 800366e:	4628      	mov	r0, r5
 8003670:	f001 ff41 	bl	80054f6 <memset>
  hadc1.Instance = ADC1;
 8003674:	4b5a      	ldr	r3, [pc, #360]	; (80037e0 <main+0x334>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003676:	60b4      	str	r4, [r6, #8]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8003678:	e886 0018 	stmia.w	r6, {r3, r4}
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800367c:	4b59      	ldr	r3, [pc, #356]	; (80037e4 <main+0x338>)
 800367e:	62b3      	str	r3, [r6, #40]	; 0x28
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003680:	4630      	mov	r0, r6
  hadc1.Init.NbrOfConversion = 1;
 8003682:	2301      	movs	r3, #1
  hadc1.Init.ScanConvMode = DISABLE;
 8003684:	6134      	str	r4, [r6, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003686:	7634      	strb	r4, [r6, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003688:	f886 4020 	strb.w	r4, [r6, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800368c:	62f4      	str	r4, [r6, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800368e:	60f4      	str	r4, [r6, #12]
  hadc1.Init.NbrOfConversion = 1;
 8003690:	61f3      	str	r3, [r6, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003692:	f886 4030 	strb.w	r4, [r6, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003696:	6173      	str	r3, [r6, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003698:	f7fd fcee 	bl	8001078 <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_4;
 800369c:	2304      	movs	r3, #4
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800369e:	4629      	mov	r1, r5
  sConfig.Channel = ADC_CHANNEL_4;
 80036a0:	f84b 3c14 	str.w	r3, [fp, #-20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80036a4:	4630      	mov	r0, r6
  sConfig.Rank = 1;
 80036a6:	2301      	movs	r3, #1
 80036a8:	606b      	str	r3, [r5, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80036aa:	60ac      	str	r4, [r5, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80036ac:	f7fd fd8a 	bl	80011c4 <HAL_ADC_ConfigChannel>
  hi2c1.Instance = I2C1;
 80036b0:	484d      	ldr	r0, [pc, #308]	; (80037e8 <main+0x33c>)
  hi2c1.Init.ClockSpeed = 100000;
 80036b2:	4a4e      	ldr	r2, [pc, #312]	; (80037ec <main+0x340>)
 80036b4:	4b4e      	ldr	r3, [pc, #312]	; (80037f0 <main+0x344>)
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80036b6:	6084      	str	r4, [r0, #8]
  hi2c1.Init.ClockSpeed = 100000;
 80036b8:	e880 000c 	stmia.w	r0, {r2, r3}
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80036bc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c1.Init.OwnAddress1 = 0;
 80036c0:	60c4      	str	r4, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80036c2:	6103      	str	r3, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80036c4:	6144      	str	r4, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80036c6:	6184      	str	r4, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80036c8:	61c4      	str	r4, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80036ca:	6204      	str	r4, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80036cc:	f7fe f90c 	bl	80018e8 <HAL_I2C_Init>
  hrtc.Instance = RTC;
 80036d0:	4848      	ldr	r0, [pc, #288]	; (80037f4 <main+0x348>)
 80036d2:	4b49      	ldr	r3, [pc, #292]	; (80037f8 <main+0x34c>)
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80036d4:	6104      	str	r4, [r0, #16]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80036d6:	e880 0018 	stmia.w	r0, {r3, r4}
  hrtc.Init.AsynchPrediv = 127;
 80036da:	237f      	movs	r3, #127	; 0x7f
 80036dc:	6083      	str	r3, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 80036de:	23ff      	movs	r3, #255	; 0xff
 80036e0:	60c3      	str	r3, [r0, #12]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80036e2:	6144      	str	r4, [r0, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80036e4:	6184      	str	r4, [r0, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80036e6:	f7fe febf 	bl	8002468 <HAL_RTC_Init>
  hspi2.Instance = SPI2;
 80036ea:	4844      	ldr	r0, [pc, #272]	; (80037fc <main+0x350>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80036ec:	4944      	ldr	r1, [pc, #272]	; (8003800 <main+0x354>)
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80036ee:	6084      	str	r4, [r0, #8]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80036f0:	f44f 7382 	mov.w	r3, #260	; 0x104
 80036f4:	e880 000a 	stmia.w	r0, {r1, r3}
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80036f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80036fc:	6183      	str	r3, [r0, #24]
  hspi2.Init.CRCPolynomial = 10;
 80036fe:	230a      	movs	r3, #10
 8003700:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003702:	60c4      	str	r4, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003704:	6104      	str	r4, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003706:	6144      	str	r4, [r0, #20]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003708:	61c4      	str	r4, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800370a:	6204      	str	r4, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800370c:	6244      	str	r4, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800370e:	6284      	str	r4, [r0, #40]	; 0x28
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003710:	f7fe fef8 	bl	8002504 <HAL_SPI_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003714:	4642      	mov	r2, r8
 8003716:	4621      	mov	r1, r4
 8003718:	a828      	add	r0, sp, #160	; 0xa0
 800371a:	f001 feec 	bl	80054f6 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800371e:	4621      	mov	r1, r4
 8003720:	221c      	movs	r2, #28
 8003722:	a83a      	add	r0, sp, #232	; 0xe8
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003724:	9418      	str	r4, [sp, #96]	; 0x60
 8003726:	9419      	str	r4, [sp, #100]	; 0x64
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003728:	f001 fee5 	bl	80054f6 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800372c:	2220      	movs	r2, #32
 800372e:	4621      	mov	r1, r4
 8003730:	4628      	mov	r0, r5
 8003732:	f001 fee0 	bl	80054f6 <memset>
  htim1.Init.Prescaler = 89;
 8003736:	4833      	ldr	r0, [pc, #204]	; (8003804 <main+0x358>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003738:	f8c9 4008 	str.w	r4, [r9, #8]
  htim1.Init.Prescaler = 89;
 800373c:	2359      	movs	r3, #89	; 0x59
 800373e:	e889 0009 	stmia.w	r9, {r0, r3}
  htim1.Init.Period = 20000;
 8003742:	f644 6320 	movw	r3, #20000	; 0x4e20
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003746:	4648      	mov	r0, r9
  htim1.Init.Period = 20000;
 8003748:	f8c9 300c 	str.w	r3, [r9, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800374c:	f8c9 4010 	str.w	r4, [r9, #16]
  htim1.Init.RepetitionCounter = 0;
 8003750:	f8c9 4014 	str.w	r4, [r9, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003754:	f8c9 4018 	str.w	r4, [r9, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003758:	f7ff f8bc 	bl	80028d4 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800375c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003760:	a928      	add	r1, sp, #160	; 0xa0
 8003762:	4648      	mov	r0, r9
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003764:	9328      	str	r3, [sp, #160]	; 0xa0
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003766:	f7ff f98b 	bl	8002a80 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800376a:	4648      	mov	r0, r9
 800376c:	f7ff f8cc 	bl	8002908 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003770:	a918      	add	r1, sp, #96	; 0x60
 8003772:	4648      	mov	r0, r9
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003774:	9418      	str	r4, [sp, #96]	; 0x60
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003776:	9419      	str	r4, [sp, #100]	; 0x64
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003778:	f7ff fa76 	bl	8002c68 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800377c:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800377e:	4622      	mov	r2, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003780:	933a      	str	r3, [sp, #232]	; 0xe8
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003782:	a93a      	add	r1, sp, #232	; 0xe8
  sConfigOC.Pulse = 1500;
 8003784:	f240 53dc 	movw	r3, #1500	; 0x5dc
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003788:	4648      	mov	r0, r9
  sConfigOC.Pulse = 1500;
 800378a:	933b      	str	r3, [sp, #236]	; 0xec
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800378c:	943c      	str	r4, [sp, #240]	; 0xf0
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800378e:	943d      	str	r4, [sp, #244]	; 0xf4
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003790:	943e      	str	r4, [sp, #248]	; 0xf8
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003792:	943f      	str	r4, [sp, #252]	; 0xfc
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003794:	9440      	str	r4, [sp, #256]	; 0x100
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003796:	f7ff f907 	bl	80029a8 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800379a:	2204      	movs	r2, #4
 800379c:	a93a      	add	r1, sp, #232	; 0xe8
 800379e:	4648      	mov	r0, r9
 80037a0:	f7ff f902 	bl	80029a8 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80037a4:	2208      	movs	r2, #8
 80037a6:	a93a      	add	r1, sp, #232	; 0xe8
 80037a8:	4648      	mov	r0, r9
 80037aa:	f7ff f8fd 	bl	80029a8 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80037ae:	220c      	movs	r2, #12
 80037b0:	a93a      	add	r1, sp, #232	; 0xe8
 80037b2:	4648      	mov	r0, r9
 80037b4:	f7ff f8f8 	bl	80029a8 <HAL_TIM_PWM_ConfigChannel>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80037b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80037bc:	4629      	mov	r1, r5
 80037be:	4648      	mov	r0, r9
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80037c0:	616b      	str	r3, [r5, #20]
 80037c2:	e025      	b.n	8003810 <main+0x364>
 80037c4:	40023800 	.word	0x40023800
 80037c8:	200005cc 	.word	0x200005cc
 80037cc:	40021c00 	.word	0x40021c00
 80037d0:	40020800 	.word	0x40020800
 80037d4:	40020400 	.word	0x40020400
 80037d8:	40020000 	.word	0x40020000
 80037dc:	2000064c 	.word	0x2000064c
 80037e0:	40012000 	.word	0x40012000
 80037e4:	0f000001 	.word	0x0f000001
 80037e8:	20000498 	.word	0x20000498
 80037ec:	40005400 	.word	0x40005400
 80037f0:	000186a0 	.word	0x000186a0
 80037f4:	20000774 	.word	0x20000774
 80037f8:	40002800 	.word	0x40002800
 80037fc:	20000400 	.word	0x20000400
 8003800:	40003800 	.word	0x40003800
 8003804:	40010000 	.word	0x40010000
 8003808:	20000794 	.word	0x20000794
 800380c:	20000814 	.word	0x20000814
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003810:	f84b 4c14 	str.w	r4, [fp, #-20]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003814:	606c      	str	r4, [r5, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003816:	60ac      	str	r4, [r5, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003818:	60ec      	str	r4, [r5, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800381a:	612c      	str	r4, [r5, #16]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800381c:	61ec      	str	r4, [r5, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800381e:	f7ff fa65 	bl	8002cec <HAL_TIMEx_ConfigBreakDeadTime>
  HAL_TIM_MspPostInit(&htim1);
 8003822:	4648      	mov	r0, r9
 8003824:	f001 fb08 	bl	8004e38 <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003828:	4642      	mov	r2, r8
 800382a:	4621      	mov	r1, r4
 800382c:	a83a      	add	r0, sp, #232	; 0xe8
 800382e:	f001 fe62 	bl	80054f6 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003832:	221c      	movs	r2, #28
 8003834:	4621      	mov	r1, r4
 8003836:	4628      	mov	r0, r5
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003838:	9428      	str	r4, [sp, #160]	; 0xa0
 800383a:	9429      	str	r4, [sp, #164]	; 0xa4
  htim2.Init.Prescaler = 89;
 800383c:	2659      	movs	r6, #89	; 0x59
  TIM_OC_InitTypeDef sConfigOC = {0};
 800383e:	f001 fe5a 	bl	80054f6 <memset>
  htim2.Init.Prescaler = 89;
 8003842:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003846:	e88a 0048 	stmia.w	sl, {r3, r6}
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800384a:	4650      	mov	r0, sl
  htim2.Init.Period = 20000;
 800384c:	f644 6320 	movw	r3, #20000	; 0x4e20
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003850:	f8ca 4008 	str.w	r4, [sl, #8]
  htim2.Init.Period = 20000;
 8003854:	f8ca 300c 	str.w	r3, [sl, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003858:	f8ca 4010 	str.w	r4, [sl, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800385c:	f8ca 4018 	str.w	r4, [sl, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003860:	f7ff f838 	bl	80028d4 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003864:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003868:	a93a      	add	r1, sp, #232	; 0xe8
 800386a:	4650      	mov	r0, sl
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800386c:	933a      	str	r3, [sp, #232]	; 0xe8
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800386e:	f7ff f907 	bl	8002a80 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003872:	4650      	mov	r0, sl
 8003874:	f7ff f848 	bl	8002908 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003878:	a928      	add	r1, sp, #160	; 0xa0
 800387a:	4650      	mov	r0, sl
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800387c:	9428      	str	r4, [sp, #160]	; 0xa0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800387e:	9429      	str	r4, [sp, #164]	; 0xa4
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003880:	f7ff f9f2 	bl	8002c68 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003884:	2360      	movs	r3, #96	; 0x60
 8003886:	f84b 3c14 	str.w	r3, [fp, #-20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800388a:	4622      	mov	r2, r4
  sConfigOC.Pulse = 1500;
 800388c:	f240 53dc 	movw	r3, #1500	; 0x5dc
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003890:	4629      	mov	r1, r5
 8003892:	4650      	mov	r0, sl
  sConfigOC.Pulse = 1500;
 8003894:	606b      	str	r3, [r5, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003896:	60ac      	str	r4, [r5, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003898:	612c      	str	r4, [r5, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800389a:	f7ff f885 	bl	80029a8 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800389e:	4629      	mov	r1, r5
 80038a0:	2204      	movs	r2, #4
 80038a2:	4650      	mov	r0, sl
 80038a4:	f7ff f880 	bl	80029a8 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80038a8:	4629      	mov	r1, r5
 80038aa:	2208      	movs	r2, #8
 80038ac:	4650      	mov	r0, sl
 80038ae:	f7ff f87b 	bl	80029a8 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80038b2:	4629      	mov	r1, r5
 80038b4:	220c      	movs	r2, #12
 80038b6:	4650      	mov	r0, sl
 80038b8:	f7ff f876 	bl	80029a8 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim2);
 80038bc:	4650      	mov	r0, sl
 80038be:	f001 fabb 	bl	8004e38 <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80038c2:	4642      	mov	r2, r8
 80038c4:	4621      	mov	r1, r4
 80038c6:	a83a      	add	r0, sp, #232	; 0xe8
 80038c8:	f001 fe15 	bl	80054f6 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80038cc:	221c      	movs	r2, #28
 80038ce:	4621      	mov	r1, r4
 80038d0:	4628      	mov	r0, r5
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038d2:	9428      	str	r4, [sp, #160]	; 0xa0
 80038d4:	9429      	str	r4, [sp, #164]	; 0xa4
  TIM_OC_InitTypeDef sConfigOC = {0};
 80038d6:	f001 fe0e 	bl	80054f6 <memset>
  htim3.Init.Prescaler = 89;
 80038da:	4bc4      	ldr	r3, [pc, #784]	; (8003bec <main+0x740>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038dc:	60bc      	str	r4, [r7, #8]
  htim3.Init.Prescaler = 89;
 80038de:	f04f 0e59 	mov.w	lr, #89	; 0x59
 80038e2:	e887 4008 	stmia.w	r7, {r3, lr}
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80038e6:	4638      	mov	r0, r7
  htim3.Init.Period = 20000;
 80038e8:	f644 6320 	movw	r3, #20000	; 0x4e20
 80038ec:	60fb      	str	r3, [r7, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038ee:	613c      	str	r4, [r7, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038f0:	61bc      	str	r4, [r7, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80038f2:	f7fe ffef 	bl	80028d4 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80038f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80038fa:	a93a      	add	r1, sp, #232	; 0xe8
 80038fc:	4638      	mov	r0, r7
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80038fe:	933a      	str	r3, [sp, #232]	; 0xe8
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003900:	f7ff f8be 	bl	8002a80 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003904:	4638      	mov	r0, r7
 8003906:	f7fe ffff 	bl	8002908 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800390a:	a928      	add	r1, sp, #160	; 0xa0
 800390c:	4638      	mov	r0, r7
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800390e:	9428      	str	r4, [sp, #160]	; 0xa0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003910:	9429      	str	r4, [sp, #164]	; 0xa4
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003912:	f7ff f9a9 	bl	8002c68 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003916:	2360      	movs	r3, #96	; 0x60
 8003918:	f84b 3c14 	str.w	r3, [fp, #-20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800391c:	4622      	mov	r2, r4
  sConfigOC.Pulse = 1500;
 800391e:	f240 53dc 	movw	r3, #1500	; 0x5dc
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003922:	4629      	mov	r1, r5
 8003924:	4638      	mov	r0, r7
  sConfigOC.Pulse = 1500;
 8003926:	606b      	str	r3, [r5, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003928:	60ac      	str	r4, [r5, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800392a:	612c      	str	r4, [r5, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800392c:	f7ff f83c 	bl	80029a8 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003930:	4629      	mov	r1, r5
 8003932:	2204      	movs	r2, #4
 8003934:	4638      	mov	r0, r7
 8003936:	f7ff f837 	bl	80029a8 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800393a:	4629      	mov	r1, r5
 800393c:	2208      	movs	r2, #8
 800393e:	4638      	mov	r0, r7
 8003940:	f7ff f832 	bl	80029a8 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003944:	4629      	mov	r1, r5
 8003946:	220c      	movs	r2, #12
 8003948:	4638      	mov	r0, r7
 800394a:	f7ff f82d 	bl	80029a8 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim3);
 800394e:	4638      	mov	r0, r7
 8003950:	f001 fa72 	bl	8004e38 <HAL_TIM_MspPostInit>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003954:	4621      	mov	r1, r4
 8003956:	221c      	movs	r2, #28
 8003958:	4628      	mov	r0, r5
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800395a:	943a      	str	r4, [sp, #232]	; 0xe8
 800395c:	943b      	str	r4, [sp, #236]	; 0xec
  TIM_OC_InitTypeDef sConfigOC = {0};
 800395e:	f001 fdca 	bl	80054f6 <memset>
  htim5.Instance = TIM5;
 8003962:	4aa3      	ldr	r2, [pc, #652]	; (8003bf0 <main+0x744>)
 8003964:	4ba3      	ldr	r3, [pc, #652]	; (8003bf4 <main+0x748>)
 8003966:	6013      	str	r3, [r2, #0]
  htim5.Init.Prescaler = 89;
 8003968:	4613      	mov	r3, r2
 800396a:	2259      	movs	r2, #89	; 0x59
 800396c:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800396e:	4618      	mov	r0, r3
  htim5.Init.Period = 20000;
 8003970:	f644 6220 	movw	r2, #20000	; 0x4e20
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003974:	609c      	str	r4, [r3, #8]
  htim5.Init.Period = 20000;
 8003976:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003978:	611c      	str	r4, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800397a:	619c      	str	r4, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800397c:	f7fe ffc4 	bl	8002908 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003980:	a93a      	add	r1, sp, #232	; 0xe8
 8003982:	489b      	ldr	r0, [pc, #620]	; (8003bf0 <main+0x744>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003984:	943a      	str	r4, [sp, #232]	; 0xe8
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003986:	943b      	str	r4, [sp, #236]	; 0xec
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003988:	f7ff f96e 	bl	8002c68 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800398c:	2360      	movs	r3, #96	; 0x60
 800398e:	f84b 3c14 	str.w	r3, [fp, #-20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003992:	4622      	mov	r2, r4
  sConfigOC.Pulse = 1500;
 8003994:	f240 53dc 	movw	r3, #1500	; 0x5dc
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003998:	4629      	mov	r1, r5
 800399a:	4895      	ldr	r0, [pc, #596]	; (8003bf0 <main+0x744>)
  sConfigOC.Pulse = 1500;
 800399c:	606b      	str	r3, [r5, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800399e:	60ac      	str	r4, [r5, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80039a0:	612c      	str	r4, [r5, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80039a2:	f7ff f801 	bl	80029a8 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80039a6:	4629      	mov	r1, r5
 80039a8:	2204      	movs	r2, #4
 80039aa:	4891      	ldr	r0, [pc, #580]	; (8003bf0 <main+0x744>)
  htim8.Instance = TIM8;
 80039ac:	4e92      	ldr	r6, [pc, #584]	; (8003bf8 <main+0x74c>)
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80039ae:	f7fe fffb 	bl	80029a8 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim5);
 80039b2:	488f      	ldr	r0, [pc, #572]	; (8003bf0 <main+0x744>)
 80039b4:	f001 fa40 	bl	8004e38 <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80039b8:	4642      	mov	r2, r8
 80039ba:	4621      	mov	r1, r4
 80039bc:	a828      	add	r0, sp, #160	; 0xa0
 80039be:	f001 fd9a 	bl	80054f6 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80039c2:	4621      	mov	r1, r4
 80039c4:	221c      	movs	r2, #28
 80039c6:	a83a      	add	r0, sp, #232	; 0xe8
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039c8:	9418      	str	r4, [sp, #96]	; 0x60
 80039ca:	9419      	str	r4, [sp, #100]	; 0x64
  TIM_OC_InitTypeDef sConfigOC = {0};
 80039cc:	f001 fd93 	bl	80054f6 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80039d0:	2220      	movs	r2, #32
 80039d2:	4621      	mov	r1, r4
 80039d4:	4628      	mov	r0, r5
 80039d6:	f001 fd8e 	bl	80054f6 <memset>
  htim8.Init.Prescaler = 89;
 80039da:	4b88      	ldr	r3, [pc, #544]	; (8003bfc <main+0x750>)
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039dc:	60b4      	str	r4, [r6, #8]
  htim8.Init.Prescaler = 89;
 80039de:	f04f 0c59 	mov.w	ip, #89	; 0x59
 80039e2:	e886 1008 	stmia.w	r6, {r3, ip}
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80039e6:	4630      	mov	r0, r6
  htim8.Init.Period = 20000;
 80039e8:	f644 6320 	movw	r3, #20000	; 0x4e20
 80039ec:	60f3      	str	r3, [r6, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039ee:	6134      	str	r4, [r6, #16]
  htim8.Init.RepetitionCounter = 0;
 80039f0:	6174      	str	r4, [r6, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039f2:	61b4      	str	r4, [r6, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80039f4:	f7fe ff6e 	bl	80028d4 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80039f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80039fc:	a928      	add	r1, sp, #160	; 0xa0
 80039fe:	4630      	mov	r0, r6
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a00:	9328      	str	r3, [sp, #160]	; 0xa0
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8003a02:	f7ff f83d 	bl	8002a80 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8003a06:	4630      	mov	r0, r6
 8003a08:	f7fe ff7e 	bl	8002908 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003a0c:	a918      	add	r1, sp, #96	; 0x60
 8003a0e:	4630      	mov	r0, r6
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a10:	9418      	str	r4, [sp, #96]	; 0x60
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a12:	9419      	str	r4, [sp, #100]	; 0x64
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003a14:	f7ff f928 	bl	8002c68 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003a18:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003a1a:	4622      	mov	r2, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003a1c:	933a      	str	r3, [sp, #232]	; 0xe8
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003a1e:	a93a      	add	r1, sp, #232	; 0xe8
  sConfigOC.Pulse = 1500;
 8003a20:	f240 53dc 	movw	r3, #1500	; 0x5dc
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003a24:	4630      	mov	r0, r6
  sConfigOC.Pulse = 1500;
 8003a26:	933b      	str	r3, [sp, #236]	; 0xec
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003a28:	943c      	str	r4, [sp, #240]	; 0xf0
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003a2a:	943d      	str	r4, [sp, #244]	; 0xf4
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003a2c:	943e      	str	r4, [sp, #248]	; 0xf8
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003a2e:	943f      	str	r4, [sp, #252]	; 0xfc
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003a30:	9440      	str	r4, [sp, #256]	; 0x100
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003a32:	f7fe ffb9 	bl	80029a8 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003a36:	2204      	movs	r2, #4
 8003a38:	a93a      	add	r1, sp, #232	; 0xe8
 8003a3a:	4630      	mov	r0, r6
 8003a3c:	f7fe ffb4 	bl	80029a8 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003a40:	2208      	movs	r2, #8
 8003a42:	a93a      	add	r1, sp, #232	; 0xe8
 8003a44:	4630      	mov	r0, r6
 8003a46:	f7fe ffaf 	bl	80029a8 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003a4a:	220c      	movs	r2, #12
 8003a4c:	a93a      	add	r1, sp, #232	; 0xe8
 8003a4e:	4630      	mov	r0, r6
 8003a50:	f7fe ffaa 	bl	80029a8 <HAL_TIM_PWM_ConfigChannel>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003a54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8003a58:	4629      	mov	r1, r5
 8003a5a:	4630      	mov	r0, r6
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003a5c:	616b      	str	r3, [r5, #20]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003a5e:	f84b 4c14 	str.w	r4, [fp, #-20]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003a62:	606c      	str	r4, [r5, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003a64:	60ac      	str	r4, [r5, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003a66:	60ec      	str	r4, [r5, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003a68:	612c      	str	r4, [r5, #16]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003a6a:	61ec      	str	r4, [r5, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8003a6c:	f7ff f93e 	bl	8002cec <HAL_TIMEx_ConfigBreakDeadTime>
  HAL_TIM_MspPostInit(&htim8);
 8003a70:	4630      	mov	r0, r6
 8003a72:	f001 f9e1 	bl	8004e38 <HAL_TIM_MspPostInit>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003a76:	4621      	mov	r1, r4
 8003a78:	221c      	movs	r2, #28
 8003a7a:	4628      	mov	r0, r5
 8003a7c:	f001 fd3b 	bl	80054f6 <memset>
  htim10.Instance = TIM10;
 8003a80:	4a5f      	ldr	r2, [pc, #380]	; (8003c00 <main+0x754>)
 8003a82:	4b60      	ldr	r3, [pc, #384]	; (8003c04 <main+0x758>)
 8003a84:	6013      	str	r3, [r2, #0]
  htim10.Init.Prescaler = 89;
 8003a86:	4613      	mov	r3, r2
 8003a88:	2259      	movs	r2, #89	; 0x59
 8003a8a:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8003a8c:	4618      	mov	r0, r3
  htim10.Init.Period = 20000;
 8003a8e:	f644 6220 	movw	r2, #20000	; 0x4e20
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a92:	609c      	str	r4, [r3, #8]
  htim10.Init.Period = 20000;
 8003a94:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a96:	611c      	str	r4, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a98:	619c      	str	r4, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8003a9a:	f7fe ff1b 	bl	80028d4 <HAL_TIM_Base_Init>
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8003a9e:	4858      	ldr	r0, [pc, #352]	; (8003c00 <main+0x754>)
 8003aa0:	f7fe ff32 	bl	8002908 <HAL_TIM_PWM_Init>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003aa4:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003aa6:	4622      	mov	r2, r4
 8003aa8:	4629      	mov	r1, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003aaa:	f84b 3c14 	str.w	r3, [fp, #-20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003aae:	4854      	ldr	r0, [pc, #336]	; (8003c00 <main+0x754>)
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003ab0:	60ac      	str	r4, [r5, #8]
  sConfigOC.Pulse = 1500;
 8003ab2:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8003ab6:	606b      	str	r3, [r5, #4]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003ab8:	612c      	str	r4, [r5, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003aba:	f7fe ff75 	bl	80029a8 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim10);
 8003abe:	4850      	ldr	r0, [pc, #320]	; (8003c00 <main+0x754>)
 8003ac0:	f001 f9ba 	bl	8004e38 <HAL_TIM_MspPostInit>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003ac4:	4621      	mov	r1, r4
 8003ac6:	221c      	movs	r2, #28
 8003ac8:	4628      	mov	r0, r5
 8003aca:	f001 fd14 	bl	80054f6 <memset>
  htim11.Instance = TIM11;
 8003ace:	4a4e      	ldr	r2, [pc, #312]	; (8003c08 <main+0x75c>)
 8003ad0:	4b4e      	ldr	r3, [pc, #312]	; (8003c0c <main+0x760>)
 8003ad2:	6013      	str	r3, [r2, #0]
  htim11.Init.Prescaler = 89;
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	2259      	movs	r2, #89	; 0x59
 8003ad8:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8003ada:	4618      	mov	r0, r3
  htim11.Init.Period = 20000;
 8003adc:	f644 6220 	movw	r2, #20000	; 0x4e20
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ae0:	609c      	str	r4, [r3, #8]
  htim11.Init.Period = 20000;
 8003ae2:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ae4:	611c      	str	r4, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ae6:	619c      	str	r4, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8003ae8:	f7fe fef4 	bl	80028d4 <HAL_TIM_Base_Init>
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8003aec:	4846      	ldr	r0, [pc, #280]	; (8003c08 <main+0x75c>)
 8003aee:	f7fe ff0b 	bl	8002908 <HAL_TIM_PWM_Init>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003af2:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003af4:	4622      	mov	r2, r4
 8003af6:	4629      	mov	r1, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003af8:	f84b 3c14 	str.w	r3, [fp, #-20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003afc:	4842      	ldr	r0, [pc, #264]	; (8003c08 <main+0x75c>)
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003afe:	60ac      	str	r4, [r5, #8]
  sConfigOC.Pulse = 1500;
 8003b00:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8003b04:	606b      	str	r3, [r5, #4]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003b06:	612c      	str	r4, [r5, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003b08:	f7fe ff4e 	bl	80029a8 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim11);
 8003b0c:	483e      	ldr	r0, [pc, #248]	; (8003c08 <main+0x75c>)
 8003b0e:	f001 f993 	bl	8004e38 <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003b12:	4642      	mov	r2, r8
 8003b14:	4621      	mov	r1, r4
 8003b16:	a83a      	add	r0, sp, #232	; 0xe8
 8003b18:	f001 fced 	bl	80054f6 <memset>
  htim12.Instance = TIM12;
 8003b1c:	f8df 8100 	ldr.w	r8, [pc, #256]	; 8003c20 <main+0x774>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003b20:	221c      	movs	r2, #28
 8003b22:	4621      	mov	r1, r4
 8003b24:	4628      	mov	r0, r5
 8003b26:	f001 fce6 	bl	80054f6 <memset>
  htim12.Instance = TIM12;
 8003b2a:	4b39      	ldr	r3, [pc, #228]	; (8003c10 <main+0x764>)
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b2c:	f8c8 4008 	str.w	r4, [r8, #8]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8003b30:	4640      	mov	r0, r8
  htim12.Init.Prescaler = 0;
 8003b32:	e888 0018 	stmia.w	r8, {r3, r4}
  htim12.Init.Period = 0;
 8003b36:	f8c8 400c 	str.w	r4, [r8, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b3a:	f8c8 4010 	str.w	r4, [r8, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b3e:	f8c8 4018 	str.w	r4, [r8, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8003b42:	f7fe fec7 	bl	80028d4 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003b46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8003b4a:	a93a      	add	r1, sp, #232	; 0xe8
 8003b4c:	4640      	mov	r0, r8
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003b4e:	933a      	str	r3, [sp, #232]	; 0xe8
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8003b50:	f7fe ff96 	bl	8002a80 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8003b54:	4640      	mov	r0, r8
 8003b56:	f7fe fed7 	bl	8002908 <HAL_TIM_PWM_Init>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003b5a:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003b5c:	4622      	mov	r2, r4
 8003b5e:	4629      	mov	r1, r5
 8003b60:	4640      	mov	r0, r8
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003b62:	f84b 3c14 	str.w	r3, [fp, #-20]
  sConfigOC.Pulse = 0;
 8003b66:	606c      	str	r4, [r5, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003b68:	60ac      	str	r4, [r5, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003b6a:	612c      	str	r4, [r5, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003b6c:	f7fe ff1c 	bl	80029a8 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim12);
 8003b70:	4640      	mov	r0, r8
 8003b72:	f001 f961 	bl	8004e38 <HAL_TIM_MspPostInit>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003b76:	4621      	mov	r1, r4
 8003b78:	221c      	movs	r2, #28
 8003b7a:	4628      	mov	r0, r5
 8003b7c:	f001 fcbb 	bl	80054f6 <memset>
  htim14.Instance = TIM14;
 8003b80:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8003c24 <main+0x778>
  htim14.Init.Prescaler = 89;
 8003b84:	4a23      	ldr	r2, [pc, #140]	; (8003c14 <main+0x768>)
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b86:	f8c8 4008 	str.w	r4, [r8, #8]
  htim14.Init.Prescaler = 89;
 8003b8a:	2359      	movs	r3, #89	; 0x59
 8003b8c:	e888 000c 	stmia.w	r8, {r2, r3}
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8003b90:	4640      	mov	r0, r8
  htim14.Init.Period = 20000;
 8003b92:	f644 6320 	movw	r3, #20000	; 0x4e20
 8003b96:	f8c8 300c 	str.w	r3, [r8, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b9a:	f8c8 4010 	str.w	r4, [r8, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b9e:	f8c8 4018 	str.w	r4, [r8, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8003ba2:	f7fe fe97 	bl	80028d4 <HAL_TIM_Base_Init>
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8003ba6:	4640      	mov	r0, r8
 8003ba8:	f7fe feae 	bl	8002908 <HAL_TIM_PWM_Init>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003bac:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003bae:	4622      	mov	r2, r4
 8003bb0:	4629      	mov	r1, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003bb2:	f84b 3c14 	str.w	r3, [fp, #-20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003bb6:	4640      	mov	r0, r8
  sConfigOC.Pulse = 1500;
 8003bb8:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8003bbc:	606b      	str	r3, [r5, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003bbe:	60ac      	str	r4, [r5, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003bc0:	612c      	str	r4, [r5, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003bc2:	f7fe fef1 	bl	80029a8 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim14);
 8003bc6:	4640      	mov	r0, r8
 8003bc8:	f001 f936 	bl	8004e38 <HAL_TIM_MspPostInit>
  huart4.Instance = UART4;
 8003bcc:	4b12      	ldr	r3, [pc, #72]	; (8003c18 <main+0x76c>)
 8003bce:	4a13      	ldr	r2, [pc, #76]	; (8003c1c <main+0x770>)
 8003bd0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8003bd2:	f44f 5116 	mov.w	r1, #9600	; 0x2580
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003bd6:	220c      	movs	r2, #12
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003bd8:	4618      	mov	r0, r3
  huart4.Init.BaudRate = 9600;
 8003bda:	6059      	str	r1, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003bdc:	609c      	str	r4, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003bde:	60dc      	str	r4, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003be0:	611c      	str	r4, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003be2:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003be4:	619c      	str	r4, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003be6:	61dc      	str	r4, [r3, #28]
  huart4.Init.BaudRate = 9600;
 8003be8:	9100      	str	r1, [sp, #0]
 8003bea:	e01d      	b.n	8003c28 <main+0x77c>
 8003bec:	40000400 	.word	0x40000400
 8003bf0:	2000058c 	.word	0x2000058c
 8003bf4:	40000c00 	.word	0x40000c00
 8003bf8:	20000458 	.word	0x20000458
 8003bfc:	40010400 	.word	0x40010400
 8003c00:	200004ec 	.word	0x200004ec
 8003c04:	40014400 	.word	0x40014400
 8003c08:	20000734 	.word	0x20000734
 8003c0c:	40014800 	.word	0x40014800
 8003c10:	40001800 	.word	0x40001800
 8003c14:	40002000 	.word	0x40002000
 8003c18:	200007d4 	.word	0x200007d4
 8003c1c:	40004c00 	.word	0x40004c00
 8003c20:	20000934 	.word	0x20000934
 8003c24:	200008f4 	.word	0x200008f4
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003c28:	9301      	str	r3, [sp, #4]
 8003c2a:	f7ff f903 	bl	8002e34 <HAL_UART_Init>
  huart5.Instance = UART5;
 8003c2e:	4864      	ldr	r0, [pc, #400]	; (8003dc0 <main+0x914>)
  huart2.Instance = USART2;
 8003c30:	f8df b1c8 	ldr.w	fp, [pc, #456]	; 8003dfc <main+0x950>
  huart5.Instance = UART5;
 8003c34:	4a63      	ldr	r2, [pc, #396]	; (8003dc4 <main+0x918>)
  huart5.Init.BaudRate = 9600;
 8003c36:	9900      	ldr	r1, [sp, #0]
  huart5.Instance = UART5;
 8003c38:	6002      	str	r2, [r0, #0]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8003c3a:	230c      	movs	r3, #12
  huart5.Init.BaudRate = 9600;
 8003c3c:	6041      	str	r1, [r0, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8003c3e:	6084      	str	r4, [r0, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8003c40:	60c4      	str	r4, [r0, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8003c42:	6104      	str	r4, [r0, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8003c44:	6143      	str	r3, [r0, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c46:	6184      	str	r4, [r0, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c48:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8003c4a:	f7ff f8f3 	bl	8002e34 <HAL_UART_Init>
  huart2.Instance = USART2;
 8003c4e:	485e      	ldr	r0, [pc, #376]	; (8003dc8 <main+0x91c>)
  huart2.Init.BaudRate = 9600;
 8003c50:	9900      	ldr	r1, [sp, #0]
  huart2.Instance = USART2;
 8003c52:	f8cb 0000 	str.w	r0, [fp]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003c56:	230c      	movs	r3, #12
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003c58:	4658      	mov	r0, fp
  huart2.Init.BaudRate = 9600;
 8003c5a:	f8cb 1004 	str.w	r1, [fp, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003c5e:	f8cb 4008 	str.w	r4, [fp, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003c62:	f8cb 400c 	str.w	r4, [fp, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003c66:	f8cb 4010 	str.w	r4, [fp, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003c6a:	f8cb 3014 	str.w	r3, [fp, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c6e:	f8cb 4018 	str.w	r4, [fp, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c72:	f8cb 401c 	str.w	r4, [fp, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003c76:	f7ff f8dd 	bl	8002e34 <HAL_UART_Init>
  htim13.Init.Prescaler = 89;
 8003c7a:	4954      	ldr	r1, [pc, #336]	; (8003dcc <main+0x920>)
  htim13.Instance = TIM13;
 8003c7c:	4a54      	ldr	r2, [pc, #336]	; (8003dd0 <main+0x924>)
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8003c7e:	9200      	str	r2, [sp, #0]
  htim13.Init.Prescaler = 89;
 8003c80:	2359      	movs	r3, #89	; 0x59
 8003c82:	e882 000a 	stmia.w	r2, {r1, r3}
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8003c86:	4610      	mov	r0, r2
  htim13.Init.Period = 20000;
 8003c88:	f644 6320 	movw	r3, #20000	; 0x4e20
 8003c8c:	60d3      	str	r3, [r2, #12]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c8e:	6094      	str	r4, [r2, #8]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c90:	6114      	str	r4, [r2, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c92:	6194      	str	r4, [r2, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8003c94:	f7fe fe1e 	bl	80028d4 <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start_IT(&htim13);
 8003c98:	9a00      	ldr	r2, [sp, #0]
 8003c9a:	4610      	mov	r0, r2
 8003c9c:	f7fe fcfe 	bl	800269c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim1);
 8003ca0:	4648      	mov	r0, r9
 8003ca2:	f7fe fcfb 	bl	800269c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8003ca6:	4650      	mov	r0, sl
 8003ca8:	f7fe fcf8 	bl	800269c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8003cac:	4638      	mov	r0, r7
 8003cae:	f7fe fcf5 	bl	800269c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim5);
 8003cb2:	4848      	ldr	r0, [pc, #288]	; (8003dd4 <main+0x928>)
 8003cb4:	f7fe fcf2 	bl	800269c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim8);
 8003cb8:	4630      	mov	r0, r6
 8003cba:	f7fe fcef 	bl	800269c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim10);
 8003cbe:	4846      	ldr	r0, [pc, #280]	; (8003dd8 <main+0x92c>)
      HAL_Serial_Write(FTDI_hlinebuffer.hserial, (uint8_t*)outbuf, sprintf(outbuf, "<%s>\n", cmd_line));
 8003cc0:	4e46      	ldr	r6, [pc, #280]	; (8003ddc <main+0x930>)
  HAL_TIM_Base_Start_IT(&htim10);
 8003cc2:	f7fe fceb 	bl	800269c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim11);
 8003cc6:	4846      	ldr	r0, [pc, #280]	; (8003de0 <main+0x934>)
 8003cc8:	f7fe fce8 	bl	800269c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim14);
 8003ccc:	4640      	mov	r0, r8
 8003cce:	f7fe fce5 	bl	800269c <HAL_TIM_Base_Start_IT>
  HAL_Serial_Init(&huart4, &FTDI_hserial);
 8003cd2:	9b01      	ldr	r3, [sp, #4]
 8003cd4:	a93a      	add	r1, sp, #232	; 0xe8
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f000 fc68 	bl	80045ac <HAL_Serial_Init>
  HAL_Serial_Init(&huart2, &BT_hserial);
 8003cdc:	4629      	mov	r1, r5
 8003cde:	4658      	mov	r0, fp
 8003ce0:	f000 fc64 	bl	80045ac <HAL_Serial_Init>
  HAL_LineBuffer_Init(&FTDI_hlinebuffer, &FTDI_hserial);
 8003ce4:	a93a      	add	r1, sp, #232	; 0xe8
 8003ce6:	a828      	add	r0, sp, #160	; 0xa0
 8003ce8:	f000 fdf1 	bl	80048ce <HAL_LineBuffer_Init>
  LedSwitch(2,GPIO_PIN_SET);
 8003cec:	2101      	movs	r1, #1
 8003cee:	2002      	movs	r0, #2
 8003cf0:	f001 fb72 	bl	80053d8 <LedSwitch>
  LedSwitch(3,GPIO_PIN_SET);
 8003cf4:	2101      	movs	r1, #1
 8003cf6:	2003      	movs	r0, #3
 8003cf8:	f001 fb6e 	bl	80053d8 <LedSwitch>
  LedSwitch(4,GPIO_PIN_SET);
 8003cfc:	2101      	movs	r1, #1
 8003cfe:	2004      	movs	r0, #4
 8003d00:	f001 fb6a 	bl	80053d8 <LedSwitch>
  HAL_Serial_Print(&FTDI_hserial, "******************************\n");
 8003d04:	4937      	ldr	r1, [pc, #220]	; (8003de4 <main+0x938>)
      HAL_Serial_Print(&FTDI_hserial, "%s\n", Robot_GetState());
 8003d06:	4d38      	ldr	r5, [pc, #224]	; (8003de8 <main+0x93c>)
  HAL_Serial_Print(&FTDI_hserial, "******************************\n");
 8003d08:	a83a      	add	r0, sp, #232	; 0xe8
 8003d0a:	f000 fdbc 	bl	8004886 <HAL_Serial_Print>
  Robot_Init();
 8003d0e:	f000 f883 	bl	8003e18 <Robot_Init>
  HAL_Serial_Print(&FTDI_hserial, "Robot init done\n");
 8003d12:	4936      	ldr	r1, [pc, #216]	; (8003dec <main+0x940>)
 8003d14:	a83a      	add	r0, sp, #232	; 0xe8
 8003d16:	f000 fdb6 	bl	8004886 <HAL_Serial_Print>
  Robot_Unfold();
 8003d1a:	f000 f9df 	bl	80040dc <Robot_Unfold>
  HAL_Serial_Print(&FTDI_hserial, "Robot unfold done\n");
 8003d1e:	4934      	ldr	r1, [pc, #208]	; (8003df0 <main+0x944>)
 8003d20:	a83a      	add	r0, sp, #232	; 0xe8
 8003d22:	f000 fdb0 	bl	8004886 <HAL_Serial_Print>
  HAL_Delay(10000);
 8003d26:	f242 7010 	movw	r0, #10000	; 0x2710
 8003d2a:	f7fd f991 	bl	8001050 <HAL_Delay>
  Robot_Autotest();
 8003d2e:	f000 fb7f 	bl	8004430 <Robot_Autotest>
  HAL_Serial_Print(&FTDI_hserial, "Robot autotest done\n");
 8003d32:	4930      	ldr	r1, [pc, #192]	; (8003df4 <main+0x948>)
 8003d34:	a83a      	add	r0, sp, #232	; 0xe8
 8003d36:	f000 fda6 	bl	8004886 <HAL_Serial_Print>
    if(HAL_GPIO_ReadPin(USR_BUTT_GPIO_Port,USR_BUTT_Pin)==GPIO_PIN_RESET)
 8003d3a:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8003d3e:	f504 3402 	add.w	r4, r4, #133120	; 0x20800
 8003d42:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003d46:	4620      	mov	r0, r4
 8003d48:	f7fd fdbc 	bl	80018c4 <HAL_GPIO_ReadPin>
 8003d4c:	b978      	cbnz	r0, 8003d6e <main+0x8c2>
      while(HAL_GPIO_ReadPin(USR_BUTT_GPIO_Port,USR_BUTT_Pin)==GPIO_PIN_RESET)
 8003d4e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003d52:	4620      	mov	r0, r4
 8003d54:	f7fd fdb6 	bl	80018c4 <HAL_GPIO_ReadPin>
 8003d58:	2800      	cmp	r0, #0
 8003d5a:	d0f8      	beq.n	8003d4e <main+0x8a2>
      Robot_ButtonPushed();
 8003d5c:	f000 fb50 	bl	8004400 <Robot_ButtonPushed>
      HAL_Serial_Print(&FTDI_hserial, "%s\n", Robot_GetState());
 8003d60:	f000 fb2e 	bl	80043c0 <Robot_GetState>
 8003d64:	4629      	mov	r1, r5
 8003d66:	4602      	mov	r2, r0
 8003d68:	a83a      	add	r0, sp, #232	; 0xe8
 8003d6a:	f000 fd8c 	bl	8004886 <HAL_Serial_Print>
    if((len=HAL_LineBuffer_Read(&FTDI_hlinebuffer, cmd_line, sizeof(cmd_line))) > 0)
 8003d6e:	2240      	movs	r2, #64	; 0x40
 8003d70:	a908      	add	r1, sp, #32
 8003d72:	a828      	add	r0, sp, #160	; 0xa0
 8003d74:	f000 fdaf 	bl	80048d6 <HAL_LineBuffer_Read>
 8003d78:	2800      	cmp	r0, #0
 8003d7a:	dd15      	ble.n	8003da8 <main+0x8fc>
      HAL_Serial_Write(FTDI_hlinebuffer.hserial, (uint8_t*)outbuf, sprintf(outbuf, "<%s>\n", cmd_line));
 8003d7c:	aa08      	add	r2, sp, #32
 8003d7e:	4631      	mov	r1, r6
 8003d80:	a818      	add	r0, sp, #96	; 0x60
 8003d82:	9f28      	ldr	r7, [sp, #160]	; 0xa0
 8003d84:	f001 fbc0 	bl	8005508 <siprintf>
 8003d88:	a918      	add	r1, sp, #96	; 0x60
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	4638      	mov	r0, r7
 8003d8e:	f000 fc52 	bl	8004636 <HAL_Serial_Write>
      Robot_ReadCommand(FTDI_hlinebuffer.hserial, cmd_line);
 8003d92:	a908      	add	r1, sp, #32
 8003d94:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8003d96:	f000 fa49 	bl	800422c <Robot_ReadCommand>
      HAL_Serial_Print(&FTDI_hserial, "%s\n", Robot_GetState());
 8003d9a:	f000 fb11 	bl	80043c0 <Robot_GetState>
 8003d9e:	4629      	mov	r1, r5
 8003da0:	4602      	mov	r2, r0
 8003da2:	a83a      	add	r0, sp, #232	; 0xe8
 8003da4:	f000 fd6f 	bl	8004886 <HAL_Serial_Print>
    HAL_Delay(100);
 8003da8:	2064      	movs	r0, #100	; 0x64
 8003daa:	f7fd f951 	bl	8001050 <HAL_Delay>
    HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 8003dae:	2101      	movs	r1, #1
 8003db0:	4811      	ldr	r0, [pc, #68]	; (8003df8 <main+0x94c>)
 8003db2:	f7fd fd92 	bl	80018da <HAL_GPIO_TogglePin>
    HAL_Delay(100);
 8003db6:	2064      	movs	r0, #100	; 0x64
 8003db8:	f7fd f94a 	bl	8001050 <HAL_Delay>
    if(HAL_GPIO_ReadPin(USR_BUTT_GPIO_Port,USR_BUTT_Pin)==GPIO_PIN_RESET)
 8003dbc:	e7c1      	b.n	8003d42 <main+0x896>
 8003dbe:	bf00      	nop
 8003dc0:	2000060c 	.word	0x2000060c
 8003dc4:	40005000 	.word	0x40005000
 8003dc8:	40004400 	.word	0x40004400
 8003dcc:	40001c00 	.word	0x40001c00
 8003dd0:	200006f4 	.word	0x200006f4
 8003dd4:	2000058c 	.word	0x2000058c
 8003dd8:	200004ec 	.word	0x200004ec
 8003ddc:	08007505 	.word	0x08007505
 8003de0:	20000734 	.word	0x20000734
 8003de4:	080074ac 	.word	0x080074ac
 8003de8:	0800753b 	.word	0x0800753b
 8003dec:	080074cc 	.word	0x080074cc
 8003df0:	080074dd 	.word	0x080074dd
 8003df4:	080074f0 	.word	0x080074f0
 8003df8:	40021c00 	.word	0x40021c00
 8003dfc:	20000854 	.word	0x20000854

08003e00 <HAL_TIM_PeriodElapsedCallback>:
  * @param  htim: TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
    if (htim->Instance == htim13.Instance)
 8003e00:	4b03      	ldr	r3, [pc, #12]	; (8003e10 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8003e02:	6802      	ldr	r2, [r0, #0]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d101      	bne.n	8003e0e <HAL_TIM_PeriodElapsedCallback+0xe>
    {
        // Robot update
        Robot_Update();
 8003e0a:	f000 b985 	b.w	8004118 <Robot_Update>
 8003e0e:	4770      	bx	lr
 8003e10:	200006f4 	.word	0x200006f4

08003e14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003e14:	4770      	bx	lr
	...

08003e18 <Robot_Init>:
int pulse=1500;

int ctr50Hz=0;

void Robot_Init()
{
 8003e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e1c:	ed2d 8b02 	vpush	{d8}
  int i;
  t_leg *hleg_temp;

  Servo_Init(&servo01, &htim3,  TIM_CHANNEL_4); // Servo connector 01 : tim3, ch4  => RRL, 19
 8003e20:	4b7e      	ldr	r3, [pc, #504]	; (800401c <Robot_Init+0x204>)
  Servo_Init(&servo02, &htim2,  TIM_CHANNEL_4); // Servo connector 02 : tim2, ch4  => RRM, 12
 8003e22:	f8df b278 	ldr.w	fp, [pc, #632]	; 800409c <Robot_Init+0x284>
  Servo_Init(&servo03, &htim2,  TIM_CHANNEL_3); // Servo connector 03 : tim2, ch3  => RRH, 08
 8003e26:	f8df a278 	ldr.w	sl, [pc, #632]	; 80040a0 <Robot_Init+0x288>
  Servo_Init(&servo01, &htim3,  TIM_CHANNEL_4); // Servo connector 01 : tim3, ch4  => RRL, 19
 8003e2a:	497d      	ldr	r1, [pc, #500]	; (8004020 <Robot_Init+0x208>)
  // Servo connector 04 : tim5, ch2 => unused
  // Servo connector 05 : tim3, ch1 => unused
  // Servo connector 06 : tim8, ch2 => unused
  Servo_Init(&servo07, &htim8,  TIM_CHANNEL_3); // Servo connector 07 : tim8, ch3  => RLH, 03
 8003e2c:	f8df 9274 	ldr.w	r9, [pc, #628]	; 80040a4 <Robot_Init+0x28c>
  Servo_Init(&servo08, &htim8,  TIM_CHANNEL_4); // Servo connector 08 : tim8, ch4  => RLM, 11
 8003e30:	f8df 8274 	ldr.w	r8, [pc, #628]	; 80040a8 <Robot_Init+0x290>
  Servo_Init(&servo11, &htim14, TIM_CHANNEL_1); // Servo connector 11 : tim14, ch1 => FLM, 05
  Servo_Init(&servo12, &htim11, TIM_CHANNEL_1); // Servo connector 12 : tim11, ch1 => FLH, 01
  // Servo connector 13 : tim3, ch2 => unused
  // Servo connector 14 : tim2, ch2 => unused
  // Servo connector 15 : tim1, ch1 => unused
  Servo_Init(&servo16, &htim10, TIM_CHANNEL_1); // Servo connector 16 : tim10, ch1 => FRH, 02
 8003e34:	4d7b      	ldr	r5, [pc, #492]	; (8004024 <Robot_Init+0x20c>)
  Servo_Init(&servo17, &htim1,  TIM_CHANNEL_4); // Servo connector 17 : tim1, ch4  => FRM, 09
 8003e36:	4e7c      	ldr	r6, [pc, #496]	; (8004028 <Robot_Init+0x210>)
  Servo_Init(&servo18, &htim1,  TIM_CHANNEL_3); // Servo connector 18 : tim1, ch3  => FRL, 10
 8003e38:	4f7c      	ldr	r7, [pc, #496]	; (800402c <Robot_Init+0x214>)
  Servo_SetLimits(&servo12, s01_limits);
  Servo_SetLimits(&servo16, s02_limits);
  Servo_SetLimits(&servo17, s09_limits);
  Servo_SetLimits(&servo18, s10_limits);

  robot.hservos[RRL]=&servo01;
 8003e3a:	4c7d      	ldr	r4, [pc, #500]	; (8004030 <Robot_Init+0x218>)

  // set initial position for legs
  // at 1st update, the array will be rotated, and last leg shall be returning
  // we initialise the positions, and rotate the array in reverse order
  for(i=0;i<NBLEGS;i++)
    Leg_SetPos(robot.hlegs[i], robot.hlegs[i]->origin_x-(i/(NBLEGS-1.))*robot.hlegs[i]->x_amplitude, robot.hlegs[i]->origin_y, LEG_HEIGHT);
 8003e3c:	ed9f 8a7d 	vldr	s16, [pc, #500]	; 8004034 <Robot_Init+0x21c>
{
 8003e40:	b085      	sub	sp, #20
  Servo_Init(&servo01, &htim3,  TIM_CHANNEL_4); // Servo connector 01 : tim3, ch4  => RRL, 19
 8003e42:	4618      	mov	r0, r3
 8003e44:	220c      	movs	r2, #12
 8003e46:	9303      	str	r3, [sp, #12]
 8003e48:	f000 fd75 	bl	8004936 <Servo_Init>
  Servo_Init(&servo02, &htim2,  TIM_CHANNEL_4); // Servo connector 02 : tim2, ch4  => RRM, 12
 8003e4c:	220c      	movs	r2, #12
 8003e4e:	497a      	ldr	r1, [pc, #488]	; (8004038 <Robot_Init+0x220>)
 8003e50:	4658      	mov	r0, fp
 8003e52:	f000 fd70 	bl	8004936 <Servo_Init>
  Servo_Init(&servo03, &htim2,  TIM_CHANNEL_3); // Servo connector 03 : tim2, ch3  => RRH, 08
 8003e56:	4650      	mov	r0, sl
 8003e58:	2208      	movs	r2, #8
 8003e5a:	4977      	ldr	r1, [pc, #476]	; (8004038 <Robot_Init+0x220>)
 8003e5c:	f000 fd6b 	bl	8004936 <Servo_Init>
  Servo_Init(&servo07, &htim8,  TIM_CHANNEL_3); // Servo connector 07 : tim8, ch3  => RLH, 03
 8003e60:	4648      	mov	r0, r9
 8003e62:	2208      	movs	r2, #8
 8003e64:	4975      	ldr	r1, [pc, #468]	; (800403c <Robot_Init+0x224>)
 8003e66:	f000 fd66 	bl	8004936 <Servo_Init>
  Servo_Init(&servo08, &htim8,  TIM_CHANNEL_4); // Servo connector 08 : tim8, ch4  => RLM, 11
 8003e6a:	4640      	mov	r0, r8
 8003e6c:	220c      	movs	r2, #12
 8003e6e:	4973      	ldr	r1, [pc, #460]	; (800403c <Robot_Init+0x224>)
 8003e70:	f000 fd61 	bl	8004936 <Servo_Init>
  Servo_Init(&servo09, &htim1,  TIM_CHANNEL_2); // Servo connector 09 : tim1, ch2  => RLL, 16
 8003e74:	2204      	movs	r2, #4
 8003e76:	4972      	ldr	r1, [pc, #456]	; (8004040 <Robot_Init+0x228>)
 8003e78:	4872      	ldr	r0, [pc, #456]	; (8004044 <Robot_Init+0x22c>)
 8003e7a:	f000 fd5c 	bl	8004936 <Servo_Init>
  Servo_Init(&servo10, &htim3,  TIM_CHANNEL_3); // Servo connector 10 : tim3, ch3  => FLL, 13
 8003e7e:	2208      	movs	r2, #8
 8003e80:	4967      	ldr	r1, [pc, #412]	; (8004020 <Robot_Init+0x208>)
 8003e82:	4871      	ldr	r0, [pc, #452]	; (8004048 <Robot_Init+0x230>)
 8003e84:	f000 fd57 	bl	8004936 <Servo_Init>
  Servo_Init(&servo11, &htim14, TIM_CHANNEL_1); // Servo connector 11 : tim14, ch1 => FLM, 05
 8003e88:	2200      	movs	r2, #0
 8003e8a:	4970      	ldr	r1, [pc, #448]	; (800404c <Robot_Init+0x234>)
 8003e8c:	4870      	ldr	r0, [pc, #448]	; (8004050 <Robot_Init+0x238>)
 8003e8e:	f000 fd52 	bl	8004936 <Servo_Init>
  Servo_Init(&servo12, &htim11, TIM_CHANNEL_1); // Servo connector 12 : tim11, ch1 => FLH, 01
 8003e92:	2200      	movs	r2, #0
 8003e94:	496f      	ldr	r1, [pc, #444]	; (8004054 <Robot_Init+0x23c>)
 8003e96:	4870      	ldr	r0, [pc, #448]	; (8004058 <Robot_Init+0x240>)
 8003e98:	f000 fd4d 	bl	8004936 <Servo_Init>
  Servo_Init(&servo16, &htim10, TIM_CHANNEL_1); // Servo connector 16 : tim10, ch1 => FRH, 02
 8003e9c:	4628      	mov	r0, r5
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	496e      	ldr	r1, [pc, #440]	; (800405c <Robot_Init+0x244>)
 8003ea2:	f000 fd48 	bl	8004936 <Servo_Init>
  Servo_Init(&servo17, &htim1,  TIM_CHANNEL_4); // Servo connector 17 : tim1, ch4  => FRM, 09
 8003ea6:	4630      	mov	r0, r6
 8003ea8:	220c      	movs	r2, #12
 8003eaa:	4965      	ldr	r1, [pc, #404]	; (8004040 <Robot_Init+0x228>)
 8003eac:	f000 fd43 	bl	8004936 <Servo_Init>
  Servo_Init(&servo18, &htim1,  TIM_CHANNEL_3); // Servo connector 18 : tim1, ch3  => FRL, 10
 8003eb0:	2208      	movs	r2, #8
 8003eb2:	4638      	mov	r0, r7
 8003eb4:	4962      	ldr	r1, [pc, #392]	; (8004040 <Robot_Init+0x228>)
 8003eb6:	f000 fd3e 	bl	8004936 <Servo_Init>
  Servo_SetLimits(&servo01, s19_limits);
 8003eba:	9b03      	ldr	r3, [sp, #12]
 8003ebc:	4968      	ldr	r1, [pc, #416]	; (8004060 <Robot_Init+0x248>)
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f000 fd42 	bl	8004948 <Servo_SetLimits>
  Servo_SetLimits(&servo02, s12_limits);
 8003ec4:	4967      	ldr	r1, [pc, #412]	; (8004064 <Robot_Init+0x24c>)
 8003ec6:	4658      	mov	r0, fp
 8003ec8:	f000 fd3e 	bl	8004948 <Servo_SetLimits>
  Servo_SetLimits(&servo03, s08_limits);
 8003ecc:	4650      	mov	r0, sl
 8003ece:	4966      	ldr	r1, [pc, #408]	; (8004068 <Robot_Init+0x250>)
 8003ed0:	f000 fd3a 	bl	8004948 <Servo_SetLimits>
  Servo_SetLimits(&servo07, s03_limits);
 8003ed4:	4648      	mov	r0, r9
 8003ed6:	4965      	ldr	r1, [pc, #404]	; (800406c <Robot_Init+0x254>)
 8003ed8:	f000 fd36 	bl	8004948 <Servo_SetLimits>
  Servo_SetLimits(&servo08, s11_limits);
 8003edc:	4640      	mov	r0, r8
 8003ede:	4964      	ldr	r1, [pc, #400]	; (8004070 <Robot_Init+0x258>)
 8003ee0:	f000 fd32 	bl	8004948 <Servo_SetLimits>
  Servo_SetLimits(&servo09, s16_limits);
 8003ee4:	4963      	ldr	r1, [pc, #396]	; (8004074 <Robot_Init+0x25c>)
 8003ee6:	4857      	ldr	r0, [pc, #348]	; (8004044 <Robot_Init+0x22c>)
 8003ee8:	f000 fd2e 	bl	8004948 <Servo_SetLimits>
  Servo_SetLimits(&servo10, s13_limits);
 8003eec:	4962      	ldr	r1, [pc, #392]	; (8004078 <Robot_Init+0x260>)
 8003eee:	4856      	ldr	r0, [pc, #344]	; (8004048 <Robot_Init+0x230>)
 8003ef0:	f000 fd2a 	bl	8004948 <Servo_SetLimits>
  Servo_SetLimits(&servo11, s05_limits);
 8003ef4:	4961      	ldr	r1, [pc, #388]	; (800407c <Robot_Init+0x264>)
 8003ef6:	4856      	ldr	r0, [pc, #344]	; (8004050 <Robot_Init+0x238>)
 8003ef8:	f000 fd26 	bl	8004948 <Servo_SetLimits>
  Servo_SetLimits(&servo12, s01_limits);
 8003efc:	4960      	ldr	r1, [pc, #384]	; (8004080 <Robot_Init+0x268>)
 8003efe:	4856      	ldr	r0, [pc, #344]	; (8004058 <Robot_Init+0x240>)
 8003f00:	f000 fd22 	bl	8004948 <Servo_SetLimits>
  Servo_SetLimits(&servo16, s02_limits);
 8003f04:	4628      	mov	r0, r5
 8003f06:	495f      	ldr	r1, [pc, #380]	; (8004084 <Robot_Init+0x26c>)
 8003f08:	f000 fd1e 	bl	8004948 <Servo_SetLimits>
  Servo_SetLimits(&servo17, s09_limits);
 8003f0c:	4630      	mov	r0, r6
 8003f0e:	495e      	ldr	r1, [pc, #376]	; (8004088 <Robot_Init+0x270>)
 8003f10:	f000 fd1a 	bl	8004948 <Servo_SetLimits>
  Servo_SetLimits(&servo18, s10_limits);
 8003f14:	4638      	mov	r0, r7
 8003f16:	495d      	ldr	r1, [pc, #372]	; (800408c <Robot_Init+0x274>)
 8003f18:	f000 fd16 	bl	8004948 <Servo_SetLimits>
  robot.hservos[RRL]=&servo01;
 8003f1c:	9b03      	ldr	r3, [sp, #12]
 8003f1e:	62a3      	str	r3, [r4, #40]	; 0x28
  robot.hservos[RLL]=&servo09;
 8003f20:	4b48      	ldr	r3, [pc, #288]	; (8004044 <Robot_Init+0x22c>)
 8003f22:	6423      	str	r3, [r4, #64]	; 0x40
  robot.hservos[FLL]=&servo10;
 8003f24:	4b48      	ldr	r3, [pc, #288]	; (8004048 <Robot_Init+0x230>)
  robot.hservos[RLM]=&servo08;
 8003f26:	f8c4 803c 	str.w	r8, [r4, #60]	; 0x3c
  robot.hservos[FLL]=&servo10;
 8003f2a:	6363      	str	r3, [r4, #52]	; 0x34
  Leg_Init(&legFR, robot.hservos[FRH], robot.hservos[FRM], robot.hservos[FRL], 0);
 8003f2c:	f8df 817c 	ldr.w	r8, [pc, #380]	; 80040ac <Robot_Init+0x294>
  robot.hservos[FLM]=&servo11;
 8003f30:	4b47      	ldr	r3, [pc, #284]	; (8004050 <Robot_Init+0x238>)
  robot.hservos[RLH]=&servo07;
 8003f32:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  robot.hservos[FLM]=&servo11;
 8003f36:	6323      	str	r3, [r4, #48]	; 0x30
  Leg_Init(&legFR, robot.hservos[FRH], robot.hservos[FRM], robot.hservos[FRL], 0);
 8003f38:	f04f 0900 	mov.w	r9, #0
  robot.hservos[FLH]=&servo12;
 8003f3c:	4b46      	ldr	r3, [pc, #280]	; (8004058 <Robot_Init+0x240>)
  robot.hservos[RRH]=&servo03;
 8003f3e:	f8c4 a020 	str.w	sl, [r4, #32]
  Leg_Init(&legFR, robot.hservos[FRH], robot.hservos[FRM], robot.hservos[FRL], 0);
 8003f42:	4632      	mov	r2, r6
 8003f44:	4629      	mov	r1, r5
  robot.hservos[FLH]=&servo12;
 8003f46:	62e3      	str	r3, [r4, #44]	; 0x2c
  robot.hservos[FRH]=&servo16;
 8003f48:	6165      	str	r5, [r4, #20]
  Leg_Init(&legFR, robot.hservos[FRH], robot.hservos[FRM], robot.hservos[FRL], 0);
 8003f4a:	463b      	mov	r3, r7
 8003f4c:	4640      	mov	r0, r8
  Leg_Init(&legFL, robot.hservos[FLH], robot.hservos[FLM], robot.hservos[FLL], 1);
 8003f4e:	f8df a160 	ldr.w	sl, [pc, #352]	; 80040b0 <Robot_Init+0x298>
  Leg_Init(&legFR, robot.hservos[FRH], robot.hservos[FRM], robot.hservos[FRL], 0);
 8003f52:	f8cd 9000 	str.w	r9, [sp]
  Leg_Init(&legFL, robot.hservos[FLH], robot.hservos[FLM], robot.hservos[FLL], 1);
 8003f56:	2501      	movs	r5, #1
  robot.hservos[FRM]=&servo17;
 8003f58:	61a6      	str	r6, [r4, #24]
  robot.hservos[FRL]=&servo18;
 8003f5a:	61e7      	str	r7, [r4, #28]
  robot.hservos[RRM]=&servo02;
 8003f5c:	f8c4 b024 	str.w	fp, [r4, #36]	; 0x24
  Leg_Init(&legFR, robot.hservos[FRH], robot.hservos[FRM], robot.hservos[FRL], 0);
 8003f60:	f7ff f966 	bl	8003230 <Leg_Init>
  Leg_Init(&legFL, robot.hservos[FLH], robot.hservos[FLM], robot.hservos[FLL], 1);
 8003f64:	9500      	str	r5, [sp, #0]
 8003f66:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 8003f6a:	c90e      	ldmia	r1, {r1, r2, r3}
 8003f6c:	4650      	mov	r0, sl
  Leg_Init(&legRR, robot.hservos[RRH], robot.hservos[RRM], robot.hservos[RRL], 0);
 8003f6e:	4e48      	ldr	r6, [pc, #288]	; (8004090 <Robot_Init+0x278>)
  Leg_Init(&legRL, robot.hservos[RLH], robot.hservos[RLM], robot.hservos[RLL], 1);
 8003f70:	4f48      	ldr	r7, [pc, #288]	; (8004094 <Robot_Init+0x27c>)
  Leg_Init(&legFL, robot.hservos[FLH], robot.hservos[FLM], robot.hservos[FLL], 1);
 8003f72:	f7ff f95d 	bl	8003230 <Leg_Init>
  Leg_Init(&legRR, robot.hservos[RRH], robot.hservos[RRM], robot.hservos[RRL], 0);
 8003f76:	f8cd 9000 	str.w	r9, [sp]
 8003f7a:	f104 0120 	add.w	r1, r4, #32
 8003f7e:	c90e      	ldmia	r1, {r1, r2, r3}
 8003f80:	4630      	mov	r0, r6
 8003f82:	f7ff f955 	bl	8003230 <Leg_Init>
  Leg_Init(&legRL, robot.hservos[RLH], robot.hservos[RLM], robot.hservos[RLL], 1);
 8003f86:	9500      	str	r5, [sp, #0]
 8003f88:	f104 0138 	add.w	r1, r4, #56	; 0x38
 8003f8c:	c90e      	ldmia	r1, {r1, r2, r3}
 8003f8e:	4638      	mov	r0, r7
 8003f90:	f7ff f94e 	bl	8003230 <Leg_Init>
  robot.hlegs[0]=&legFL;
 8003f94:	f8c4 a004 	str.w	sl, [r4, #4]
  robot.hlegs[1]=&legRL;
 8003f98:	60a7      	str	r7, [r4, #8]
  robot.hlegs[2]=&legFR;
 8003f9a:	f8c4 800c 	str.w	r8, [r4, #12]
  robot.hlegs[3]=&legRR;
 8003f9e:	6126      	str	r6, [r4, #16]
    Leg_SetPos(robot.hlegs[i], robot.hlegs[i]->origin_x-(i/(NBLEGS-1.))*robot.hlegs[i]->x_amplitude, robot.hlegs[i]->origin_y, LEG_HEIGHT);
 8003fa0:	f854 a025 	ldr.w	sl, [r4, r5, lsl #2]
 8003fa4:	f8da 001c 	ldr.w	r0, [sl, #28]
 8003fa8:	f7fc fafe 	bl	80005a8 <__aeabi_f2d>
 8003fac:	4606      	mov	r6, r0
 8003fae:	1e68      	subs	r0, r5, #1
 8003fb0:	460f      	mov	r7, r1
 8003fb2:	f7fc fae7 	bl	8000584 <__aeabi_i2d>
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	4b37      	ldr	r3, [pc, #220]	; (8004098 <Robot_Init+0x280>)
 8003fba:	f7fc fc73 	bl	80008a4 <__aeabi_ddiv>
 8003fbe:	4680      	mov	r8, r0
 8003fc0:	f8da 0034 	ldr.w	r0, [sl, #52]	; 0x34
 8003fc4:	4689      	mov	r9, r1
 8003fc6:	f7fc faef 	bl	80005a8 <__aeabi_f2d>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	460b      	mov	r3, r1
 8003fce:	4640      	mov	r0, r8
 8003fd0:	4649      	mov	r1, r9
 8003fd2:	f7fc fb3d 	bl	8000650 <__aeabi_dmul>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	460b      	mov	r3, r1
 8003fda:	4630      	mov	r0, r6
 8003fdc:	4639      	mov	r1, r7
 8003fde:	f7fc f983 	bl	80002e8 <__aeabi_dsub>
 8003fe2:	f7fc fe0d 	bl	8000c00 <__aeabi_d2f>
 8003fe6:	3501      	adds	r5, #1
 8003fe8:	ee00 0a10 	vmov	s0, r0
 8003fec:	eeb0 1a48 	vmov.f32	s2, s16
 8003ff0:	edda 0a08 	vldr	s1, [sl, #32]
 8003ff4:	4650      	mov	r0, sl
 8003ff6:	f7ff f953 	bl	80032a0 <Leg_SetPos>
  for(i=0;i<NBLEGS;i++)
 8003ffa:	2d05      	cmp	r5, #5
 8003ffc:	d1d0      	bne.n	8003fa0 <Robot_Init+0x188>
  hleg_temp=robot.hlegs[0];
  for(i=0;i<NBLEGS-1;i++)
    robot.hlegs[i]=robot.hlegs[i+1];
 8003ffe:	68a2      	ldr	r2, [r4, #8]
  hleg_temp=robot.hlegs[0];
 8004000:	6863      	ldr	r3, [r4, #4]
    robot.hlegs[i]=robot.hlegs[i+1];
 8004002:	6062      	str	r2, [r4, #4]
 8004004:	68e2      	ldr	r2, [r4, #12]
 8004006:	60a2      	str	r2, [r4, #8]
 8004008:	6922      	ldr	r2, [r4, #16]
  robot.hlegs[NBLEGS-1]=hleg_temp;
 800400a:	6123      	str	r3, [r4, #16]

  robot.state=FOLDED;
 800400c:	2300      	movs	r3, #0
    robot.hlegs[i]=robot.hlegs[i+1];
 800400e:	60e2      	str	r2, [r4, #12]
  robot.state=FOLDED;
 8004010:	7023      	strb	r3, [r4, #0]
}
 8004012:	b005      	add	sp, #20
 8004014:	ecbd 8b02 	vpop	{d8}
 8004018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800401c:	20000a90 	.word	0x20000a90
 8004020:	200005cc 	.word	0x200005cc
 8004024:	20000bb4 	.word	0x20000bb4
 8004028:	20000ab4 	.word	0x20000ab4
 800402c:	20000ef4 	.word	0x20000ef4
 8004030:	20000bd8 	.word	0x20000bd8
 8004034:	42a00000 	.word	0x42a00000
 8004038:	20000814 	.word	0x20000814
 800403c:	20000458 	.word	0x20000458
 8004040:	20000794 	.word	0x20000794
 8004044:	20000b34 	.word	0x20000b34
 8004048:	20000b10 	.word	0x20000b10
 800404c:	200008f4 	.word	0x200008f4
 8004050:	20000b90 	.word	0x20000b90
 8004054:	20000734 	.word	0x20000734
 8004058:	20000e88 	.word	0x20000e88
 800405c:	200004ec 	.word	0x200004ec
 8004060:	20000114 	.word	0x20000114
 8004064:	200000d8 	.word	0x200000d8
 8004068:	20000088 	.word	0x20000088
 800406c:	20000060 	.word	0x20000060
 8004070:	200000c4 	.word	0x200000c4
 8004074:	20000100 	.word	0x20000100
 8004078:	200000ec 	.word	0x200000ec
 800407c:	20000074 	.word	0x20000074
 8004080:	20000038 	.word	0x20000038
 8004084:	2000004c 	.word	0x2000004c
 8004088:	2000009c 	.word	0x2000009c
 800408c:	200000b0 	.word	0x200000b0
 8004090:	20000a58 	.word	0x20000a58
 8004094:	20000e18 	.word	0x20000e18
 8004098:	40080000 	.word	0x40080000
 800409c:	20000a34 	.word	0x20000a34
 80040a0:	20000e50 	.word	0x20000e50
 80040a4:	20000eac 	.word	0x20000eac
 80040a8:	20000ed0 	.word	0x20000ed0
 80040ac:	20000ad8 	.word	0x20000ad8
 80040b0:	20000b58 	.word	0x20000b58

080040b4 <Robot_ServoId2Idx>:

/**********************************************************
  * @brief Get servo index from ID
  */
int Robot_ServoId2Idx(char * id)
{
 80040b4:	b570      	push	{r4, r5, r6, lr}
  int i;

  for(i=0;i<3*NBLEGS;i++)
    if(strcmp(id, Robot_ServoId[i]) == 0)
 80040b6:	4e08      	ldr	r6, [pc, #32]	; (80040d8 <Robot_ServoId2Idx+0x24>)
{
 80040b8:	4605      	mov	r5, r0
  for(i=0;i<3*NBLEGS;i++)
 80040ba:	2400      	movs	r4, #0
    if(strcmp(id, Robot_ServoId[i]) == 0)
 80040bc:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 80040c0:	4628      	mov	r0, r5
 80040c2:	f7fc f8a5 	bl	8000210 <strcmp>
 80040c6:	b120      	cbz	r0, 80040d2 <Robot_ServoId2Idx+0x1e>
  for(i=0;i<3*NBLEGS;i++)
 80040c8:	3401      	adds	r4, #1
 80040ca:	2c0c      	cmp	r4, #12
 80040cc:	d1f6      	bne.n	80040bc <Robot_ServoId2Idx+0x8>
      return i;
  return -1;
 80040ce:	f04f 34ff 	mov.w	r4, #4294967295
}
 80040d2:	4620      	mov	r0, r4
 80040d4:	bd70      	pop	{r4, r5, r6, pc}
 80040d6:	bf00      	nop
 80040d8:	20000008 	.word	0x20000008

080040dc <Robot_Unfold>:

/**********************************************************
  * @brief  Move legs to start position
  */
void Robot_Unfold()
{
 80040dc:	b538      	push	{r3, r4, r5, lr}
  int i;

  robot.state=WAITING;
 80040de:	4d05      	ldr	r5, [pc, #20]	; (80040f4 <Robot_Unfold+0x18>)
 80040e0:	2401      	movs	r4, #1
 80040e2:	702c      	strb	r4, [r5, #0]
  for(i=0;i<NBLEGS;i++)
    Leg_Start(robot.hlegs[i]);
 80040e4:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 80040e8:	3401      	adds	r4, #1
 80040ea:	f7ff f8bd 	bl	8003268 <Leg_Start>
  for(i=0;i<NBLEGS;i++)
 80040ee:	2c05      	cmp	r4, #5
 80040f0:	d1f8      	bne.n	80040e4 <Robot_Unfold+0x8>

  // TODO : unflod legs
}
 80040f2:	bd38      	pop	{r3, r4, r5, pc}
 80040f4:	20000bd8 	.word	0x20000bd8

080040f8 <Robot_Fold>:

/**********************************************************
  * @brief  Move legs to store position
  */
void Robot_Fold()
{
 80040f8:	b538      	push	{r3, r4, r5, lr}
  int i;

  robot.state=FOLDED;
 80040fa:	4d06      	ldr	r5, [pc, #24]	; (8004114 <Robot_Fold+0x1c>)
 80040fc:	2200      	movs	r2, #0
 80040fe:	702a      	strb	r2, [r5, #0]
 8004100:	2401      	movs	r4, #1

  // TODO : fold legs

  for(i=0;i<NBLEGS;i++)
    Leg_Stop(robot.hlegs[i]);
 8004102:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 8004106:	3401      	adds	r4, #1
 8004108:	f7ff f8bb 	bl	8003282 <Leg_Stop>
  for(i=0;i<NBLEGS;i++)
 800410c:	2c05      	cmp	r4, #5
 800410e:	d1f8      	bne.n	8004102 <Robot_Fold+0xa>

}
 8004110:	bd38      	pop	{r3, r4, r5, pc}
 8004112:	bf00      	nop
 8004114:	20000bd8 	.word	0x20000bd8

08004118 <Robot_Update>:
/**********************************************************
  * @brief  Update legs position
  * This function is run every 20ms by Timer 13.
  */
void Robot_Update()
{
 8004118:	b570      	push	{r4, r5, r6, lr}

  if(robot.state == RUNNING)
 800411a:	4c41      	ldr	r4, [pc, #260]	; (8004220 <Robot_Update+0x108>)
 800411c:	7823      	ldrb	r3, [r4, #0]
 800411e:	2b02      	cmp	r3, #2
{
 8004120:	ed2d 8b02 	vpush	{d8}
  if(robot.state == RUNNING)
 8004124:	d176      	bne.n	8004214 <Robot_Update+0xfc>
  {
    int i;

    if(robot.remsteps_before_return == 0)// new sequence, update return leg
 8004126:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004128:	2b00      	cmp	r3, #0
 800412a:	d14e      	bne.n	80041ca <Robot_Update+0xb2>
      float step_dist; // distance at each step

      // rotate legs array so returning leg is at last position
      hleg_temp=robot.hlegs[NBLEGS-1];
      for(i=NBLEGS-2;i>=0;i--)
        robot.hlegs[i+1]=robot.hlegs[i];
 800412c:	68e5      	ldr	r5, [r4, #12]
 800412e:	68a2      	ldr	r2, [r4, #8]
      robot.hlegs[0]=hleg_temp;
      hleg_temp=robot.hlegs[NBLEGS-1];

      // Distance for returning leg
      return_x=hleg_temp->origin_x-hleg_temp->x;
 8004130:	edd5 7a04 	vldr	s15, [r5, #16]
 8004134:	ed95 8a07 	vldr	s16, [r5, #28]
      return_y=hleg_temp->origin_y-hleg_temp->y;
 8004138:	edd5 8a08 	vldr	s17, [r5, #32]
      hleg_temp=robot.hlegs[NBLEGS-1];
 800413c:	6923      	ldr	r3, [r4, #16]
        robot.hlegs[i+1]=robot.hlegs[i];
 800413e:	60e2      	str	r2, [r4, #12]
      return_x=hleg_temp->origin_x-hleg_temp->x;
 8004140:	ee38 8a67 	vsub.f32	s16, s16, s15
      return_y=hleg_temp->origin_y-hleg_temp->y;
 8004144:	edd5 7a05 	vldr	s15, [r5, #20]
        robot.hlegs[i+1]=robot.hlegs[i];
 8004148:	6862      	ldr	r2, [r4, #4]
 800414a:	60a2      	str	r2, [r4, #8]
      return_d=sqrtf(return_x*return_x+return_x*return_x);
 800414c:	ee28 0a08 	vmul.f32	s0, s16, s16
      return_y=hleg_temp->origin_y-hleg_temp->y;
 8004150:	ee78 8ae7 	vsub.f32	s17, s17, s15
      return_d=sqrtf(return_x*return_x+return_x*return_x);
 8004154:	ee30 0a00 	vadd.f32	s0, s0, s0
      robot.hlegs[0]=hleg_temp;
 8004158:	6063      	str	r3, [r4, #4]
        robot.hlegs[i+1]=robot.hlegs[i];
 800415a:	6125      	str	r5, [r4, #16]
      return_d=sqrtf(return_x*return_x+return_x*return_x);
 800415c:	f002 fcde 	bl	8006b1c <sqrtf>
      step_dist=robot.speed*SERVO_PULSE_PERIOD;
 8004160:	6e26      	ldr	r6, [r4, #96]	; 0x60
 8004162:	4630      	mov	r0, r6
 8004164:	f7fc fa20 	bl	80005a8 <__aeabi_f2d>
 8004168:	a32b      	add	r3, pc, #172	; (adr r3, 8004218 <Robot_Update+0x100>)
 800416a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800416e:	f7fc fa6f 	bl	8000650 <__aeabi_dmul>
 8004172:	f7fc fd45 	bl	8000c00 <__aeabi_d2f>
      robot.steps_before_return=(int)floorf(hleg_temp->x_amplitude/((NBLEGS-1)*step_dist));
 8004176:	ee07 0a10 	vmov	s14, r0
 800417a:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 800417e:	ed95 0a0d 	vldr	s0, [r5, #52]	; 0x34
 8004182:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004186:	ee80 0a27 	vdiv.f32	s0, s0, s15
 800418a:	f002 fbd5 	bl	8006938 <floorf>
 800418e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
      robot.remsteps_before_return=robot.steps_before_return;
      robot.ret_step_x=return_x/robot.steps_before_return;
      robot.ret_step_y=return_y/robot.steps_before_return;

      // step distance for staight line only
      robot.step_x=-robot.speed*SERVO_PULSE_PERIOD; // legs are going backward if speed is > 0
 8004192:	f086 4000 	eor.w	r0, r6, #2147483648	; 0x80000000
      robot.steps_before_return=(int)floorf(hleg_temp->x_amplitude/((NBLEGS-1)*step_dist));
 8004196:	ed84 0a16 	vstr	s0, [r4, #88]	; 0x58
      robot.remsteps_before_return=robot.steps_before_return;
 800419a:	ed84 0a17 	vstr	s0, [r4, #92]	; 0x5c
      robot.ret_step_x=return_x/robot.steps_before_return;
 800419e:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80041a2:	eec8 7a00 	vdiv.f32	s15, s16, s0
 80041a6:	edc4 7a14 	vstr	s15, [r4, #80]	; 0x50
      robot.ret_step_y=return_y/robot.steps_before_return;
 80041aa:	eec8 7a80 	vdiv.f32	s15, s17, s0
 80041ae:	edc4 7a15 	vstr	s15, [r4, #84]	; 0x54
      robot.step_x=-robot.speed*SERVO_PULSE_PERIOD; // legs are going backward if speed is > 0
 80041b2:	f7fc f9f9 	bl	80005a8 <__aeabi_f2d>
 80041b6:	a318      	add	r3, pc, #96	; (adr r3, 8004218 <Robot_Update+0x100>)
 80041b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041bc:	f7fc fa48 	bl	8000650 <__aeabi_dmul>
 80041c0:	f7fc fd1e 	bl	8000c00 <__aeabi_d2f>
      robot.step_y=0;
 80041c4:	2300      	movs	r3, #0
      robot.step_x=-robot.speed*SERVO_PULSE_PERIOD; // legs are going backward if speed is > 0
 80041c6:	64a0      	str	r0, [r4, #72]	; 0x48
      robot.step_y=0;
 80041c8:	64e3      	str	r3, [r4, #76]	; 0x4c
    }
    // Leg steps for forwarding legs
    for(i=0;i<NBLEGS-1;i++)
      Leg_Move(robot.hlegs[i], robot.step_x, robot.step_y, 0);
 80041ca:	ed9f 8a16 	vldr	s16, [pc, #88]	; 8004224 <Robot_Update+0x10c>
{
 80041ce:	2501      	movs	r5, #1
      Leg_Move(robot.hlegs[i], robot.step_x, robot.step_y, 0);
 80041d0:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 80041d4:	edd4 0a13 	vldr	s1, [r4, #76]	; 0x4c
 80041d8:	ed94 0a12 	vldr	s0, [r4, #72]	; 0x48
 80041dc:	eeb0 1a48 	vmov.f32	s2, s16
 80041e0:	3501      	adds	r5, #1
 80041e2:	f7ff f8fb 	bl	80033dc <Leg_Move>
    for(i=0;i<NBLEGS-1;i++)
 80041e6:	2d04      	cmp	r5, #4
 80041e8:	d1f2      	bne.n	80041d0 <Robot_Update+0xb8>
    // leg step for returning leg
    Leg_Move(robot.hlegs[NBLEGS-1], robot.ret_step_x, robot.ret_step_y, 0);
 80041ea:	ed9f 1a0e 	vldr	s2, [pc, #56]	; 8004224 <Robot_Update+0x10c>
 80041ee:	edd4 0a15 	vldr	s1, [r4, #84]	; 0x54
 80041f2:	ed94 0a14 	vldr	s0, [r4, #80]	; 0x50
 80041f6:	6920      	ldr	r0, [r4, #16]
 80041f8:	f7ff f8f0 	bl	80033dc <Leg_Move>
    // update phase step index
    robot.remsteps_before_return--;
 80041fc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80041fe:	3b01      	subs	r3, #1
 8004200:	65e3      	str	r3, [r4, #92]	; 0x5c
      LedSwitch(3, GPIO_PIN_RESET);
      robot.tim13_nb=0;
    }
#endif
    /* Toggle LED */
    HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8004202:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  {
    /* Toggle LED */
    HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
  }

}
 8004206:	ecbd 8b02 	vpop	{d8}
    HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 800420a:	4807      	ldr	r0, [pc, #28]	; (8004228 <Robot_Update+0x110>)
}
 800420c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8004210:	f7fd bb63 	b.w	80018da <HAL_GPIO_TogglePin>
 8004214:	2110      	movs	r1, #16
 8004216:	e7f6      	b.n	8004206 <Robot_Update+0xee>
 8004218:	47ae147b 	.word	0x47ae147b
 800421c:	3f947ae1 	.word	0x3f947ae1
 8004220:	20000bd8 	.word	0x20000bd8
 8004224:	00000000 	.word	0x00000000
 8004228:	40020400 	.word	0x40020400

0800422c <Robot_ReadCommand>:
  * @brief Interpret a command
  * @hserial serial handler to write status message
  * @param command command to interpret
  */
void Robot_ReadCommand(HAL_Serial_Handler * hserial, char *cmd)
{
 800422c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  //* State FOLDED ****************************************
  if (robot.state == FOLDED)
 800422e:	4e4c      	ldr	r6, [pc, #304]	; (8004360 <Robot_ReadCommand+0x134>)
 8004230:	7833      	ldrb	r3, [r6, #0]
{
 8004232:	4605      	mov	r5, r0
 8004234:	460c      	mov	r4, r1
 8004236:	4637      	mov	r7, r6
  if (robot.state == FOLDED)
 8004238:	b983      	cbnz	r3, 800425c <Robot_ReadCommand+0x30>
  {
    // Cmd unfold ***********
    if (strcmp(cmd, "unfold") == 0)
 800423a:	494a      	ldr	r1, [pc, #296]	; (8004364 <Robot_ReadCommand+0x138>)
 800423c:	4620      	mov	r0, r4
 800423e:	f7fb ffe7 	bl	8000210 <strcmp>
 8004242:	b920      	cbnz	r0, 800424e <Robot_ReadCommand+0x22>
    {
      Robot_Unfold();
 8004244:	f7ff ff4a 	bl	80040dc <Robot_Unfold>
    // Cmd fold *************
    else if (strcmp(cmd, "fold") == 0)
    {
      robot.state=FOLDED;
      Robot_Fold();
      HAL_Serial_Print(hserial,"OK %s\n", cmd);
 8004248:	4622      	mov	r2, r4
 800424a:	4947      	ldr	r1, [pc, #284]	; (8004368 <Robot_ReadCommand+0x13c>)
 800424c:	e001      	b.n	8004252 <Robot_ReadCommand+0x26>
      HAL_Serial_Print(hserial, "KO Wrong command \"%s\" in state FOLDED\n", cmd);
 800424e:	4947      	ldr	r1, [pc, #284]	; (800436c <Robot_ReadCommand+0x140>)
 8004250:	4622      	mov	r2, r4
        Servo_SetPulse(robot.hservos[robot.current_servo_idx], pulse);
        HAL_Serial_Print(hserial,"OK pulse st to %d\n", pulse);
      }
    }
    else
      HAL_Serial_Print(hserial, "KO Wrong command \"%s\" in state CONFIGURATION\n", cmd);
 8004252:	4628      	mov	r0, r5
 8004254:	f000 fb17 	bl	8004886 <HAL_Serial_Print>
  }
  else
  {
    HAL_Serial_Print(hserial, "KO Unknown state\n");
  }
}
 8004258:	b003      	add	sp, #12
 800425a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if (robot.state == WAITING)
 800425c:	2b01      	cmp	r3, #1
 800425e:	d11f      	bne.n	80042a0 <Robot_ReadCommand+0x74>
    if (strcmp(cmd, "run") == 0)
 8004260:	4943      	ldr	r1, [pc, #268]	; (8004370 <Robot_ReadCommand+0x144>)
 8004262:	4620      	mov	r0, r4
 8004264:	f7fb ffd4 	bl	8000210 <strcmp>
 8004268:	b930      	cbnz	r0, 8004278 <Robot_ReadCommand+0x4c>
      robot.state=RUNNING;
 800426a:	2302      	movs	r3, #2
      HAL_Serial_Print(hserial,"OK %s\n", cmd);
 800426c:	4622      	mov	r2, r4
 800426e:	493e      	ldr	r1, [pc, #248]	; (8004368 <Robot_ReadCommand+0x13c>)
      robot.state=RUNNING;
 8004270:	7033      	strb	r3, [r6, #0]
      HAL_Serial_Print(hserial,"OK %s\n", cmd);
 8004272:	4628      	mov	r0, r5
 8004274:	f000 fb07 	bl	8004886 <HAL_Serial_Print>
    if (strcmp(cmd, "config") == 0)
 8004278:	493e      	ldr	r1, [pc, #248]	; (8004374 <Robot_ReadCommand+0x148>)
 800427a:	4620      	mov	r0, r4
 800427c:	f7fb ffc8 	bl	8000210 <strcmp>
 8004280:	b910      	cbnz	r0, 8004288 <Robot_ReadCommand+0x5c>
      robot.state=CONFIGURATION;
 8004282:	2303      	movs	r3, #3
 8004284:	703b      	strb	r3, [r7, #0]
 8004286:	e7df      	b.n	8004248 <Robot_ReadCommand+0x1c>
    else if (strcmp(cmd, "fold") == 0)
 8004288:	493b      	ldr	r1, [pc, #236]	; (8004378 <Robot_ReadCommand+0x14c>)
 800428a:	4620      	mov	r0, r4
 800428c:	f7fb ffc0 	bl	8000210 <strcmp>
 8004290:	b918      	cbnz	r0, 800429a <Robot_ReadCommand+0x6e>
      robot.state=FOLDED;
 8004292:	7038      	strb	r0, [r7, #0]
      Robot_Fold();
 8004294:	f7ff ff30 	bl	80040f8 <Robot_Fold>
 8004298:	e7d6      	b.n	8004248 <Robot_ReadCommand+0x1c>
      HAL_Serial_Print(hserial, "KO Wrong command \"%s\" in state WAITING\n", cmd);
 800429a:	4622      	mov	r2, r4
 800429c:	4937      	ldr	r1, [pc, #220]	; (800437c <Robot_ReadCommand+0x150>)
 800429e:	e7d8      	b.n	8004252 <Robot_ReadCommand+0x26>
  else if (robot.state == RUNNING)
 80042a0:	2b02      	cmp	r3, #2
 80042a2:	d11e      	bne.n	80042e2 <Robot_ReadCommand+0xb6>
    if (strncmp(cmd, "speed", 5) == 0)
 80042a4:	2205      	movs	r2, #5
 80042a6:	4936      	ldr	r1, [pc, #216]	; (8004380 <Robot_ReadCommand+0x154>)
 80042a8:	4620      	mov	r0, r4
 80042aa:	f001 f97d 	bl	80055a8 <strncmp>
 80042ae:	b9a8      	cbnz	r0, 80042dc <Robot_ReadCommand+0xb0>
      if (sscanf(cmd, "speed%d", &speed) != 1)
 80042b0:	466a      	mov	r2, sp
 80042b2:	4934      	ldr	r1, [pc, #208]	; (8004384 <Robot_ReadCommand+0x158>)
 80042b4:	4620      	mov	r0, r4
 80042b6:	f001 f94b 	bl	8005550 <siscanf>
 80042ba:	2801      	cmp	r0, #1
 80042bc:	d002      	beq.n	80042c4 <Robot_ReadCommand+0x98>
        HAL_Serial_Print(hserial, "KO Wrong command syntax \"%s\" for command \"select<int>\"\n", cmd);
 80042be:	4622      	mov	r2, r4
 80042c0:	4931      	ldr	r1, [pc, #196]	; (8004388 <Robot_ReadCommand+0x15c>)
 80042c2:	e7c6      	b.n	8004252 <Robot_ReadCommand+0x26>
        robot.speed=(float)speed;
 80042c4:	eddd 7a00 	vldr	s15, [sp]
        HAL_Serial_Print(hserial,"OK speed set to %d\n", (int)robot.speed);
 80042c8:	4930      	ldr	r1, [pc, #192]	; (800438c <Robot_ReadCommand+0x160>)
        robot.speed=(float)speed;
 80042ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042ce:	edc6 7a18 	vstr	s15, [r6, #96]	; 0x60
        HAL_Serial_Print(hserial,"OK speed set to %d\n", (int)robot.speed);
 80042d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80042d6:	ee17 2a90 	vmov	r2, s15
 80042da:	e7ba      	b.n	8004252 <Robot_ReadCommand+0x26>
      HAL_Serial_Print(hserial, "KO Wrong command \"%s\" in state RUNNING\n", cmd);
 80042dc:	4622      	mov	r2, r4
 80042de:	492c      	ldr	r1, [pc, #176]	; (8004390 <Robot_ReadCommand+0x164>)
 80042e0:	e7b7      	b.n	8004252 <Robot_ReadCommand+0x26>
  else if (robot.state == CONFIGURATION)
 80042e2:	2b03      	cmp	r3, #3
 80042e4:	d138      	bne.n	8004358 <Robot_ReadCommand+0x12c>
    if (strncmp(cmd, "select", 6) == 0)
 80042e6:	2206      	movs	r2, #6
 80042e8:	492a      	ldr	r1, [pc, #168]	; (8004394 <Robot_ReadCommand+0x168>)
 80042ea:	4620      	mov	r0, r4
 80042ec:	f001 f95c 	bl	80055a8 <strncmp>
 80042f0:	b9a8      	cbnz	r0, 800431e <Robot_ReadCommand+0xf2>
      if (sscanf(cmd, "select%s", servo_id) != 1)
 80042f2:	466a      	mov	r2, sp
 80042f4:	4928      	ldr	r1, [pc, #160]	; (8004398 <Robot_ReadCommand+0x16c>)
 80042f6:	4620      	mov	r0, r4
 80042f8:	f001 f92a 	bl	8005550 <siscanf>
 80042fc:	2801      	cmp	r0, #1
 80042fe:	d1de      	bne.n	80042be <Robot_ReadCommand+0x92>
        HAL_Serial_Print(hserial, " servo \"%s\" selected\n", servo_id);
 8004300:	4926      	ldr	r1, [pc, #152]	; (800439c <Robot_ReadCommand+0x170>)
 8004302:	466a      	mov	r2, sp
 8004304:	4628      	mov	r0, r5
 8004306:	f000 fabe 	bl	8004886 <HAL_Serial_Print>
        servo_idx=Robot_ServoId2Idx(servo_id);
 800430a:	4668      	mov	r0, sp
 800430c:	f7ff fed2 	bl	80040b4 <Robot_ServoId2Idx>
        if( servo_idx >= 0)
 8004310:	1e02      	subs	r2, r0, #0
          robot.current_servo_idx=servo_idx;
 8004312:	bfa7      	ittee	ge
 8004314:	6472      	strge	r2, [r6, #68]	; 0x44
          HAL_Serial_Print(hserial,"OK servo %d selected\n", servo_idx);
 8004316:	4922      	ldrge	r1, [pc, #136]	; (80043a0 <Robot_ReadCommand+0x174>)
          HAL_Serial_Print(hserial, "KO Wrong servo ID\"%s\"\n", servo_id);
 8004318:	4922      	ldrlt	r1, [pc, #136]	; (80043a4 <Robot_ReadCommand+0x178>)
 800431a:	466a      	movlt	r2, sp
 800431c:	e799      	b.n	8004252 <Robot_ReadCommand+0x26>
    else if(strncmp(cmd, "pulse", 5) == 0)
 800431e:	2205      	movs	r2, #5
 8004320:	4921      	ldr	r1, [pc, #132]	; (80043a8 <Robot_ReadCommand+0x17c>)
 8004322:	4620      	mov	r0, r4
 8004324:	f001 f940 	bl	80055a8 <strncmp>
 8004328:	b998      	cbnz	r0, 8004352 <Robot_ReadCommand+0x126>
      if (sscanf(cmd, "pulse%d", &pulse) != 1)
 800432a:	466a      	mov	r2, sp
 800432c:	491f      	ldr	r1, [pc, #124]	; (80043ac <Robot_ReadCommand+0x180>)
 800432e:	4620      	mov	r0, r4
 8004330:	f001 f90e 	bl	8005550 <siscanf>
 8004334:	2801      	cmp	r0, #1
 8004336:	d002      	beq.n	800433e <Robot_ReadCommand+0x112>
        HAL_Serial_Print(hserial, "KO Wrong command syntax \"%s\" for command \"pulse<int>\"\n", cmd);
 8004338:	4622      	mov	r2, r4
 800433a:	491d      	ldr	r1, [pc, #116]	; (80043b0 <Robot_ReadCommand+0x184>)
 800433c:	e789      	b.n	8004252 <Robot_ReadCommand+0x26>
        Servo_SetPulse(robot.hservos[robot.current_servo_idx], pulse);
 800433e:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8004340:	9900      	ldr	r1, [sp, #0]
 8004342:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 8004346:	6970      	ldr	r0, [r6, #20]
 8004348:	f000 fb28 	bl	800499c <Servo_SetPulse>
        HAL_Serial_Print(hserial,"OK pulse st to %d\n", pulse);
 800434c:	9a00      	ldr	r2, [sp, #0]
 800434e:	4919      	ldr	r1, [pc, #100]	; (80043b4 <Robot_ReadCommand+0x188>)
 8004350:	e77f      	b.n	8004252 <Robot_ReadCommand+0x26>
      HAL_Serial_Print(hserial, "KO Wrong command \"%s\" in state CONFIGURATION\n", cmd);
 8004352:	4622      	mov	r2, r4
 8004354:	4918      	ldr	r1, [pc, #96]	; (80043b8 <Robot_ReadCommand+0x18c>)
 8004356:	e77c      	b.n	8004252 <Robot_ReadCommand+0x26>
    HAL_Serial_Print(hserial, "KO Unknown state\n");
 8004358:	4918      	ldr	r1, [pc, #96]	; (80043bc <Robot_ReadCommand+0x190>)
 800435a:	f000 fa94 	bl	8004886 <HAL_Serial_Print>
}
 800435e:	e77b      	b.n	8004258 <Robot_ReadCommand+0x2c>
 8004360:	20000bd8 	.word	0x20000bd8
 8004364:	08007531 	.word	0x08007531
 8004368:	08007538 	.word	0x08007538
 800436c:	0800753f 	.word	0x0800753f
 8004370:	08007566 	.word	0x08007566
 8004374:	0800756a 	.word	0x0800756a
 8004378:	08007533 	.word	0x08007533
 800437c:	08007571 	.word	0x08007571
 8004380:	08007599 	.word	0x08007599
 8004384:	0800759f 	.word	0x0800759f
 8004388:	080075a7 	.word	0x080075a7
 800438c:	080075df 	.word	0x080075df
 8004390:	080075f3 	.word	0x080075f3
 8004394:	0800761b 	.word	0x0800761b
 8004398:	08007622 	.word	0x08007622
 800439c:	0800762b 	.word	0x0800762b
 80043a0:	08007641 	.word	0x08007641
 80043a4:	08007657 	.word	0x08007657
 80043a8:	0800766e 	.word	0x0800766e
 80043ac:	08007674 	.word	0x08007674
 80043b0:	0800767c 	.word	0x0800767c
 80043b4:	080076b3 	.word	0x080076b3
 80043b8:	080076c6 	.word	0x080076c6
 80043bc:	080076f4 	.word	0x080076f4

080043c0 <Robot_GetState>:
/**********************************************************
  * @brief Return robot state as string
  */
char * Robot_GetState()
{
  if (robot.state == FOLDED)
 80043c0:	4b09      	ldr	r3, [pc, #36]	; (80043e8 <Robot_GetState+0x28>)
 80043c2:	781b      	ldrb	r3, [r3, #0]
 80043c4:	b14b      	cbz	r3, 80043da <Robot_GetState+0x1a>
    return "FOLDED";
  else if (robot.state == WAITING)
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d009      	beq.n	80043de <Robot_GetState+0x1e>
    return "WAITING";
  else if (robot.state == RUNNING)
 80043ca:	2b02      	cmp	r3, #2
 80043cc:	d009      	beq.n	80043e2 <Robot_GetState+0x22>
    return "RUNNING";
  else if (robot.state == CONFIGURATION)
    return "CONFIG";
  else
    return "UNKNOWN";
 80043ce:	4a07      	ldr	r2, [pc, #28]	; (80043ec <Robot_GetState+0x2c>)
 80043d0:	4807      	ldr	r0, [pc, #28]	; (80043f0 <Robot_GetState+0x30>)
 80043d2:	2b03      	cmp	r3, #3
 80043d4:	bf18      	it	ne
 80043d6:	4610      	movne	r0, r2
 80043d8:	4770      	bx	lr
    return "FOLDED";
 80043da:	4806      	ldr	r0, [pc, #24]	; (80043f4 <Robot_GetState+0x34>)
 80043dc:	4770      	bx	lr
    return "WAITING";
 80043de:	4806      	ldr	r0, [pc, #24]	; (80043f8 <Robot_GetState+0x38>)
 80043e0:	4770      	bx	lr
    return "RUNNING";
 80043e2:	4806      	ldr	r0, [pc, #24]	; (80043fc <Robot_GetState+0x3c>)
}
 80043e4:	4770      	bx	lr
 80043e6:	bf00      	nop
 80043e8:	20000bd8 	.word	0x20000bd8
 80043ec:	08007529 	.word	0x08007529
 80043f0:	08007522 	.word	0x08007522
 80043f4:	0800750b 	.word	0x0800750b
 80043f8:	08007512 	.word	0x08007512
 80043fc:	0800751a 	.word	0x0800751a

08004400 <Robot_ButtonPushed>:
/**********************************************************
  * @brief Interpret button push
  */
void Robot_ButtonPushed()
{
 8004400:	b510      	push	{r4, lr}
  if(robot.state == FOLDED)
 8004402:	4c0a      	ldr	r4, [pc, #40]	; (800442c <Robot_ButtonPushed+0x2c>)
 8004404:	7823      	ldrb	r3, [r4, #0]
 8004406:	b91b      	cbnz	r3, 8004410 <Robot_ButtonPushed+0x10>
  }
  else if (robot.state == CONFIGURATION)
  {
    robot.state=WAITING;
  }
}
 8004408:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Robot_Unfold();
 800440c:	f7ff be66 	b.w	80040dc <Robot_Unfold>
  else if (robot.state == WAITING)
 8004410:	2b01      	cmp	r3, #1
 8004412:	d106      	bne.n	8004422 <Robot_ButtonPushed+0x22>
    HAL_Delay(2000);
 8004414:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004418:	f7fc fe1a 	bl	8001050 <HAL_Delay>
    robot.state=RUNNING;
 800441c:	2302      	movs	r3, #2
    robot.state=WAITING;
 800441e:	7023      	strb	r3, [r4, #0]
 8004420:	bd10      	pop	{r4, pc}
  else if (robot.state == RUNNING)
 8004422:	3b02      	subs	r3, #2
 8004424:	2b01      	cmp	r3, #1
 8004426:	d8fb      	bhi.n	8004420 <Robot_ButtonPushed+0x20>
    robot.state=WAITING;
 8004428:	2301      	movs	r3, #1
 800442a:	e7f8      	b.n	800441e <Robot_ButtonPushed+0x1e>
 800442c:	20000bd8 	.word	0x20000bd8

08004430 <Robot_Autotest>:
  t_servo * hservoL2;
  t_servo * hservoH3;
  t_servo * hservoM3;
  t_servo * hservoL3;

  hservoH0=robot.hlegs[0]->hservoH;
 8004430:	4b46      	ldr	r3, [pc, #280]	; (800454c <Robot_Autotest+0x11c>)
{
 8004432:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  hservoH0=robot.hlegs[0]->hservoH;
 8004436:	685a      	ldr	r2, [r3, #4]
 8004438:	f8d2 b000 	ldr.w	fp, [r2]
  hservoM0=robot.hlegs[0]->hservoM;
 800443c:	f8d2 a004 	ldr.w	sl, [r2, #4]
  hservoL0=robot.hlegs[0]->hservoL;
 8004440:	f8d2 9008 	ldr.w	r9, [r2, #8]
  hservoH1=robot.hlegs[1]->hservoH;
 8004444:	689a      	ldr	r2, [r3, #8]
 8004446:	f8d2 8000 	ldr.w	r8, [r2]
  hservoM1=robot.hlegs[1]->hservoM;
 800444a:	6857      	ldr	r7, [r2, #4]
  hservoL1=robot.hlegs[1]->hservoL;
 800444c:	6896      	ldr	r6, [r2, #8]
  hservoH2=robot.hlegs[2]->hservoH;
 800444e:	68da      	ldr	r2, [r3, #12]
  hservoM2=robot.hlegs[2]->hservoM;
  hservoL2=robot.hlegs[2]->hservoL;
  hservoH3=robot.hlegs[3]->hservoH;
 8004450:	691b      	ldr	r3, [r3, #16]
  hservoM2=robot.hlegs[2]->hservoM;
 8004452:	6851      	ldr	r1, [r2, #4]
  hservoH2=robot.hlegs[2]->hservoH;
 8004454:	6815      	ldr	r5, [r2, #0]
  hservoL2=robot.hlegs[2]->hservoL;
 8004456:	6892      	ldr	r2, [r2, #8]
{
 8004458:	b087      	sub	sp, #28
  hservoM3=robot.hlegs[3]->hservoM;
  hservoL3=robot.hlegs[3]->hservoL;

  for(i=0;i<=100;i++)
 800445a:	2400      	movs	r4, #0
  hservoL2=robot.hlegs[2]->hservoL;
 800445c:	9202      	str	r2, [sp, #8]
  hservoH3=robot.hlegs[3]->hservoH;
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	9203      	str	r2, [sp, #12]
  hservoM3=robot.hlegs[3]->hservoM;
 8004462:	685a      	ldr	r2, [r3, #4]
  hservoL3=robot.hlegs[3]->hservoL;
 8004464:	689b      	ldr	r3, [r3, #8]
  hservoM2=robot.hlegs[2]->hservoM;
 8004466:	9101      	str	r1, [sp, #4]
  hservoM3=robot.hlegs[3]->hservoM;
 8004468:	9204      	str	r2, [sp, #16]
  hservoL3=robot.hlegs[3]->hservoL;
 800446a:	9305      	str	r3, [sp, #20]
  {
    Servo_SetRatio(hservoH0, i);
 800446c:	4621      	mov	r1, r4
 800446e:	4658      	mov	r0, fp
 8004470:	f000 fae6 	bl	8004a40 <Servo_SetRatio>
    Servo_SetRatio(hservoM0, i);
 8004474:	4621      	mov	r1, r4
 8004476:	4650      	mov	r0, sl
 8004478:	f000 fae2 	bl	8004a40 <Servo_SetRatio>
    Servo_SetRatio(hservoL0, i);
 800447c:	4621      	mov	r1, r4
 800447e:	4648      	mov	r0, r9
 8004480:	f000 fade 	bl	8004a40 <Servo_SetRatio>
    Servo_SetRatio(hservoH1, i);
 8004484:	4621      	mov	r1, r4
 8004486:	4640      	mov	r0, r8
 8004488:	f000 fada 	bl	8004a40 <Servo_SetRatio>
    Servo_SetRatio(hservoM1, i);
 800448c:	4621      	mov	r1, r4
 800448e:	4638      	mov	r0, r7
 8004490:	f000 fad6 	bl	8004a40 <Servo_SetRatio>
    Servo_SetRatio(hservoL1, i);
 8004494:	4621      	mov	r1, r4
 8004496:	4630      	mov	r0, r6
 8004498:	f000 fad2 	bl	8004a40 <Servo_SetRatio>
    Servo_SetRatio(hservoH2, i);
 800449c:	4621      	mov	r1, r4
 800449e:	4628      	mov	r0, r5
 80044a0:	f000 face 	bl	8004a40 <Servo_SetRatio>
    Servo_SetRatio(hservoM2, i);
 80044a4:	4621      	mov	r1, r4
 80044a6:	9801      	ldr	r0, [sp, #4]
 80044a8:	f000 faca 	bl	8004a40 <Servo_SetRatio>
    Servo_SetRatio(hservoL2, i);
 80044ac:	4621      	mov	r1, r4
 80044ae:	9802      	ldr	r0, [sp, #8]
 80044b0:	f000 fac6 	bl	8004a40 <Servo_SetRatio>
    Servo_SetRatio(hservoH3, i);
 80044b4:	4621      	mov	r1, r4
 80044b6:	9803      	ldr	r0, [sp, #12]
 80044b8:	f000 fac2 	bl	8004a40 <Servo_SetRatio>
    Servo_SetRatio(hservoM3, i);
 80044bc:	4621      	mov	r1, r4
 80044be:	9804      	ldr	r0, [sp, #16]
 80044c0:	f000 fabe 	bl	8004a40 <Servo_SetRatio>
    Servo_SetRatio(hservoL3, i);
 80044c4:	4621      	mov	r1, r4
 80044c6:	9805      	ldr	r0, [sp, #20]
 80044c8:	f000 faba 	bl	8004a40 <Servo_SetRatio>
  for(i=0;i<=100;i++)
 80044cc:	3401      	adds	r4, #1
    HAL_Delay(20);
 80044ce:	2014      	movs	r0, #20
 80044d0:	f7fc fdbe 	bl	8001050 <HAL_Delay>
  for(i=0;i<=100;i++)
 80044d4:	2c65      	cmp	r4, #101	; 0x65
 80044d6:	d1c9      	bne.n	800446c <Robot_Autotest+0x3c>
 80044d8:	2464      	movs	r4, #100	; 0x64
  }
  for(i=100;i>=0;i--)
  {
    Servo_SetRatio(hservoH0, i);
 80044da:	4621      	mov	r1, r4
 80044dc:	4658      	mov	r0, fp
 80044de:	f000 faaf 	bl	8004a40 <Servo_SetRatio>
    Servo_SetRatio(hservoM0, i);
 80044e2:	4621      	mov	r1, r4
 80044e4:	4650      	mov	r0, sl
 80044e6:	f000 faab 	bl	8004a40 <Servo_SetRatio>
    Servo_SetRatio(hservoL0, i);
 80044ea:	4621      	mov	r1, r4
 80044ec:	4648      	mov	r0, r9
 80044ee:	f000 faa7 	bl	8004a40 <Servo_SetRatio>
    Servo_SetRatio(hservoH1, i);
 80044f2:	4621      	mov	r1, r4
 80044f4:	4640      	mov	r0, r8
 80044f6:	f000 faa3 	bl	8004a40 <Servo_SetRatio>
    Servo_SetRatio(hservoM1, i);
 80044fa:	4621      	mov	r1, r4
 80044fc:	4638      	mov	r0, r7
 80044fe:	f000 fa9f 	bl	8004a40 <Servo_SetRatio>
    Servo_SetRatio(hservoL1, i);
 8004502:	4621      	mov	r1, r4
 8004504:	4630      	mov	r0, r6
 8004506:	f000 fa9b 	bl	8004a40 <Servo_SetRatio>
    Servo_SetRatio(hservoH2, i);
 800450a:	4621      	mov	r1, r4
 800450c:	4628      	mov	r0, r5
 800450e:	f000 fa97 	bl	8004a40 <Servo_SetRatio>
    Servo_SetRatio(hservoM2, i);
 8004512:	4621      	mov	r1, r4
 8004514:	9801      	ldr	r0, [sp, #4]
 8004516:	f000 fa93 	bl	8004a40 <Servo_SetRatio>
    Servo_SetRatio(hservoL2, i);
 800451a:	4621      	mov	r1, r4
 800451c:	9802      	ldr	r0, [sp, #8]
 800451e:	f000 fa8f 	bl	8004a40 <Servo_SetRatio>
    Servo_SetRatio(hservoH3, i);
 8004522:	4621      	mov	r1, r4
 8004524:	9803      	ldr	r0, [sp, #12]
 8004526:	f000 fa8b 	bl	8004a40 <Servo_SetRatio>
    Servo_SetRatio(hservoM3, i);
 800452a:	4621      	mov	r1, r4
 800452c:	9804      	ldr	r0, [sp, #16]
 800452e:	f000 fa87 	bl	8004a40 <Servo_SetRatio>
    Servo_SetRatio(hservoL3, i);
 8004532:	4621      	mov	r1, r4
 8004534:	9805      	ldr	r0, [sp, #20]
 8004536:	f000 fa83 	bl	8004a40 <Servo_SetRatio>
    HAL_Delay(20);
 800453a:	2014      	movs	r0, #20
 800453c:	f7fc fd88 	bl	8001050 <HAL_Delay>
  for(i=100;i>=0;i--)
 8004540:	f114 34ff 	adds.w	r4, r4, #4294967295
 8004544:	d2c9      	bcs.n	80044da <Robot_Autotest+0xaa>
  }
}
 8004546:	b007      	add	sp, #28
 8004548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800454c:	20000bd8 	.word	0x20000bd8

08004550 <HAL_UART_ErrorCallback>:
 *
 */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
  static int id = 0;
  for(id=0;id!=serial_counter;++id)
 8004550:	4913      	ldr	r1, [pc, #76]	; (80045a0 <HAL_UART_ErrorCallback+0x50>)
 8004552:	4a14      	ldr	r2, [pc, #80]	; (80045a4 <HAL_UART_ErrorCallback+0x54>)
{
 8004554:	b5f0      	push	{r4, r5, r6, r7, lr}
  for(id=0;id!=serial_counter;++id)
 8004556:	2300      	movs	r3, #0
  {
    if(hserial_table[id]->huart == huart)
 8004558:	f8df e04c 	ldr.w	lr, [pc, #76]	; 80045a8 <HAL_UART_ErrorCallback+0x58>
  for(id=0;id!=serial_counter;++id)
 800455c:	680d      	ldr	r5, [r1, #0]
 800455e:	6013      	str	r3, [r2, #0]
{
 8004560:	4607      	mov	r7, r0
  for(id=0;id!=serial_counter;++id)
 8004562:	4619      	mov	r1, r3
 8004564:	429d      	cmp	r5, r3
 8004566:	461e      	mov	r6, r3
 8004568:	d102      	bne.n	8004570 <HAL_UART_ErrorCallback+0x20>
 800456a:	b101      	cbz	r1, 800456e <HAL_UART_ErrorCallback+0x1e>
 800456c:	6015      	str	r5, [r2, #0]
 800456e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(hserial_table[id]->huart == huart)
 8004570:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 8004574:	6820      	ldr	r0, [r4, #0]
 8004576:	42b8      	cmp	r0, r7
 8004578:	f103 0301 	add.w	r3, r3, #1
 800457c:	d10d      	bne.n	800459a <HAL_UART_ErrorCallback+0x4a>
 800457e:	b101      	cbz	r1, 8004582 <HAL_UART_ErrorCallback+0x32>
 8004580:	6016      	str	r6, [r2, #0]
    {
      hserial_table[id]->rx_tail_ptr = hserial_table[id]->rx_circular_buffer;
 8004582:	f504 5102 	add.w	r1, r4, #8320	; 0x2080
 8004586:	f642 0390 	movw	r3, #10384	; 0x2890
 800458a:	3110      	adds	r1, #16
 800458c:	50e1      	str	r1, [r4, r3]
      HAL_UART_Receive_DMA(hserial_table[id]->huart, hserial_table[id]->rx_circular_buffer,size_of_rx_circular_buffer);
 800458e:	f44f 6200 	mov.w	r2, #2048	; 0x800
       break;
    }
  }
}
 8004592:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      HAL_UART_Receive_DMA(hserial_table[id]->huart, hserial_table[id]->rx_circular_buffer,size_of_rx_circular_buffer);
 8004596:	f7fe bcb5 	b.w	8002f04 <HAL_UART_Receive_DMA>
 800459a:	2101      	movs	r1, #1
 800459c:	e7e2      	b.n	8004564 <HAL_UART_ErrorCallback+0x14>
 800459e:	bf00      	nop
 80045a0:	2000032c 	.word	0x2000032c
 80045a4:	20000324 	.word	0x20000324
 80045a8:	2000031c 	.word	0x2000031c

080045ac <HAL_Serial_Init>:

/**********************************************************
 *
 */
void HAL_Serial_Init(UART_HandleTypeDef * huart, HAL_Serial_Handler * hserial)
{
 80045ac:	460b      	mov	r3, r1
  // register this handle
  hserial_table[serial_counter++]=hserial;
 80045ae:	490f      	ldr	r1, [pc, #60]	; (80045ec <HAL_Serial_Init+0x40>)
 80045b0:	680a      	ldr	r2, [r1, #0]
{
 80045b2:	b410      	push	{r4}
  hserial_table[serial_counter++]=hserial;
 80045b4:	1c54      	adds	r4, r2, #1
 80045b6:	600c      	str	r4, [r1, #0]
 80045b8:	490d      	ldr	r1, [pc, #52]	; (80045f0 <HAL_Serial_Init+0x44>)
  // reset rx circular buffer
  hserial->rx_tail_ptr = hserial->rx_circular_buffer;

    // start rx DMA
  HAL_UART_Receive_DMA(hserial->huart, hserial->rx_circular_buffer,size_of_rx_circular_buffer);
}
 80045ba:	f85d 4b04 	ldr.w	r4, [sp], #4
  hserial_table[serial_counter++]=hserial;
 80045be:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
    hserial->tx_head_position = 0;
 80045c2:	f242 0184 	movw	r1, #8324	; 0x2084
 80045c6:	2200      	movs	r2, #0
    hserial->huart = huart;
 80045c8:	6018      	str	r0, [r3, #0]
    hserial->tx_head_position = 0;
 80045ca:	505a      	str	r2, [r3, r1]
    hserial->tx_tail_position = 0;
 80045cc:	f242 0188 	movw	r1, #8328	; 0x2088
 80045d0:	505a      	str	r2, [r3, r1]
  hserial->tx_dma = 0;
 80045d2:	f242 018c 	movw	r1, #8332	; 0x208c
 80045d6:	505a      	str	r2, [r3, r1]
  hserial->rx_tail_ptr = hserial->rx_circular_buffer;
 80045d8:	f642 0290 	movw	r2, #10384	; 0x2890
 80045dc:	f503 5102 	add.w	r1, r3, #8320	; 0x2080
 80045e0:	3110      	adds	r1, #16
 80045e2:	5099      	str	r1, [r3, r2]
  HAL_UART_Receive_DMA(hserial->huart, hserial->rx_circular_buffer,size_of_rx_circular_buffer);
 80045e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80045e8:	f7fe bc8c 	b.w	8002f04 <HAL_UART_Receive_DMA>
 80045ec:	2000032c 	.word	0x2000032c
 80045f0:	2000031c 	.word	0x2000031c

080045f4 <HAL_Serial_Read>:

/**********************************************************
 *
 */
int HAL_Serial_Read(HAL_Serial_Handler * hserial, uint8_t * ptr, int len )
{
 80045f4:	4603      	mov	r3, r0
    if(hserial->huart == 0)
 80045f6:	6800      	ldr	r0, [r0, #0]
{
 80045f8:	b570      	push	{r4, r5, r6, lr}
    if(hserial->huart == 0)
 80045fa:	b160      	cbz	r0, 8004616 <HAL_Serial_Read+0x22>
        return 0;
    uint8_t const * head = hserial->rx_circular_buffer + size_of_rx_circular_buffer - __HAL_DMA_GET_COUNTER(hserial->huart->hdmarx);
 80045fc:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80045fe:	6800      	ldr	r0, [r0, #0]
 8004600:	6844      	ldr	r4, [r0, #4]
 8004602:	1b1c      	subs	r4, r3, r4
 8004604:	f504 5422 	add.w	r4, r4, #10368	; 0x2880
    int counter = 0;
    while(counter!=len)
    {
        if(head==hserial->rx_tail_ptr)
 8004608:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
    uint8_t const * head = hserial->rx_circular_buffer + size_of_rx_circular_buffer - __HAL_DMA_GET_COUNTER(hserial->huart->hdmarx);
 800460c:	3410      	adds	r4, #16
    int counter = 0;
 800460e:	2000      	movs	r0, #0
        if(head==hserial->rx_tail_ptr)
 8004610:	3310      	adds	r3, #16
    while(counter!=len)
 8004612:	4290      	cmp	r0, r2
 8004614:	d100      	bne.n	8004618 <HAL_Serial_Read+0x24>
        if(hserial->rx_tail_ptr>=hserial->rx_circular_buffer + size_of_rx_circular_buffer)
            hserial->rx_tail_ptr-=size_of_rx_circular_buffer;
        ++counter;
    }
    return counter;
}
 8004616:	bd70      	pop	{r4, r5, r6, pc}
        if(head==hserial->rx_tail_ptr)
 8004618:	681d      	ldr	r5, [r3, #0]
 800461a:	42ac      	cmp	r4, r5
 800461c:	d0fb      	beq.n	8004616 <HAL_Serial_Read+0x22>
        *ptr++=*hserial->rx_tail_ptr++;
 800461e:	1c6e      	adds	r6, r5, #1
 8004620:	601e      	str	r6, [r3, #0]
 8004622:	782d      	ldrb	r5, [r5, #0]
 8004624:	540d      	strb	r5, [r1, r0]
        if(hserial->rx_tail_ptr>=hserial->rx_circular_buffer + size_of_rx_circular_buffer)
 8004626:	681d      	ldr	r5, [r3, #0]
 8004628:	429d      	cmp	r5, r3
            hserial->rx_tail_ptr-=size_of_rx_circular_buffer;
 800462a:	bf24      	itt	cs
 800462c:	f5a5 6500 	subcs.w	r5, r5, #2048	; 0x800
 8004630:	601d      	strcs	r5, [r3, #0]
        ++counter;
 8004632:	3001      	adds	r0, #1
 8004634:	e7ed      	b.n	8004612 <HAL_Serial_Read+0x1e>

08004636 <HAL_Serial_Write>:

/**********************************************************
 *
 */
int HAL_Serial_Write(HAL_Serial_Handler * hserial, uint8_t const * ptr, int len )
{
 8004636:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(hserial->huart == 0)
 8004638:	6803      	ldr	r3, [r0, #0]
{
 800463a:	4604      	mov	r4, r0
 800463c:	4616      	mov	r6, r2
    if(hserial->huart == 0)
 800463e:	b353      	cbz	r3, 8004696 <HAL_Serial_Write+0x60>
        return 0;

    // copy user data into the head tx buffer into tx pool, inc tx pool head
    hserial->tx_buffer_pool[hserial->tx_head_position].length = len;
 8004640:	f242 0784 	movw	r7, #8324	; 0x2084
 8004644:	f44f 7582 	mov.w	r5, #260	; 0x104
 8004648:	59c0      	ldr	r0, [r0, r7]
 800464a:	4368      	muls	r0, r5
 800464c:	1823      	adds	r3, r4, r0
    uint8_t * dst = hserial->tx_buffer_pool[hserial->tx_head_position].data;
 800464e:	3004      	adds	r0, #4
    hserial->tx_buffer_pool[hserial->tx_head_position].length = len;
 8004650:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    memcpy(dst,ptr,len);
 8004654:	4420      	add	r0, r4
 8004656:	f000 ff29 	bl	80054ac <memcpy>
    hserial->tx_head_position = (hserial->tx_head_position + 1 ) % size_of_tx_pool;
 800465a:	59e3      	ldr	r3, [r4, r7]
 800465c:	3301      	adds	r3, #1
 800465e:	f003 031f 	and.w	r3, r3, #31
 8004662:	51e3      	str	r3, [r4, r7]

    // if no tx dma running, start tx dma
    if(hserial->tx_dma==0)
 8004664:	f242 038c 	movw	r3, #8332	; 0x208c
 8004668:	58e2      	ldr	r2, [r4, r3]
 800466a:	b992      	cbnz	r2, 8004692 <HAL_Serial_Write+0x5c>
        //do
        //{
          //result =
          HAL_UART_Transmit_DMA(
              hserial->huart,
          hserial->tx_buffer_pool[hserial->tx_tail_position].data,
 800466c:	f242 0788 	movw	r7, #8328	; 0x2088
        hserial->tx_dma=1;
 8004670:	2201      	movs	r2, #1
          hserial->tx_buffer_pool[hserial->tx_tail_position].data,
 8004672:	59e1      	ldr	r1, [r4, r7]
        hserial->tx_dma=1;
 8004674:	50e2      	str	r2, [r4, r3]
          hserial->tx_buffer_pool[hserial->tx_tail_position].length
 8004676:	434d      	muls	r5, r1
 8004678:	1963      	adds	r3, r4, r5
          hserial->tx_buffer_pool[hserial->tx_tail_position].data,
 800467a:	3504      	adds	r5, #4
          HAL_UART_Transmit_DMA(
 800467c:	f8b3 2104 	ldrh.w	r2, [r3, #260]	; 0x104
 8004680:	6820      	ldr	r0, [r4, #0]
 8004682:	1961      	adds	r1, r4, r5
 8004684:	f7fe fc04 	bl	8002e90 <HAL_UART_Transmit_DMA>
          );
        //}
        //while(result!=HAL_OK);
        hserial->tx_tail_position = (hserial->tx_tail_position + 1 ) % size_of_tx_pool;
 8004688:	59e3      	ldr	r3, [r4, r7]
 800468a:	3301      	adds	r3, #1
 800468c:	f003 031f 	and.w	r3, r3, #31
 8004690:	51e3      	str	r3, [r4, r7]
    else
    {
      // end of tx dma callback will start next tx dma
    }
    return len;
}
 8004692:	4630      	mov	r0, r6
 8004694:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
 8004696:	461e      	mov	r6, r3
 8004698:	e7fb      	b.n	8004692 <HAL_Serial_Write+0x5c>
	...

0800469c <HAL_UART_TxCpltCallback>:

/**********************************************************
 *
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800469c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  static int id = 0;
  for(id=0;id!=serial_counter;++id)
 800469e:	4a1f      	ldr	r2, [pc, #124]	; (800471c <HAL_UART_TxCpltCallback+0x80>)
 80046a0:	4d1f      	ldr	r5, [pc, #124]	; (8004720 <HAL_UART_TxCpltCallback+0x84>)
  {
    if(hserial_table[id]->huart == huart && hserial_table[id]->tx_dma == 1)
 80046a2:	4f20      	ldr	r7, [pc, #128]	; (8004724 <HAL_UART_TxCpltCallback+0x88>)
  for(id=0;id!=serial_counter;++id)
 80046a4:	6811      	ldr	r1, [r2, #0]
 80046a6:	2300      	movs	r3, #0
{
 80046a8:	4606      	mov	r6, r0
  for(id=0;id!=serial_counter;++id)
 80046aa:	602b      	str	r3, [r5, #0]
 80046ac:	461a      	mov	r2, r3
    if(hserial_table[id]->huart == huart && hserial_table[id]->tx_dma == 1)
 80046ae:	f242 0e8c 	movw	lr, #8332	; 0x208c
  for(id=0;id!=serial_counter;++id)
 80046b2:	4299      	cmp	r1, r3
 80046b4:	d102      	bne.n	80046bc <HAL_UART_TxCpltCallback+0x20>
 80046b6:	b102      	cbz	r2, 80046ba <HAL_UART_TxCpltCallback+0x1e>
 80046b8:	6029      	str	r1, [r5, #0]
 80046ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(hserial_table[id]->huart == huart && hserial_table[id]->tx_dma == 1)
 80046bc:	f857 4023 	ldr.w	r4, [r7, r3, lsl #2]
 80046c0:	6820      	ldr	r0, [r4, #0]
 80046c2:	42b0      	cmp	r0, r6
 80046c4:	d126      	bne.n	8004714 <HAL_UART_TxCpltCallback+0x78>
 80046c6:	f854 c00e 	ldr.w	ip, [r4, lr]
 80046ca:	f1bc 0f01 	cmp.w	ip, #1
 80046ce:	d121      	bne.n	8004714 <HAL_UART_TxCpltCallback+0x78>
 80046d0:	b102      	cbz	r2, 80046d4 <HAL_UART_TxCpltCallback+0x38>
 80046d2:	602b      	str	r3, [r5, #0]
    {
      // tx buffer from pool waiting for transmission ?
      if(hserial_table[id]->tx_head_position!=hserial_table[id]->tx_tail_position)
 80046d4:	f242 0688 	movw	r6, #8328	; 0x2088
 80046d8:	f242 0284 	movw	r2, #8324	; 0x2084
 80046dc:	59a3      	ldr	r3, [r4, r6]
 80046de:	58a2      	ldr	r2, [r4, r2]
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d012      	beq.n	800470a <HAL_UART_TxCpltCallback+0x6e>
        //{
        //result =
        HAL_UART_Transmit_DMA(
              hserial_table[id]->huart,
              hserial_table[id]->tx_buffer_pool[hserial_table[id]->tx_tail_position].data,
              hserial_table[id]->tx_buffer_pool[hserial_table[id]->tx_tail_position].length
 80046e4:	f44f 7182 	mov.w	r1, #260	; 0x104
 80046e8:	4359      	muls	r1, r3
 80046ea:	1863      	adds	r3, r4, r1
              hserial_table[id]->tx_buffer_pool[hserial_table[id]->tx_tail_position].data,
 80046ec:	3104      	adds	r1, #4
        HAL_UART_Transmit_DMA(
 80046ee:	f8b3 2104 	ldrh.w	r2, [r3, #260]	; 0x104
 80046f2:	4421      	add	r1, r4
 80046f4:	f7fe fbcc 	bl	8002e90 <HAL_UART_Transmit_DMA>
              );
            //}
            //while(result!=HAL_OK);

        // inc tail
        hserial_table[id]->tx_tail_position = (hserial_table[id]->tx_tail_position + 1 ) % size_of_tx_pool;
 80046f8:	682b      	ldr	r3, [r5, #0]
 80046fa:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
 80046fe:	5993      	ldr	r3, [r2, r6]
 8004700:	3301      	adds	r3, #1
 8004702:	f003 031f 	and.w	r3, r3, #31
 8004706:	5193      	str	r3, [r2, r6]
 8004708:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      }
      else
      {
        // reset tx dma
        hserial_table[id]->tx_dma = 0;
 800470a:	f242 038c 	movw	r3, #8332	; 0x208c
 800470e:	2200      	movs	r2, #0
 8004710:	50e2      	str	r2, [r4, r3]
 8004712:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004714:	3301      	adds	r3, #1
 8004716:	2201      	movs	r2, #1
 8004718:	e7cb      	b.n	80046b2 <HAL_UART_TxCpltCallback+0x16>
 800471a:	bf00      	nop
 800471c:	2000032c 	.word	0x2000032c
 8004720:	20000328 	.word	0x20000328
 8004724:	2000031c 	.word	0x2000031c

08004728 <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 8004728:	b570      	push	{r4, r5, r6, lr}
  int div = 1;
 800472a:	2301      	movs	r3, #1
  while (d/div >= base)
 800472c:	fbb1 f4f3 	udiv	r4, r1, r3
 8004730:	4294      	cmp	r4, r2
 8004732:	d201      	bcs.n	8004738 <ts_itoa+0x10>
    div *= base;

  while (div != 0)
 8004734:	b913      	cbnz	r3, 800473c <ts_itoa+0x14>
    if (num > 9)
      *((*buf)++) = (num-10) + 'A';
    else
      *((*buf)++) = num + '0';
  }
}
 8004736:	bd70      	pop	{r4, r5, r6, pc}
    div *= base;
 8004738:	4353      	muls	r3, r2
 800473a:	e7f7      	b.n	800472c <ts_itoa+0x4>
 800473c:	6805      	ldr	r5, [r0, #0]
    int num = d/div;
 800473e:	fbb1 f4f3 	udiv	r4, r1, r3
    if (num > 9)
 8004742:	2c09      	cmp	r4, #9
    d = d%div;
 8004744:	fb03 1114 	mls	r1, r3, r4, r1
      *((*buf)++) = (num-10) + 'A';
 8004748:	f105 0601 	add.w	r6, r5, #1
 800474c:	bfcc      	ite	gt
 800474e:	3437      	addgt	r4, #55	; 0x37
      *((*buf)++) = num + '0';
 8004750:	3430      	addle	r4, #48	; 0x30
      *((*buf)++) = (num-10) + 'A';
 8004752:	6006      	str	r6, [r0, #0]
    div /= base;
 8004754:	fb93 f3f2 	sdiv	r3, r3, r2
      *((*buf)++) = num + '0';
 8004758:	702c      	strb	r4, [r5, #0]
 800475a:	e7eb      	b.n	8004734 <ts_itoa+0xc>

0800475c <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 800475c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004760:	ad02      	add	r5, sp, #8
 8004762:	460c      	mov	r4, r1
 8004764:	f845 0d04 	str.w	r0, [r5, #-4]!
 8004768:	4613      	mov	r3, r2
  char *start_buf = buf;
 800476a:	4606      	mov	r6, r0
        {
          signed int val = va_arg(va, signed int);
          if (val < 0)
          {
            val *= -1;
            *buf++ = '-';
 800476c:	272d      	movs	r7, #45	; 0x2d
  while(*fmt)
 800476e:	7822      	ldrb	r2, [r4, #0]
 8004770:	b932      	cbnz	r2, 8004780 <ts_formatstring+0x24>
    else
    {
      *buf++ = *fmt++;
    }
  }
  *buf = 0;
 8004772:	9b01      	ldr	r3, [sp, #4]
 8004774:	701a      	strb	r2, [r3, #0]

  return (int)(buf - start_buf);
}
 8004776:	9801      	ldr	r0, [sp, #4]
 8004778:	1b80      	subs	r0, r0, r6
 800477a:	b002      	add	sp, #8
 800477c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (*fmt == '%')
 8004780:	2a25      	cmp	r2, #37	; 0x25
 8004782:	d146      	bne.n	8004812 <ts_formatstring+0xb6>
      switch (*(++fmt))
 8004784:	7862      	ldrb	r2, [r4, #1]
 8004786:	2a64      	cmp	r2, #100	; 0x64
 8004788:	d021      	beq.n	80047ce <ts_formatstring+0x72>
 800478a:	d80a      	bhi.n	80047a2 <ts_formatstring+0x46>
 800478c:	2a58      	cmp	r2, #88	; 0x58
 800478e:	d013      	beq.n	80047b8 <ts_formatstring+0x5c>
 8004790:	2a63      	cmp	r2, #99	; 0x63
 8004792:	d015      	beq.n	80047c0 <ts_formatstring+0x64>
 8004794:	2a25      	cmp	r2, #37	; 0x25
 8004796:	d109      	bne.n	80047ac <ts_formatstring+0x50>
          *buf++ = '%';
 8004798:	9901      	ldr	r1, [sp, #4]
 800479a:	1c48      	adds	r0, r1, #1
 800479c:	9001      	str	r0, [sp, #4]
 800479e:	700a      	strb	r2, [r1, #0]
          break;
 80047a0:	e004      	b.n	80047ac <ts_formatstring+0x50>
      switch (*(++fmt))
 80047a2:	2a73      	cmp	r2, #115	; 0x73
 80047a4:	d023      	beq.n	80047ee <ts_formatstring+0x92>
 80047a6:	d803      	bhi.n	80047b0 <ts_formatstring+0x54>
 80047a8:	2a69      	cmp	r2, #105	; 0x69
 80047aa:	d010      	beq.n	80047ce <ts_formatstring+0x72>
      fmt++;
 80047ac:	3402      	adds	r4, #2
 80047ae:	e7de      	b.n	800476e <ts_formatstring+0x12>
      switch (*(++fmt))
 80047b0:	2a75      	cmp	r2, #117	; 0x75
 80047b2:	d029      	beq.n	8004808 <ts_formatstring+0xac>
 80047b4:	2a78      	cmp	r2, #120	; 0x78
 80047b6:	d1f9      	bne.n	80047ac <ts_formatstring+0x50>
          ts_itoa(&buf, va_arg(va, int), 16);
 80047b8:	f103 0804 	add.w	r8, r3, #4
 80047bc:	2210      	movs	r2, #16
 80047be:	e026      	b.n	800480e <ts_formatstring+0xb2>
        *buf++ = va_arg(va, int);
 80047c0:	9a01      	ldr	r2, [sp, #4]
 80047c2:	1c51      	adds	r1, r2, #1
 80047c4:	9101      	str	r1, [sp, #4]
 80047c6:	6819      	ldr	r1, [r3, #0]
 80047c8:	7011      	strb	r1, [r2, #0]
 80047ca:	3304      	adds	r3, #4
        break;
 80047cc:	e7ee      	b.n	80047ac <ts_formatstring+0x50>
          signed int val = va_arg(va, signed int);
 80047ce:	6819      	ldr	r1, [r3, #0]
          if (val < 0)
 80047d0:	2900      	cmp	r1, #0
          signed int val = va_arg(va, signed int);
 80047d2:	f103 0804 	add.w	r8, r3, #4
          if (val < 0)
 80047d6:	da04      	bge.n	80047e2 <ts_formatstring+0x86>
            *buf++ = '-';
 80047d8:	9b01      	ldr	r3, [sp, #4]
 80047da:	1c5a      	adds	r2, r3, #1
 80047dc:	9201      	str	r2, [sp, #4]
            val *= -1;
 80047de:	4249      	negs	r1, r1
            *buf++ = '-';
 80047e0:	701f      	strb	r7, [r3, #0]
          ts_itoa(&buf, val, 10);
 80047e2:	220a      	movs	r2, #10
          ts_itoa(&buf, va_arg(va, int), 16);
 80047e4:	4628      	mov	r0, r5
 80047e6:	f7ff ff9f 	bl	8004728 <ts_itoa>
 80047ea:	4643      	mov	r3, r8
        break;
 80047ec:	e7de      	b.n	80047ac <ts_formatstring+0x50>
          char * arg = va_arg(va, char *);
 80047ee:	1d19      	adds	r1, r3, #4
 80047f0:	681b      	ldr	r3, [r3, #0]
          while (*arg)
 80047f2:	781a      	ldrb	r2, [r3, #0]
 80047f4:	b90a      	cbnz	r2, 80047fa <ts_formatstring+0x9e>
          char * arg = va_arg(va, char *);
 80047f6:	460b      	mov	r3, r1
 80047f8:	e7d8      	b.n	80047ac <ts_formatstring+0x50>
            *buf++ = *arg++;
 80047fa:	9a01      	ldr	r2, [sp, #4]
 80047fc:	1c50      	adds	r0, r2, #1
 80047fe:	9001      	str	r0, [sp, #4]
 8004800:	f813 0b01 	ldrb.w	r0, [r3], #1
 8004804:	7010      	strb	r0, [r2, #0]
 8004806:	e7f4      	b.n	80047f2 <ts_formatstring+0x96>
          ts_itoa(&buf, va_arg(va, unsigned int), 10);
 8004808:	f103 0804 	add.w	r8, r3, #4
 800480c:	220a      	movs	r2, #10
          ts_itoa(&buf, va_arg(va, int), 16);
 800480e:	6819      	ldr	r1, [r3, #0]
 8004810:	e7e8      	b.n	80047e4 <ts_formatstring+0x88>
      *buf++ = *fmt++;
 8004812:	9901      	ldr	r1, [sp, #4]
 8004814:	1c48      	adds	r0, r1, #1
 8004816:	9001      	str	r0, [sp, #4]
 8004818:	3401      	adds	r4, #1
 800481a:	700a      	strb	r2, [r1, #0]
 800481c:	e7a7      	b.n	800476e <ts_formatstring+0x12>

0800481e <ts_formatlength>:
**            format string and va_list va
**  Returns:  Maximum length
**---------------------------------------------------------------------------
*/
int ts_formatlength(const char *fmt, va_list va)
{
 800481e:	b530      	push	{r4, r5, lr}
 8004820:	4602      	mov	r2, r0
  int length = 0;
 8004822:	2000      	movs	r0, #0
  while (*fmt)
 8004824:	7813      	ldrb	r3, [r2, #0]
 8004826:	b903      	cbnz	r3, 800482a <ts_formatlength+0xc>
      ++length;
    }
    ++fmt;
  }
  return length;
}
 8004828:	bd30      	pop	{r4, r5, pc}
    if (*fmt == '%')
 800482a:	2b25      	cmp	r3, #37	; 0x25
 800482c:	d128      	bne.n	8004880 <ts_formatlength+0x62>
      switch (*fmt)
 800482e:	7853      	ldrb	r3, [r2, #1]
 8004830:	2b69      	cmp	r3, #105	; 0x69
      ++fmt;
 8004832:	f102 0401 	add.w	r4, r2, #1
      switch (*fmt)
 8004836:	d013      	beq.n	8004860 <ts_formatlength+0x42>
 8004838:	d808      	bhi.n	800484c <ts_formatlength+0x2e>
 800483a:	2b63      	cmp	r3, #99	; 0x63
 800483c:	d00e      	beq.n	800485c <ts_formatlength+0x3e>
 800483e:	2b64      	cmp	r3, #100	; 0x64
 8004840:	d00e      	beq.n	8004860 <ts_formatlength+0x42>
 8004842:	2b58      	cmp	r3, #88	; 0x58
 8004844:	d108      	bne.n	8004858 <ts_formatlength+0x3a>
          length += 8;
 8004846:	f100 0308 	add.w	r3, r0, #8
 800484a:	e00b      	b.n	8004864 <ts_formatlength+0x46>
      switch (*fmt)
 800484c:	2b75      	cmp	r3, #117	; 0x75
 800484e:	d007      	beq.n	8004860 <ts_formatlength+0x42>
 8004850:	2b78      	cmp	r3, #120	; 0x78
 8004852:	d0f8      	beq.n	8004846 <ts_formatlength+0x28>
 8004854:	2b73      	cmp	r3, #115	; 0x73
 8004856:	d007      	beq.n	8004868 <ts_formatlength+0x4a>
          ++length;
 8004858:	1c43      	adds	r3, r0, #1
          break;
 800485a:	e00e      	b.n	800487a <ts_formatlength+0x5c>
            va_arg(va, int);
 800485c:	3104      	adds	r1, #4
 800485e:	e7fb      	b.n	8004858 <ts_formatlength+0x3a>
          length += 11;
 8004860:	f100 030b 	add.w	r3, r0, #11
          va_arg(va, unsigned int);
 8004864:	3104      	adds	r1, #4
 8004866:	e008      	b.n	800487a <ts_formatlength+0x5c>
              char * str = va_arg(va, char *);
 8004868:	680a      	ldr	r2, [r1, #0]
 800486a:	1d0d      	adds	r5, r1, #4
 800486c:	1a80      	subs	r0, r0, r2
 800486e:	1813      	adds	r3, r2, r0
              while (*str++)
 8004870:	f812 1b01 	ldrb.w	r1, [r2], #1
 8004874:	2900      	cmp	r1, #0
 8004876:	d1fa      	bne.n	800486e <ts_formatlength+0x50>
              char * str = va_arg(va, char *);
 8004878:	4629      	mov	r1, r5
    ++fmt;
 800487a:	1c62      	adds	r2, r4, #1
 800487c:	4618      	mov	r0, r3
 800487e:	e7d1      	b.n	8004824 <ts_formatlength+0x6>
      ++length;
 8004880:	1c43      	adds	r3, r0, #1
 8004882:	4614      	mov	r4, r2
 8004884:	e7f9      	b.n	800487a <ts_formatlength+0x5c>

08004886 <HAL_Serial_Print>:

/**********************************************************
 *
 */
int HAL_Serial_Print(HAL_Serial_Handler * hserial,const char *fmt, ...)
{
 8004886:	b40e      	push	{r1, r2, r3}
 8004888:	b5f0      	push	{r4, r5, r6, r7, lr}
 800488a:	b082      	sub	sp, #8
 800488c:	af00      	add	r7, sp, #0
 800488e:	f107 041c 	add.w	r4, r7, #28
 8004892:	4606      	mov	r6, r0
 8004894:	f854 5b04 	ldr.w	r5, [r4], #4
  int length = 0;
  va_list va;
  va_start(va, fmt);
 8004898:	607c      	str	r4, [r7, #4]
  length = ts_formatlength(fmt, va);
 800489a:	4621      	mov	r1, r4
 800489c:	4628      	mov	r0, r5
 800489e:	f7ff ffbe 	bl	800481e <ts_formatlength>
  va_end(va);
  {
    char buf[length];
 80048a2:	3007      	adds	r0, #7
 80048a4:	f020 0007 	bic.w	r0, r0, #7
 80048a8:	ebad 0d00 	sub.w	sp, sp, r0
    va_start(va, fmt);
    length = ts_formatstring(buf, fmt, va);
 80048ac:	4622      	mov	r2, r4
 80048ae:	4629      	mov	r1, r5
 80048b0:	4668      	mov	r0, sp
    va_start(va, fmt);
 80048b2:	607c      	str	r4, [r7, #4]
    length = ts_formatstring(buf, fmt, va);
 80048b4:	f7ff ff52 	bl	800475c <ts_formatstring>
    length = HAL_Serial_Write(hserial, (uint8_t*)buf, length);
 80048b8:	4669      	mov	r1, sp
 80048ba:	4602      	mov	r2, r0
 80048bc:	4630      	mov	r0, r6
 80048be:	f7ff feba 	bl	8004636 <HAL_Serial_Write>
    va_end(va);
  }
  return length;
}
 80048c2:	3708      	adds	r7, #8
 80048c4:	46bd      	mov	sp, r7
 80048c6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80048ca:	b003      	add	sp, #12
 80048cc:	4770      	bx	lr

080048ce <HAL_LineBuffer_Init>:
 *
 */
void HAL_LineBuffer_Init(HAL_LineBuffer_Handler * hline, HAL_Serial_Handler * hserial)
{
  hline->hserial=hserial;
  hline->len=0;
 80048ce:	2300      	movs	r3, #0
  hline->hserial=hserial;
 80048d0:	6001      	str	r1, [r0, #0]
  hline->len=0;
 80048d2:	6443      	str	r3, [r0, #68]	; 0x44
 80048d4:	4770      	bx	lr

080048d6 <HAL_LineBuffer_Read>:
 * @param outbuf output buffer
 * @param outbuf_len size of output buffer
 * @return 0 if nothing in buffer or no newline, or number of bytes copied.
 */
int HAL_LineBuffer_Read(HAL_LineBuffer_Handler * hlinebuffer, char * outbuf, int outbuf_len)
{
 80048d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048d8:	460f      	mov	r7, r1
  int total_len;
  int i;
  char buf[64];

  // read data from serial to internal buffer
  recv_len=HAL_Serial_Read(hlinebuffer->hserial, (uint8_t *)hlinebuffer->data+hlinebuffer->len, size_of_rx_buffer-hlinebuffer->len);
 80048da:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80048dc:	1d06      	adds	r6, r0, #4
{
 80048de:	4605      	mov	r5, r0
  recv_len=HAL_Serial_Read(hlinebuffer->hserial, (uint8_t *)hlinebuffer->data+hlinebuffer->len, size_of_rx_buffer-hlinebuffer->len);
 80048e0:	f1c1 0240 	rsb	r2, r1, #64	; 0x40
 80048e4:	6800      	ldr	r0, [r0, #0]
 80048e6:	4431      	add	r1, r6
 80048e8:	f7ff fe84 	bl	80045f4 <HAL_Serial_Read>
  // update internal buffer length
  hlinebuffer->len+=recv_len;
 80048ec:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80048ee:	4418      	add	r0, r3

  // read a line from the buffer
  total_len=0;
  if(hlinebuffer->len > 0)
 80048f0:	2800      	cmp	r0, #0
  hlinebuffer->len+=recv_len;
 80048f2:	6468      	str	r0, [r5, #68]	; 0x44
  if(hlinebuffer->len > 0)
 80048f4:	dd1d      	ble.n	8004932 <HAL_LineBuffer_Read+0x5c>
 80048f6:	4633      	mov	r3, r6
 80048f8:	2400      	movs	r4, #0
    //*** HAL_Serial_Write(hlinebuffer->hserial, buf, sprintf(buf, "Received %d bytes\n", recv_len));
    //*** HAL_Serial_Write(hlinebuffer->hserial, buf, sprintf(buf, "Received %d bytes. circbuf=%d", recv_len, hlinebuffer->hserial->rx_tail_ptr-hlinebuffer->hserial->rx_circular_buffer));
    // search newline in data
    for(i=0;i<hlinebuffer->len;i++)
    {
      if(hlinebuffer->data[i] == '\n')
 80048fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80048fe:	2a0a      	cmp	r2, #10
 8004900:	f104 0401 	add.w	r4, r4, #1
 8004904:	d113      	bne.n	800492e <HAL_LineBuffer_Read+0x58>
      {
        // newline found, copy to outbuf
        total_len=i+1;
        memcpy(outbuf, hlinebuffer->data, total_len);
 8004906:	4622      	mov	r2, r4
 8004908:	4631      	mov	r1, r6
 800490a:	4638      	mov	r0, r7
        outbuf[total_len-1]=0; // replace \n by end of string
 800490c:	4427      	add	r7, r4
        memcpy(outbuf, hlinebuffer->data, total_len);
 800490e:	f000 fdcd 	bl	80054ac <memcpy>
        outbuf[total_len-1]=0; // replace \n by end of string
 8004912:	2300      	movs	r3, #0
 8004914:	f807 3c01 	strb.w	r3, [r7, #-1]
        // pull remaining of buffer to the beginning
        memmove(hlinebuffer->data, hlinebuffer->data+total_len, hlinebuffer->len-total_len);
 8004918:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 800491a:	1931      	adds	r1, r6, r4
 800491c:	1b12      	subs	r2, r2, r4
 800491e:	4630      	mov	r0, r6
 8004920:	f000 fdcf 	bl	80054c2 <memmove>
        // update hlinebuffer length
        hlinebuffer->len=hlinebuffer->len-total_len;
 8004924:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8004926:	1b1b      	subs	r3, r3, r4
 8004928:	646b      	str	r3, [r5, #68]	; 0x44
      }
    }
  }

  return(total_len);
}
 800492a:	4620      	mov	r0, r4
 800492c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for(i=0;i<hlinebuffer->len;i++)
 800492e:	42a0      	cmp	r0, r4
 8004930:	d1e3      	bne.n	80048fa <HAL_LineBuffer_Read+0x24>
  total_len=0;
 8004932:	2400      	movs	r4, #0
  return(total_len);
 8004934:	e7f9      	b.n	800492a <HAL_LineBuffer_Read+0x54>

08004936 <Servo_Init>:
  */
void Servo_Init(t_servo *hservo, TIM_HandleTypeDef *htim, int timer_channel)
{
  hservo->htim=htim;
  hservo->timer_channel=timer_channel;
  hservo->pulse=SERVO_PULSE_MEAN;
 8004936:	f240 53dc 	movw	r3, #1500	; 0x5dc
  hservo->timer_channel=timer_channel;
 800493a:	e880 0006 	stmia.w	r0, {r1, r2}
  hservo->pulse=SERVO_PULSE_MEAN;
 800493e:	6083      	str	r3, [r0, #8]
 8004940:	4770      	bx	lr
 8004942:	0000      	movs	r0, r0
 8004944:	0000      	movs	r0, r0
	...

08004948 <Servo_SetLimits>:
  * @param
  * @retval
  */
void Servo_SetLimits(t_servo *hservo, int limits[5])
{
  hservo->bmin_pulse=limits[0];
 8004948:	680b      	ldr	r3, [r1, #0]
{
 800494a:	b510      	push	{r4, lr}
  hservo->bmin_pulse=limits[0];
 800494c:	60c3      	str	r3, [r0, #12]
  hservo->amin_pulse=limits[1];
 800494e:	684b      	ldr	r3, [r1, #4]
 8004950:	6103      	str	r3, [r0, #16]
  hservo->zero_pulse=limits[2];
 8004952:	688b      	ldr	r3, [r1, #8]
 8004954:	6143      	str	r3, [r0, #20]
  hservo->amax_pulse=limits[3];
 8004956:	68cb      	ldr	r3, [r1, #12]
 8004958:	6183      	str	r3, [r0, #24]
  hservo->bmax_pulse=limits[4];
 800495a:	690b      	ldr	r3, [r1, #16]
 800495c:	61c3      	str	r3, [r0, #28]
  hservo->slope=((float)(limits[3]-limits[1]))/(SERVO_ANGLE_MAX-SERVO_ANGLE_MIN);
 800495e:	684b      	ldr	r3, [r1, #4]
{
 8004960:	4604      	mov	r4, r0
  hservo->slope=((float)(limits[3]-limits[1]))/(SERVO_ANGLE_MAX-SERVO_ANGLE_MIN);
 8004962:	68c8      	ldr	r0, [r1, #12]
 8004964:	1ac0      	subs	r0, r0, r3
 8004966:	ee07 0a90 	vmov	s15, r0
 800496a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800496e:	ee17 0a90 	vmov	r0, s15
 8004972:	f7fb fe19 	bl	80005a8 <__aeabi_f2d>
 8004976:	a304      	add	r3, pc, #16	; (adr r3, 8004988 <Servo_SetLimits+0x40>)
 8004978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800497c:	f7fb ff92 	bl	80008a4 <__aeabi_ddiv>
 8004980:	f7fc f93e 	bl	8000c00 <__aeabi_d2f>
 8004984:	6220      	str	r0, [r4, #32]
 8004986:	bd10      	pop	{r4, pc}
 8004988:	54442d18 	.word	0x54442d18
 800498c:	3ff921fb 	.word	0x3ff921fb

08004990 <Servo_Start>:
  * @param  hservo : servo handle
  * @retval none
  */
void Servo_Start(t_servo *hservo)
{
  HAL_TIM_PWM_Start(hservo->htim, hservo->timer_channel);
 8004990:	c803      	ldmia	r0, {r0, r1}
 8004992:	f7fe b917 	b.w	8002bc4 <HAL_TIM_PWM_Start>

08004996 <Servo_Stop>:
  * @param  hservo : servo handle
  * @retval none
  */
void Servo_Stop(t_servo *hservo)
{
  HAL_TIM_PWM_Stop(hservo->htim,hservo->timer_channel);
 8004996:	c803      	ldmia	r0, {r0, r1}
 8004998:	f7fe b934 	b.w	8002c04 <HAL_TIM_PWM_Stop>

0800499c <Servo_SetPulse>:
  * @brief  Set servo position
  * @param  hservo : servo handle
  * @retval none
  */
void Servo_SetPulse(t_servo *hservo, int pulse)
{
 800499c:	6803      	ldr	r3, [r0, #0]
  hservo->pulse=pulse;
  __HAL_TIM_SET_COMPARE(hservo->htim, hservo->timer_channel, pulse);
 800499e:	6842      	ldr	r2, [r0, #4]
  hservo->pulse=pulse;
 80049a0:	6081      	str	r1, [r0, #8]
  __HAL_TIM_SET_COMPARE(hservo->htim, hservo->timer_channel, pulse);
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	b90a      	cbnz	r2, 80049aa <Servo_SetPulse+0xe>
 80049a6:	6359      	str	r1, [r3, #52]	; 0x34
 80049a8:	4770      	bx	lr
 80049aa:	2a04      	cmp	r2, #4
 80049ac:	d101      	bne.n	80049b2 <Servo_SetPulse+0x16>
 80049ae:	6399      	str	r1, [r3, #56]	; 0x38
 80049b0:	4770      	bx	lr
 80049b2:	2a08      	cmp	r2, #8
 80049b4:	bf0c      	ite	eq
 80049b6:	63d9      	streq	r1, [r3, #60]	; 0x3c
 80049b8:	6419      	strne	r1, [r3, #64]	; 0x40
 80049ba:	4770      	bx	lr
 80049bc:	0000      	movs	r0, r0
	...

080049c0 <Servo_SetAngle>:
 *  @brief Set servo position from angle
 *  @param hservo : servo handler
 *  @param angle : angle, in radians
 */
void Servo_SetAngle(t_servo * hservo, float angle)
{
 80049c0:	b5d0      	push	{r4, r6, r7, lr}
 80049c2:	4604      	mov	r4, r0
  int pulse;
  pulse=round(hservo->amin_pulse+(angle-SERVO_ANGLE_MIN)*hservo->slope);
 80049c4:	ee10 0a10 	vmov	r0, s0
 80049c8:	f7fb fdee 	bl	80005a8 <__aeabi_f2d>
 80049cc:	a31a      	add	r3, pc, #104	; (adr r3, 8004a38 <Servo_SetAngle+0x78>)
 80049ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049d2:	f7fb fc8b 	bl	80002ec <__adddf3>
 80049d6:	4606      	mov	r6, r0
 80049d8:	6a20      	ldr	r0, [r4, #32]
 80049da:	460f      	mov	r7, r1
 80049dc:	f7fb fde4 	bl	80005a8 <__aeabi_f2d>
 80049e0:	4602      	mov	r2, r0
 80049e2:	460b      	mov	r3, r1
 80049e4:	4630      	mov	r0, r6
 80049e6:	4639      	mov	r1, r7
 80049e8:	f7fb fe32 	bl	8000650 <__aeabi_dmul>
 80049ec:	4606      	mov	r6, r0
 80049ee:	6920      	ldr	r0, [r4, #16]
 80049f0:	460f      	mov	r7, r1
 80049f2:	f7fb fdc7 	bl	8000584 <__aeabi_i2d>
 80049f6:	4602      	mov	r2, r0
 80049f8:	460b      	mov	r3, r1
 80049fa:	4630      	mov	r0, r6
 80049fc:	4639      	mov	r1, r7
 80049fe:	f7fb fc75 	bl	80002ec <__adddf3>
 8004a02:	ec41 0b10 	vmov	d0, r0, r1
 8004a06:	f001 fe77 	bl	80066f8 <round>
 8004a0a:	ec51 0b10 	vmov	r0, r1, d0
 8004a0e:	f7fc f8cf 	bl	8000bb0 <__aeabi_d2iz>
 8004a12:	6823      	ldr	r3, [r4, #0]
  hservo->pulse=pulse;
  __HAL_TIM_SET_COMPARE(hservo->htim, hservo->timer_channel, pulse);
 8004a14:	6862      	ldr	r2, [r4, #4]
  hservo->pulse=pulse;
 8004a16:	60a0      	str	r0, [r4, #8]
  __HAL_TIM_SET_COMPARE(hservo->htim, hservo->timer_channel, pulse);
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	b90a      	cbnz	r2, 8004a20 <Servo_SetAngle+0x60>
 8004a1c:	6358      	str	r0, [r3, #52]	; 0x34
 8004a1e:	bdd0      	pop	{r4, r6, r7, pc}
 8004a20:	2a04      	cmp	r2, #4
 8004a22:	d101      	bne.n	8004a28 <Servo_SetAngle+0x68>
 8004a24:	6398      	str	r0, [r3, #56]	; 0x38
 8004a26:	bdd0      	pop	{r4, r6, r7, pc}
 8004a28:	2a08      	cmp	r2, #8
 8004a2a:	bf0c      	ite	eq
 8004a2c:	63d8      	streq	r0, [r3, #60]	; 0x3c
 8004a2e:	6418      	strne	r0, [r3, #64]	; 0x40
 8004a30:	bdd0      	pop	{r4, r6, r7, pc}
 8004a32:	bf00      	nop
 8004a34:	f3af 8000 	nop.w
 8004a38:	54442d18 	.word	0x54442d18
 8004a3c:	3fe921fb 	.word	0x3fe921fb

08004a40 <Servo_SetRatio>:
  hservo->pulse=pulse;
  __HAL_TIM_SET_COMPARE(hservo->htim, hservo->timer_channel, pulse);
#endif
#ifdef ANGLE_TEST
  float angle;
  angle=SERVO_ANGLE_MIN+(SERVO_ANGLE_MAX-SERVO_ANGLE_MIN)*(float)ratio/100.;
 8004a40:	ee07 1a90 	vmov	s15, r1
 8004a44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
 8004a48:	b510      	push	{r4, lr}
 8004a4a:	4604      	mov	r4, r0
  angle=SERVO_ANGLE_MIN+(SERVO_ANGLE_MAX-SERVO_ANGLE_MIN)*(float)ratio/100.;
 8004a4c:	ee17 0a90 	vmov	r0, s15
 8004a50:	f7fb fdaa 	bl	80005a8 <__aeabi_f2d>
 8004a54:	a30f      	add	r3, pc, #60	; (adr r3, 8004a94 <Servo_SetRatio+0x54>)
 8004a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a5a:	f7fb fdf9 	bl	8000650 <__aeabi_dmul>
 8004a5e:	2200      	movs	r2, #0
 8004a60:	4b0b      	ldr	r3, [pc, #44]	; (8004a90 <Servo_SetRatio+0x50>)
 8004a62:	f7fb ff1f 	bl	80008a4 <__aeabi_ddiv>
 8004a66:	a308      	add	r3, pc, #32	; (adr r3, 8004a88 <Servo_SetRatio+0x48>)
 8004a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a6c:	f7fb fc3c 	bl	80002e8 <__aeabi_dsub>
 8004a70:	f7fc f8c6 	bl	8000c00 <__aeabi_d2f>
  Servo_SetAngle(hservo, angle);
 8004a74:	ee00 0a10 	vmov	s0, r0
 8004a78:	4620      	mov	r0, r4
#endif
#undef ANGLE_TEST
}
 8004a7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  Servo_SetAngle(hservo, angle);
 8004a7e:	f7ff bf9f 	b.w	80049c0 <Servo_SetAngle>
 8004a82:	bf00      	nop
 8004a84:	f3af 8000 	nop.w
 8004a88:	54442d18 	.word	0x54442d18
 8004a8c:	3fe921fb 	.word	0x3fe921fb
 8004a90:	40590000 	.word	0x40590000
 8004a94:	54442d18 	.word	0x54442d18
 8004a98:	3ff921fb 	.word	0x3ff921fb

08004a9c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004a9c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a9e:	4b0c      	ldr	r3, [pc, #48]	; (8004ad0 <HAL_MspInit+0x34>)
 8004aa0:	2100      	movs	r1, #0
 8004aa2:	9100      	str	r1, [sp, #0]
 8004aa4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004aa6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004aaa:	645a      	str	r2, [r3, #68]	; 0x44
 8004aac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004aae:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8004ab2:	9200      	str	r2, [sp, #0]
 8004ab4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004ab6:	9101      	str	r1, [sp, #4]
 8004ab8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004aba:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004abe:	641a      	str	r2, [r3, #64]	; 0x40
 8004ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ac6:	9301      	str	r3, [sp, #4]
 8004ac8:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004aca:	b002      	add	sp, #8
 8004acc:	4770      	bx	lr
 8004ace:	bf00      	nop
 8004ad0:	40023800 	.word	0x40023800

08004ad4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004ad4:	b510      	push	{r4, lr}
 8004ad6:	4604      	mov	r4, r0
 8004ad8:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ada:	2214      	movs	r2, #20
 8004adc:	2100      	movs	r1, #0
 8004ade:	a803      	add	r0, sp, #12
 8004ae0:	f000 fd09 	bl	80054f6 <memset>
  if(hadc->Instance==ADC1)
 8004ae4:	6822      	ldr	r2, [r4, #0]
 8004ae6:	4b12      	ldr	r3, [pc, #72]	; (8004b30 <HAL_ADC_MspInit+0x5c>)
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d11e      	bne.n	8004b2a <HAL_ADC_MspInit+0x56>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004aec:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8004af0:	2100      	movs	r1, #0
 8004af2:	9101      	str	r1, [sp, #4]
 8004af4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    PA4     ------> ADC1_IN4 
    */
    GPIO_InitStruct.Pin = ADC_IN_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(ADC_IN_GPIO_Port, &GPIO_InitStruct);
 8004af6:	480f      	ldr	r0, [pc, #60]	; (8004b34 <HAL_ADC_MspInit+0x60>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004af8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004afc:	645a      	str	r2, [r3, #68]	; 0x44
 8004afe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b00:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8004b04:	9201      	str	r2, [sp, #4]
 8004b06:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b08:	9102      	str	r1, [sp, #8]
 8004b0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b0c:	f042 0201 	orr.w	r2, r2, #1
 8004b10:	631a      	str	r2, [r3, #48]	; 0x30
 8004b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b14:	f003 0301 	and.w	r3, r3, #1
 8004b18:	9302      	str	r3, [sp, #8]
 8004b1a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = ADC_IN_Pin;
 8004b1c:	2310      	movs	r3, #16
 8004b1e:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(ADC_IN_GPIO_Port, &GPIO_InitStruct);
 8004b20:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004b22:	2303      	movs	r3, #3
 8004b24:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(ADC_IN_GPIO_Port, &GPIO_InitStruct);
 8004b26:	f7fc fdf3 	bl	8001710 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004b2a:	b008      	add	sp, #32
 8004b2c:	bd10      	pop	{r4, pc}
 8004b2e:	bf00      	nop
 8004b30:	40012000 	.word	0x40012000
 8004b34:	40020000 	.word	0x40020000

08004b38 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004b38:	b530      	push	{r4, r5, lr}
 8004b3a:	4604      	mov	r4, r0
 8004b3c:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b3e:	2214      	movs	r2, #20
 8004b40:	2100      	movs	r1, #0
 8004b42:	a803      	add	r0, sp, #12
 8004b44:	f000 fcd7 	bl	80054f6 <memset>
  if(hi2c->Instance==I2C1)
 8004b48:	6822      	ldr	r2, [r4, #0]
 8004b4a:	4b14      	ldr	r3, [pc, #80]	; (8004b9c <HAL_I2C_MspInit+0x64>)
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d123      	bne.n	8004b98 <HAL_I2C_MspInit+0x60>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b50:	4c13      	ldr	r4, [pc, #76]	; (8004ba0 <HAL_I2C_MspInit+0x68>)
    GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SCA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b52:	4814      	ldr	r0, [pc, #80]	; (8004ba4 <HAL_I2C_MspInit+0x6c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b54:	2500      	movs	r5, #0
 8004b56:	9501      	str	r5, [sp, #4]
 8004b58:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004b5a:	f043 0302 	orr.w	r3, r3, #2
 8004b5e:	6323      	str	r3, [r4, #48]	; 0x30
 8004b60:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004b62:	f003 0302 	and.w	r3, r3, #2
 8004b66:	9301      	str	r3, [sp, #4]
 8004b68:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SCA_Pin;
 8004b6a:	23c0      	movs	r3, #192	; 0xc0
 8004b6c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004b6e:	2312      	movs	r3, #18
 8004b70:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004b72:	2301      	movs	r3, #1
 8004b74:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b76:	2303      	movs	r3, #3
 8004b78:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b7a:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004b7c:	2304      	movs	r3, #4
 8004b7e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b80:	f7fc fdc6 	bl	8001710 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004b84:	9502      	str	r5, [sp, #8]
 8004b86:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004b88:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004b8c:	6423      	str	r3, [r4, #64]	; 0x40
 8004b8e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004b90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b94:	9302      	str	r3, [sp, #8]
 8004b96:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004b98:	b009      	add	sp, #36	; 0x24
 8004b9a:	bd30      	pop	{r4, r5, pc}
 8004b9c:	40005400 	.word	0x40005400
 8004ba0:	40023800 	.word	0x40023800
 8004ba4:	40020400 	.word	0x40020400

08004ba8 <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 8004ba8:	6802      	ldr	r2, [r0, #0]
 8004baa:	4b03      	ldr	r3, [pc, #12]	; (8004bb8 <HAL_RTC_MspInit+0x10>)
 8004bac:	429a      	cmp	r2, r3
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004bae:	bf02      	ittt	eq
 8004bb0:	4b02      	ldreq	r3, [pc, #8]	; (8004bbc <HAL_RTC_MspInit+0x14>)
 8004bb2:	2201      	moveq	r2, #1
 8004bb4:	601a      	streq	r2, [r3, #0]
 8004bb6:	4770      	bx	lr
 8004bb8:	40002800 	.word	0x40002800
 8004bbc:	42470e3c 	.word	0x42470e3c

08004bc0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004bc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bc4:	4606      	mov	r6, r0
 8004bc6:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bc8:	2214      	movs	r2, #20
 8004bca:	2100      	movs	r1, #0
 8004bcc:	a803      	add	r0, sp, #12
 8004bce:	f000 fc92 	bl	80054f6 <memset>
  if(hspi->Instance==SPI2)
 8004bd2:	6832      	ldr	r2, [r6, #0]
 8004bd4:	4b30      	ldr	r3, [pc, #192]	; (8004c98 <HAL_SPI_MspInit+0xd8>)
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d15a      	bne.n	8004c90 <HAL_SPI_MspInit+0xd0>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004bda:	2500      	movs	r5, #0
 8004bdc:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004be0:	9500      	str	r5, [sp, #0]
 8004be2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004be4:	482d      	ldr	r0, [pc, #180]	; (8004c9c <HAL_SPI_MspInit+0xdc>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004be6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004bea:	641a      	str	r2, [r3, #64]	; 0x40
 8004bec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bee:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8004bf2:	9200      	str	r2, [sp, #0]
 8004bf4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004bf6:	9501      	str	r5, [sp, #4]
 8004bf8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bfa:	f042 0204 	orr.w	r2, r2, #4
 8004bfe:	631a      	str	r2, [r3, #48]	; 0x30
 8004c00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c02:	f002 0204 	and.w	r2, r2, #4
 8004c06:	9201      	str	r2, [sp, #4]
 8004c08:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c0a:	9502      	str	r5, [sp, #8]
 8004c0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c0e:	f042 0202 	orr.w	r2, r2, #2
 8004c12:	631a      	str	r2, [r3, #48]	; 0x30
 8004c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c16:	f003 0302 	and.w	r3, r3, #2
 8004c1a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004c1c:	2402      	movs	r4, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c1e:	2703      	movs	r7, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c20:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004c22:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8004c24:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c26:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c28:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8004c2a:	9307      	str	r3, [sp, #28]

    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004c2c:	f04f 0805 	mov.w	r8, #5
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c30:	9706      	str	r7, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c32:	f7fc fd6d 	bl	8001710 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004c36:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c38:	a903      	add	r1, sp, #12
 8004c3a:	4818      	ldr	r0, [pc, #96]	; (8004c9c <HAL_SPI_MspInit+0xdc>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004c3c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c3e:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c40:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c42:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004c44:	f8cd 801c 	str.w	r8, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c48:	f7fc fd62 	bl	8001710 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004c4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c50:	4813      	ldr	r0, [pc, #76]	; (8004ca0 <HAL_SPI_MspInit+0xe0>)
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004c52:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c54:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c56:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c58:	9505      	str	r5, [sp, #20]

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8004c5a:	4c12      	ldr	r4, [pc, #72]	; (8004ca4 <HAL_SPI_MspInit+0xe4>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c5c:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004c5e:	f8cd 801c 	str.w	r8, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c62:	f7fc fd55 	bl	8001710 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8004c66:	4b10      	ldr	r3, [pc, #64]	; (8004ca8 <HAL_SPI_MspInit+0xe8>)
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004c68:	60a5      	str	r5, [r4, #8]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8004c6a:	e884 0028 	stmia.w	r4, {r3, r5}
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8004c6e:	4620      	mov	r0, r4
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004c70:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004c74:	60e5      	str	r5, [r4, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004c76:	6123      	str	r3, [r4, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004c78:	6165      	str	r5, [r4, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004c7a:	61a5      	str	r5, [r4, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8004c7c:	61e5      	str	r5, [r4, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004c7e:	6225      	str	r5, [r4, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004c80:	6265      	str	r5, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8004c82:	f7fc fbc1 	bl	8001408 <HAL_DMA_Init>
 8004c86:	b108      	cbz	r0, 8004c8c <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8004c88:	f7ff f8c4 	bl	8003e14 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8004c8c:	64f4      	str	r4, [r6, #76]	; 0x4c
 8004c8e:	63a6      	str	r6, [r4, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004c90:	b008      	add	sp, #32
 8004c92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c96:	bf00      	nop
 8004c98:	40003800 	.word	0x40003800
 8004c9c:	40020800 	.word	0x40020800
 8004ca0:	40020400 	.word	0x40020400
 8004ca4:	2000052c 	.word	0x2000052c
 8004ca8:	40026058 	.word	0x40026058

08004cac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004cac:	b500      	push	{lr}
  if(htim_base->Instance==TIM1)
 8004cae:	6803      	ldr	r3, [r0, #0]
 8004cb0:	4a4c      	ldr	r2, [pc, #304]	; (8004de4 <HAL_TIM_Base_MspInit+0x138>)
 8004cb2:	4293      	cmp	r3, r2
{
 8004cb4:	b08b      	sub	sp, #44	; 0x2c
  if(htim_base->Instance==TIM1)
 8004cb6:	d10e      	bne.n	8004cd6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004cb8:	2300      	movs	r3, #0
 8004cba:	9301      	str	r3, [sp, #4]
 8004cbc:	4b4a      	ldr	r3, [pc, #296]	; (8004de8 <HAL_TIM_Base_MspInit+0x13c>)
 8004cbe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cc0:	f042 0201 	orr.w	r2, r2, #1
 8004cc4:	645a      	str	r2, [r3, #68]	; 0x44
 8004cc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cc8:	f003 0301 	and.w	r3, r3, #1
 8004ccc:	9301      	str	r3, [sp, #4]
 8004cce:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8004cd0:	b00b      	add	sp, #44	; 0x2c
 8004cd2:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(htim_base->Instance==TIM2)
 8004cd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cda:	d10c      	bne.n	8004cf6 <HAL_TIM_Base_MspInit+0x4a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004cdc:	2300      	movs	r3, #0
 8004cde:	9302      	str	r3, [sp, #8]
 8004ce0:	4b41      	ldr	r3, [pc, #260]	; (8004de8 <HAL_TIM_Base_MspInit+0x13c>)
 8004ce2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ce4:	f042 0201 	orr.w	r2, r2, #1
 8004ce8:	641a      	str	r2, [r3, #64]	; 0x40
 8004cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cec:	f003 0301 	and.w	r3, r3, #1
 8004cf0:	9302      	str	r3, [sp, #8]
 8004cf2:	9b02      	ldr	r3, [sp, #8]
 8004cf4:	e7ec      	b.n	8004cd0 <HAL_TIM_Base_MspInit+0x24>
  else if(htim_base->Instance==TIM3)
 8004cf6:	4a3d      	ldr	r2, [pc, #244]	; (8004dec <HAL_TIM_Base_MspInit+0x140>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d10c      	bne.n	8004d16 <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	9303      	str	r3, [sp, #12]
 8004d00:	4b39      	ldr	r3, [pc, #228]	; (8004de8 <HAL_TIM_Base_MspInit+0x13c>)
 8004d02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d04:	f042 0202 	orr.w	r2, r2, #2
 8004d08:	641a      	str	r2, [r3, #64]	; 0x40
 8004d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0c:	f003 0302 	and.w	r3, r3, #2
 8004d10:	9303      	str	r3, [sp, #12]
 8004d12:	9b03      	ldr	r3, [sp, #12]
 8004d14:	e7dc      	b.n	8004cd0 <HAL_TIM_Base_MspInit+0x24>
  else if(htim_base->Instance==TIM8)
 8004d16:	4a36      	ldr	r2, [pc, #216]	; (8004df0 <HAL_TIM_Base_MspInit+0x144>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d113      	bne.n	8004d44 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004d1c:	4b32      	ldr	r3, [pc, #200]	; (8004de8 <HAL_TIM_Base_MspInit+0x13c>)
 8004d1e:	2200      	movs	r2, #0
 8004d20:	9204      	str	r2, [sp, #16]
 8004d22:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8004d24:	f041 0102 	orr.w	r1, r1, #2
 8004d28:	6459      	str	r1, [r3, #68]	; 0x44
 8004d2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d2c:	f003 0302 	and.w	r3, r3, #2
 8004d30:	9304      	str	r3, [sp, #16]
 8004d32:	9b04      	ldr	r3, [sp, #16]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8004d34:	4611      	mov	r1, r2
 8004d36:	202c      	movs	r0, #44	; 0x2c
 8004d38:	f7fc faf8 	bl	800132c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8004d3c:	202c      	movs	r0, #44	; 0x2c
 8004d3e:	f7fc fb29 	bl	8001394 <HAL_NVIC_EnableIRQ>
 8004d42:	e7c5      	b.n	8004cd0 <HAL_TIM_Base_MspInit+0x24>
  else if(htim_base->Instance==TIM10)
 8004d44:	4a2b      	ldr	r2, [pc, #172]	; (8004df4 <HAL_TIM_Base_MspInit+0x148>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d10c      	bne.n	8004d64 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	9305      	str	r3, [sp, #20]
 8004d4e:	4b26      	ldr	r3, [pc, #152]	; (8004de8 <HAL_TIM_Base_MspInit+0x13c>)
 8004d50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d52:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004d56:	645a      	str	r2, [r3, #68]	; 0x44
 8004d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d5e:	9305      	str	r3, [sp, #20]
 8004d60:	9b05      	ldr	r3, [sp, #20]
 8004d62:	e7b5      	b.n	8004cd0 <HAL_TIM_Base_MspInit+0x24>
  else if(htim_base->Instance==TIM11)
 8004d64:	4a24      	ldr	r2, [pc, #144]	; (8004df8 <HAL_TIM_Base_MspInit+0x14c>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d10c      	bne.n	8004d84 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	9306      	str	r3, [sp, #24]
 8004d6e:	4b1e      	ldr	r3, [pc, #120]	; (8004de8 <HAL_TIM_Base_MspInit+0x13c>)
 8004d70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d72:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004d76:	645a      	str	r2, [r3, #68]	; 0x44
 8004d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d7e:	9306      	str	r3, [sp, #24]
 8004d80:	9b06      	ldr	r3, [sp, #24]
 8004d82:	e7a5      	b.n	8004cd0 <HAL_TIM_Base_MspInit+0x24>
  else if(htim_base->Instance==TIM12)
 8004d84:	4a1d      	ldr	r2, [pc, #116]	; (8004dfc <HAL_TIM_Base_MspInit+0x150>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d10c      	bne.n	8004da4 <HAL_TIM_Base_MspInit+0xf8>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	9307      	str	r3, [sp, #28]
 8004d8e:	4b16      	ldr	r3, [pc, #88]	; (8004de8 <HAL_TIM_Base_MspInit+0x13c>)
 8004d90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d96:	641a      	str	r2, [r3, #64]	; 0x40
 8004d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d9e:	9307      	str	r3, [sp, #28]
 8004da0:	9b07      	ldr	r3, [sp, #28]
 8004da2:	e795      	b.n	8004cd0 <HAL_TIM_Base_MspInit+0x24>
  else if(htim_base->Instance==TIM13)
 8004da4:	4a16      	ldr	r2, [pc, #88]	; (8004e00 <HAL_TIM_Base_MspInit+0x154>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d10c      	bne.n	8004dc4 <HAL_TIM_Base_MspInit+0x118>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8004daa:	4b0f      	ldr	r3, [pc, #60]	; (8004de8 <HAL_TIM_Base_MspInit+0x13c>)
 8004dac:	2200      	movs	r2, #0
 8004dae:	9208      	str	r2, [sp, #32]
 8004db0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004db2:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8004db6:	6419      	str	r1, [r3, #64]	; 0x40
 8004db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dbe:	9308      	str	r3, [sp, #32]
 8004dc0:	9b08      	ldr	r3, [sp, #32]
 8004dc2:	e7b7      	b.n	8004d34 <HAL_TIM_Base_MspInit+0x88>
  else if(htim_base->Instance==TIM14)
 8004dc4:	4a0f      	ldr	r2, [pc, #60]	; (8004e04 <HAL_TIM_Base_MspInit+0x158>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d182      	bne.n	8004cd0 <HAL_TIM_Base_MspInit+0x24>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8004dca:	2300      	movs	r3, #0
 8004dcc:	9309      	str	r3, [sp, #36]	; 0x24
 8004dce:	4b06      	ldr	r3, [pc, #24]	; (8004de8 <HAL_TIM_Base_MspInit+0x13c>)
 8004dd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004dd2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004dd6:	641a      	str	r2, [r3, #64]	; 0x40
 8004dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dde:	9309      	str	r3, [sp, #36]	; 0x24
 8004de0:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
 8004de2:	e775      	b.n	8004cd0 <HAL_TIM_Base_MspInit+0x24>
 8004de4:	40010000 	.word	0x40010000
 8004de8:	40023800 	.word	0x40023800
 8004dec:	40000400 	.word	0x40000400
 8004df0:	40010400 	.word	0x40010400
 8004df4:	40014400 	.word	0x40014400
 8004df8:	40014800 	.word	0x40014800
 8004dfc:	40001800 	.word	0x40001800
 8004e00:	40001c00 	.word	0x40001c00
 8004e04:	40002000 	.word	0x40002000

08004e08 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM5)
 8004e08:	6802      	ldr	r2, [r0, #0]
 8004e0a:	4b09      	ldr	r3, [pc, #36]	; (8004e30 <HAL_TIM_PWM_MspInit+0x28>)
 8004e0c:	429a      	cmp	r2, r3
{
 8004e0e:	b082      	sub	sp, #8
  if(htim_pwm->Instance==TIM5)
 8004e10:	d10b      	bne.n	8004e2a <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004e12:	2300      	movs	r3, #0
 8004e14:	9301      	str	r3, [sp, #4]
 8004e16:	4b07      	ldr	r3, [pc, #28]	; (8004e34 <HAL_TIM_PWM_MspInit+0x2c>)
 8004e18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e1a:	f042 0208 	orr.w	r2, r2, #8
 8004e1e:	641a      	str	r2, [r3, #64]	; 0x40
 8004e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e22:	f003 0308 	and.w	r3, r3, #8
 8004e26:	9301      	str	r3, [sp, #4]
 8004e28:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8004e2a:	b002      	add	sp, #8
 8004e2c:	4770      	bx	lr
 8004e2e:	bf00      	nop
 8004e30:	40000c00 	.word	0x40000c00
 8004e34:	40023800 	.word	0x40023800

08004e38 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004e38:	b570      	push	{r4, r5, r6, lr}
 8004e3a:	4604      	mov	r4, r0
 8004e3c:	b090      	sub	sp, #64	; 0x40
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e3e:	2214      	movs	r2, #20
 8004e40:	2100      	movs	r1, #0
 8004e42:	a80b      	add	r0, sp, #44	; 0x2c
 8004e44:	f000 fb57 	bl	80054f6 <memset>
  if(htim->Instance==TIM1)
 8004e48:	6823      	ldr	r3, [r4, #0]
 8004e4a:	4a7a      	ldr	r2, [pc, #488]	; (8005034 <HAL_TIM_MspPostInit+0x1fc>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d113      	bne.n	8004e78 <HAL_TIM_MspPostInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e50:	2300      	movs	r3, #0
 8004e52:	9300      	str	r3, [sp, #0]
 8004e54:	4b78      	ldr	r3, [pc, #480]	; (8005038 <HAL_TIM_MspPostInit+0x200>)
 8004e56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e58:	f042 0201 	orr.w	r2, r2, #1
 8004e5c:	631a      	str	r2, [r3, #48]	; 0x30
 8004e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e60:	f003 0301 	and.w	r3, r3, #1
 8004e64:	9300      	str	r3, [sp, #0]
 8004e66:	9b00      	ldr	r3, [sp, #0]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = S15i2_Pin|S09x2_Pin|S18_Pin|S17_Pin;
 8004e68:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8004e6c:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e6e:	2302      	movs	r3, #2
 8004e70:	930c      	str	r3, [sp, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004e72:	2301      	movs	r3, #1
    */
    GPIO_InitStruct.Pin = S11_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8004e74:	930f      	str	r3, [sp, #60]	; 0x3c
 8004e76:	e02b      	b.n	8004ed0 <HAL_TIM_MspPostInit+0x98>
  else if(htim->Instance==TIM2)
 8004e78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e7c:	d12b      	bne.n	8004ed6 <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e7e:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8004e82:	2400      	movs	r4, #0
 8004e84:	9401      	str	r4, [sp, #4]
 8004e86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e88:	486c      	ldr	r0, [pc, #432]	; (800503c <HAL_TIM_MspPostInit+0x204>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e8a:	f042 0202 	orr.w	r2, r2, #2
 8004e8e:	631a      	str	r2, [r3, #48]	; 0x30
 8004e90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e92:	f002 0202 	and.w	r2, r2, #2
 8004e96:	9201      	str	r2, [sp, #4]
 8004e98:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e9a:	9402      	str	r4, [sp, #8]
 8004e9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e9e:	f042 0201 	orr.w	r2, r2, #1
 8004ea2:	631a      	str	r2, [r3, #48]	; 0x30
 8004ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ea6:	f003 0301 	and.w	r3, r3, #1
 8004eaa:	9302      	str	r3, [sp, #8]
 8004eac:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004eae:	2602      	movs	r6, #2
    GPIO_InitStruct.Pin = S02_Pin|S03_Pin|S14x3_Pin;
 8004eb0:	f240 430c 	movw	r3, #1036	; 0x40c
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004eb4:	2501      	movs	r5, #1
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004eb6:	a90b      	add	r1, sp, #44	; 0x2c
    GPIO_InitStruct.Pin = S02_Pin|S03_Pin|S14x3_Pin;
 8004eb8:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004eba:	960c      	str	r6, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004ebc:	950f      	str	r5, [sp, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ebe:	f7fc fc27 	bl	8001710 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = S19i3_Pin;
 8004ec2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ec6:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ec8:	960c      	str	r6, [sp, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004eca:	940d      	str	r4, [sp, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ecc:	940e      	str	r4, [sp, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004ece:	950f      	str	r5, [sp, #60]	; 0x3c
    HAL_GPIO_Init(S11_GPIO_Port, &GPIO_InitStruct);
 8004ed0:	a90b      	add	r1, sp, #44	; 0x2c
 8004ed2:	485b      	ldr	r0, [pc, #364]	; (8005040 <HAL_TIM_MspPostInit+0x208>)
 8004ed4:	e056      	b.n	8004f84 <HAL_TIM_MspPostInit+0x14c>
  else if(htim->Instance==TIM3)
 8004ed6:	4a5b      	ldr	r2, [pc, #364]	; (8005044 <HAL_TIM_MspPostInit+0x20c>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d127      	bne.n	8004f2c <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004edc:	4b56      	ldr	r3, [pc, #344]	; (8005038 <HAL_TIM_MspPostInit+0x200>)
    HAL_GPIO_Init(S05i5_GPIO_Port, &GPIO_InitStruct);
 8004ede:	4858      	ldr	r0, [pc, #352]	; (8005040 <HAL_TIM_MspPostInit+0x208>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ee0:	2500      	movs	r5, #0
 8004ee2:	9503      	str	r5, [sp, #12]
 8004ee4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ee6:	f042 0201 	orr.w	r2, r2, #1
 8004eea:	631a      	str	r2, [r3, #48]	; 0x30
 8004eec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004eee:	f002 0201 	and.w	r2, r2, #1
 8004ef2:	9203      	str	r2, [sp, #12]
 8004ef4:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ef6:	9504      	str	r5, [sp, #16]
 8004ef8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004efa:	f042 0202 	orr.w	r2, r2, #2
 8004efe:	631a      	str	r2, [r3, #48]	; 0x30
 8004f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f02:	f003 0302 	and.w	r3, r3, #2
 8004f06:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f08:	2402      	movs	r4, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f0a:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f0c:	940c      	str	r4, [sp, #48]	; 0x30
    GPIO_InitStruct.Pin = S05i5_Pin;
 8004f0e:	2340      	movs	r3, #64	; 0x40
    HAL_GPIO_Init(S05i5_GPIO_Port, &GPIO_InitStruct);
 8004f10:	a90b      	add	r1, sp, #44	; 0x2c
    GPIO_InitStruct.Pin = S05i5_Pin;
 8004f12:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004f14:	940f      	str	r4, [sp, #60]	; 0x3c
    HAL_GPIO_Init(S05i5_GPIO_Port, &GPIO_InitStruct);
 8004f16:	f7fc fbfb 	bl	8001710 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = S10_Pin|S01_Pin|S13x5_Pin;
 8004f1a:	2323      	movs	r3, #35	; 0x23
 8004f1c:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f1e:	940c      	str	r4, [sp, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f20:	950d      	str	r5, [sp, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f22:	950e      	str	r5, [sp, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004f24:	940f      	str	r4, [sp, #60]	; 0x3c
    HAL_GPIO_Init(S22i1_GPIO_Port, &GPIO_InitStruct);
 8004f26:	a90b      	add	r1, sp, #44	; 0x2c
 8004f28:	4844      	ldr	r0, [pc, #272]	; (800503c <HAL_TIM_MspPostInit+0x204>)
 8004f2a:	e02b      	b.n	8004f84 <HAL_TIM_MspPostInit+0x14c>
  else if(htim->Instance==TIM5)
 8004f2c:	4a46      	ldr	r2, [pc, #280]	; (8005048 <HAL_TIM_MspPostInit+0x210>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d110      	bne.n	8004f54 <HAL_TIM_MspPostInit+0x11c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f32:	2300      	movs	r3, #0
 8004f34:	9305      	str	r3, [sp, #20]
 8004f36:	4b40      	ldr	r3, [pc, #256]	; (8005038 <HAL_TIM_MspPostInit+0x200>)
 8004f38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f3a:	f042 0201 	orr.w	r2, r2, #1
 8004f3e:	631a      	str	r2, [r3, #48]	; 0x30
 8004f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f42:	f003 0301 	and.w	r3, r3, #1
 8004f46:	9305      	str	r3, [sp, #20]
 8004f48:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = S21i4_Pin|S04x4_Pin;
 8004f4a:	2303      	movs	r3, #3
 8004f4c:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f4e:	2302      	movs	r3, #2
 8004f50:	930c      	str	r3, [sp, #48]	; 0x30
 8004f52:	e78f      	b.n	8004e74 <HAL_TIM_MspPostInit+0x3c>
  else if(htim->Instance==TIM8)
 8004f54:	4a3d      	ldr	r2, [pc, #244]	; (800504c <HAL_TIM_MspPostInit+0x214>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d118      	bne.n	8004f8c <HAL_TIM_MspPostInit+0x154>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	9306      	str	r3, [sp, #24]
 8004f5e:	4b36      	ldr	r3, [pc, #216]	; (8005038 <HAL_TIM_MspPostInit+0x200>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f60:	483b      	ldr	r0, [pc, #236]	; (8005050 <HAL_TIM_MspPostInit+0x218>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f64:	f042 0204 	orr.w	r2, r2, #4
 8004f68:	631a      	str	r2, [r3, #48]	; 0x30
 8004f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f6c:	f003 0304 	and.w	r3, r3, #4
 8004f70:	9306      	str	r3, [sp, #24]
 8004f72:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = S20i6_Pin|S06x6_Pin|S07_Pin|S08_Pin;
 8004f74:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8004f78:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f7a:	2302      	movs	r3, #2
 8004f7c:	930c      	str	r3, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	930f      	str	r3, [sp, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f82:	a90b      	add	r1, sp, #44	; 0x2c
    HAL_GPIO_Init(S11_GPIO_Port, &GPIO_InitStruct);
 8004f84:	f7fc fbc4 	bl	8001710 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8004f88:	b010      	add	sp, #64	; 0x40
 8004f8a:	bd70      	pop	{r4, r5, r6, pc}
  else if(htim->Instance==TIM10)
 8004f8c:	4a31      	ldr	r2, [pc, #196]	; (8005054 <HAL_TIM_MspPostInit+0x21c>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d113      	bne.n	8004fba <HAL_TIM_MspPostInit+0x182>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f92:	2300      	movs	r3, #0
 8004f94:	9307      	str	r3, [sp, #28]
 8004f96:	4b28      	ldr	r3, [pc, #160]	; (8005038 <HAL_TIM_MspPostInit+0x200>)
 8004f98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f9a:	f042 0202 	orr.w	r2, r2, #2
 8004f9e:	631a      	str	r2, [r3, #48]	; 0x30
 8004fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa2:	f003 0302 	and.w	r3, r3, #2
 8004fa6:	9307      	str	r3, [sp, #28]
 8004fa8:	9b07      	ldr	r3, [sp, #28]
    GPIO_InitStruct.Pin = S16_Pin;
 8004faa:	f44f 7380 	mov.w	r3, #256	; 0x100
    GPIO_InitStruct.Pin = S12_Pin;
 8004fae:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fb0:	2302      	movs	r3, #2
 8004fb2:	930c      	str	r3, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8004fb4:	2303      	movs	r3, #3
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8004fb6:	930f      	str	r3, [sp, #60]	; 0x3c
 8004fb8:	e7b5      	b.n	8004f26 <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM11)
 8004fba:	4a27      	ldr	r2, [pc, #156]	; (8005058 <HAL_TIM_MspPostInit+0x220>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d10e      	bne.n	8004fde <HAL_TIM_MspPostInit+0x1a6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	9308      	str	r3, [sp, #32]
 8004fc4:	4b1c      	ldr	r3, [pc, #112]	; (8005038 <HAL_TIM_MspPostInit+0x200>)
 8004fc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fc8:	f042 0202 	orr.w	r2, r2, #2
 8004fcc:	631a      	str	r2, [r3, #48]	; 0x30
 8004fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd0:	f003 0302 	and.w	r3, r3, #2
 8004fd4:	9308      	str	r3, [sp, #32]
 8004fd6:	9b08      	ldr	r3, [sp, #32]
    GPIO_InitStruct.Pin = S12_Pin;
 8004fd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004fdc:	e7e7      	b.n	8004fae <HAL_TIM_MspPostInit+0x176>
  else if(htim->Instance==TIM12)
 8004fde:	4a1f      	ldr	r2, [pc, #124]	; (800505c <HAL_TIM_MspPostInit+0x224>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d112      	bne.n	800500a <HAL_TIM_MspPostInit+0x1d2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	9309      	str	r3, [sp, #36]	; 0x24
 8004fe8:	4b13      	ldr	r3, [pc, #76]	; (8005038 <HAL_TIM_MspPostInit+0x200>)
 8004fea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fec:	f042 0202 	orr.w	r2, r2, #2
 8004ff0:	631a      	str	r2, [r3, #48]	; 0x30
 8004ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ff4:	f003 0302 	and.w	r3, r3, #2
 8004ff8:	9309      	str	r3, [sp, #36]	; 0x24
 8004ffa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Pin = S22i1_Pin;
 8004ffc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005000:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005002:	2302      	movs	r3, #2
 8005004:	930c      	str	r3, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8005006:	2309      	movs	r3, #9
 8005008:	e7d5      	b.n	8004fb6 <HAL_TIM_MspPostInit+0x17e>
  else if(htim->Instance==TIM14)
 800500a:	4a15      	ldr	r2, [pc, #84]	; (8005060 <HAL_TIM_MspPostInit+0x228>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d1bb      	bne.n	8004f88 <HAL_TIM_MspPostInit+0x150>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005010:	2300      	movs	r3, #0
 8005012:	930a      	str	r3, [sp, #40]	; 0x28
 8005014:	4b08      	ldr	r3, [pc, #32]	; (8005038 <HAL_TIM_MspPostInit+0x200>)
 8005016:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005018:	f042 0201 	orr.w	r2, r2, #1
 800501c:	631a      	str	r2, [r3, #48]	; 0x30
 800501e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005020:	f003 0301 	and.w	r3, r3, #1
 8005024:	930a      	str	r3, [sp, #40]	; 0x28
 8005026:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = S11_Pin;
 8005028:	2380      	movs	r3, #128	; 0x80
 800502a:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800502c:	2302      	movs	r3, #2
 800502e:	930c      	str	r3, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8005030:	2309      	movs	r3, #9
 8005032:	e71f      	b.n	8004e74 <HAL_TIM_MspPostInit+0x3c>
 8005034:	40010000 	.word	0x40010000
 8005038:	40023800 	.word	0x40023800
 800503c:	40020400 	.word	0x40020400
 8005040:	40020000 	.word	0x40020000
 8005044:	40000400 	.word	0x40000400
 8005048:	40000c00 	.word	0x40000c00
 800504c:	40010400 	.word	0x40010400
 8005050:	40020800 	.word	0x40020800
 8005054:	40014400 	.word	0x40014400
 8005058:	40014800 	.word	0x40014800
 800505c:	40001800 	.word	0x40001800
 8005060:	40002000 	.word	0x40002000

08005064 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005064:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005068:	4605      	mov	r5, r0
 800506a:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800506c:	2214      	movs	r2, #20
 800506e:	2100      	movs	r1, #0
 8005070:	a807      	add	r0, sp, #28
 8005072:	f000 fa40 	bl	80054f6 <memset>
  if(huart->Instance==UART4)
 8005076:	682b      	ldr	r3, [r5, #0]
 8005078:	4a8c      	ldr	r2, [pc, #560]	; (80052ac <HAL_UART_MspInit+0x248>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d161      	bne.n	8005142 <HAL_UART_MspInit+0xde>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800507e:	2600      	movs	r6, #0
 8005080:	4b8b      	ldr	r3, [pc, #556]	; (80052b0 <HAL_UART_MspInit+0x24c>)
 8005082:	9600      	str	r6, [sp, #0]
 8005084:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = FTDI_TX_Pin|FTDI_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005086:	488b      	ldr	r0, [pc, #556]	; (80052b4 <HAL_UART_MspInit+0x250>)

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8005088:	4c8b      	ldr	r4, [pc, #556]	; (80052b8 <HAL_UART_MspInit+0x254>)
    __HAL_RCC_UART4_CLK_ENABLE();
 800508a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800508e:	641a      	str	r2, [r3, #64]	; 0x40
 8005090:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005092:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8005096:	9200      	str	r2, [sp, #0]
 8005098:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800509a:	9601      	str	r6, [sp, #4]
 800509c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800509e:	f042 0204 	orr.w	r2, r2, #4
 80050a2:	631a      	str	r2, [r3, #48]	; 0x30
 80050a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a6:	f003 0304 	and.w	r3, r3, #4
 80050aa:	9301      	str	r3, [sp, #4]
 80050ac:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = FTDI_TX_Pin|FTDI_RX_Pin;
 80050ae:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80050b2:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050b4:	2302      	movs	r3, #2
 80050b6:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80050b8:	2301      	movs	r3, #1
 80050ba:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050bc:	2303      	movs	r3, #3
 80050be:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80050c0:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80050c2:	2308      	movs	r3, #8
 80050c4:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80050c6:	f7fc fb23 	bl	8001710 <HAL_GPIO_Init>
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 80050ca:	4b7c      	ldr	r3, [pc, #496]	; (80052bc <HAL_UART_MspInit+0x258>)
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80050cc:	60a6      	str	r6, [r4, #8]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 80050ce:	f04f 6800 	mov.w	r8, #134217728	; 0x8000000
 80050d2:	e884 0108 	stmia.w	r4, {r3, r8}
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80050d6:	4620      	mov	r0, r4
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80050d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80050dc:	60e6      	str	r6, [r4, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80050de:	6123      	str	r3, [r4, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80050e0:	6166      	str	r6, [r4, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80050e2:	61a6      	str	r6, [r4, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 80050e4:	61e6      	str	r6, [r4, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80050e6:	6226      	str	r6, [r4, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80050e8:	6266      	str	r6, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80050ea:	f7fc f98d 	bl	8001408 <HAL_DMA_Init>
 80050ee:	b108      	cbz	r0, 80050f4 <HAL_UART_MspInit+0x90>
    {
      Error_Handler();
 80050f0:	f7fe fe90 	bl	8003e14 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 80050f4:	636c      	str	r4, [r5, #52]	; 0x34

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80050f6:	4b72      	ldr	r3, [pc, #456]	; (80052c0 <HAL_UART_MspInit+0x25c>)
    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 80050f8:	63a5      	str	r5, [r4, #56]	; 0x38
    hdma_uart4_tx.Instance = DMA1_Stream4;
 80050fa:	4c72      	ldr	r4, [pc, #456]	; (80052c4 <HAL_UART_MspInit+0x260>)
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80050fc:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
 8005100:	f04f 0e40 	mov.w	lr, #64	; 0x40
 8005104:	e884 5008 	stmia.w	r4, {r3, ip, lr}
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005108:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800510c:	2300      	movs	r3, #0
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 800510e:	4620      	mov	r0, r4
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005110:	60e3      	str	r3, [r4, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005112:	6122      	str	r2, [r4, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005114:	6163      	str	r3, [r4, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005116:	61a3      	str	r3, [r4, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8005118:	61e3      	str	r3, [r4, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800511a:	6223      	str	r3, [r4, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800511c:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 800511e:	f7fc f973 	bl	8001408 <HAL_DMA_Init>
 8005122:	b108      	cbz	r0, 8005128 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8005124:	f7fe fe76 	bl	8003e14 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8005128:	2200      	movs	r2, #0
    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 800512a:	632c      	str	r4, [r5, #48]	; 0x30
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800512c:	2034      	movs	r0, #52	; 0x34
 800512e:	4611      	mov	r1, r2
    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8005130:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8005132:	f7fc f8fb 	bl	800132c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8005136:	2034      	movs	r0, #52	; 0x34
 8005138:	f7fc f92c 	bl	8001394 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800513c:	b00d      	add	sp, #52	; 0x34
 800513e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  else if(huart->Instance==UART5)
 8005142:	4a61      	ldr	r2, [pc, #388]	; (80052c8 <HAL_UART_MspInit+0x264>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d171      	bne.n	800522c <HAL_UART_MspInit+0x1c8>
    __HAL_RCC_UART5_CLK_ENABLE();
 8005148:	2600      	movs	r6, #0
 800514a:	4b59      	ldr	r3, [pc, #356]	; (80052b0 <HAL_UART_MspInit+0x24c>)
 800514c:	9602      	str	r6, [sp, #8]
 800514e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(UART5_TX_GPIO_Port, &GPIO_InitStruct);
 8005150:	4858      	ldr	r0, [pc, #352]	; (80052b4 <HAL_UART_MspInit+0x250>)
    __HAL_RCC_UART5_CLK_ENABLE();
 8005152:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005156:	641a      	str	r2, [r3, #64]	; 0x40
 8005158:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800515a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800515e:	9202      	str	r2, [sp, #8]
 8005160:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005162:	9603      	str	r6, [sp, #12]
 8005164:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005166:	f042 0204 	orr.w	r2, r2, #4
 800516a:	631a      	str	r2, [r3, #48]	; 0x30
 800516c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800516e:	f002 0204 	and.w	r2, r2, #4
 8005172:	9203      	str	r2, [sp, #12]
 8005174:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005176:	9604      	str	r6, [sp, #16]
 8005178:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800517a:	f042 0208 	orr.w	r2, r2, #8
 800517e:	631a      	str	r2, [r3, #48]	; 0x30
 8005180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005182:	f003 0308 	and.w	r3, r3, #8
 8005186:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8005188:	2408      	movs	r4, #8
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800518a:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800518c:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Pin = UART5_TX_Pin;
 800518e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005192:	f04f 0902 	mov.w	r9, #2
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005196:	f04f 0801 	mov.w	r8, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800519a:	2703      	movs	r7, #3
    HAL_GPIO_Init(UART5_TX_GPIO_Port, &GPIO_InitStruct);
 800519c:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Pin = UART5_TX_Pin;
 800519e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051a0:	f8cd 9020 	str.w	r9, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80051a4:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051a8:	970a      	str	r7, [sp, #40]	; 0x28
    HAL_GPIO_Init(UART5_TX_GPIO_Port, &GPIO_InitStruct);
 80051aa:	f7fc fab1 	bl	8001710 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = UART5_RX_Pin;
 80051ae:	2304      	movs	r3, #4
    HAL_GPIO_Init(UART5_RX_GPIO_Port, &GPIO_InitStruct);
 80051b0:	a907      	add	r1, sp, #28
 80051b2:	4846      	ldr	r0, [pc, #280]	; (80052cc <HAL_UART_MspInit+0x268>)
    GPIO_InitStruct.Pin = UART5_RX_Pin;
 80051b4:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80051b6:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051b8:	f8cd 9020 	str.w	r9, [sp, #32]
    hdma_uart5_rx.Instance = DMA1_Stream0;
 80051bc:	4c44      	ldr	r4, [pc, #272]	; (80052d0 <HAL_UART_MspInit+0x26c>)
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80051be:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051c2:	970a      	str	r7, [sp, #40]	; 0x28
    HAL_GPIO_Init(UART5_RX_GPIO_Port, &GPIO_InitStruct);
 80051c4:	f7fc faa4 	bl	8001710 <HAL_GPIO_Init>
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 80051c8:	4942      	ldr	r1, [pc, #264]	; (80052d4 <HAL_UART_MspInit+0x270>)
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80051ca:	60a6      	str	r6, [r4, #8]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 80051cc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80051d0:	e884 000a 	stmia.w	r4, {r1, r3}
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 80051d4:	4620      	mov	r0, r4
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80051d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80051da:	60e6      	str	r6, [r4, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80051dc:	6123      	str	r3, [r4, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80051de:	6166      	str	r6, [r4, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80051e0:	61a6      	str	r6, [r4, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 80051e2:	61e6      	str	r6, [r4, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 80051e4:	6226      	str	r6, [r4, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80051e6:	6266      	str	r6, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 80051e8:	f7fc f90e 	bl	8001408 <HAL_DMA_Init>
 80051ec:	b108      	cbz	r0, 80051f2 <HAL_UART_MspInit+0x18e>
      Error_Handler();
 80051ee:	f7fe fe11 	bl	8003e14 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 80051f2:	636c      	str	r4, [r5, #52]	; 0x34
    hdma_uart5_tx.Instance = DMA1_Stream7;
 80051f4:	4b38      	ldr	r3, [pc, #224]	; (80052d8 <HAL_UART_MspInit+0x274>)
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 80051f6:	63a5      	str	r5, [r4, #56]	; 0x38
    hdma_uart5_tx.Instance = DMA1_Stream7;
 80051f8:	4c38      	ldr	r4, [pc, #224]	; (80052dc <HAL_UART_MspInit+0x278>)
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80051fa:	6023      	str	r3, [r4, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80051fc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005200:	6063      	str	r3, [r4, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005202:	2340      	movs	r3, #64	; 0x40
 8005204:	60a3      	str	r3, [r4, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005206:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800520a:	2300      	movs	r3, #0
 800520c:	60e3      	str	r3, [r4, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800520e:	6122      	str	r2, [r4, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005210:	6163      	str	r3, [r4, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005212:	61a3      	str	r3, [r4, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8005214:	61e3      	str	r3, [r4, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005216:	6223      	str	r3, [r4, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005218:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800521a:	4620      	mov	r0, r4
 800521c:	f7fc f8f4 	bl	8001408 <HAL_DMA_Init>
 8005220:	b108      	cbz	r0, 8005226 <HAL_UART_MspInit+0x1c2>
      Error_Handler();
 8005222:	f7fe fdf7 	bl	8003e14 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8005226:	632c      	str	r4, [r5, #48]	; 0x30
 8005228:	63a5      	str	r5, [r4, #56]	; 0x38
}
 800522a:	e787      	b.n	800513c <HAL_UART_MspInit+0xd8>
  else if(huart->Instance==USART2)
 800522c:	4a2c      	ldr	r2, [pc, #176]	; (80052e0 <HAL_UART_MspInit+0x27c>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d184      	bne.n	800513c <HAL_UART_MspInit+0xd8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005232:	2600      	movs	r6, #0
 8005234:	4b1e      	ldr	r3, [pc, #120]	; (80052b0 <HAL_UART_MspInit+0x24c>)
 8005236:	9605      	str	r6, [sp, #20]
 8005238:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800523a:	482a      	ldr	r0, [pc, #168]	; (80052e4 <HAL_UART_MspInit+0x280>)
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800523c:	4c2a      	ldr	r4, [pc, #168]	; (80052e8 <HAL_UART_MspInit+0x284>)
    __HAL_RCC_USART2_CLK_ENABLE();
 800523e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005242:	641a      	str	r2, [r3, #64]	; 0x40
 8005244:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005246:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800524a:	9205      	str	r2, [sp, #20]
 800524c:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800524e:	9606      	str	r6, [sp, #24]
 8005250:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005252:	f042 0201 	orr.w	r2, r2, #1
 8005256:	631a      	str	r2, [r3, #48]	; 0x30
 8005258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800525a:	f003 0301 	and.w	r3, r3, #1
 800525e:	9306      	str	r3, [sp, #24]
 8005260:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = UART2_TX_Pin|UART2_RX_Pin;
 8005262:	230c      	movs	r3, #12
 8005264:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005266:	2302      	movs	r3, #2
 8005268:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800526a:	2303      	movs	r3, #3
 800526c:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800526e:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005270:	2307      	movs	r3, #7
 8005272:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005274:	f7fc fa4c 	bl	8001710 <HAL_GPIO_Init>
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8005278:	4a1c      	ldr	r2, [pc, #112]	; (80052ec <HAL_UART_MspInit+0x288>)
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800527a:	60a6      	str	r6, [r4, #8]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800527c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005280:	e884 000c 	stmia.w	r4, {r2, r3}
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005284:	4620      	mov	r0, r4
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005286:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800528a:	60e6      	str	r6, [r4, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800528c:	6123      	str	r3, [r4, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800528e:	6166      	str	r6, [r4, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005290:	61a6      	str	r6, [r4, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8005292:	61e6      	str	r6, [r4, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005294:	6226      	str	r6, [r4, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005296:	6266      	str	r6, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005298:	f7fc f8b6 	bl	8001408 <HAL_DMA_Init>
 800529c:	b108      	cbz	r0, 80052a2 <HAL_UART_MspInit+0x23e>
      Error_Handler();
 800529e:	f7fe fdb9 	bl	8003e14 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80052a2:	636c      	str	r4, [r5, #52]	; 0x34
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80052a4:	4b12      	ldr	r3, [pc, #72]	; (80052f0 <HAL_UART_MspInit+0x28c>)
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80052a6:	63a5      	str	r5, [r4, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80052a8:	4c12      	ldr	r4, [pc, #72]	; (80052f4 <HAL_UART_MspInit+0x290>)
 80052aa:	e7a6      	b.n	80051fa <HAL_UART_MspInit+0x196>
 80052ac:	40004c00 	.word	0x40004c00
 80052b0:	40023800 	.word	0x40023800
 80052b4:	40020800 	.word	0x40020800
 80052b8:	20000340 	.word	0x20000340
 80052bc:	40026040 	.word	0x40026040
 80052c0:	40026070 	.word	0x40026070
 80052c4:	20000974 	.word	0x20000974
 80052c8:	40005000 	.word	0x40005000
 80052cc:	40020c00 	.word	0x40020c00
 80052d0:	20000894 	.word	0x20000894
 80052d4:	40026010 	.word	0x40026010
 80052d8:	400260b8 	.word	0x400260b8
 80052dc:	200009d4 	.word	0x200009d4
 80052e0:	40004400 	.word	0x40004400
 80052e4:	40020000 	.word	0x40020000
 80052e8:	200003a0 	.word	0x200003a0
 80052ec:	40026088 	.word	0x40026088
 80052f0:	400260a0 	.word	0x400260a0
 80052f4:	20000694 	.word	0x20000694

080052f8 <NMI_Handler>:
 80052f8:	4770      	bx	lr

080052fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80052fa:	e7fe      	b.n	80052fa <HardFault_Handler>

080052fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80052fc:	e7fe      	b.n	80052fc <MemManage_Handler>

080052fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80052fe:	e7fe      	b.n	80052fe <BusFault_Handler>

08005300 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005300:	e7fe      	b.n	8005300 <UsageFault_Handler>

08005302 <SVC_Handler>:
 8005302:	4770      	bx	lr

08005304 <DebugMon_Handler>:
 8005304:	4770      	bx	lr

08005306 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005306:	4770      	bx	lr

08005308 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005308:	f7fb be90 	b.w	800102c <HAL_IncTick>

0800530c <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 800530c:	4801      	ldr	r0, [pc, #4]	; (8005314 <DMA1_Stream0_IRQHandler+0x8>)
 800530e:	f7fc b945 	b.w	800159c <HAL_DMA_IRQHandler>
 8005312:	bf00      	nop
 8005314:	20000894 	.word	0x20000894

08005318 <DMA1_Stream2_IRQHandler>:
void DMA1_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8005318:	4801      	ldr	r0, [pc, #4]	; (8005320 <DMA1_Stream2_IRQHandler+0x8>)
 800531a:	f7fc b93f 	b.w	800159c <HAL_DMA_IRQHandler>
 800531e:	bf00      	nop
 8005320:	20000340 	.word	0x20000340

08005324 <DMA1_Stream3_IRQHandler>:
void DMA1_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8005324:	4801      	ldr	r0, [pc, #4]	; (800532c <DMA1_Stream3_IRQHandler+0x8>)
 8005326:	f7fc b939 	b.w	800159c <HAL_DMA_IRQHandler>
 800532a:	bf00      	nop
 800532c:	2000052c 	.word	0x2000052c

08005330 <DMA1_Stream4_IRQHandler>:
void DMA1_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8005330:	4801      	ldr	r0, [pc, #4]	; (8005338 <DMA1_Stream4_IRQHandler+0x8>)
 8005332:	f7fc b933 	b.w	800159c <HAL_DMA_IRQHandler>
 8005336:	bf00      	nop
 8005338:	20000974 	.word	0x20000974

0800533c <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800533c:	4801      	ldr	r0, [pc, #4]	; (8005344 <DMA1_Stream5_IRQHandler+0x8>)
 800533e:	f7fc b92d 	b.w	800159c <HAL_DMA_IRQHandler>
 8005342:	bf00      	nop
 8005344:	200003a0 	.word	0x200003a0

08005348 <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8005348:	4801      	ldr	r0, [pc, #4]	; (8005350 <DMA1_Stream6_IRQHandler+0x8>)
 800534a:	f7fc b927 	b.w	800159c <HAL_DMA_IRQHandler>
 800534e:	bf00      	nop
 8005350:	20000694 	.word	0x20000694

08005354 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8005354:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8005356:	4804      	ldr	r0, [pc, #16]	; (8005368 <TIM8_UP_TIM13_IRQHandler+0x14>)
 8005358:	f7fd f9b4 	bl	80026c4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 800535c:	4803      	ldr	r0, [pc, #12]	; (800536c <TIM8_UP_TIM13_IRQHandler+0x18>)
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800535e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim13);
 8005362:	f7fd b9af 	b.w	80026c4 <HAL_TIM_IRQHandler>
 8005366:	bf00      	nop
 8005368:	20000458 	.word	0x20000458
 800536c:	200006f4 	.word	0x200006f4

08005370 <DMA1_Stream7_IRQHandler>:
void DMA1_Stream7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8005370:	4801      	ldr	r0, [pc, #4]	; (8005378 <DMA1_Stream7_IRQHandler+0x8>)
 8005372:	f7fc b913 	b.w	800159c <HAL_DMA_IRQHandler>
 8005376:	bf00      	nop
 8005378:	200009d4 	.word	0x200009d4

0800537c <UART4_IRQHandler>:
void UART4_IRQHandler(void)
{
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800537c:	4801      	ldr	r0, [pc, #4]	; (8005384 <UART4_IRQHandler+0x8>)
 800537e:	f7fd bead 	b.w	80030dc <HAL_UART_IRQHandler>
 8005382:	bf00      	nop
 8005384:	200007d4 	.word	0x200007d4

08005388 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8005388:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800538a:	4b0a      	ldr	r3, [pc, #40]	; (80053b4 <_sbrk+0x2c>)
 800538c:	6819      	ldr	r1, [r3, #0]
{
 800538e:	4602      	mov	r2, r0
	if (heap_end == 0)
 8005390:	b909      	cbnz	r1, 8005396 <_sbrk+0xe>
		heap_end = &end;
 8005392:	4909      	ldr	r1, [pc, #36]	; (80053b8 <_sbrk+0x30>)
 8005394:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 8005396:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8005398:	4669      	mov	r1, sp
 800539a:	4402      	add	r2, r0
 800539c:	428a      	cmp	r2, r1
 800539e:	d906      	bls.n	80053ae <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80053a0:	f000 f85a 	bl	8005458 <__errno>
 80053a4:	230c      	movs	r3, #12
 80053a6:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80053a8:	f04f 30ff 	mov.w	r0, #4294967295
 80053ac:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 80053ae:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 80053b0:	bd08      	pop	{r3, pc}
 80053b2:	bf00      	nop
 80053b4:	20000330 	.word	0x20000330
 80053b8:	20000f1c 	.word	0x20000f1c

080053bc <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80053bc:	4b05      	ldr	r3, [pc, #20]	; (80053d4 <SystemInit+0x18>)
 80053be:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80053c2:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80053c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80053ca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80053ce:	609a      	str	r2, [r3, #8]
 80053d0:	4770      	bx	lr
 80053d2:	bf00      	nop
 80053d4:	e000ed00 	.word	0xe000ed00

080053d8 <LedSwitch>:
  if(led_num == 2)
  {
    port=LED2_GPIO_Port;
    pin=LED2_Pin;
  }
  if(led_num == 3)
 80053d8:	2803      	cmp	r0, #3
 80053da:	d00b      	beq.n	80053f4 <LedSwitch+0x1c>
    pin=LED3_Pin;
  }
  if(led_num == 4)
  {
    port=LED4_GPIO_Port;
    pin=LED4_Pin;
 80053dc:	4a07      	ldr	r2, [pc, #28]	; (80053fc <LedSwitch+0x24>)
  if(led_num == 4)
 80053de:	2804      	cmp	r0, #4
    pin=LED4_Pin;
 80053e0:	bf18      	it	ne
 80053e2:	2310      	movne	r3, #16
 80053e4:	4806      	ldr	r0, [pc, #24]	; (8005400 <LedSwitch+0x28>)
 80053e6:	bf04      	itt	eq
 80053e8:	2301      	moveq	r3, #1
 80053ea:	4610      	moveq	r0, r2
  }

  HAL_GPIO_WritePin(port, pin, state);
 80053ec:	b2ca      	uxtb	r2, r1
 80053ee:	4619      	mov	r1, r3
 80053f0:	f7fc ba6e 	b.w	80018d0 <HAL_GPIO_WritePin>
    pin=LED3_Pin;
 80053f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80053f8:	4801      	ldr	r0, [pc, #4]	; (8005400 <LedSwitch+0x28>)
 80053fa:	e7f7      	b.n	80053ec <LedSwitch+0x14>
 80053fc:	40021c00 	.word	0x40021c00
 8005400:	40020400 	.word	0x40020400

08005404 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005404:	f8df d034 	ldr.w	sp, [pc, #52]	; 800543c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005408:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800540a:	e003      	b.n	8005414 <LoopCopyDataInit>

0800540c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800540c:	4b0c      	ldr	r3, [pc, #48]	; (8005440 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800540e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005410:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005412:	3104      	adds	r1, #4

08005414 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005414:	480b      	ldr	r0, [pc, #44]	; (8005444 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005416:	4b0c      	ldr	r3, [pc, #48]	; (8005448 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005418:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800541a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800541c:	d3f6      	bcc.n	800540c <CopyDataInit>
  ldr  r2, =_sbss
 800541e:	4a0b      	ldr	r2, [pc, #44]	; (800544c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005420:	e002      	b.n	8005428 <LoopFillZerobss>

08005422 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005422:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005424:	f842 3b04 	str.w	r3, [r2], #4

08005428 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005428:	4b09      	ldr	r3, [pc, #36]	; (8005450 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800542a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800542c:	d3f9      	bcc.n	8005422 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800542e:	f7ff ffc5 	bl	80053bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005432:	f000 f817 	bl	8005464 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005436:	f7fe f839 	bl	80034ac <main>
  bx  lr    
 800543a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800543c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8005440:	0800794c 	.word	0x0800794c
  ldr  r0, =_sdata
 8005444:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005448:	20000300 	.word	0x20000300
  ldr  r2, =_sbss
 800544c:	20000300 	.word	0x20000300
  ldr  r3, = _ebss
 8005450:	20000f1c 	.word	0x20000f1c

08005454 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005454:	e7fe      	b.n	8005454 <ADC_IRQHandler>
	...

08005458 <__errno>:
 8005458:	4b01      	ldr	r3, [pc, #4]	; (8005460 <__errno+0x8>)
 800545a:	6818      	ldr	r0, [r3, #0]
 800545c:	4770      	bx	lr
 800545e:	bf00      	nop
 8005460:	2000012c 	.word	0x2000012c

08005464 <__libc_init_array>:
 8005464:	b570      	push	{r4, r5, r6, lr}
 8005466:	4e0d      	ldr	r6, [pc, #52]	; (800549c <__libc_init_array+0x38>)
 8005468:	4c0d      	ldr	r4, [pc, #52]	; (80054a0 <__libc_init_array+0x3c>)
 800546a:	1ba4      	subs	r4, r4, r6
 800546c:	10a4      	asrs	r4, r4, #2
 800546e:	2500      	movs	r5, #0
 8005470:	42a5      	cmp	r5, r4
 8005472:	d109      	bne.n	8005488 <__libc_init_array+0x24>
 8005474:	4e0b      	ldr	r6, [pc, #44]	; (80054a4 <__libc_init_array+0x40>)
 8005476:	4c0c      	ldr	r4, [pc, #48]	; (80054a8 <__libc_init_array+0x44>)
 8005478:	f002 f802 	bl	8007480 <_init>
 800547c:	1ba4      	subs	r4, r4, r6
 800547e:	10a4      	asrs	r4, r4, #2
 8005480:	2500      	movs	r5, #0
 8005482:	42a5      	cmp	r5, r4
 8005484:	d105      	bne.n	8005492 <__libc_init_array+0x2e>
 8005486:	bd70      	pop	{r4, r5, r6, pc}
 8005488:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800548c:	4798      	blx	r3
 800548e:	3501      	adds	r5, #1
 8005490:	e7ee      	b.n	8005470 <__libc_init_array+0xc>
 8005492:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005496:	4798      	blx	r3
 8005498:	3501      	adds	r5, #1
 800549a:	e7f2      	b.n	8005482 <__libc_init_array+0x1e>
 800549c:	08007944 	.word	0x08007944
 80054a0:	08007944 	.word	0x08007944
 80054a4:	08007944 	.word	0x08007944
 80054a8:	08007948 	.word	0x08007948

080054ac <memcpy>:
 80054ac:	b510      	push	{r4, lr}
 80054ae:	1e43      	subs	r3, r0, #1
 80054b0:	440a      	add	r2, r1
 80054b2:	4291      	cmp	r1, r2
 80054b4:	d100      	bne.n	80054b8 <memcpy+0xc>
 80054b6:	bd10      	pop	{r4, pc}
 80054b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80054bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80054c0:	e7f7      	b.n	80054b2 <memcpy+0x6>

080054c2 <memmove>:
 80054c2:	4288      	cmp	r0, r1
 80054c4:	b510      	push	{r4, lr}
 80054c6:	eb01 0302 	add.w	r3, r1, r2
 80054ca:	d803      	bhi.n	80054d4 <memmove+0x12>
 80054cc:	1e42      	subs	r2, r0, #1
 80054ce:	4299      	cmp	r1, r3
 80054d0:	d10c      	bne.n	80054ec <memmove+0x2a>
 80054d2:	bd10      	pop	{r4, pc}
 80054d4:	4298      	cmp	r0, r3
 80054d6:	d2f9      	bcs.n	80054cc <memmove+0xa>
 80054d8:	1881      	adds	r1, r0, r2
 80054da:	1ad2      	subs	r2, r2, r3
 80054dc:	42d3      	cmn	r3, r2
 80054de:	d100      	bne.n	80054e2 <memmove+0x20>
 80054e0:	bd10      	pop	{r4, pc}
 80054e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80054e6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80054ea:	e7f7      	b.n	80054dc <memmove+0x1a>
 80054ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80054f0:	f802 4f01 	strb.w	r4, [r2, #1]!
 80054f4:	e7eb      	b.n	80054ce <memmove+0xc>

080054f6 <memset>:
 80054f6:	4402      	add	r2, r0
 80054f8:	4603      	mov	r3, r0
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d100      	bne.n	8005500 <memset+0xa>
 80054fe:	4770      	bx	lr
 8005500:	f803 1b01 	strb.w	r1, [r3], #1
 8005504:	e7f9      	b.n	80054fa <memset+0x4>
	...

08005508 <siprintf>:
 8005508:	b40e      	push	{r1, r2, r3}
 800550a:	b500      	push	{lr}
 800550c:	b09c      	sub	sp, #112	; 0x70
 800550e:	f44f 7102 	mov.w	r1, #520	; 0x208
 8005512:	ab1d      	add	r3, sp, #116	; 0x74
 8005514:	f8ad 1014 	strh.w	r1, [sp, #20]
 8005518:	9002      	str	r0, [sp, #8]
 800551a:	9006      	str	r0, [sp, #24]
 800551c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005520:	480a      	ldr	r0, [pc, #40]	; (800554c <siprintf+0x44>)
 8005522:	9104      	str	r1, [sp, #16]
 8005524:	9107      	str	r1, [sp, #28]
 8005526:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800552a:	f853 2b04 	ldr.w	r2, [r3], #4
 800552e:	f8ad 1016 	strh.w	r1, [sp, #22]
 8005532:	6800      	ldr	r0, [r0, #0]
 8005534:	9301      	str	r3, [sp, #4]
 8005536:	a902      	add	r1, sp, #8
 8005538:	f000 f8a4 	bl	8005684 <_svfiprintf_r>
 800553c:	9b02      	ldr	r3, [sp, #8]
 800553e:	2200      	movs	r2, #0
 8005540:	701a      	strb	r2, [r3, #0]
 8005542:	b01c      	add	sp, #112	; 0x70
 8005544:	f85d eb04 	ldr.w	lr, [sp], #4
 8005548:	b003      	add	sp, #12
 800554a:	4770      	bx	lr
 800554c:	2000012c 	.word	0x2000012c

08005550 <siscanf>:
 8005550:	b40e      	push	{r1, r2, r3}
 8005552:	b530      	push	{r4, r5, lr}
 8005554:	b09c      	sub	sp, #112	; 0x70
 8005556:	ac1f      	add	r4, sp, #124	; 0x7c
 8005558:	f44f 7201 	mov.w	r2, #516	; 0x204
 800555c:	f854 5b04 	ldr.w	r5, [r4], #4
 8005560:	f8ad 2014 	strh.w	r2, [sp, #20]
 8005564:	9002      	str	r0, [sp, #8]
 8005566:	9006      	str	r0, [sp, #24]
 8005568:	f7fa fe5c 	bl	8000224 <strlen>
 800556c:	4b0b      	ldr	r3, [pc, #44]	; (800559c <siscanf+0x4c>)
 800556e:	9003      	str	r0, [sp, #12]
 8005570:	9007      	str	r0, [sp, #28]
 8005572:	930b      	str	r3, [sp, #44]	; 0x2c
 8005574:	480a      	ldr	r0, [pc, #40]	; (80055a0 <siscanf+0x50>)
 8005576:	9401      	str	r4, [sp, #4]
 8005578:	2300      	movs	r3, #0
 800557a:	930f      	str	r3, [sp, #60]	; 0x3c
 800557c:	9314      	str	r3, [sp, #80]	; 0x50
 800557e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005582:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005586:	462a      	mov	r2, r5
 8005588:	4623      	mov	r3, r4
 800558a:	a902      	add	r1, sp, #8
 800558c:	6800      	ldr	r0, [r0, #0]
 800558e:	f000 f9c7 	bl	8005920 <__ssvfiscanf_r>
 8005592:	b01c      	add	sp, #112	; 0x70
 8005594:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005598:	b003      	add	sp, #12
 800559a:	4770      	bx	lr
 800559c:	080055a5 	.word	0x080055a5
 80055a0:	2000012c 	.word	0x2000012c

080055a4 <__seofread>:
 80055a4:	2000      	movs	r0, #0
 80055a6:	4770      	bx	lr

080055a8 <strncmp>:
 80055a8:	b510      	push	{r4, lr}
 80055aa:	b16a      	cbz	r2, 80055c8 <strncmp+0x20>
 80055ac:	3901      	subs	r1, #1
 80055ae:	1884      	adds	r4, r0, r2
 80055b0:	f810 3b01 	ldrb.w	r3, [r0], #1
 80055b4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d103      	bne.n	80055c4 <strncmp+0x1c>
 80055bc:	42a0      	cmp	r0, r4
 80055be:	d001      	beq.n	80055c4 <strncmp+0x1c>
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d1f5      	bne.n	80055b0 <strncmp+0x8>
 80055c4:	1a98      	subs	r0, r3, r2
 80055c6:	bd10      	pop	{r4, pc}
 80055c8:	4610      	mov	r0, r2
 80055ca:	bd10      	pop	{r4, pc}

080055cc <__ssputs_r>:
 80055cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055d0:	688e      	ldr	r6, [r1, #8]
 80055d2:	429e      	cmp	r6, r3
 80055d4:	4682      	mov	sl, r0
 80055d6:	460c      	mov	r4, r1
 80055d8:	4691      	mov	r9, r2
 80055da:	4698      	mov	r8, r3
 80055dc:	d835      	bhi.n	800564a <__ssputs_r+0x7e>
 80055de:	898a      	ldrh	r2, [r1, #12]
 80055e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80055e4:	d031      	beq.n	800564a <__ssputs_r+0x7e>
 80055e6:	6825      	ldr	r5, [r4, #0]
 80055e8:	6909      	ldr	r1, [r1, #16]
 80055ea:	1a6f      	subs	r7, r5, r1
 80055ec:	6965      	ldr	r5, [r4, #20]
 80055ee:	2302      	movs	r3, #2
 80055f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80055f4:	fb95 f5f3 	sdiv	r5, r5, r3
 80055f8:	f108 0301 	add.w	r3, r8, #1
 80055fc:	443b      	add	r3, r7
 80055fe:	429d      	cmp	r5, r3
 8005600:	bf38      	it	cc
 8005602:	461d      	movcc	r5, r3
 8005604:	0553      	lsls	r3, r2, #21
 8005606:	d531      	bpl.n	800566c <__ssputs_r+0xa0>
 8005608:	4629      	mov	r1, r5
 800560a:	f000 ffc9 	bl	80065a0 <_malloc_r>
 800560e:	4606      	mov	r6, r0
 8005610:	b950      	cbnz	r0, 8005628 <__ssputs_r+0x5c>
 8005612:	230c      	movs	r3, #12
 8005614:	f8ca 3000 	str.w	r3, [sl]
 8005618:	89a3      	ldrh	r3, [r4, #12]
 800561a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800561e:	81a3      	strh	r3, [r4, #12]
 8005620:	f04f 30ff 	mov.w	r0, #4294967295
 8005624:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005628:	463a      	mov	r2, r7
 800562a:	6921      	ldr	r1, [r4, #16]
 800562c:	f7ff ff3e 	bl	80054ac <memcpy>
 8005630:	89a3      	ldrh	r3, [r4, #12]
 8005632:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005636:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800563a:	81a3      	strh	r3, [r4, #12]
 800563c:	6126      	str	r6, [r4, #16]
 800563e:	6165      	str	r5, [r4, #20]
 8005640:	443e      	add	r6, r7
 8005642:	1bed      	subs	r5, r5, r7
 8005644:	6026      	str	r6, [r4, #0]
 8005646:	60a5      	str	r5, [r4, #8]
 8005648:	4646      	mov	r6, r8
 800564a:	4546      	cmp	r6, r8
 800564c:	bf28      	it	cs
 800564e:	4646      	movcs	r6, r8
 8005650:	4632      	mov	r2, r6
 8005652:	4649      	mov	r1, r9
 8005654:	6820      	ldr	r0, [r4, #0]
 8005656:	f7ff ff34 	bl	80054c2 <memmove>
 800565a:	68a3      	ldr	r3, [r4, #8]
 800565c:	1b9b      	subs	r3, r3, r6
 800565e:	60a3      	str	r3, [r4, #8]
 8005660:	6823      	ldr	r3, [r4, #0]
 8005662:	441e      	add	r6, r3
 8005664:	6026      	str	r6, [r4, #0]
 8005666:	2000      	movs	r0, #0
 8005668:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800566c:	462a      	mov	r2, r5
 800566e:	f000 fff5 	bl	800665c <_realloc_r>
 8005672:	4606      	mov	r6, r0
 8005674:	2800      	cmp	r0, #0
 8005676:	d1e1      	bne.n	800563c <__ssputs_r+0x70>
 8005678:	6921      	ldr	r1, [r4, #16]
 800567a:	4650      	mov	r0, sl
 800567c:	f000 ff42 	bl	8006504 <_free_r>
 8005680:	e7c7      	b.n	8005612 <__ssputs_r+0x46>
	...

08005684 <_svfiprintf_r>:
 8005684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005688:	b09d      	sub	sp, #116	; 0x74
 800568a:	4680      	mov	r8, r0
 800568c:	9303      	str	r3, [sp, #12]
 800568e:	898b      	ldrh	r3, [r1, #12]
 8005690:	061c      	lsls	r4, r3, #24
 8005692:	460d      	mov	r5, r1
 8005694:	4616      	mov	r6, r2
 8005696:	d50f      	bpl.n	80056b8 <_svfiprintf_r+0x34>
 8005698:	690b      	ldr	r3, [r1, #16]
 800569a:	b96b      	cbnz	r3, 80056b8 <_svfiprintf_r+0x34>
 800569c:	2140      	movs	r1, #64	; 0x40
 800569e:	f000 ff7f 	bl	80065a0 <_malloc_r>
 80056a2:	6028      	str	r0, [r5, #0]
 80056a4:	6128      	str	r0, [r5, #16]
 80056a6:	b928      	cbnz	r0, 80056b4 <_svfiprintf_r+0x30>
 80056a8:	230c      	movs	r3, #12
 80056aa:	f8c8 3000 	str.w	r3, [r8]
 80056ae:	f04f 30ff 	mov.w	r0, #4294967295
 80056b2:	e0c5      	b.n	8005840 <_svfiprintf_r+0x1bc>
 80056b4:	2340      	movs	r3, #64	; 0x40
 80056b6:	616b      	str	r3, [r5, #20]
 80056b8:	2300      	movs	r3, #0
 80056ba:	9309      	str	r3, [sp, #36]	; 0x24
 80056bc:	2320      	movs	r3, #32
 80056be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80056c2:	2330      	movs	r3, #48	; 0x30
 80056c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80056c8:	f04f 0b01 	mov.w	fp, #1
 80056cc:	4637      	mov	r7, r6
 80056ce:	463c      	mov	r4, r7
 80056d0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d13c      	bne.n	8005752 <_svfiprintf_r+0xce>
 80056d8:	ebb7 0a06 	subs.w	sl, r7, r6
 80056dc:	d00b      	beq.n	80056f6 <_svfiprintf_r+0x72>
 80056de:	4653      	mov	r3, sl
 80056e0:	4632      	mov	r2, r6
 80056e2:	4629      	mov	r1, r5
 80056e4:	4640      	mov	r0, r8
 80056e6:	f7ff ff71 	bl	80055cc <__ssputs_r>
 80056ea:	3001      	adds	r0, #1
 80056ec:	f000 80a3 	beq.w	8005836 <_svfiprintf_r+0x1b2>
 80056f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056f2:	4453      	add	r3, sl
 80056f4:	9309      	str	r3, [sp, #36]	; 0x24
 80056f6:	783b      	ldrb	r3, [r7, #0]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	f000 809c 	beq.w	8005836 <_svfiprintf_r+0x1b2>
 80056fe:	2300      	movs	r3, #0
 8005700:	f04f 32ff 	mov.w	r2, #4294967295
 8005704:	9304      	str	r3, [sp, #16]
 8005706:	9307      	str	r3, [sp, #28]
 8005708:	9205      	str	r2, [sp, #20]
 800570a:	9306      	str	r3, [sp, #24]
 800570c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005710:	931a      	str	r3, [sp, #104]	; 0x68
 8005712:	2205      	movs	r2, #5
 8005714:	7821      	ldrb	r1, [r4, #0]
 8005716:	4850      	ldr	r0, [pc, #320]	; (8005858 <_svfiprintf_r+0x1d4>)
 8005718:	f7fa fd92 	bl	8000240 <memchr>
 800571c:	1c67      	adds	r7, r4, #1
 800571e:	9b04      	ldr	r3, [sp, #16]
 8005720:	b9d8      	cbnz	r0, 800575a <_svfiprintf_r+0xd6>
 8005722:	06d9      	lsls	r1, r3, #27
 8005724:	bf44      	itt	mi
 8005726:	2220      	movmi	r2, #32
 8005728:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800572c:	071a      	lsls	r2, r3, #28
 800572e:	bf44      	itt	mi
 8005730:	222b      	movmi	r2, #43	; 0x2b
 8005732:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005736:	7822      	ldrb	r2, [r4, #0]
 8005738:	2a2a      	cmp	r2, #42	; 0x2a
 800573a:	d016      	beq.n	800576a <_svfiprintf_r+0xe6>
 800573c:	9a07      	ldr	r2, [sp, #28]
 800573e:	2100      	movs	r1, #0
 8005740:	200a      	movs	r0, #10
 8005742:	4627      	mov	r7, r4
 8005744:	3401      	adds	r4, #1
 8005746:	783b      	ldrb	r3, [r7, #0]
 8005748:	3b30      	subs	r3, #48	; 0x30
 800574a:	2b09      	cmp	r3, #9
 800574c:	d951      	bls.n	80057f2 <_svfiprintf_r+0x16e>
 800574e:	b1c9      	cbz	r1, 8005784 <_svfiprintf_r+0x100>
 8005750:	e011      	b.n	8005776 <_svfiprintf_r+0xf2>
 8005752:	2b25      	cmp	r3, #37	; 0x25
 8005754:	d0c0      	beq.n	80056d8 <_svfiprintf_r+0x54>
 8005756:	4627      	mov	r7, r4
 8005758:	e7b9      	b.n	80056ce <_svfiprintf_r+0x4a>
 800575a:	4a3f      	ldr	r2, [pc, #252]	; (8005858 <_svfiprintf_r+0x1d4>)
 800575c:	1a80      	subs	r0, r0, r2
 800575e:	fa0b f000 	lsl.w	r0, fp, r0
 8005762:	4318      	orrs	r0, r3
 8005764:	9004      	str	r0, [sp, #16]
 8005766:	463c      	mov	r4, r7
 8005768:	e7d3      	b.n	8005712 <_svfiprintf_r+0x8e>
 800576a:	9a03      	ldr	r2, [sp, #12]
 800576c:	1d11      	adds	r1, r2, #4
 800576e:	6812      	ldr	r2, [r2, #0]
 8005770:	9103      	str	r1, [sp, #12]
 8005772:	2a00      	cmp	r2, #0
 8005774:	db01      	blt.n	800577a <_svfiprintf_r+0xf6>
 8005776:	9207      	str	r2, [sp, #28]
 8005778:	e004      	b.n	8005784 <_svfiprintf_r+0x100>
 800577a:	4252      	negs	r2, r2
 800577c:	f043 0302 	orr.w	r3, r3, #2
 8005780:	9207      	str	r2, [sp, #28]
 8005782:	9304      	str	r3, [sp, #16]
 8005784:	783b      	ldrb	r3, [r7, #0]
 8005786:	2b2e      	cmp	r3, #46	; 0x2e
 8005788:	d10e      	bne.n	80057a8 <_svfiprintf_r+0x124>
 800578a:	787b      	ldrb	r3, [r7, #1]
 800578c:	2b2a      	cmp	r3, #42	; 0x2a
 800578e:	f107 0101 	add.w	r1, r7, #1
 8005792:	d132      	bne.n	80057fa <_svfiprintf_r+0x176>
 8005794:	9b03      	ldr	r3, [sp, #12]
 8005796:	1d1a      	adds	r2, r3, #4
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	9203      	str	r2, [sp, #12]
 800579c:	2b00      	cmp	r3, #0
 800579e:	bfb8      	it	lt
 80057a0:	f04f 33ff 	movlt.w	r3, #4294967295
 80057a4:	3702      	adds	r7, #2
 80057a6:	9305      	str	r3, [sp, #20]
 80057a8:	4c2c      	ldr	r4, [pc, #176]	; (800585c <_svfiprintf_r+0x1d8>)
 80057aa:	7839      	ldrb	r1, [r7, #0]
 80057ac:	2203      	movs	r2, #3
 80057ae:	4620      	mov	r0, r4
 80057b0:	f7fa fd46 	bl	8000240 <memchr>
 80057b4:	b138      	cbz	r0, 80057c6 <_svfiprintf_r+0x142>
 80057b6:	2340      	movs	r3, #64	; 0x40
 80057b8:	1b00      	subs	r0, r0, r4
 80057ba:	fa03 f000 	lsl.w	r0, r3, r0
 80057be:	9b04      	ldr	r3, [sp, #16]
 80057c0:	4303      	orrs	r3, r0
 80057c2:	9304      	str	r3, [sp, #16]
 80057c4:	3701      	adds	r7, #1
 80057c6:	7839      	ldrb	r1, [r7, #0]
 80057c8:	4825      	ldr	r0, [pc, #148]	; (8005860 <_svfiprintf_r+0x1dc>)
 80057ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80057ce:	2206      	movs	r2, #6
 80057d0:	1c7e      	adds	r6, r7, #1
 80057d2:	f7fa fd35 	bl	8000240 <memchr>
 80057d6:	2800      	cmp	r0, #0
 80057d8:	d035      	beq.n	8005846 <_svfiprintf_r+0x1c2>
 80057da:	4b22      	ldr	r3, [pc, #136]	; (8005864 <_svfiprintf_r+0x1e0>)
 80057dc:	b9fb      	cbnz	r3, 800581e <_svfiprintf_r+0x19a>
 80057de:	9b03      	ldr	r3, [sp, #12]
 80057e0:	3307      	adds	r3, #7
 80057e2:	f023 0307 	bic.w	r3, r3, #7
 80057e6:	3308      	adds	r3, #8
 80057e8:	9303      	str	r3, [sp, #12]
 80057ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057ec:	444b      	add	r3, r9
 80057ee:	9309      	str	r3, [sp, #36]	; 0x24
 80057f0:	e76c      	b.n	80056cc <_svfiprintf_r+0x48>
 80057f2:	fb00 3202 	mla	r2, r0, r2, r3
 80057f6:	2101      	movs	r1, #1
 80057f8:	e7a3      	b.n	8005742 <_svfiprintf_r+0xbe>
 80057fa:	2300      	movs	r3, #0
 80057fc:	9305      	str	r3, [sp, #20]
 80057fe:	4618      	mov	r0, r3
 8005800:	240a      	movs	r4, #10
 8005802:	460f      	mov	r7, r1
 8005804:	3101      	adds	r1, #1
 8005806:	783a      	ldrb	r2, [r7, #0]
 8005808:	3a30      	subs	r2, #48	; 0x30
 800580a:	2a09      	cmp	r2, #9
 800580c:	d903      	bls.n	8005816 <_svfiprintf_r+0x192>
 800580e:	2b00      	cmp	r3, #0
 8005810:	d0ca      	beq.n	80057a8 <_svfiprintf_r+0x124>
 8005812:	9005      	str	r0, [sp, #20]
 8005814:	e7c8      	b.n	80057a8 <_svfiprintf_r+0x124>
 8005816:	fb04 2000 	mla	r0, r4, r0, r2
 800581a:	2301      	movs	r3, #1
 800581c:	e7f1      	b.n	8005802 <_svfiprintf_r+0x17e>
 800581e:	ab03      	add	r3, sp, #12
 8005820:	9300      	str	r3, [sp, #0]
 8005822:	462a      	mov	r2, r5
 8005824:	4b10      	ldr	r3, [pc, #64]	; (8005868 <_svfiprintf_r+0x1e4>)
 8005826:	a904      	add	r1, sp, #16
 8005828:	4640      	mov	r0, r8
 800582a:	f3af 8000 	nop.w
 800582e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005832:	4681      	mov	r9, r0
 8005834:	d1d9      	bne.n	80057ea <_svfiprintf_r+0x166>
 8005836:	89ab      	ldrh	r3, [r5, #12]
 8005838:	065b      	lsls	r3, r3, #25
 800583a:	f53f af38 	bmi.w	80056ae <_svfiprintf_r+0x2a>
 800583e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005840:	b01d      	add	sp, #116	; 0x74
 8005842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005846:	ab03      	add	r3, sp, #12
 8005848:	9300      	str	r3, [sp, #0]
 800584a:	462a      	mov	r2, r5
 800584c:	4b06      	ldr	r3, [pc, #24]	; (8005868 <_svfiprintf_r+0x1e4>)
 800584e:	a904      	add	r1, sp, #16
 8005850:	4640      	mov	r0, r8
 8005852:	f000 fa2f 	bl	8005cb4 <_printf_i>
 8005856:	e7ea      	b.n	800582e <_svfiprintf_r+0x1aa>
 8005858:	0800774e 	.word	0x0800774e
 800585c:	08007754 	.word	0x08007754
 8005860:	08007758 	.word	0x08007758
 8005864:	00000000 	.word	0x00000000
 8005868:	080055cd 	.word	0x080055cd

0800586c <_sungetc_r>:
 800586c:	b538      	push	{r3, r4, r5, lr}
 800586e:	1c4b      	adds	r3, r1, #1
 8005870:	4614      	mov	r4, r2
 8005872:	d103      	bne.n	800587c <_sungetc_r+0x10>
 8005874:	f04f 35ff 	mov.w	r5, #4294967295
 8005878:	4628      	mov	r0, r5
 800587a:	bd38      	pop	{r3, r4, r5, pc}
 800587c:	8993      	ldrh	r3, [r2, #12]
 800587e:	f023 0320 	bic.w	r3, r3, #32
 8005882:	8193      	strh	r3, [r2, #12]
 8005884:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8005886:	6852      	ldr	r2, [r2, #4]
 8005888:	b2cd      	uxtb	r5, r1
 800588a:	b18b      	cbz	r3, 80058b0 <_sungetc_r+0x44>
 800588c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800588e:	429a      	cmp	r2, r3
 8005890:	da08      	bge.n	80058a4 <_sungetc_r+0x38>
 8005892:	6823      	ldr	r3, [r4, #0]
 8005894:	1e5a      	subs	r2, r3, #1
 8005896:	6022      	str	r2, [r4, #0]
 8005898:	f803 5c01 	strb.w	r5, [r3, #-1]
 800589c:	6863      	ldr	r3, [r4, #4]
 800589e:	3301      	adds	r3, #1
 80058a0:	6063      	str	r3, [r4, #4]
 80058a2:	e7e9      	b.n	8005878 <_sungetc_r+0xc>
 80058a4:	4621      	mov	r1, r4
 80058a6:	f000 fdcf 	bl	8006448 <__submore>
 80058aa:	2800      	cmp	r0, #0
 80058ac:	d0f1      	beq.n	8005892 <_sungetc_r+0x26>
 80058ae:	e7e1      	b.n	8005874 <_sungetc_r+0x8>
 80058b0:	6921      	ldr	r1, [r4, #16]
 80058b2:	6823      	ldr	r3, [r4, #0]
 80058b4:	b151      	cbz	r1, 80058cc <_sungetc_r+0x60>
 80058b6:	4299      	cmp	r1, r3
 80058b8:	d208      	bcs.n	80058cc <_sungetc_r+0x60>
 80058ba:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80058be:	428d      	cmp	r5, r1
 80058c0:	d104      	bne.n	80058cc <_sungetc_r+0x60>
 80058c2:	3b01      	subs	r3, #1
 80058c4:	3201      	adds	r2, #1
 80058c6:	6023      	str	r3, [r4, #0]
 80058c8:	6062      	str	r2, [r4, #4]
 80058ca:	e7d5      	b.n	8005878 <_sungetc_r+0xc>
 80058cc:	63e3      	str	r3, [r4, #60]	; 0x3c
 80058ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80058d2:	6363      	str	r3, [r4, #52]	; 0x34
 80058d4:	2303      	movs	r3, #3
 80058d6:	63a3      	str	r3, [r4, #56]	; 0x38
 80058d8:	4623      	mov	r3, r4
 80058da:	6422      	str	r2, [r4, #64]	; 0x40
 80058dc:	f803 5f46 	strb.w	r5, [r3, #70]!
 80058e0:	6023      	str	r3, [r4, #0]
 80058e2:	2301      	movs	r3, #1
 80058e4:	e7dc      	b.n	80058a0 <_sungetc_r+0x34>

080058e6 <__ssrefill_r>:
 80058e6:	b510      	push	{r4, lr}
 80058e8:	460c      	mov	r4, r1
 80058ea:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80058ec:	b169      	cbz	r1, 800590a <__ssrefill_r+0x24>
 80058ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80058f2:	4299      	cmp	r1, r3
 80058f4:	d001      	beq.n	80058fa <__ssrefill_r+0x14>
 80058f6:	f000 fe05 	bl	8006504 <_free_r>
 80058fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80058fc:	6063      	str	r3, [r4, #4]
 80058fe:	2000      	movs	r0, #0
 8005900:	6360      	str	r0, [r4, #52]	; 0x34
 8005902:	b113      	cbz	r3, 800590a <__ssrefill_r+0x24>
 8005904:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005906:	6023      	str	r3, [r4, #0]
 8005908:	bd10      	pop	{r4, pc}
 800590a:	6923      	ldr	r3, [r4, #16]
 800590c:	6023      	str	r3, [r4, #0]
 800590e:	2300      	movs	r3, #0
 8005910:	6063      	str	r3, [r4, #4]
 8005912:	89a3      	ldrh	r3, [r4, #12]
 8005914:	f043 0320 	orr.w	r3, r3, #32
 8005918:	81a3      	strh	r3, [r4, #12]
 800591a:	f04f 30ff 	mov.w	r0, #4294967295
 800591e:	bd10      	pop	{r4, pc}

08005920 <__ssvfiscanf_r>:
 8005920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005924:	f5ad 7d25 	sub.w	sp, sp, #660	; 0x294
 8005928:	f10d 080c 	add.w	r8, sp, #12
 800592c:	9301      	str	r3, [sp, #4]
 800592e:	2300      	movs	r3, #0
 8005930:	9346      	str	r3, [sp, #280]	; 0x118
 8005932:	9347      	str	r3, [sp, #284]	; 0x11c
 8005934:	4ba0      	ldr	r3, [pc, #640]	; (8005bb8 <__ssvfiscanf_r+0x298>)
 8005936:	93a2      	str	r3, [sp, #648]	; 0x288
 8005938:	f8df 9284 	ldr.w	r9, [pc, #644]	; 8005bc0 <__ssvfiscanf_r+0x2a0>
 800593c:	4b9f      	ldr	r3, [pc, #636]	; (8005bbc <__ssvfiscanf_r+0x29c>)
 800593e:	f8cd 8120 	str.w	r8, [sp, #288]	; 0x120
 8005942:	4606      	mov	r6, r0
 8005944:	460c      	mov	r4, r1
 8005946:	93a3      	str	r3, [sp, #652]	; 0x28c
 8005948:	4692      	mov	sl, r2
 800594a:	270a      	movs	r7, #10
 800594c:	f89a 3000 	ldrb.w	r3, [sl]
 8005950:	2b00      	cmp	r3, #0
 8005952:	f000 812f 	beq.w	8005bb4 <__ssvfiscanf_r+0x294>
 8005956:	f000 fdb5 	bl	80064c4 <__locale_ctype_ptr>
 800595a:	f89a b000 	ldrb.w	fp, [sl]
 800595e:	4458      	add	r0, fp
 8005960:	7843      	ldrb	r3, [r0, #1]
 8005962:	f013 0308 	ands.w	r3, r3, #8
 8005966:	d143      	bne.n	80059f0 <__ssvfiscanf_r+0xd0>
 8005968:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 800596c:	f10a 0501 	add.w	r5, sl, #1
 8005970:	f040 8099 	bne.w	8005aa6 <__ssvfiscanf_r+0x186>
 8005974:	9345      	str	r3, [sp, #276]	; 0x114
 8005976:	9343      	str	r3, [sp, #268]	; 0x10c
 8005978:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800597c:	2b2a      	cmp	r3, #42	; 0x2a
 800597e:	d103      	bne.n	8005988 <__ssvfiscanf_r+0x68>
 8005980:	2310      	movs	r3, #16
 8005982:	9343      	str	r3, [sp, #268]	; 0x10c
 8005984:	f10a 0502 	add.w	r5, sl, #2
 8005988:	7829      	ldrb	r1, [r5, #0]
 800598a:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800598e:	2a09      	cmp	r2, #9
 8005990:	46aa      	mov	sl, r5
 8005992:	f105 0501 	add.w	r5, r5, #1
 8005996:	d941      	bls.n	8005a1c <__ssvfiscanf_r+0xfc>
 8005998:	2203      	movs	r2, #3
 800599a:	4889      	ldr	r0, [pc, #548]	; (8005bc0 <__ssvfiscanf_r+0x2a0>)
 800599c:	f7fa fc50 	bl	8000240 <memchr>
 80059a0:	b138      	cbz	r0, 80059b2 <__ssvfiscanf_r+0x92>
 80059a2:	eba0 0309 	sub.w	r3, r0, r9
 80059a6:	2001      	movs	r0, #1
 80059a8:	4098      	lsls	r0, r3
 80059aa:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80059ac:	4318      	orrs	r0, r3
 80059ae:	9043      	str	r0, [sp, #268]	; 0x10c
 80059b0:	46aa      	mov	sl, r5
 80059b2:	f89a 3000 	ldrb.w	r3, [sl]
 80059b6:	2b67      	cmp	r3, #103	; 0x67
 80059b8:	f10a 0501 	add.w	r5, sl, #1
 80059bc:	d84a      	bhi.n	8005a54 <__ssvfiscanf_r+0x134>
 80059be:	2b65      	cmp	r3, #101	; 0x65
 80059c0:	f080 80b7 	bcs.w	8005b32 <__ssvfiscanf_r+0x212>
 80059c4:	2b47      	cmp	r3, #71	; 0x47
 80059c6:	d82f      	bhi.n	8005a28 <__ssvfiscanf_r+0x108>
 80059c8:	2b45      	cmp	r3, #69	; 0x45
 80059ca:	f080 80b2 	bcs.w	8005b32 <__ssvfiscanf_r+0x212>
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	f000 8082 	beq.w	8005ad8 <__ssvfiscanf_r+0x1b8>
 80059d4:	2b25      	cmp	r3, #37	; 0x25
 80059d6:	d066      	beq.n	8005aa6 <__ssvfiscanf_r+0x186>
 80059d8:	2303      	movs	r3, #3
 80059da:	9349      	str	r3, [sp, #292]	; 0x124
 80059dc:	9744      	str	r7, [sp, #272]	; 0x110
 80059de:	e045      	b.n	8005a6c <__ssvfiscanf_r+0x14c>
 80059e0:	9947      	ldr	r1, [sp, #284]	; 0x11c
 80059e2:	3101      	adds	r1, #1
 80059e4:	9147      	str	r1, [sp, #284]	; 0x11c
 80059e6:	6861      	ldr	r1, [r4, #4]
 80059e8:	3301      	adds	r3, #1
 80059ea:	3901      	subs	r1, #1
 80059ec:	6061      	str	r1, [r4, #4]
 80059ee:	6023      	str	r3, [r4, #0]
 80059f0:	6863      	ldr	r3, [r4, #4]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	dd0b      	ble.n	8005a0e <__ssvfiscanf_r+0xee>
 80059f6:	f000 fd65 	bl	80064c4 <__locale_ctype_ptr>
 80059fa:	6823      	ldr	r3, [r4, #0]
 80059fc:	7819      	ldrb	r1, [r3, #0]
 80059fe:	4408      	add	r0, r1
 8005a00:	7841      	ldrb	r1, [r0, #1]
 8005a02:	070d      	lsls	r5, r1, #28
 8005a04:	d4ec      	bmi.n	80059e0 <__ssvfiscanf_r+0xc0>
 8005a06:	f10a 0501 	add.w	r5, sl, #1
 8005a0a:	46aa      	mov	sl, r5
 8005a0c:	e79e      	b.n	800594c <__ssvfiscanf_r+0x2c>
 8005a0e:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8005a10:	4621      	mov	r1, r4
 8005a12:	4630      	mov	r0, r6
 8005a14:	4798      	blx	r3
 8005a16:	2800      	cmp	r0, #0
 8005a18:	d0ed      	beq.n	80059f6 <__ssvfiscanf_r+0xd6>
 8005a1a:	e7f4      	b.n	8005a06 <__ssvfiscanf_r+0xe6>
 8005a1c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8005a1e:	fb07 1303 	mla	r3, r7, r3, r1
 8005a22:	3b30      	subs	r3, #48	; 0x30
 8005a24:	9345      	str	r3, [sp, #276]	; 0x114
 8005a26:	e7af      	b.n	8005988 <__ssvfiscanf_r+0x68>
 8005a28:	2b5b      	cmp	r3, #91	; 0x5b
 8005a2a:	d061      	beq.n	8005af0 <__ssvfiscanf_r+0x1d0>
 8005a2c:	d80c      	bhi.n	8005a48 <__ssvfiscanf_r+0x128>
 8005a2e:	2b58      	cmp	r3, #88	; 0x58
 8005a30:	d1d2      	bne.n	80059d8 <__ssvfiscanf_r+0xb8>
 8005a32:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8005a34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a38:	9243      	str	r2, [sp, #268]	; 0x10c
 8005a3a:	2210      	movs	r2, #16
 8005a3c:	9244      	str	r2, [sp, #272]	; 0x110
 8005a3e:	2b6f      	cmp	r3, #111	; 0x6f
 8005a40:	bfb4      	ite	lt
 8005a42:	2303      	movlt	r3, #3
 8005a44:	2304      	movge	r3, #4
 8005a46:	e010      	b.n	8005a6a <__ssvfiscanf_r+0x14a>
 8005a48:	2b63      	cmp	r3, #99	; 0x63
 8005a4a:	d05c      	beq.n	8005b06 <__ssvfiscanf_r+0x1e6>
 8005a4c:	2b64      	cmp	r3, #100	; 0x64
 8005a4e:	d1c3      	bne.n	80059d8 <__ssvfiscanf_r+0xb8>
 8005a50:	9744      	str	r7, [sp, #272]	; 0x110
 8005a52:	e7f4      	b.n	8005a3e <__ssvfiscanf_r+0x11e>
 8005a54:	2b70      	cmp	r3, #112	; 0x70
 8005a56:	d042      	beq.n	8005ade <__ssvfiscanf_r+0x1be>
 8005a58:	d81d      	bhi.n	8005a96 <__ssvfiscanf_r+0x176>
 8005a5a:	2b6e      	cmp	r3, #110	; 0x6e
 8005a5c:	d059      	beq.n	8005b12 <__ssvfiscanf_r+0x1f2>
 8005a5e:	d843      	bhi.n	8005ae8 <__ssvfiscanf_r+0x1c8>
 8005a60:	2b69      	cmp	r3, #105	; 0x69
 8005a62:	d1b9      	bne.n	80059d8 <__ssvfiscanf_r+0xb8>
 8005a64:	2300      	movs	r3, #0
 8005a66:	9344      	str	r3, [sp, #272]	; 0x110
 8005a68:	2303      	movs	r3, #3
 8005a6a:	9349      	str	r3, [sp, #292]	; 0x124
 8005a6c:	6863      	ldr	r3, [r4, #4]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	dd61      	ble.n	8005b36 <__ssvfiscanf_r+0x216>
 8005a72:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8005a74:	0659      	lsls	r1, r3, #25
 8005a76:	d56f      	bpl.n	8005b58 <__ssvfiscanf_r+0x238>
 8005a78:	9b49      	ldr	r3, [sp, #292]	; 0x124
 8005a7a:	2b02      	cmp	r3, #2
 8005a7c:	dc7c      	bgt.n	8005b78 <__ssvfiscanf_r+0x258>
 8005a7e:	ab01      	add	r3, sp, #4
 8005a80:	4622      	mov	r2, r4
 8005a82:	a943      	add	r1, sp, #268	; 0x10c
 8005a84:	4630      	mov	r0, r6
 8005a86:	f000 fa35 	bl	8005ef4 <_scanf_chars>
 8005a8a:	2801      	cmp	r0, #1
 8005a8c:	f000 8092 	beq.w	8005bb4 <__ssvfiscanf_r+0x294>
 8005a90:	2802      	cmp	r0, #2
 8005a92:	d1ba      	bne.n	8005a0a <__ssvfiscanf_r+0xea>
 8005a94:	e01d      	b.n	8005ad2 <__ssvfiscanf_r+0x1b2>
 8005a96:	2b75      	cmp	r3, #117	; 0x75
 8005a98:	d0da      	beq.n	8005a50 <__ssvfiscanf_r+0x130>
 8005a9a:	2b78      	cmp	r3, #120	; 0x78
 8005a9c:	d0c9      	beq.n	8005a32 <__ssvfiscanf_r+0x112>
 8005a9e:	2b73      	cmp	r3, #115	; 0x73
 8005aa0:	d19a      	bne.n	80059d8 <__ssvfiscanf_r+0xb8>
 8005aa2:	2302      	movs	r3, #2
 8005aa4:	e7e1      	b.n	8005a6a <__ssvfiscanf_r+0x14a>
 8005aa6:	6863      	ldr	r3, [r4, #4]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	dd0c      	ble.n	8005ac6 <__ssvfiscanf_r+0x1a6>
 8005aac:	6823      	ldr	r3, [r4, #0]
 8005aae:	781a      	ldrb	r2, [r3, #0]
 8005ab0:	4593      	cmp	fp, r2
 8005ab2:	d17f      	bne.n	8005bb4 <__ssvfiscanf_r+0x294>
 8005ab4:	3301      	adds	r3, #1
 8005ab6:	6862      	ldr	r2, [r4, #4]
 8005ab8:	6023      	str	r3, [r4, #0]
 8005aba:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8005abc:	3a01      	subs	r2, #1
 8005abe:	3301      	adds	r3, #1
 8005ac0:	6062      	str	r2, [r4, #4]
 8005ac2:	9347      	str	r3, [sp, #284]	; 0x11c
 8005ac4:	e7a1      	b.n	8005a0a <__ssvfiscanf_r+0xea>
 8005ac6:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8005ac8:	4621      	mov	r1, r4
 8005aca:	4630      	mov	r0, r6
 8005acc:	4798      	blx	r3
 8005ace:	2800      	cmp	r0, #0
 8005ad0:	d0ec      	beq.n	8005aac <__ssvfiscanf_r+0x18c>
 8005ad2:	9846      	ldr	r0, [sp, #280]	; 0x118
 8005ad4:	2800      	cmp	r0, #0
 8005ad6:	d163      	bne.n	8005ba0 <__ssvfiscanf_r+0x280>
 8005ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8005adc:	e066      	b.n	8005bac <__ssvfiscanf_r+0x28c>
 8005ade:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8005ae0:	f042 0220 	orr.w	r2, r2, #32
 8005ae4:	9243      	str	r2, [sp, #268]	; 0x10c
 8005ae6:	e7a4      	b.n	8005a32 <__ssvfiscanf_r+0x112>
 8005ae8:	2308      	movs	r3, #8
 8005aea:	9344      	str	r3, [sp, #272]	; 0x110
 8005aec:	2304      	movs	r3, #4
 8005aee:	e7bc      	b.n	8005a6a <__ssvfiscanf_r+0x14a>
 8005af0:	4629      	mov	r1, r5
 8005af2:	4640      	mov	r0, r8
 8005af4:	f000 fb56 	bl	80061a4 <__sccl>
 8005af8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8005afa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005afe:	9343      	str	r3, [sp, #268]	; 0x10c
 8005b00:	4605      	mov	r5, r0
 8005b02:	2301      	movs	r3, #1
 8005b04:	e7b1      	b.n	8005a6a <__ssvfiscanf_r+0x14a>
 8005b06:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8005b08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b0c:	9343      	str	r3, [sp, #268]	; 0x10c
 8005b0e:	2300      	movs	r3, #0
 8005b10:	e7ab      	b.n	8005a6a <__ssvfiscanf_r+0x14a>
 8005b12:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8005b14:	06d0      	lsls	r0, r2, #27
 8005b16:	f53f af78 	bmi.w	8005a0a <__ssvfiscanf_r+0xea>
 8005b1a:	f012 0f01 	tst.w	r2, #1
 8005b1e:	9a01      	ldr	r2, [sp, #4]
 8005b20:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8005b22:	f102 0104 	add.w	r1, r2, #4
 8005b26:	9101      	str	r1, [sp, #4]
 8005b28:	6812      	ldr	r2, [r2, #0]
 8005b2a:	bf14      	ite	ne
 8005b2c:	8013      	strhne	r3, [r2, #0]
 8005b2e:	6013      	streq	r3, [r2, #0]
 8005b30:	e76b      	b.n	8005a0a <__ssvfiscanf_r+0xea>
 8005b32:	2305      	movs	r3, #5
 8005b34:	e799      	b.n	8005a6a <__ssvfiscanf_r+0x14a>
 8005b36:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8005b38:	4621      	mov	r1, r4
 8005b3a:	4630      	mov	r0, r6
 8005b3c:	4798      	blx	r3
 8005b3e:	2800      	cmp	r0, #0
 8005b40:	d097      	beq.n	8005a72 <__ssvfiscanf_r+0x152>
 8005b42:	e7c6      	b.n	8005ad2 <__ssvfiscanf_r+0x1b2>
 8005b44:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 8005b46:	3201      	adds	r2, #1
 8005b48:	9247      	str	r2, [sp, #284]	; 0x11c
 8005b4a:	6862      	ldr	r2, [r4, #4]
 8005b4c:	3a01      	subs	r2, #1
 8005b4e:	2a00      	cmp	r2, #0
 8005b50:	6062      	str	r2, [r4, #4]
 8005b52:	dd0a      	ble.n	8005b6a <__ssvfiscanf_r+0x24a>
 8005b54:	3301      	adds	r3, #1
 8005b56:	6023      	str	r3, [r4, #0]
 8005b58:	f000 fcb4 	bl	80064c4 <__locale_ctype_ptr>
 8005b5c:	6823      	ldr	r3, [r4, #0]
 8005b5e:	781a      	ldrb	r2, [r3, #0]
 8005b60:	4410      	add	r0, r2
 8005b62:	7842      	ldrb	r2, [r0, #1]
 8005b64:	0712      	lsls	r2, r2, #28
 8005b66:	d4ed      	bmi.n	8005b44 <__ssvfiscanf_r+0x224>
 8005b68:	e786      	b.n	8005a78 <__ssvfiscanf_r+0x158>
 8005b6a:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8005b6c:	4621      	mov	r1, r4
 8005b6e:	4630      	mov	r0, r6
 8005b70:	4798      	blx	r3
 8005b72:	2800      	cmp	r0, #0
 8005b74:	d0f0      	beq.n	8005b58 <__ssvfiscanf_r+0x238>
 8005b76:	e7ac      	b.n	8005ad2 <__ssvfiscanf_r+0x1b2>
 8005b78:	2b04      	cmp	r3, #4
 8005b7a:	dc06      	bgt.n	8005b8a <__ssvfiscanf_r+0x26a>
 8005b7c:	ab01      	add	r3, sp, #4
 8005b7e:	4622      	mov	r2, r4
 8005b80:	a943      	add	r1, sp, #268	; 0x10c
 8005b82:	4630      	mov	r0, r6
 8005b84:	f000 fa1a 	bl	8005fbc <_scanf_i>
 8005b88:	e77f      	b.n	8005a8a <__ssvfiscanf_r+0x16a>
 8005b8a:	4b0e      	ldr	r3, [pc, #56]	; (8005bc4 <__ssvfiscanf_r+0x2a4>)
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	f43f af3c 	beq.w	8005a0a <__ssvfiscanf_r+0xea>
 8005b92:	ab01      	add	r3, sp, #4
 8005b94:	4622      	mov	r2, r4
 8005b96:	a943      	add	r1, sp, #268	; 0x10c
 8005b98:	4630      	mov	r0, r6
 8005b9a:	f3af 8000 	nop.w
 8005b9e:	e774      	b.n	8005a8a <__ssvfiscanf_r+0x16a>
 8005ba0:	89a3      	ldrh	r3, [r4, #12]
 8005ba2:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005ba6:	bf18      	it	ne
 8005ba8:	f04f 30ff 	movne.w	r0, #4294967295
 8005bac:	f50d 7d25 	add.w	sp, sp, #660	; 0x294
 8005bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bb4:	9846      	ldr	r0, [sp, #280]	; 0x118
 8005bb6:	e7f9      	b.n	8005bac <__ssvfiscanf_r+0x28c>
 8005bb8:	0800586d 	.word	0x0800586d
 8005bbc:	080058e7 	.word	0x080058e7
 8005bc0:	08007754 	.word	0x08007754
 8005bc4:	00000000 	.word	0x00000000

08005bc8 <_printf_common>:
 8005bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bcc:	4691      	mov	r9, r2
 8005bce:	461f      	mov	r7, r3
 8005bd0:	688a      	ldr	r2, [r1, #8]
 8005bd2:	690b      	ldr	r3, [r1, #16]
 8005bd4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	bfb8      	it	lt
 8005bdc:	4613      	movlt	r3, r2
 8005bde:	f8c9 3000 	str.w	r3, [r9]
 8005be2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005be6:	4606      	mov	r6, r0
 8005be8:	460c      	mov	r4, r1
 8005bea:	b112      	cbz	r2, 8005bf2 <_printf_common+0x2a>
 8005bec:	3301      	adds	r3, #1
 8005bee:	f8c9 3000 	str.w	r3, [r9]
 8005bf2:	6823      	ldr	r3, [r4, #0]
 8005bf4:	0699      	lsls	r1, r3, #26
 8005bf6:	bf42      	ittt	mi
 8005bf8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005bfc:	3302      	addmi	r3, #2
 8005bfe:	f8c9 3000 	strmi.w	r3, [r9]
 8005c02:	6825      	ldr	r5, [r4, #0]
 8005c04:	f015 0506 	ands.w	r5, r5, #6
 8005c08:	d107      	bne.n	8005c1a <_printf_common+0x52>
 8005c0a:	f104 0a19 	add.w	sl, r4, #25
 8005c0e:	68e3      	ldr	r3, [r4, #12]
 8005c10:	f8d9 2000 	ldr.w	r2, [r9]
 8005c14:	1a9b      	subs	r3, r3, r2
 8005c16:	429d      	cmp	r5, r3
 8005c18:	db29      	blt.n	8005c6e <_printf_common+0xa6>
 8005c1a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005c1e:	6822      	ldr	r2, [r4, #0]
 8005c20:	3300      	adds	r3, #0
 8005c22:	bf18      	it	ne
 8005c24:	2301      	movne	r3, #1
 8005c26:	0692      	lsls	r2, r2, #26
 8005c28:	d42e      	bmi.n	8005c88 <_printf_common+0xc0>
 8005c2a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c2e:	4639      	mov	r1, r7
 8005c30:	4630      	mov	r0, r6
 8005c32:	47c0      	blx	r8
 8005c34:	3001      	adds	r0, #1
 8005c36:	d021      	beq.n	8005c7c <_printf_common+0xb4>
 8005c38:	6823      	ldr	r3, [r4, #0]
 8005c3a:	68e5      	ldr	r5, [r4, #12]
 8005c3c:	f8d9 2000 	ldr.w	r2, [r9]
 8005c40:	f003 0306 	and.w	r3, r3, #6
 8005c44:	2b04      	cmp	r3, #4
 8005c46:	bf08      	it	eq
 8005c48:	1aad      	subeq	r5, r5, r2
 8005c4a:	68a3      	ldr	r3, [r4, #8]
 8005c4c:	6922      	ldr	r2, [r4, #16]
 8005c4e:	bf0c      	ite	eq
 8005c50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c54:	2500      	movne	r5, #0
 8005c56:	4293      	cmp	r3, r2
 8005c58:	bfc4      	itt	gt
 8005c5a:	1a9b      	subgt	r3, r3, r2
 8005c5c:	18ed      	addgt	r5, r5, r3
 8005c5e:	f04f 0900 	mov.w	r9, #0
 8005c62:	341a      	adds	r4, #26
 8005c64:	454d      	cmp	r5, r9
 8005c66:	d11b      	bne.n	8005ca0 <_printf_common+0xd8>
 8005c68:	2000      	movs	r0, #0
 8005c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c6e:	2301      	movs	r3, #1
 8005c70:	4652      	mov	r2, sl
 8005c72:	4639      	mov	r1, r7
 8005c74:	4630      	mov	r0, r6
 8005c76:	47c0      	blx	r8
 8005c78:	3001      	adds	r0, #1
 8005c7a:	d103      	bne.n	8005c84 <_printf_common+0xbc>
 8005c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c84:	3501      	adds	r5, #1
 8005c86:	e7c2      	b.n	8005c0e <_printf_common+0x46>
 8005c88:	18e1      	adds	r1, r4, r3
 8005c8a:	1c5a      	adds	r2, r3, #1
 8005c8c:	2030      	movs	r0, #48	; 0x30
 8005c8e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c92:	4422      	add	r2, r4
 8005c94:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c98:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c9c:	3302      	adds	r3, #2
 8005c9e:	e7c4      	b.n	8005c2a <_printf_common+0x62>
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	4622      	mov	r2, r4
 8005ca4:	4639      	mov	r1, r7
 8005ca6:	4630      	mov	r0, r6
 8005ca8:	47c0      	blx	r8
 8005caa:	3001      	adds	r0, #1
 8005cac:	d0e6      	beq.n	8005c7c <_printf_common+0xb4>
 8005cae:	f109 0901 	add.w	r9, r9, #1
 8005cb2:	e7d7      	b.n	8005c64 <_printf_common+0x9c>

08005cb4 <_printf_i>:
 8005cb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005cb8:	4617      	mov	r7, r2
 8005cba:	7e0a      	ldrb	r2, [r1, #24]
 8005cbc:	b085      	sub	sp, #20
 8005cbe:	2a6e      	cmp	r2, #110	; 0x6e
 8005cc0:	4698      	mov	r8, r3
 8005cc2:	4606      	mov	r6, r0
 8005cc4:	460c      	mov	r4, r1
 8005cc6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005cc8:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8005ccc:	f000 80bc 	beq.w	8005e48 <_printf_i+0x194>
 8005cd0:	d81a      	bhi.n	8005d08 <_printf_i+0x54>
 8005cd2:	2a63      	cmp	r2, #99	; 0x63
 8005cd4:	d02e      	beq.n	8005d34 <_printf_i+0x80>
 8005cd6:	d80a      	bhi.n	8005cee <_printf_i+0x3a>
 8005cd8:	2a00      	cmp	r2, #0
 8005cda:	f000 80c8 	beq.w	8005e6e <_printf_i+0x1ba>
 8005cde:	2a58      	cmp	r2, #88	; 0x58
 8005ce0:	f000 808a 	beq.w	8005df8 <_printf_i+0x144>
 8005ce4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ce8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8005cec:	e02a      	b.n	8005d44 <_printf_i+0x90>
 8005cee:	2a64      	cmp	r2, #100	; 0x64
 8005cf0:	d001      	beq.n	8005cf6 <_printf_i+0x42>
 8005cf2:	2a69      	cmp	r2, #105	; 0x69
 8005cf4:	d1f6      	bne.n	8005ce4 <_printf_i+0x30>
 8005cf6:	6821      	ldr	r1, [r4, #0]
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	f011 0f80 	tst.w	r1, #128	; 0x80
 8005cfe:	d023      	beq.n	8005d48 <_printf_i+0x94>
 8005d00:	1d11      	adds	r1, r2, #4
 8005d02:	6019      	str	r1, [r3, #0]
 8005d04:	6813      	ldr	r3, [r2, #0]
 8005d06:	e027      	b.n	8005d58 <_printf_i+0xa4>
 8005d08:	2a73      	cmp	r2, #115	; 0x73
 8005d0a:	f000 80b4 	beq.w	8005e76 <_printf_i+0x1c2>
 8005d0e:	d808      	bhi.n	8005d22 <_printf_i+0x6e>
 8005d10:	2a6f      	cmp	r2, #111	; 0x6f
 8005d12:	d02a      	beq.n	8005d6a <_printf_i+0xb6>
 8005d14:	2a70      	cmp	r2, #112	; 0x70
 8005d16:	d1e5      	bne.n	8005ce4 <_printf_i+0x30>
 8005d18:	680a      	ldr	r2, [r1, #0]
 8005d1a:	f042 0220 	orr.w	r2, r2, #32
 8005d1e:	600a      	str	r2, [r1, #0]
 8005d20:	e003      	b.n	8005d2a <_printf_i+0x76>
 8005d22:	2a75      	cmp	r2, #117	; 0x75
 8005d24:	d021      	beq.n	8005d6a <_printf_i+0xb6>
 8005d26:	2a78      	cmp	r2, #120	; 0x78
 8005d28:	d1dc      	bne.n	8005ce4 <_printf_i+0x30>
 8005d2a:	2278      	movs	r2, #120	; 0x78
 8005d2c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8005d30:	496e      	ldr	r1, [pc, #440]	; (8005eec <_printf_i+0x238>)
 8005d32:	e064      	b.n	8005dfe <_printf_i+0x14a>
 8005d34:	681a      	ldr	r2, [r3, #0]
 8005d36:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8005d3a:	1d11      	adds	r1, r2, #4
 8005d3c:	6019      	str	r1, [r3, #0]
 8005d3e:	6813      	ldr	r3, [r2, #0]
 8005d40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d44:	2301      	movs	r3, #1
 8005d46:	e0a3      	b.n	8005e90 <_printf_i+0x1dc>
 8005d48:	f011 0f40 	tst.w	r1, #64	; 0x40
 8005d4c:	f102 0104 	add.w	r1, r2, #4
 8005d50:	6019      	str	r1, [r3, #0]
 8005d52:	d0d7      	beq.n	8005d04 <_printf_i+0x50>
 8005d54:	f9b2 3000 	ldrsh.w	r3, [r2]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	da03      	bge.n	8005d64 <_printf_i+0xb0>
 8005d5c:	222d      	movs	r2, #45	; 0x2d
 8005d5e:	425b      	negs	r3, r3
 8005d60:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005d64:	4962      	ldr	r1, [pc, #392]	; (8005ef0 <_printf_i+0x23c>)
 8005d66:	220a      	movs	r2, #10
 8005d68:	e017      	b.n	8005d9a <_printf_i+0xe6>
 8005d6a:	6820      	ldr	r0, [r4, #0]
 8005d6c:	6819      	ldr	r1, [r3, #0]
 8005d6e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005d72:	d003      	beq.n	8005d7c <_printf_i+0xc8>
 8005d74:	1d08      	adds	r0, r1, #4
 8005d76:	6018      	str	r0, [r3, #0]
 8005d78:	680b      	ldr	r3, [r1, #0]
 8005d7a:	e006      	b.n	8005d8a <_printf_i+0xd6>
 8005d7c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005d80:	f101 0004 	add.w	r0, r1, #4
 8005d84:	6018      	str	r0, [r3, #0]
 8005d86:	d0f7      	beq.n	8005d78 <_printf_i+0xc4>
 8005d88:	880b      	ldrh	r3, [r1, #0]
 8005d8a:	4959      	ldr	r1, [pc, #356]	; (8005ef0 <_printf_i+0x23c>)
 8005d8c:	2a6f      	cmp	r2, #111	; 0x6f
 8005d8e:	bf14      	ite	ne
 8005d90:	220a      	movne	r2, #10
 8005d92:	2208      	moveq	r2, #8
 8005d94:	2000      	movs	r0, #0
 8005d96:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8005d9a:	6865      	ldr	r5, [r4, #4]
 8005d9c:	60a5      	str	r5, [r4, #8]
 8005d9e:	2d00      	cmp	r5, #0
 8005da0:	f2c0 809c 	blt.w	8005edc <_printf_i+0x228>
 8005da4:	6820      	ldr	r0, [r4, #0]
 8005da6:	f020 0004 	bic.w	r0, r0, #4
 8005daa:	6020      	str	r0, [r4, #0]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d13f      	bne.n	8005e30 <_printf_i+0x17c>
 8005db0:	2d00      	cmp	r5, #0
 8005db2:	f040 8095 	bne.w	8005ee0 <_printf_i+0x22c>
 8005db6:	4675      	mov	r5, lr
 8005db8:	2a08      	cmp	r2, #8
 8005dba:	d10b      	bne.n	8005dd4 <_printf_i+0x120>
 8005dbc:	6823      	ldr	r3, [r4, #0]
 8005dbe:	07da      	lsls	r2, r3, #31
 8005dc0:	d508      	bpl.n	8005dd4 <_printf_i+0x120>
 8005dc2:	6923      	ldr	r3, [r4, #16]
 8005dc4:	6862      	ldr	r2, [r4, #4]
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	bfde      	ittt	le
 8005dca:	2330      	movle	r3, #48	; 0x30
 8005dcc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005dd0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005dd4:	ebae 0305 	sub.w	r3, lr, r5
 8005dd8:	6123      	str	r3, [r4, #16]
 8005dda:	f8cd 8000 	str.w	r8, [sp]
 8005dde:	463b      	mov	r3, r7
 8005de0:	aa03      	add	r2, sp, #12
 8005de2:	4621      	mov	r1, r4
 8005de4:	4630      	mov	r0, r6
 8005de6:	f7ff feef 	bl	8005bc8 <_printf_common>
 8005dea:	3001      	adds	r0, #1
 8005dec:	d155      	bne.n	8005e9a <_printf_i+0x1e6>
 8005dee:	f04f 30ff 	mov.w	r0, #4294967295
 8005df2:	b005      	add	sp, #20
 8005df4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005df8:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8005dfc:	493c      	ldr	r1, [pc, #240]	; (8005ef0 <_printf_i+0x23c>)
 8005dfe:	6822      	ldr	r2, [r4, #0]
 8005e00:	6818      	ldr	r0, [r3, #0]
 8005e02:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005e06:	f100 0504 	add.w	r5, r0, #4
 8005e0a:	601d      	str	r5, [r3, #0]
 8005e0c:	d001      	beq.n	8005e12 <_printf_i+0x15e>
 8005e0e:	6803      	ldr	r3, [r0, #0]
 8005e10:	e002      	b.n	8005e18 <_printf_i+0x164>
 8005e12:	0655      	lsls	r5, r2, #25
 8005e14:	d5fb      	bpl.n	8005e0e <_printf_i+0x15a>
 8005e16:	8803      	ldrh	r3, [r0, #0]
 8005e18:	07d0      	lsls	r0, r2, #31
 8005e1a:	bf44      	itt	mi
 8005e1c:	f042 0220 	orrmi.w	r2, r2, #32
 8005e20:	6022      	strmi	r2, [r4, #0]
 8005e22:	b91b      	cbnz	r3, 8005e2c <_printf_i+0x178>
 8005e24:	6822      	ldr	r2, [r4, #0]
 8005e26:	f022 0220 	bic.w	r2, r2, #32
 8005e2a:	6022      	str	r2, [r4, #0]
 8005e2c:	2210      	movs	r2, #16
 8005e2e:	e7b1      	b.n	8005d94 <_printf_i+0xe0>
 8005e30:	4675      	mov	r5, lr
 8005e32:	fbb3 f0f2 	udiv	r0, r3, r2
 8005e36:	fb02 3310 	mls	r3, r2, r0, r3
 8005e3a:	5ccb      	ldrb	r3, [r1, r3]
 8005e3c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005e40:	4603      	mov	r3, r0
 8005e42:	2800      	cmp	r0, #0
 8005e44:	d1f5      	bne.n	8005e32 <_printf_i+0x17e>
 8005e46:	e7b7      	b.n	8005db8 <_printf_i+0x104>
 8005e48:	6808      	ldr	r0, [r1, #0]
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	6949      	ldr	r1, [r1, #20]
 8005e4e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005e52:	d004      	beq.n	8005e5e <_printf_i+0x1aa>
 8005e54:	1d10      	adds	r0, r2, #4
 8005e56:	6018      	str	r0, [r3, #0]
 8005e58:	6813      	ldr	r3, [r2, #0]
 8005e5a:	6019      	str	r1, [r3, #0]
 8005e5c:	e007      	b.n	8005e6e <_printf_i+0x1ba>
 8005e5e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005e62:	f102 0004 	add.w	r0, r2, #4
 8005e66:	6018      	str	r0, [r3, #0]
 8005e68:	6813      	ldr	r3, [r2, #0]
 8005e6a:	d0f6      	beq.n	8005e5a <_printf_i+0x1a6>
 8005e6c:	8019      	strh	r1, [r3, #0]
 8005e6e:	2300      	movs	r3, #0
 8005e70:	6123      	str	r3, [r4, #16]
 8005e72:	4675      	mov	r5, lr
 8005e74:	e7b1      	b.n	8005dda <_printf_i+0x126>
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	1d11      	adds	r1, r2, #4
 8005e7a:	6019      	str	r1, [r3, #0]
 8005e7c:	6815      	ldr	r5, [r2, #0]
 8005e7e:	6862      	ldr	r2, [r4, #4]
 8005e80:	2100      	movs	r1, #0
 8005e82:	4628      	mov	r0, r5
 8005e84:	f7fa f9dc 	bl	8000240 <memchr>
 8005e88:	b108      	cbz	r0, 8005e8e <_printf_i+0x1da>
 8005e8a:	1b40      	subs	r0, r0, r5
 8005e8c:	6060      	str	r0, [r4, #4]
 8005e8e:	6863      	ldr	r3, [r4, #4]
 8005e90:	6123      	str	r3, [r4, #16]
 8005e92:	2300      	movs	r3, #0
 8005e94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e98:	e79f      	b.n	8005dda <_printf_i+0x126>
 8005e9a:	6923      	ldr	r3, [r4, #16]
 8005e9c:	462a      	mov	r2, r5
 8005e9e:	4639      	mov	r1, r7
 8005ea0:	4630      	mov	r0, r6
 8005ea2:	47c0      	blx	r8
 8005ea4:	3001      	adds	r0, #1
 8005ea6:	d0a2      	beq.n	8005dee <_printf_i+0x13a>
 8005ea8:	6823      	ldr	r3, [r4, #0]
 8005eaa:	079b      	lsls	r3, r3, #30
 8005eac:	d507      	bpl.n	8005ebe <_printf_i+0x20a>
 8005eae:	2500      	movs	r5, #0
 8005eb0:	f104 0919 	add.w	r9, r4, #25
 8005eb4:	68e3      	ldr	r3, [r4, #12]
 8005eb6:	9a03      	ldr	r2, [sp, #12]
 8005eb8:	1a9b      	subs	r3, r3, r2
 8005eba:	429d      	cmp	r5, r3
 8005ebc:	db05      	blt.n	8005eca <_printf_i+0x216>
 8005ebe:	68e0      	ldr	r0, [r4, #12]
 8005ec0:	9b03      	ldr	r3, [sp, #12]
 8005ec2:	4298      	cmp	r0, r3
 8005ec4:	bfb8      	it	lt
 8005ec6:	4618      	movlt	r0, r3
 8005ec8:	e793      	b.n	8005df2 <_printf_i+0x13e>
 8005eca:	2301      	movs	r3, #1
 8005ecc:	464a      	mov	r2, r9
 8005ece:	4639      	mov	r1, r7
 8005ed0:	4630      	mov	r0, r6
 8005ed2:	47c0      	blx	r8
 8005ed4:	3001      	adds	r0, #1
 8005ed6:	d08a      	beq.n	8005dee <_printf_i+0x13a>
 8005ed8:	3501      	adds	r5, #1
 8005eda:	e7eb      	b.n	8005eb4 <_printf_i+0x200>
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d1a7      	bne.n	8005e30 <_printf_i+0x17c>
 8005ee0:	780b      	ldrb	r3, [r1, #0]
 8005ee2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ee6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005eea:	e765      	b.n	8005db8 <_printf_i+0x104>
 8005eec:	08007770 	.word	0x08007770
 8005ef0:	0800775f 	.word	0x0800775f

08005ef4 <_scanf_chars>:
 8005ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ef8:	4615      	mov	r5, r2
 8005efa:	688a      	ldr	r2, [r1, #8]
 8005efc:	4680      	mov	r8, r0
 8005efe:	460c      	mov	r4, r1
 8005f00:	b932      	cbnz	r2, 8005f10 <_scanf_chars+0x1c>
 8005f02:	698a      	ldr	r2, [r1, #24]
 8005f04:	2a00      	cmp	r2, #0
 8005f06:	bf0c      	ite	eq
 8005f08:	2201      	moveq	r2, #1
 8005f0a:	f04f 32ff 	movne.w	r2, #4294967295
 8005f0e:	608a      	str	r2, [r1, #8]
 8005f10:	6822      	ldr	r2, [r4, #0]
 8005f12:	06d1      	lsls	r1, r2, #27
 8005f14:	bf5f      	itttt	pl
 8005f16:	681a      	ldrpl	r2, [r3, #0]
 8005f18:	1d11      	addpl	r1, r2, #4
 8005f1a:	6019      	strpl	r1, [r3, #0]
 8005f1c:	6817      	ldrpl	r7, [r2, #0]
 8005f1e:	2600      	movs	r6, #0
 8005f20:	69a3      	ldr	r3, [r4, #24]
 8005f22:	b1db      	cbz	r3, 8005f5c <_scanf_chars+0x68>
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d107      	bne.n	8005f38 <_scanf_chars+0x44>
 8005f28:	682b      	ldr	r3, [r5, #0]
 8005f2a:	6962      	ldr	r2, [r4, #20]
 8005f2c:	781b      	ldrb	r3, [r3, #0]
 8005f2e:	5cd3      	ldrb	r3, [r2, r3]
 8005f30:	b9a3      	cbnz	r3, 8005f5c <_scanf_chars+0x68>
 8005f32:	2e00      	cmp	r6, #0
 8005f34:	d132      	bne.n	8005f9c <_scanf_chars+0xa8>
 8005f36:	e006      	b.n	8005f46 <_scanf_chars+0x52>
 8005f38:	2b02      	cmp	r3, #2
 8005f3a:	d007      	beq.n	8005f4c <_scanf_chars+0x58>
 8005f3c:	2e00      	cmp	r6, #0
 8005f3e:	d12d      	bne.n	8005f9c <_scanf_chars+0xa8>
 8005f40:	69a3      	ldr	r3, [r4, #24]
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d12a      	bne.n	8005f9c <_scanf_chars+0xa8>
 8005f46:	2001      	movs	r0, #1
 8005f48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f4c:	f000 faba 	bl	80064c4 <__locale_ctype_ptr>
 8005f50:	682b      	ldr	r3, [r5, #0]
 8005f52:	781b      	ldrb	r3, [r3, #0]
 8005f54:	4418      	add	r0, r3
 8005f56:	7843      	ldrb	r3, [r0, #1]
 8005f58:	071b      	lsls	r3, r3, #28
 8005f5a:	d4ef      	bmi.n	8005f3c <_scanf_chars+0x48>
 8005f5c:	6823      	ldr	r3, [r4, #0]
 8005f5e:	06da      	lsls	r2, r3, #27
 8005f60:	bf5e      	ittt	pl
 8005f62:	682b      	ldrpl	r3, [r5, #0]
 8005f64:	781b      	ldrbpl	r3, [r3, #0]
 8005f66:	703b      	strbpl	r3, [r7, #0]
 8005f68:	682a      	ldr	r2, [r5, #0]
 8005f6a:	686b      	ldr	r3, [r5, #4]
 8005f6c:	f102 0201 	add.w	r2, r2, #1
 8005f70:	602a      	str	r2, [r5, #0]
 8005f72:	68a2      	ldr	r2, [r4, #8]
 8005f74:	f103 33ff 	add.w	r3, r3, #4294967295
 8005f78:	f102 32ff 	add.w	r2, r2, #4294967295
 8005f7c:	606b      	str	r3, [r5, #4]
 8005f7e:	f106 0601 	add.w	r6, r6, #1
 8005f82:	bf58      	it	pl
 8005f84:	3701      	addpl	r7, #1
 8005f86:	60a2      	str	r2, [r4, #8]
 8005f88:	b142      	cbz	r2, 8005f9c <_scanf_chars+0xa8>
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	dcc8      	bgt.n	8005f20 <_scanf_chars+0x2c>
 8005f8e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005f92:	4629      	mov	r1, r5
 8005f94:	4640      	mov	r0, r8
 8005f96:	4798      	blx	r3
 8005f98:	2800      	cmp	r0, #0
 8005f9a:	d0c1      	beq.n	8005f20 <_scanf_chars+0x2c>
 8005f9c:	6823      	ldr	r3, [r4, #0]
 8005f9e:	f013 0310 	ands.w	r3, r3, #16
 8005fa2:	d105      	bne.n	8005fb0 <_scanf_chars+0xbc>
 8005fa4:	68e2      	ldr	r2, [r4, #12]
 8005fa6:	3201      	adds	r2, #1
 8005fa8:	60e2      	str	r2, [r4, #12]
 8005faa:	69a2      	ldr	r2, [r4, #24]
 8005fac:	b102      	cbz	r2, 8005fb0 <_scanf_chars+0xbc>
 8005fae:	703b      	strb	r3, [r7, #0]
 8005fb0:	6923      	ldr	r3, [r4, #16]
 8005fb2:	441e      	add	r6, r3
 8005fb4:	6126      	str	r6, [r4, #16]
 8005fb6:	2000      	movs	r0, #0
 8005fb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005fbc <_scanf_i>:
 8005fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fc0:	469a      	mov	sl, r3
 8005fc2:	4b74      	ldr	r3, [pc, #464]	; (8006194 <_scanf_i+0x1d8>)
 8005fc4:	460c      	mov	r4, r1
 8005fc6:	4683      	mov	fp, r0
 8005fc8:	4616      	mov	r6, r2
 8005fca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005fce:	b087      	sub	sp, #28
 8005fd0:	ab03      	add	r3, sp, #12
 8005fd2:	68a7      	ldr	r7, [r4, #8]
 8005fd4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005fd8:	4b6f      	ldr	r3, [pc, #444]	; (8006198 <_scanf_i+0x1dc>)
 8005fda:	69a1      	ldr	r1, [r4, #24]
 8005fdc:	4a6f      	ldr	r2, [pc, #444]	; (800619c <_scanf_i+0x1e0>)
 8005fde:	2903      	cmp	r1, #3
 8005fe0:	bf18      	it	ne
 8005fe2:	461a      	movne	r2, r3
 8005fe4:	1e7b      	subs	r3, r7, #1
 8005fe6:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8005fea:	bf84      	itt	hi
 8005fec:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005ff0:	60a3      	strhi	r3, [r4, #8]
 8005ff2:	6823      	ldr	r3, [r4, #0]
 8005ff4:	9200      	str	r2, [sp, #0]
 8005ff6:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8005ffa:	bf88      	it	hi
 8005ffc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006000:	f104 091c 	add.w	r9, r4, #28
 8006004:	6023      	str	r3, [r4, #0]
 8006006:	bf8c      	ite	hi
 8006008:	197f      	addhi	r7, r7, r5
 800600a:	2700      	movls	r7, #0
 800600c:	464b      	mov	r3, r9
 800600e:	f04f 0800 	mov.w	r8, #0
 8006012:	9301      	str	r3, [sp, #4]
 8006014:	6831      	ldr	r1, [r6, #0]
 8006016:	ab03      	add	r3, sp, #12
 8006018:	2202      	movs	r2, #2
 800601a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800601e:	7809      	ldrb	r1, [r1, #0]
 8006020:	f7fa f90e 	bl	8000240 <memchr>
 8006024:	9b01      	ldr	r3, [sp, #4]
 8006026:	b328      	cbz	r0, 8006074 <_scanf_i+0xb8>
 8006028:	f1b8 0f01 	cmp.w	r8, #1
 800602c:	d156      	bne.n	80060dc <_scanf_i+0x120>
 800602e:	6862      	ldr	r2, [r4, #4]
 8006030:	b92a      	cbnz	r2, 800603e <_scanf_i+0x82>
 8006032:	2208      	movs	r2, #8
 8006034:	6062      	str	r2, [r4, #4]
 8006036:	6822      	ldr	r2, [r4, #0]
 8006038:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800603c:	6022      	str	r2, [r4, #0]
 800603e:	6822      	ldr	r2, [r4, #0]
 8006040:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8006044:	6022      	str	r2, [r4, #0]
 8006046:	68a2      	ldr	r2, [r4, #8]
 8006048:	1e51      	subs	r1, r2, #1
 800604a:	60a1      	str	r1, [r4, #8]
 800604c:	b192      	cbz	r2, 8006074 <_scanf_i+0xb8>
 800604e:	6832      	ldr	r2, [r6, #0]
 8006050:	1c51      	adds	r1, r2, #1
 8006052:	6031      	str	r1, [r6, #0]
 8006054:	7812      	ldrb	r2, [r2, #0]
 8006056:	701a      	strb	r2, [r3, #0]
 8006058:	1c5d      	adds	r5, r3, #1
 800605a:	6873      	ldr	r3, [r6, #4]
 800605c:	3b01      	subs	r3, #1
 800605e:	2b00      	cmp	r3, #0
 8006060:	6073      	str	r3, [r6, #4]
 8006062:	dc06      	bgt.n	8006072 <_scanf_i+0xb6>
 8006064:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006068:	4631      	mov	r1, r6
 800606a:	4658      	mov	r0, fp
 800606c:	4798      	blx	r3
 800606e:	2800      	cmp	r0, #0
 8006070:	d176      	bne.n	8006160 <_scanf_i+0x1a4>
 8006072:	462b      	mov	r3, r5
 8006074:	f108 0801 	add.w	r8, r8, #1
 8006078:	f1b8 0f03 	cmp.w	r8, #3
 800607c:	d1c9      	bne.n	8006012 <_scanf_i+0x56>
 800607e:	6862      	ldr	r2, [r4, #4]
 8006080:	b90a      	cbnz	r2, 8006086 <_scanf_i+0xca>
 8006082:	220a      	movs	r2, #10
 8006084:	6062      	str	r2, [r4, #4]
 8006086:	6862      	ldr	r2, [r4, #4]
 8006088:	4945      	ldr	r1, [pc, #276]	; (80061a0 <_scanf_i+0x1e4>)
 800608a:	6960      	ldr	r0, [r4, #20]
 800608c:	9301      	str	r3, [sp, #4]
 800608e:	1a89      	subs	r1, r1, r2
 8006090:	f000 f888 	bl	80061a4 <__sccl>
 8006094:	9b01      	ldr	r3, [sp, #4]
 8006096:	f04f 0800 	mov.w	r8, #0
 800609a:	461d      	mov	r5, r3
 800609c:	68a3      	ldr	r3, [r4, #8]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d038      	beq.n	8006114 <_scanf_i+0x158>
 80060a2:	6831      	ldr	r1, [r6, #0]
 80060a4:	6960      	ldr	r0, [r4, #20]
 80060a6:	780a      	ldrb	r2, [r1, #0]
 80060a8:	5c80      	ldrb	r0, [r0, r2]
 80060aa:	2800      	cmp	r0, #0
 80060ac:	d032      	beq.n	8006114 <_scanf_i+0x158>
 80060ae:	2a30      	cmp	r2, #48	; 0x30
 80060b0:	6822      	ldr	r2, [r4, #0]
 80060b2:	d121      	bne.n	80060f8 <_scanf_i+0x13c>
 80060b4:	0510      	lsls	r0, r2, #20
 80060b6:	d51f      	bpl.n	80060f8 <_scanf_i+0x13c>
 80060b8:	f108 0801 	add.w	r8, r8, #1
 80060bc:	b117      	cbz	r7, 80060c4 <_scanf_i+0x108>
 80060be:	3301      	adds	r3, #1
 80060c0:	3f01      	subs	r7, #1
 80060c2:	60a3      	str	r3, [r4, #8]
 80060c4:	6873      	ldr	r3, [r6, #4]
 80060c6:	3b01      	subs	r3, #1
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	6073      	str	r3, [r6, #4]
 80060cc:	dd1b      	ble.n	8006106 <_scanf_i+0x14a>
 80060ce:	6833      	ldr	r3, [r6, #0]
 80060d0:	3301      	adds	r3, #1
 80060d2:	6033      	str	r3, [r6, #0]
 80060d4:	68a3      	ldr	r3, [r4, #8]
 80060d6:	3b01      	subs	r3, #1
 80060d8:	60a3      	str	r3, [r4, #8]
 80060da:	e7df      	b.n	800609c <_scanf_i+0xe0>
 80060dc:	f1b8 0f02 	cmp.w	r8, #2
 80060e0:	d1b1      	bne.n	8006046 <_scanf_i+0x8a>
 80060e2:	6822      	ldr	r2, [r4, #0]
 80060e4:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80060e8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80060ec:	d1c2      	bne.n	8006074 <_scanf_i+0xb8>
 80060ee:	2110      	movs	r1, #16
 80060f0:	6061      	str	r1, [r4, #4]
 80060f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060f6:	e7a5      	b.n	8006044 <_scanf_i+0x88>
 80060f8:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80060fc:	6022      	str	r2, [r4, #0]
 80060fe:	780b      	ldrb	r3, [r1, #0]
 8006100:	702b      	strb	r3, [r5, #0]
 8006102:	3501      	adds	r5, #1
 8006104:	e7de      	b.n	80060c4 <_scanf_i+0x108>
 8006106:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800610a:	4631      	mov	r1, r6
 800610c:	4658      	mov	r0, fp
 800610e:	4798      	blx	r3
 8006110:	2800      	cmp	r0, #0
 8006112:	d0df      	beq.n	80060d4 <_scanf_i+0x118>
 8006114:	6823      	ldr	r3, [r4, #0]
 8006116:	05d9      	lsls	r1, r3, #23
 8006118:	d50c      	bpl.n	8006134 <_scanf_i+0x178>
 800611a:	454d      	cmp	r5, r9
 800611c:	d908      	bls.n	8006130 <_scanf_i+0x174>
 800611e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8006122:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006126:	4632      	mov	r2, r6
 8006128:	4658      	mov	r0, fp
 800612a:	4798      	blx	r3
 800612c:	1e6f      	subs	r7, r5, #1
 800612e:	463d      	mov	r5, r7
 8006130:	454d      	cmp	r5, r9
 8006132:	d02c      	beq.n	800618e <_scanf_i+0x1d2>
 8006134:	6822      	ldr	r2, [r4, #0]
 8006136:	f012 0210 	ands.w	r2, r2, #16
 800613a:	d11e      	bne.n	800617a <_scanf_i+0x1be>
 800613c:	702a      	strb	r2, [r5, #0]
 800613e:	6863      	ldr	r3, [r4, #4]
 8006140:	9e00      	ldr	r6, [sp, #0]
 8006142:	4649      	mov	r1, r9
 8006144:	4658      	mov	r0, fp
 8006146:	47b0      	blx	r6
 8006148:	6822      	ldr	r2, [r4, #0]
 800614a:	f8da 3000 	ldr.w	r3, [sl]
 800614e:	f012 0f20 	tst.w	r2, #32
 8006152:	d008      	beq.n	8006166 <_scanf_i+0x1aa>
 8006154:	1d1a      	adds	r2, r3, #4
 8006156:	f8ca 2000 	str.w	r2, [sl]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	6018      	str	r0, [r3, #0]
 800615e:	e009      	b.n	8006174 <_scanf_i+0x1b8>
 8006160:	f04f 0800 	mov.w	r8, #0
 8006164:	e7d6      	b.n	8006114 <_scanf_i+0x158>
 8006166:	07d2      	lsls	r2, r2, #31
 8006168:	d5f4      	bpl.n	8006154 <_scanf_i+0x198>
 800616a:	1d1a      	adds	r2, r3, #4
 800616c:	f8ca 2000 	str.w	r2, [sl]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	8018      	strh	r0, [r3, #0]
 8006174:	68e3      	ldr	r3, [r4, #12]
 8006176:	3301      	adds	r3, #1
 8006178:	60e3      	str	r3, [r4, #12]
 800617a:	eba5 0509 	sub.w	r5, r5, r9
 800617e:	44a8      	add	r8, r5
 8006180:	6925      	ldr	r5, [r4, #16]
 8006182:	4445      	add	r5, r8
 8006184:	6125      	str	r5, [r4, #16]
 8006186:	2000      	movs	r0, #0
 8006188:	b007      	add	sp, #28
 800618a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800618e:	2001      	movs	r0, #1
 8006190:	e7fa      	b.n	8006188 <_scanf_i+0x1cc>
 8006192:	bf00      	nop
 8006194:	08007498 	.word	0x08007498
 8006198:	08006425 	.word	0x08006425
 800619c:	08006305 	.word	0x08006305
 80061a0:	08007791 	.word	0x08007791

080061a4 <__sccl>:
 80061a4:	b570      	push	{r4, r5, r6, lr}
 80061a6:	780b      	ldrb	r3, [r1, #0]
 80061a8:	2b5e      	cmp	r3, #94	; 0x5e
 80061aa:	bf13      	iteet	ne
 80061ac:	1c4a      	addne	r2, r1, #1
 80061ae:	1c8a      	addeq	r2, r1, #2
 80061b0:	784b      	ldrbeq	r3, [r1, #1]
 80061b2:	2100      	movne	r1, #0
 80061b4:	bf08      	it	eq
 80061b6:	2101      	moveq	r1, #1
 80061b8:	1e44      	subs	r4, r0, #1
 80061ba:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 80061be:	f804 1f01 	strb.w	r1, [r4, #1]!
 80061c2:	42a5      	cmp	r5, r4
 80061c4:	d1fb      	bne.n	80061be <__sccl+0x1a>
 80061c6:	b913      	cbnz	r3, 80061ce <__sccl+0x2a>
 80061c8:	3a01      	subs	r2, #1
 80061ca:	4610      	mov	r0, r2
 80061cc:	bd70      	pop	{r4, r5, r6, pc}
 80061ce:	f081 0401 	eor.w	r4, r1, #1
 80061d2:	54c4      	strb	r4, [r0, r3]
 80061d4:	4611      	mov	r1, r2
 80061d6:	780d      	ldrb	r5, [r1, #0]
 80061d8:	2d2d      	cmp	r5, #45	; 0x2d
 80061da:	f101 0201 	add.w	r2, r1, #1
 80061de:	d006      	beq.n	80061ee <__sccl+0x4a>
 80061e0:	2d5d      	cmp	r5, #93	; 0x5d
 80061e2:	d0f2      	beq.n	80061ca <__sccl+0x26>
 80061e4:	b90d      	cbnz	r5, 80061ea <__sccl+0x46>
 80061e6:	460a      	mov	r2, r1
 80061e8:	e7ef      	b.n	80061ca <__sccl+0x26>
 80061ea:	462b      	mov	r3, r5
 80061ec:	e7f1      	b.n	80061d2 <__sccl+0x2e>
 80061ee:	784e      	ldrb	r6, [r1, #1]
 80061f0:	2e5d      	cmp	r6, #93	; 0x5d
 80061f2:	d0fa      	beq.n	80061ea <__sccl+0x46>
 80061f4:	42b3      	cmp	r3, r6
 80061f6:	dcf8      	bgt.n	80061ea <__sccl+0x46>
 80061f8:	3102      	adds	r1, #2
 80061fa:	3301      	adds	r3, #1
 80061fc:	429e      	cmp	r6, r3
 80061fe:	54c4      	strb	r4, [r0, r3]
 8006200:	dcfb      	bgt.n	80061fa <__sccl+0x56>
 8006202:	e7e8      	b.n	80061d6 <__sccl+0x32>

08006204 <_strtol_l.isra.0>:
 8006204:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006208:	4680      	mov	r8, r0
 800620a:	4689      	mov	r9, r1
 800620c:	4692      	mov	sl, r2
 800620e:	461f      	mov	r7, r3
 8006210:	468b      	mov	fp, r1
 8006212:	465d      	mov	r5, fp
 8006214:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006216:	f815 4b01 	ldrb.w	r4, [r5], #1
 800621a:	f000 f950 	bl	80064be <__locale_ctype_ptr_l>
 800621e:	4420      	add	r0, r4
 8006220:	7846      	ldrb	r6, [r0, #1]
 8006222:	f016 0608 	ands.w	r6, r6, #8
 8006226:	d10b      	bne.n	8006240 <_strtol_l.isra.0+0x3c>
 8006228:	2c2d      	cmp	r4, #45	; 0x2d
 800622a:	d10b      	bne.n	8006244 <_strtol_l.isra.0+0x40>
 800622c:	782c      	ldrb	r4, [r5, #0]
 800622e:	2601      	movs	r6, #1
 8006230:	f10b 0502 	add.w	r5, fp, #2
 8006234:	b167      	cbz	r7, 8006250 <_strtol_l.isra.0+0x4c>
 8006236:	2f10      	cmp	r7, #16
 8006238:	d114      	bne.n	8006264 <_strtol_l.isra.0+0x60>
 800623a:	2c30      	cmp	r4, #48	; 0x30
 800623c:	d00a      	beq.n	8006254 <_strtol_l.isra.0+0x50>
 800623e:	e011      	b.n	8006264 <_strtol_l.isra.0+0x60>
 8006240:	46ab      	mov	fp, r5
 8006242:	e7e6      	b.n	8006212 <_strtol_l.isra.0+0xe>
 8006244:	2c2b      	cmp	r4, #43	; 0x2b
 8006246:	bf04      	itt	eq
 8006248:	782c      	ldrbeq	r4, [r5, #0]
 800624a:	f10b 0502 	addeq.w	r5, fp, #2
 800624e:	e7f1      	b.n	8006234 <_strtol_l.isra.0+0x30>
 8006250:	2c30      	cmp	r4, #48	; 0x30
 8006252:	d127      	bne.n	80062a4 <_strtol_l.isra.0+0xa0>
 8006254:	782b      	ldrb	r3, [r5, #0]
 8006256:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800625a:	2b58      	cmp	r3, #88	; 0x58
 800625c:	d14b      	bne.n	80062f6 <_strtol_l.isra.0+0xf2>
 800625e:	786c      	ldrb	r4, [r5, #1]
 8006260:	2710      	movs	r7, #16
 8006262:	3502      	adds	r5, #2
 8006264:	2e00      	cmp	r6, #0
 8006266:	bf0c      	ite	eq
 8006268:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800626c:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8006270:	2200      	movs	r2, #0
 8006272:	fbb1 fef7 	udiv	lr, r1, r7
 8006276:	4610      	mov	r0, r2
 8006278:	fb07 1c1e 	mls	ip, r7, lr, r1
 800627c:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8006280:	2b09      	cmp	r3, #9
 8006282:	d811      	bhi.n	80062a8 <_strtol_l.isra.0+0xa4>
 8006284:	461c      	mov	r4, r3
 8006286:	42a7      	cmp	r7, r4
 8006288:	dd1d      	ble.n	80062c6 <_strtol_l.isra.0+0xc2>
 800628a:	1c53      	adds	r3, r2, #1
 800628c:	d007      	beq.n	800629e <_strtol_l.isra.0+0x9a>
 800628e:	4586      	cmp	lr, r0
 8006290:	d316      	bcc.n	80062c0 <_strtol_l.isra.0+0xbc>
 8006292:	d101      	bne.n	8006298 <_strtol_l.isra.0+0x94>
 8006294:	45a4      	cmp	ip, r4
 8006296:	db13      	blt.n	80062c0 <_strtol_l.isra.0+0xbc>
 8006298:	fb00 4007 	mla	r0, r0, r7, r4
 800629c:	2201      	movs	r2, #1
 800629e:	f815 4b01 	ldrb.w	r4, [r5], #1
 80062a2:	e7eb      	b.n	800627c <_strtol_l.isra.0+0x78>
 80062a4:	270a      	movs	r7, #10
 80062a6:	e7dd      	b.n	8006264 <_strtol_l.isra.0+0x60>
 80062a8:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80062ac:	2b19      	cmp	r3, #25
 80062ae:	d801      	bhi.n	80062b4 <_strtol_l.isra.0+0xb0>
 80062b0:	3c37      	subs	r4, #55	; 0x37
 80062b2:	e7e8      	b.n	8006286 <_strtol_l.isra.0+0x82>
 80062b4:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80062b8:	2b19      	cmp	r3, #25
 80062ba:	d804      	bhi.n	80062c6 <_strtol_l.isra.0+0xc2>
 80062bc:	3c57      	subs	r4, #87	; 0x57
 80062be:	e7e2      	b.n	8006286 <_strtol_l.isra.0+0x82>
 80062c0:	f04f 32ff 	mov.w	r2, #4294967295
 80062c4:	e7eb      	b.n	800629e <_strtol_l.isra.0+0x9a>
 80062c6:	1c53      	adds	r3, r2, #1
 80062c8:	d108      	bne.n	80062dc <_strtol_l.isra.0+0xd8>
 80062ca:	2322      	movs	r3, #34	; 0x22
 80062cc:	f8c8 3000 	str.w	r3, [r8]
 80062d0:	4608      	mov	r0, r1
 80062d2:	f1ba 0f00 	cmp.w	sl, #0
 80062d6:	d107      	bne.n	80062e8 <_strtol_l.isra.0+0xe4>
 80062d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062dc:	b106      	cbz	r6, 80062e0 <_strtol_l.isra.0+0xdc>
 80062de:	4240      	negs	r0, r0
 80062e0:	f1ba 0f00 	cmp.w	sl, #0
 80062e4:	d00c      	beq.n	8006300 <_strtol_l.isra.0+0xfc>
 80062e6:	b122      	cbz	r2, 80062f2 <_strtol_l.isra.0+0xee>
 80062e8:	3d01      	subs	r5, #1
 80062ea:	f8ca 5000 	str.w	r5, [sl]
 80062ee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062f2:	464d      	mov	r5, r9
 80062f4:	e7f9      	b.n	80062ea <_strtol_l.isra.0+0xe6>
 80062f6:	2430      	movs	r4, #48	; 0x30
 80062f8:	2f00      	cmp	r7, #0
 80062fa:	d1b3      	bne.n	8006264 <_strtol_l.isra.0+0x60>
 80062fc:	2708      	movs	r7, #8
 80062fe:	e7b1      	b.n	8006264 <_strtol_l.isra.0+0x60>
 8006300:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006304 <_strtol_r>:
 8006304:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006306:	4c06      	ldr	r4, [pc, #24]	; (8006320 <_strtol_r+0x1c>)
 8006308:	4d06      	ldr	r5, [pc, #24]	; (8006324 <_strtol_r+0x20>)
 800630a:	6824      	ldr	r4, [r4, #0]
 800630c:	6a24      	ldr	r4, [r4, #32]
 800630e:	2c00      	cmp	r4, #0
 8006310:	bf08      	it	eq
 8006312:	462c      	moveq	r4, r5
 8006314:	9400      	str	r4, [sp, #0]
 8006316:	f7ff ff75 	bl	8006204 <_strtol_l.isra.0>
 800631a:	b003      	add	sp, #12
 800631c:	bd30      	pop	{r4, r5, pc}
 800631e:	bf00      	nop
 8006320:	2000012c 	.word	0x2000012c
 8006324:	20000190 	.word	0x20000190

08006328 <_strtoul_l.isra.0>:
 8006328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800632c:	4680      	mov	r8, r0
 800632e:	4689      	mov	r9, r1
 8006330:	4692      	mov	sl, r2
 8006332:	461e      	mov	r6, r3
 8006334:	460f      	mov	r7, r1
 8006336:	463d      	mov	r5, r7
 8006338:	9808      	ldr	r0, [sp, #32]
 800633a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800633e:	f000 f8be 	bl	80064be <__locale_ctype_ptr_l>
 8006342:	4420      	add	r0, r4
 8006344:	7843      	ldrb	r3, [r0, #1]
 8006346:	f013 0308 	ands.w	r3, r3, #8
 800634a:	d10a      	bne.n	8006362 <_strtoul_l.isra.0+0x3a>
 800634c:	2c2d      	cmp	r4, #45	; 0x2d
 800634e:	d10a      	bne.n	8006366 <_strtoul_l.isra.0+0x3e>
 8006350:	782c      	ldrb	r4, [r5, #0]
 8006352:	2301      	movs	r3, #1
 8006354:	1cbd      	adds	r5, r7, #2
 8006356:	b15e      	cbz	r6, 8006370 <_strtoul_l.isra.0+0x48>
 8006358:	2e10      	cmp	r6, #16
 800635a:	d113      	bne.n	8006384 <_strtoul_l.isra.0+0x5c>
 800635c:	2c30      	cmp	r4, #48	; 0x30
 800635e:	d009      	beq.n	8006374 <_strtoul_l.isra.0+0x4c>
 8006360:	e010      	b.n	8006384 <_strtoul_l.isra.0+0x5c>
 8006362:	462f      	mov	r7, r5
 8006364:	e7e7      	b.n	8006336 <_strtoul_l.isra.0+0xe>
 8006366:	2c2b      	cmp	r4, #43	; 0x2b
 8006368:	bf04      	itt	eq
 800636a:	782c      	ldrbeq	r4, [r5, #0]
 800636c:	1cbd      	addeq	r5, r7, #2
 800636e:	e7f2      	b.n	8006356 <_strtoul_l.isra.0+0x2e>
 8006370:	2c30      	cmp	r4, #48	; 0x30
 8006372:	d125      	bne.n	80063c0 <_strtoul_l.isra.0+0x98>
 8006374:	782a      	ldrb	r2, [r5, #0]
 8006376:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800637a:	2a58      	cmp	r2, #88	; 0x58
 800637c:	d14a      	bne.n	8006414 <_strtoul_l.isra.0+0xec>
 800637e:	786c      	ldrb	r4, [r5, #1]
 8006380:	2610      	movs	r6, #16
 8006382:	3502      	adds	r5, #2
 8006384:	f04f 31ff 	mov.w	r1, #4294967295
 8006388:	2700      	movs	r7, #0
 800638a:	fbb1 f1f6 	udiv	r1, r1, r6
 800638e:	fb06 fe01 	mul.w	lr, r6, r1
 8006392:	ea6f 0e0e 	mvn.w	lr, lr
 8006396:	4638      	mov	r0, r7
 8006398:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
 800639c:	2a09      	cmp	r2, #9
 800639e:	d811      	bhi.n	80063c4 <_strtoul_l.isra.0+0x9c>
 80063a0:	4614      	mov	r4, r2
 80063a2:	42a6      	cmp	r6, r4
 80063a4:	dd1d      	ble.n	80063e2 <_strtoul_l.isra.0+0xba>
 80063a6:	2f00      	cmp	r7, #0
 80063a8:	db18      	blt.n	80063dc <_strtoul_l.isra.0+0xb4>
 80063aa:	4281      	cmp	r1, r0
 80063ac:	d316      	bcc.n	80063dc <_strtoul_l.isra.0+0xb4>
 80063ae:	d101      	bne.n	80063b4 <_strtoul_l.isra.0+0x8c>
 80063b0:	45a6      	cmp	lr, r4
 80063b2:	db13      	blt.n	80063dc <_strtoul_l.isra.0+0xb4>
 80063b4:	fb00 4006 	mla	r0, r0, r6, r4
 80063b8:	2701      	movs	r7, #1
 80063ba:	f815 4b01 	ldrb.w	r4, [r5], #1
 80063be:	e7eb      	b.n	8006398 <_strtoul_l.isra.0+0x70>
 80063c0:	260a      	movs	r6, #10
 80063c2:	e7df      	b.n	8006384 <_strtoul_l.isra.0+0x5c>
 80063c4:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
 80063c8:	2a19      	cmp	r2, #25
 80063ca:	d801      	bhi.n	80063d0 <_strtoul_l.isra.0+0xa8>
 80063cc:	3c37      	subs	r4, #55	; 0x37
 80063ce:	e7e8      	b.n	80063a2 <_strtoul_l.isra.0+0x7a>
 80063d0:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
 80063d4:	2a19      	cmp	r2, #25
 80063d6:	d804      	bhi.n	80063e2 <_strtoul_l.isra.0+0xba>
 80063d8:	3c57      	subs	r4, #87	; 0x57
 80063da:	e7e2      	b.n	80063a2 <_strtoul_l.isra.0+0x7a>
 80063dc:	f04f 37ff 	mov.w	r7, #4294967295
 80063e0:	e7eb      	b.n	80063ba <_strtoul_l.isra.0+0x92>
 80063e2:	2f00      	cmp	r7, #0
 80063e4:	da09      	bge.n	80063fa <_strtoul_l.isra.0+0xd2>
 80063e6:	2322      	movs	r3, #34	; 0x22
 80063e8:	f8c8 3000 	str.w	r3, [r8]
 80063ec:	f04f 30ff 	mov.w	r0, #4294967295
 80063f0:	f1ba 0f00 	cmp.w	sl, #0
 80063f4:	d107      	bne.n	8006406 <_strtoul_l.isra.0+0xde>
 80063f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063fa:	b103      	cbz	r3, 80063fe <_strtoul_l.isra.0+0xd6>
 80063fc:	4240      	negs	r0, r0
 80063fe:	f1ba 0f00 	cmp.w	sl, #0
 8006402:	d00c      	beq.n	800641e <_strtoul_l.isra.0+0xf6>
 8006404:	b127      	cbz	r7, 8006410 <_strtoul_l.isra.0+0xe8>
 8006406:	3d01      	subs	r5, #1
 8006408:	f8ca 5000 	str.w	r5, [sl]
 800640c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006410:	464d      	mov	r5, r9
 8006412:	e7f9      	b.n	8006408 <_strtoul_l.isra.0+0xe0>
 8006414:	2430      	movs	r4, #48	; 0x30
 8006416:	2e00      	cmp	r6, #0
 8006418:	d1b4      	bne.n	8006384 <_strtoul_l.isra.0+0x5c>
 800641a:	2608      	movs	r6, #8
 800641c:	e7b2      	b.n	8006384 <_strtoul_l.isra.0+0x5c>
 800641e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08006424 <_strtoul_r>:
 8006424:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006426:	4c06      	ldr	r4, [pc, #24]	; (8006440 <_strtoul_r+0x1c>)
 8006428:	4d06      	ldr	r5, [pc, #24]	; (8006444 <_strtoul_r+0x20>)
 800642a:	6824      	ldr	r4, [r4, #0]
 800642c:	6a24      	ldr	r4, [r4, #32]
 800642e:	2c00      	cmp	r4, #0
 8006430:	bf08      	it	eq
 8006432:	462c      	moveq	r4, r5
 8006434:	9400      	str	r4, [sp, #0]
 8006436:	f7ff ff77 	bl	8006328 <_strtoul_l.isra.0>
 800643a:	b003      	add	sp, #12
 800643c:	bd30      	pop	{r4, r5, pc}
 800643e:	bf00      	nop
 8006440:	2000012c 	.word	0x2000012c
 8006444:	20000190 	.word	0x20000190

08006448 <__submore>:
 8006448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800644c:	460c      	mov	r4, r1
 800644e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8006450:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006454:	4299      	cmp	r1, r3
 8006456:	d11e      	bne.n	8006496 <__submore+0x4e>
 8006458:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800645c:	f000 f8a0 	bl	80065a0 <_malloc_r>
 8006460:	b918      	cbnz	r0, 800646a <__submore+0x22>
 8006462:	f04f 30ff 	mov.w	r0, #4294967295
 8006466:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800646a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800646e:	63a3      	str	r3, [r4, #56]	; 0x38
 8006470:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8006474:	6360      	str	r0, [r4, #52]	; 0x34
 8006476:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800647a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800647e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8006482:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006486:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800648a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800648e:	6020      	str	r0, [r4, #0]
 8006490:	2000      	movs	r0, #0
 8006492:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006496:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8006498:	0077      	lsls	r7, r6, #1
 800649a:	463a      	mov	r2, r7
 800649c:	f000 f8de 	bl	800665c <_realloc_r>
 80064a0:	4605      	mov	r5, r0
 80064a2:	2800      	cmp	r0, #0
 80064a4:	d0dd      	beq.n	8006462 <__submore+0x1a>
 80064a6:	eb00 0806 	add.w	r8, r0, r6
 80064aa:	4601      	mov	r1, r0
 80064ac:	4632      	mov	r2, r6
 80064ae:	4640      	mov	r0, r8
 80064b0:	f7fe fffc 	bl	80054ac <memcpy>
 80064b4:	f8c4 8000 	str.w	r8, [r4]
 80064b8:	6365      	str	r5, [r4, #52]	; 0x34
 80064ba:	63a7      	str	r7, [r4, #56]	; 0x38
 80064bc:	e7e8      	b.n	8006490 <__submore+0x48>

080064be <__locale_ctype_ptr_l>:
 80064be:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80064c2:	4770      	bx	lr

080064c4 <__locale_ctype_ptr>:
 80064c4:	4b04      	ldr	r3, [pc, #16]	; (80064d8 <__locale_ctype_ptr+0x14>)
 80064c6:	4a05      	ldr	r2, [pc, #20]	; (80064dc <__locale_ctype_ptr+0x18>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	6a1b      	ldr	r3, [r3, #32]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	bf08      	it	eq
 80064d0:	4613      	moveq	r3, r2
 80064d2:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 80064d6:	4770      	bx	lr
 80064d8:	2000012c 	.word	0x2000012c
 80064dc:	20000190 	.word	0x20000190

080064e0 <__ascii_mbtowc>:
 80064e0:	b082      	sub	sp, #8
 80064e2:	b901      	cbnz	r1, 80064e6 <__ascii_mbtowc+0x6>
 80064e4:	a901      	add	r1, sp, #4
 80064e6:	b142      	cbz	r2, 80064fa <__ascii_mbtowc+0x1a>
 80064e8:	b14b      	cbz	r3, 80064fe <__ascii_mbtowc+0x1e>
 80064ea:	7813      	ldrb	r3, [r2, #0]
 80064ec:	600b      	str	r3, [r1, #0]
 80064ee:	7812      	ldrb	r2, [r2, #0]
 80064f0:	1c10      	adds	r0, r2, #0
 80064f2:	bf18      	it	ne
 80064f4:	2001      	movne	r0, #1
 80064f6:	b002      	add	sp, #8
 80064f8:	4770      	bx	lr
 80064fa:	4610      	mov	r0, r2
 80064fc:	e7fb      	b.n	80064f6 <__ascii_mbtowc+0x16>
 80064fe:	f06f 0001 	mvn.w	r0, #1
 8006502:	e7f8      	b.n	80064f6 <__ascii_mbtowc+0x16>

08006504 <_free_r>:
 8006504:	b538      	push	{r3, r4, r5, lr}
 8006506:	4605      	mov	r5, r0
 8006508:	2900      	cmp	r1, #0
 800650a:	d045      	beq.n	8006598 <_free_r+0x94>
 800650c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006510:	1f0c      	subs	r4, r1, #4
 8006512:	2b00      	cmp	r3, #0
 8006514:	bfb8      	it	lt
 8006516:	18e4      	addlt	r4, r4, r3
 8006518:	f000 f8e3 	bl	80066e2 <__malloc_lock>
 800651c:	4a1f      	ldr	r2, [pc, #124]	; (800659c <_free_r+0x98>)
 800651e:	6813      	ldr	r3, [r2, #0]
 8006520:	4610      	mov	r0, r2
 8006522:	b933      	cbnz	r3, 8006532 <_free_r+0x2e>
 8006524:	6063      	str	r3, [r4, #4]
 8006526:	6014      	str	r4, [r2, #0]
 8006528:	4628      	mov	r0, r5
 800652a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800652e:	f000 b8d9 	b.w	80066e4 <__malloc_unlock>
 8006532:	42a3      	cmp	r3, r4
 8006534:	d90c      	bls.n	8006550 <_free_r+0x4c>
 8006536:	6821      	ldr	r1, [r4, #0]
 8006538:	1862      	adds	r2, r4, r1
 800653a:	4293      	cmp	r3, r2
 800653c:	bf04      	itt	eq
 800653e:	681a      	ldreq	r2, [r3, #0]
 8006540:	685b      	ldreq	r3, [r3, #4]
 8006542:	6063      	str	r3, [r4, #4]
 8006544:	bf04      	itt	eq
 8006546:	1852      	addeq	r2, r2, r1
 8006548:	6022      	streq	r2, [r4, #0]
 800654a:	6004      	str	r4, [r0, #0]
 800654c:	e7ec      	b.n	8006528 <_free_r+0x24>
 800654e:	4613      	mov	r3, r2
 8006550:	685a      	ldr	r2, [r3, #4]
 8006552:	b10a      	cbz	r2, 8006558 <_free_r+0x54>
 8006554:	42a2      	cmp	r2, r4
 8006556:	d9fa      	bls.n	800654e <_free_r+0x4a>
 8006558:	6819      	ldr	r1, [r3, #0]
 800655a:	1858      	adds	r0, r3, r1
 800655c:	42a0      	cmp	r0, r4
 800655e:	d10b      	bne.n	8006578 <_free_r+0x74>
 8006560:	6820      	ldr	r0, [r4, #0]
 8006562:	4401      	add	r1, r0
 8006564:	1858      	adds	r0, r3, r1
 8006566:	4282      	cmp	r2, r0
 8006568:	6019      	str	r1, [r3, #0]
 800656a:	d1dd      	bne.n	8006528 <_free_r+0x24>
 800656c:	6810      	ldr	r0, [r2, #0]
 800656e:	6852      	ldr	r2, [r2, #4]
 8006570:	605a      	str	r2, [r3, #4]
 8006572:	4401      	add	r1, r0
 8006574:	6019      	str	r1, [r3, #0]
 8006576:	e7d7      	b.n	8006528 <_free_r+0x24>
 8006578:	d902      	bls.n	8006580 <_free_r+0x7c>
 800657a:	230c      	movs	r3, #12
 800657c:	602b      	str	r3, [r5, #0]
 800657e:	e7d3      	b.n	8006528 <_free_r+0x24>
 8006580:	6820      	ldr	r0, [r4, #0]
 8006582:	1821      	adds	r1, r4, r0
 8006584:	428a      	cmp	r2, r1
 8006586:	bf04      	itt	eq
 8006588:	6811      	ldreq	r1, [r2, #0]
 800658a:	6852      	ldreq	r2, [r2, #4]
 800658c:	6062      	str	r2, [r4, #4]
 800658e:	bf04      	itt	eq
 8006590:	1809      	addeq	r1, r1, r0
 8006592:	6021      	streq	r1, [r4, #0]
 8006594:	605c      	str	r4, [r3, #4]
 8006596:	e7c7      	b.n	8006528 <_free_r+0x24>
 8006598:	bd38      	pop	{r3, r4, r5, pc}
 800659a:	bf00      	nop
 800659c:	20000334 	.word	0x20000334

080065a0 <_malloc_r>:
 80065a0:	b570      	push	{r4, r5, r6, lr}
 80065a2:	1ccd      	adds	r5, r1, #3
 80065a4:	f025 0503 	bic.w	r5, r5, #3
 80065a8:	3508      	adds	r5, #8
 80065aa:	2d0c      	cmp	r5, #12
 80065ac:	bf38      	it	cc
 80065ae:	250c      	movcc	r5, #12
 80065b0:	2d00      	cmp	r5, #0
 80065b2:	4606      	mov	r6, r0
 80065b4:	db01      	blt.n	80065ba <_malloc_r+0x1a>
 80065b6:	42a9      	cmp	r1, r5
 80065b8:	d903      	bls.n	80065c2 <_malloc_r+0x22>
 80065ba:	230c      	movs	r3, #12
 80065bc:	6033      	str	r3, [r6, #0]
 80065be:	2000      	movs	r0, #0
 80065c0:	bd70      	pop	{r4, r5, r6, pc}
 80065c2:	f000 f88e 	bl	80066e2 <__malloc_lock>
 80065c6:	4a23      	ldr	r2, [pc, #140]	; (8006654 <_malloc_r+0xb4>)
 80065c8:	6814      	ldr	r4, [r2, #0]
 80065ca:	4621      	mov	r1, r4
 80065cc:	b991      	cbnz	r1, 80065f4 <_malloc_r+0x54>
 80065ce:	4c22      	ldr	r4, [pc, #136]	; (8006658 <_malloc_r+0xb8>)
 80065d0:	6823      	ldr	r3, [r4, #0]
 80065d2:	b91b      	cbnz	r3, 80065dc <_malloc_r+0x3c>
 80065d4:	4630      	mov	r0, r6
 80065d6:	f000 f867 	bl	80066a8 <_sbrk_r>
 80065da:	6020      	str	r0, [r4, #0]
 80065dc:	4629      	mov	r1, r5
 80065de:	4630      	mov	r0, r6
 80065e0:	f000 f862 	bl	80066a8 <_sbrk_r>
 80065e4:	1c43      	adds	r3, r0, #1
 80065e6:	d126      	bne.n	8006636 <_malloc_r+0x96>
 80065e8:	230c      	movs	r3, #12
 80065ea:	6033      	str	r3, [r6, #0]
 80065ec:	4630      	mov	r0, r6
 80065ee:	f000 f879 	bl	80066e4 <__malloc_unlock>
 80065f2:	e7e4      	b.n	80065be <_malloc_r+0x1e>
 80065f4:	680b      	ldr	r3, [r1, #0]
 80065f6:	1b5b      	subs	r3, r3, r5
 80065f8:	d41a      	bmi.n	8006630 <_malloc_r+0x90>
 80065fa:	2b0b      	cmp	r3, #11
 80065fc:	d90f      	bls.n	800661e <_malloc_r+0x7e>
 80065fe:	600b      	str	r3, [r1, #0]
 8006600:	50cd      	str	r5, [r1, r3]
 8006602:	18cc      	adds	r4, r1, r3
 8006604:	4630      	mov	r0, r6
 8006606:	f000 f86d 	bl	80066e4 <__malloc_unlock>
 800660a:	f104 000b 	add.w	r0, r4, #11
 800660e:	1d23      	adds	r3, r4, #4
 8006610:	f020 0007 	bic.w	r0, r0, #7
 8006614:	1ac3      	subs	r3, r0, r3
 8006616:	d01b      	beq.n	8006650 <_malloc_r+0xb0>
 8006618:	425a      	negs	r2, r3
 800661a:	50e2      	str	r2, [r4, r3]
 800661c:	bd70      	pop	{r4, r5, r6, pc}
 800661e:	428c      	cmp	r4, r1
 8006620:	bf0d      	iteet	eq
 8006622:	6863      	ldreq	r3, [r4, #4]
 8006624:	684b      	ldrne	r3, [r1, #4]
 8006626:	6063      	strne	r3, [r4, #4]
 8006628:	6013      	streq	r3, [r2, #0]
 800662a:	bf18      	it	ne
 800662c:	460c      	movne	r4, r1
 800662e:	e7e9      	b.n	8006604 <_malloc_r+0x64>
 8006630:	460c      	mov	r4, r1
 8006632:	6849      	ldr	r1, [r1, #4]
 8006634:	e7ca      	b.n	80065cc <_malloc_r+0x2c>
 8006636:	1cc4      	adds	r4, r0, #3
 8006638:	f024 0403 	bic.w	r4, r4, #3
 800663c:	42a0      	cmp	r0, r4
 800663e:	d005      	beq.n	800664c <_malloc_r+0xac>
 8006640:	1a21      	subs	r1, r4, r0
 8006642:	4630      	mov	r0, r6
 8006644:	f000 f830 	bl	80066a8 <_sbrk_r>
 8006648:	3001      	adds	r0, #1
 800664a:	d0cd      	beq.n	80065e8 <_malloc_r+0x48>
 800664c:	6025      	str	r5, [r4, #0]
 800664e:	e7d9      	b.n	8006604 <_malloc_r+0x64>
 8006650:	bd70      	pop	{r4, r5, r6, pc}
 8006652:	bf00      	nop
 8006654:	20000334 	.word	0x20000334
 8006658:	20000338 	.word	0x20000338

0800665c <_realloc_r>:
 800665c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800665e:	4607      	mov	r7, r0
 8006660:	4614      	mov	r4, r2
 8006662:	460e      	mov	r6, r1
 8006664:	b921      	cbnz	r1, 8006670 <_realloc_r+0x14>
 8006666:	4611      	mov	r1, r2
 8006668:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800666c:	f7ff bf98 	b.w	80065a0 <_malloc_r>
 8006670:	b922      	cbnz	r2, 800667c <_realloc_r+0x20>
 8006672:	f7ff ff47 	bl	8006504 <_free_r>
 8006676:	4625      	mov	r5, r4
 8006678:	4628      	mov	r0, r5
 800667a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800667c:	f000 f833 	bl	80066e6 <_malloc_usable_size_r>
 8006680:	4284      	cmp	r4, r0
 8006682:	d90f      	bls.n	80066a4 <_realloc_r+0x48>
 8006684:	4621      	mov	r1, r4
 8006686:	4638      	mov	r0, r7
 8006688:	f7ff ff8a 	bl	80065a0 <_malloc_r>
 800668c:	4605      	mov	r5, r0
 800668e:	2800      	cmp	r0, #0
 8006690:	d0f2      	beq.n	8006678 <_realloc_r+0x1c>
 8006692:	4631      	mov	r1, r6
 8006694:	4622      	mov	r2, r4
 8006696:	f7fe ff09 	bl	80054ac <memcpy>
 800669a:	4631      	mov	r1, r6
 800669c:	4638      	mov	r0, r7
 800669e:	f7ff ff31 	bl	8006504 <_free_r>
 80066a2:	e7e9      	b.n	8006678 <_realloc_r+0x1c>
 80066a4:	4635      	mov	r5, r6
 80066a6:	e7e7      	b.n	8006678 <_realloc_r+0x1c>

080066a8 <_sbrk_r>:
 80066a8:	b538      	push	{r3, r4, r5, lr}
 80066aa:	4c06      	ldr	r4, [pc, #24]	; (80066c4 <_sbrk_r+0x1c>)
 80066ac:	2300      	movs	r3, #0
 80066ae:	4605      	mov	r5, r0
 80066b0:	4608      	mov	r0, r1
 80066b2:	6023      	str	r3, [r4, #0]
 80066b4:	f7fe fe68 	bl	8005388 <_sbrk>
 80066b8:	1c43      	adds	r3, r0, #1
 80066ba:	d102      	bne.n	80066c2 <_sbrk_r+0x1a>
 80066bc:	6823      	ldr	r3, [r4, #0]
 80066be:	b103      	cbz	r3, 80066c2 <_sbrk_r+0x1a>
 80066c0:	602b      	str	r3, [r5, #0]
 80066c2:	bd38      	pop	{r3, r4, r5, pc}
 80066c4:	20000f18 	.word	0x20000f18

080066c8 <__ascii_wctomb>:
 80066c8:	b149      	cbz	r1, 80066de <__ascii_wctomb+0x16>
 80066ca:	2aff      	cmp	r2, #255	; 0xff
 80066cc:	bf85      	ittet	hi
 80066ce:	238a      	movhi	r3, #138	; 0x8a
 80066d0:	6003      	strhi	r3, [r0, #0]
 80066d2:	700a      	strbls	r2, [r1, #0]
 80066d4:	f04f 30ff 	movhi.w	r0, #4294967295
 80066d8:	bf98      	it	ls
 80066da:	2001      	movls	r0, #1
 80066dc:	4770      	bx	lr
 80066de:	4608      	mov	r0, r1
 80066e0:	4770      	bx	lr

080066e2 <__malloc_lock>:
 80066e2:	4770      	bx	lr

080066e4 <__malloc_unlock>:
 80066e4:	4770      	bx	lr

080066e6 <_malloc_usable_size_r>:
 80066e6:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80066ea:	2800      	cmp	r0, #0
 80066ec:	f1a0 0004 	sub.w	r0, r0, #4
 80066f0:	bfbc      	itt	lt
 80066f2:	580b      	ldrlt	r3, [r1, r0]
 80066f4:	18c0      	addlt	r0, r0, r3
 80066f6:	4770      	bx	lr

080066f8 <round>:
 80066f8:	ec51 0b10 	vmov	r0, r1, d0
 80066fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066fe:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8006702:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8006706:	2c13      	cmp	r4, #19
 8006708:	460b      	mov	r3, r1
 800670a:	460f      	mov	r7, r1
 800670c:	dc17      	bgt.n	800673e <round+0x46>
 800670e:	2c00      	cmp	r4, #0
 8006710:	da09      	bge.n	8006726 <round+0x2e>
 8006712:	3401      	adds	r4, #1
 8006714:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8006718:	d103      	bne.n	8006722 <round+0x2a>
 800671a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800671e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006722:	2100      	movs	r1, #0
 8006724:	e028      	b.n	8006778 <round+0x80>
 8006726:	4a16      	ldr	r2, [pc, #88]	; (8006780 <round+0x88>)
 8006728:	4122      	asrs	r2, r4
 800672a:	4211      	tst	r1, r2
 800672c:	d100      	bne.n	8006730 <round+0x38>
 800672e:	b180      	cbz	r0, 8006752 <round+0x5a>
 8006730:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006734:	4123      	asrs	r3, r4
 8006736:	443b      	add	r3, r7
 8006738:	ea23 0302 	bic.w	r3, r3, r2
 800673c:	e7f1      	b.n	8006722 <round+0x2a>
 800673e:	2c33      	cmp	r4, #51	; 0x33
 8006740:	dd0a      	ble.n	8006758 <round+0x60>
 8006742:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8006746:	d104      	bne.n	8006752 <round+0x5a>
 8006748:	ee10 2a10 	vmov	r2, s0
 800674c:	460b      	mov	r3, r1
 800674e:	f7f9 fdcd 	bl	80002ec <__adddf3>
 8006752:	ec41 0b10 	vmov	d0, r0, r1
 8006756:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006758:	f2a5 4213 	subw	r2, r5, #1043	; 0x413
 800675c:	f04f 35ff 	mov.w	r5, #4294967295
 8006760:	40d5      	lsrs	r5, r2
 8006762:	4228      	tst	r0, r5
 8006764:	d0f5      	beq.n	8006752 <round+0x5a>
 8006766:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800676a:	2201      	movs	r2, #1
 800676c:	40a2      	lsls	r2, r4
 800676e:	1812      	adds	r2, r2, r0
 8006770:	bf28      	it	cs
 8006772:	3301      	addcs	r3, #1
 8006774:	ea22 0105 	bic.w	r1, r2, r5
 8006778:	4608      	mov	r0, r1
 800677a:	4619      	mov	r1, r3
 800677c:	e7e9      	b.n	8006752 <round+0x5a>
 800677e:	bf00      	nop
 8006780:	000fffff 	.word	0x000fffff

08006784 <atanf>:
 8006784:	b538      	push	{r3, r4, r5, lr}
 8006786:	ee10 5a10 	vmov	r5, s0
 800678a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800678e:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8006792:	eef0 7a40 	vmov.f32	s15, s0
 8006796:	db10      	blt.n	80067ba <atanf+0x36>
 8006798:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800679c:	dd04      	ble.n	80067a8 <atanf+0x24>
 800679e:	ee70 7a00 	vadd.f32	s15, s0, s0
 80067a2:	eeb0 0a67 	vmov.f32	s0, s15
 80067a6:	bd38      	pop	{r3, r4, r5, pc}
 80067a8:	eddf 7a4c 	vldr	s15, [pc, #304]	; 80068dc <atanf+0x158>
 80067ac:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 80068e0 <atanf+0x15c>
 80067b0:	2d00      	cmp	r5, #0
 80067b2:	bfc8      	it	gt
 80067b4:	eef0 7a47 	vmovgt.f32	s15, s14
 80067b8:	e7f3      	b.n	80067a2 <atanf+0x1e>
 80067ba:	4b4a      	ldr	r3, [pc, #296]	; (80068e4 <atanf+0x160>)
 80067bc:	429c      	cmp	r4, r3
 80067be:	dc10      	bgt.n	80067e2 <atanf+0x5e>
 80067c0:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 80067c4:	da0a      	bge.n	80067dc <atanf+0x58>
 80067c6:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80068e8 <atanf+0x164>
 80067ca:	ee30 7a07 	vadd.f32	s14, s0, s14
 80067ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067d2:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80067d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067da:	dce2      	bgt.n	80067a2 <atanf+0x1e>
 80067dc:	f04f 33ff 	mov.w	r3, #4294967295
 80067e0:	e013      	b.n	800680a <atanf+0x86>
 80067e2:	f000 f8a1 	bl	8006928 <fabsf>
 80067e6:	4b41      	ldr	r3, [pc, #260]	; (80068ec <atanf+0x168>)
 80067e8:	429c      	cmp	r4, r3
 80067ea:	dc4d      	bgt.n	8006888 <atanf+0x104>
 80067ec:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 80067f0:	429c      	cmp	r4, r3
 80067f2:	dc3f      	bgt.n	8006874 <atanf+0xf0>
 80067f4:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80067f8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80067fc:	eea0 7a27 	vfma.f32	s14, s0, s15
 8006800:	2300      	movs	r3, #0
 8006802:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006806:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800680a:	1c5a      	adds	r2, r3, #1
 800680c:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8006810:	eddf 6a37 	vldr	s13, [pc, #220]	; 80068f0 <atanf+0x16c>
 8006814:	eddf 5a37 	vldr	s11, [pc, #220]	; 80068f4 <atanf+0x170>
 8006818:	ed9f 5a37 	vldr	s10, [pc, #220]	; 80068f8 <atanf+0x174>
 800681c:	ee26 7a06 	vmul.f32	s14, s12, s12
 8006820:	eee7 5a26 	vfma.f32	s11, s14, s13
 8006824:	eddf 6a35 	vldr	s13, [pc, #212]	; 80068fc <atanf+0x178>
 8006828:	eee7 6a25 	vfma.f32	s13, s14, s11
 800682c:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006900 <atanf+0x17c>
 8006830:	eee7 5a26 	vfma.f32	s11, s14, s13
 8006834:	eddf 6a33 	vldr	s13, [pc, #204]	; 8006904 <atanf+0x180>
 8006838:	eee7 6a25 	vfma.f32	s13, s14, s11
 800683c:	eddf 5a32 	vldr	s11, [pc, #200]	; 8006908 <atanf+0x184>
 8006840:	eee7 5a26 	vfma.f32	s11, s14, s13
 8006844:	eddf 6a31 	vldr	s13, [pc, #196]	; 800690c <atanf+0x188>
 8006848:	eea7 5a26 	vfma.f32	s10, s14, s13
 800684c:	eddf 6a30 	vldr	s13, [pc, #192]	; 8006910 <atanf+0x18c>
 8006850:	eee7 6a05 	vfma.f32	s13, s14, s10
 8006854:	ed9f 5a2f 	vldr	s10, [pc, #188]	; 8006914 <atanf+0x190>
 8006858:	eea7 5a26 	vfma.f32	s10, s14, s13
 800685c:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8006918 <atanf+0x194>
 8006860:	eee7 6a05 	vfma.f32	s13, s14, s10
 8006864:	ee26 7a87 	vmul.f32	s14, s13, s14
 8006868:	ee05 7a86 	vmla.f32	s14, s11, s12
 800686c:	d121      	bne.n	80068b2 <atanf+0x12e>
 800686e:	eee7 7ac7 	vfms.f32	s15, s15, s14
 8006872:	e796      	b.n	80067a2 <atanf+0x1e>
 8006874:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8006878:	ee30 7a67 	vsub.f32	s14, s0, s15
 800687c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006880:	2301      	movs	r3, #1
 8006882:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8006886:	e7c0      	b.n	800680a <atanf+0x86>
 8006888:	4b24      	ldr	r3, [pc, #144]	; (800691c <atanf+0x198>)
 800688a:	429c      	cmp	r4, r3
 800688c:	dc0b      	bgt.n	80068a6 <atanf+0x122>
 800688e:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8006892:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006896:	eea0 7a27 	vfma.f32	s14, s0, s15
 800689a:	2302      	movs	r3, #2
 800689c:	ee70 6a67 	vsub.f32	s13, s0, s15
 80068a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068a4:	e7b1      	b.n	800680a <atanf+0x86>
 80068a6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80068aa:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80068ae:	2303      	movs	r3, #3
 80068b0:	e7ab      	b.n	800680a <atanf+0x86>
 80068b2:	4a1b      	ldr	r2, [pc, #108]	; (8006920 <atanf+0x19c>)
 80068b4:	491b      	ldr	r1, [pc, #108]	; (8006924 <atanf+0x1a0>)
 80068b6:	009b      	lsls	r3, r3, #2
 80068b8:	441a      	add	r2, r3
 80068ba:	440b      	add	r3, r1
 80068bc:	edd3 6a00 	vldr	s13, [r3]
 80068c0:	eed7 6a87 	vfnms.f32	s13, s15, s14
 80068c4:	2d00      	cmp	r5, #0
 80068c6:	ed92 7a00 	vldr	s14, [r2]
 80068ca:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80068ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80068d2:	bfb8      	it	lt
 80068d4:	eef1 7a67 	vneglt.f32	s15, s15
 80068d8:	e763      	b.n	80067a2 <atanf+0x1e>
 80068da:	bf00      	nop
 80068dc:	bfc90fdb 	.word	0xbfc90fdb
 80068e0:	3fc90fdb 	.word	0x3fc90fdb
 80068e4:	3edfffff 	.word	0x3edfffff
 80068e8:	7149f2ca 	.word	0x7149f2ca
 80068ec:	3f97ffff 	.word	0x3f97ffff
 80068f0:	3c8569d7 	.word	0x3c8569d7
 80068f4:	3d4bda59 	.word	0x3d4bda59
 80068f8:	bd6ef16b 	.word	0xbd6ef16b
 80068fc:	3d886b35 	.word	0x3d886b35
 8006900:	3dba2e6e 	.word	0x3dba2e6e
 8006904:	3e124925 	.word	0x3e124925
 8006908:	3eaaaaab 	.word	0x3eaaaaab
 800690c:	bd15a221 	.word	0xbd15a221
 8006910:	bd9d8795 	.word	0xbd9d8795
 8006914:	bde38e38 	.word	0xbde38e38
 8006918:	be4ccccd 	.word	0xbe4ccccd
 800691c:	401bffff 	.word	0x401bffff
 8006920:	08007908 	.word	0x08007908
 8006924:	08007918 	.word	0x08007918

08006928 <fabsf>:
 8006928:	ee10 3a10 	vmov	r3, s0
 800692c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006930:	ee00 3a10 	vmov	s0, r3
 8006934:	4770      	bx	lr
	...

08006938 <floorf>:
 8006938:	ee10 3a10 	vmov	r3, s0
 800693c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006940:	0dca      	lsrs	r2, r1, #23
 8006942:	3a7f      	subs	r2, #127	; 0x7f
 8006944:	2a16      	cmp	r2, #22
 8006946:	dc2a      	bgt.n	800699e <floorf+0x66>
 8006948:	2a00      	cmp	r2, #0
 800694a:	da11      	bge.n	8006970 <floorf+0x38>
 800694c:	eddf 7a18 	vldr	s15, [pc, #96]	; 80069b0 <floorf+0x78>
 8006950:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006954:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800695c:	dd05      	ble.n	800696a <floorf+0x32>
 800695e:	2b00      	cmp	r3, #0
 8006960:	da23      	bge.n	80069aa <floorf+0x72>
 8006962:	4a14      	ldr	r2, [pc, #80]	; (80069b4 <floorf+0x7c>)
 8006964:	2900      	cmp	r1, #0
 8006966:	bf18      	it	ne
 8006968:	4613      	movne	r3, r2
 800696a:	ee00 3a10 	vmov	s0, r3
 800696e:	4770      	bx	lr
 8006970:	4911      	ldr	r1, [pc, #68]	; (80069b8 <floorf+0x80>)
 8006972:	4111      	asrs	r1, r2
 8006974:	420b      	tst	r3, r1
 8006976:	d0fa      	beq.n	800696e <floorf+0x36>
 8006978:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80069b0 <floorf+0x78>
 800697c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006980:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006988:	ddef      	ble.n	800696a <floorf+0x32>
 800698a:	2b00      	cmp	r3, #0
 800698c:	bfbe      	ittt	lt
 800698e:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8006992:	fa40 f202 	asrlt.w	r2, r0, r2
 8006996:	189b      	addlt	r3, r3, r2
 8006998:	ea23 0301 	bic.w	r3, r3, r1
 800699c:	e7e5      	b.n	800696a <floorf+0x32>
 800699e:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80069a2:	d3e4      	bcc.n	800696e <floorf+0x36>
 80069a4:	ee30 0a00 	vadd.f32	s0, s0, s0
 80069a8:	4770      	bx	lr
 80069aa:	2300      	movs	r3, #0
 80069ac:	e7dd      	b.n	800696a <floorf+0x32>
 80069ae:	bf00      	nop
 80069b0:	7149f2ca 	.word	0x7149f2ca
 80069b4:	bf800000 	.word	0xbf800000
 80069b8:	007fffff 	.word	0x007fffff

080069bc <acos>:
 80069bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069be:	ed2d 8b02 	vpush	{d8}
 80069c2:	4e26      	ldr	r6, [pc, #152]	; (8006a5c <acos+0xa0>)
 80069c4:	b08b      	sub	sp, #44	; 0x2c
 80069c6:	ec55 4b10 	vmov	r4, r5, d0
 80069ca:	f000 f8f9 	bl	8006bc0 <__ieee754_acos>
 80069ce:	f996 3000 	ldrsb.w	r3, [r6]
 80069d2:	eeb0 8a40 	vmov.f32	s16, s0
 80069d6:	eef0 8a60 	vmov.f32	s17, s1
 80069da:	3301      	adds	r3, #1
 80069dc:	d036      	beq.n	8006a4c <acos+0x90>
 80069de:	4622      	mov	r2, r4
 80069e0:	462b      	mov	r3, r5
 80069e2:	4620      	mov	r0, r4
 80069e4:	4629      	mov	r1, r5
 80069e6:	f7fa f8cd 	bl	8000b84 <__aeabi_dcmpun>
 80069ea:	4607      	mov	r7, r0
 80069ec:	bb70      	cbnz	r0, 8006a4c <acos+0x90>
 80069ee:	ec45 4b10 	vmov	d0, r4, r5
 80069f2:	f000 fd34 	bl	800745e <fabs>
 80069f6:	2200      	movs	r2, #0
 80069f8:	4b19      	ldr	r3, [pc, #100]	; (8006a60 <acos+0xa4>)
 80069fa:	ec51 0b10 	vmov	r0, r1, d0
 80069fe:	f7fa f8b7 	bl	8000b70 <__aeabi_dcmpgt>
 8006a02:	b318      	cbz	r0, 8006a4c <acos+0x90>
 8006a04:	2301      	movs	r3, #1
 8006a06:	9300      	str	r3, [sp, #0]
 8006a08:	4816      	ldr	r0, [pc, #88]	; (8006a64 <acos+0xa8>)
 8006a0a:	4b17      	ldr	r3, [pc, #92]	; (8006a68 <acos+0xac>)
 8006a0c:	9301      	str	r3, [sp, #4]
 8006a0e:	9708      	str	r7, [sp, #32]
 8006a10:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8006a14:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006a18:	f000 fd2a 	bl	8007470 <nan>
 8006a1c:	f996 3000 	ldrsb.w	r3, [r6]
 8006a20:	2b02      	cmp	r3, #2
 8006a22:	ed8d 0b06 	vstr	d0, [sp, #24]
 8006a26:	d104      	bne.n	8006a32 <acos+0x76>
 8006a28:	f7fe fd16 	bl	8005458 <__errno>
 8006a2c:	2321      	movs	r3, #33	; 0x21
 8006a2e:	6003      	str	r3, [r0, #0]
 8006a30:	e004      	b.n	8006a3c <acos+0x80>
 8006a32:	4668      	mov	r0, sp
 8006a34:	f000 fd1a 	bl	800746c <matherr>
 8006a38:	2800      	cmp	r0, #0
 8006a3a:	d0f5      	beq.n	8006a28 <acos+0x6c>
 8006a3c:	9b08      	ldr	r3, [sp, #32]
 8006a3e:	b11b      	cbz	r3, 8006a48 <acos+0x8c>
 8006a40:	f7fe fd0a 	bl	8005458 <__errno>
 8006a44:	9b08      	ldr	r3, [sp, #32]
 8006a46:	6003      	str	r3, [r0, #0]
 8006a48:	ed9d 8b06 	vldr	d8, [sp, #24]
 8006a4c:	eeb0 0a48 	vmov.f32	s0, s16
 8006a50:	eef0 0a68 	vmov.f32	s1, s17
 8006a54:	b00b      	add	sp, #44	; 0x2c
 8006a56:	ecbd 8b02 	vpop	{d8}
 8006a5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a5c:	200002fc 	.word	0x200002fc
 8006a60:	3ff00000 	.word	0x3ff00000
 8006a64:	080076b2 	.word	0x080076b2
 8006a68:	08007928 	.word	0x08007928

08006a6c <acosf>:
 8006a6c:	b510      	push	{r4, lr}
 8006a6e:	ed2d 8b02 	vpush	{d8}
 8006a72:	4c27      	ldr	r4, [pc, #156]	; (8006b10 <acosf+0xa4>)
 8006a74:	b08a      	sub	sp, #40	; 0x28
 8006a76:	eeb0 8a40 	vmov.f32	s16, s0
 8006a7a:	f000 fbad 	bl	80071d8 <__ieee754_acosf>
 8006a7e:	f994 3000 	ldrsb.w	r3, [r4]
 8006a82:	3301      	adds	r3, #1
 8006a84:	eef0 8a40 	vmov.f32	s17, s0
 8006a88:	d03c      	beq.n	8006b04 <acosf+0x98>
 8006a8a:	eeb4 8a48 	vcmp.f32	s16, s16
 8006a8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a92:	d637      	bvs.n	8006b04 <acosf+0x98>
 8006a94:	eeb0 0a48 	vmov.f32	s0, s16
 8006a98:	f7ff ff46 	bl	8006928 <fabsf>
 8006a9c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8006aa0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8006aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006aa8:	dd2c      	ble.n	8006b04 <acosf+0x98>
 8006aaa:	2301      	movs	r3, #1
 8006aac:	9300      	str	r3, [sp, #0]
 8006aae:	4b19      	ldr	r3, [pc, #100]	; (8006b14 <acosf+0xa8>)
 8006ab0:	9301      	str	r3, [sp, #4]
 8006ab2:	ee18 0a10 	vmov	r0, s16
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	9308      	str	r3, [sp, #32]
 8006aba:	f7f9 fd75 	bl	80005a8 <__aeabi_f2d>
 8006abe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006ac2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ac6:	4814      	ldr	r0, [pc, #80]	; (8006b18 <acosf+0xac>)
 8006ac8:	f000 fcd2 	bl	8007470 <nan>
 8006acc:	f994 3000 	ldrsb.w	r3, [r4]
 8006ad0:	2b02      	cmp	r3, #2
 8006ad2:	ed8d 0b06 	vstr	d0, [sp, #24]
 8006ad6:	d104      	bne.n	8006ae2 <acosf+0x76>
 8006ad8:	f7fe fcbe 	bl	8005458 <__errno>
 8006adc:	2321      	movs	r3, #33	; 0x21
 8006ade:	6003      	str	r3, [r0, #0]
 8006ae0:	e004      	b.n	8006aec <acosf+0x80>
 8006ae2:	4668      	mov	r0, sp
 8006ae4:	f000 fcc2 	bl	800746c <matherr>
 8006ae8:	2800      	cmp	r0, #0
 8006aea:	d0f5      	beq.n	8006ad8 <acosf+0x6c>
 8006aec:	9b08      	ldr	r3, [sp, #32]
 8006aee:	b11b      	cbz	r3, 8006af8 <acosf+0x8c>
 8006af0:	f7fe fcb2 	bl	8005458 <__errno>
 8006af4:	9b08      	ldr	r3, [sp, #32]
 8006af6:	6003      	str	r3, [r0, #0]
 8006af8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006afc:	f7fa f880 	bl	8000c00 <__aeabi_d2f>
 8006b00:	ee08 0a90 	vmov	s17, r0
 8006b04:	eeb0 0a68 	vmov.f32	s0, s17
 8006b08:	b00a      	add	sp, #40	; 0x28
 8006b0a:	ecbd 8b02 	vpop	{d8}
 8006b0e:	bd10      	pop	{r4, pc}
 8006b10:	200002fc 	.word	0x200002fc
 8006b14:	0800792d 	.word	0x0800792d
 8006b18:	080076b2 	.word	0x080076b2

08006b1c <sqrtf>:
 8006b1c:	b510      	push	{r4, lr}
 8006b1e:	ed2d 8b02 	vpush	{d8}
 8006b22:	b08a      	sub	sp, #40	; 0x28
 8006b24:	eeb0 8a40 	vmov.f32	s16, s0
 8006b28:	f000 fc52 	bl	80073d0 <__ieee754_sqrtf>
 8006b2c:	4b21      	ldr	r3, [pc, #132]	; (8006bb4 <sqrtf+0x98>)
 8006b2e:	f993 4000 	ldrsb.w	r4, [r3]
 8006b32:	1c63      	adds	r3, r4, #1
 8006b34:	d02c      	beq.n	8006b90 <sqrtf+0x74>
 8006b36:	eeb4 8a48 	vcmp.f32	s16, s16
 8006b3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b3e:	d627      	bvs.n	8006b90 <sqrtf+0x74>
 8006b40:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8006b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b48:	d522      	bpl.n	8006b90 <sqrtf+0x74>
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	9300      	str	r3, [sp, #0]
 8006b4e:	4b1a      	ldr	r3, [pc, #104]	; (8006bb8 <sqrtf+0x9c>)
 8006b50:	9301      	str	r3, [sp, #4]
 8006b52:	ee18 0a10 	vmov	r0, s16
 8006b56:	2300      	movs	r3, #0
 8006b58:	9308      	str	r3, [sp, #32]
 8006b5a:	f7f9 fd25 	bl	80005a8 <__aeabi_f2d>
 8006b5e:	2200      	movs	r2, #0
 8006b60:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006b64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b68:	2300      	movs	r3, #0
 8006b6a:	b9ac      	cbnz	r4, 8006b98 <sqrtf+0x7c>
 8006b6c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006b70:	4668      	mov	r0, sp
 8006b72:	f000 fc7b 	bl	800746c <matherr>
 8006b76:	b1b8      	cbz	r0, 8006ba8 <sqrtf+0x8c>
 8006b78:	9b08      	ldr	r3, [sp, #32]
 8006b7a:	b11b      	cbz	r3, 8006b84 <sqrtf+0x68>
 8006b7c:	f7fe fc6c 	bl	8005458 <__errno>
 8006b80:	9b08      	ldr	r3, [sp, #32]
 8006b82:	6003      	str	r3, [r0, #0]
 8006b84:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b88:	f7fa f83a 	bl	8000c00 <__aeabi_d2f>
 8006b8c:	ee00 0a10 	vmov	s0, r0
 8006b90:	b00a      	add	sp, #40	; 0x28
 8006b92:	ecbd 8b02 	vpop	{d8}
 8006b96:	bd10      	pop	{r4, pc}
 8006b98:	4610      	mov	r0, r2
 8006b9a:	4619      	mov	r1, r3
 8006b9c:	f7f9 fe82 	bl	80008a4 <__aeabi_ddiv>
 8006ba0:	2c02      	cmp	r4, #2
 8006ba2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006ba6:	d1e3      	bne.n	8006b70 <sqrtf+0x54>
 8006ba8:	f7fe fc56 	bl	8005458 <__errno>
 8006bac:	2321      	movs	r3, #33	; 0x21
 8006bae:	6003      	str	r3, [r0, #0]
 8006bb0:	e7e2      	b.n	8006b78 <sqrtf+0x5c>
 8006bb2:	bf00      	nop
 8006bb4:	200002fc 	.word	0x200002fc
 8006bb8:	08007933 	.word	0x08007933
 8006bbc:	00000000 	.word	0x00000000

08006bc0 <__ieee754_acos>:
 8006bc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bc4:	ec55 4b10 	vmov	r4, r5, d0
 8006bc8:	49b7      	ldr	r1, [pc, #732]	; (8006ea8 <__ieee754_acos+0x2e8>)
 8006bca:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006bce:	428b      	cmp	r3, r1
 8006bd0:	dd1b      	ble.n	8006c0a <__ieee754_acos+0x4a>
 8006bd2:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 8006bd6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8006bda:	4323      	orrs	r3, r4
 8006bdc:	d109      	bne.n	8006bf2 <__ieee754_acos+0x32>
 8006bde:	2d00      	cmp	r5, #0
 8006be0:	f300 8211 	bgt.w	8007006 <__ieee754_acos+0x446>
 8006be4:	a196      	add	r1, pc, #600	; (adr r1, 8006e40 <__ieee754_acos+0x280>)
 8006be6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006bea:	ec41 0b10 	vmov	d0, r0, r1
 8006bee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bf2:	ee10 2a10 	vmov	r2, s0
 8006bf6:	462b      	mov	r3, r5
 8006bf8:	4620      	mov	r0, r4
 8006bfa:	4629      	mov	r1, r5
 8006bfc:	f7f9 fb74 	bl	80002e8 <__aeabi_dsub>
 8006c00:	4602      	mov	r2, r0
 8006c02:	460b      	mov	r3, r1
 8006c04:	f7f9 fe4e 	bl	80008a4 <__aeabi_ddiv>
 8006c08:	e7ef      	b.n	8006bea <__ieee754_acos+0x2a>
 8006c0a:	49a8      	ldr	r1, [pc, #672]	; (8006eac <__ieee754_acos+0x2ec>)
 8006c0c:	428b      	cmp	r3, r1
 8006c0e:	f300 8087 	bgt.w	8006d20 <__ieee754_acos+0x160>
 8006c12:	4aa7      	ldr	r2, [pc, #668]	; (8006eb0 <__ieee754_acos+0x2f0>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	f340 81f9 	ble.w	800700c <__ieee754_acos+0x44c>
 8006c1a:	ee10 2a10 	vmov	r2, s0
 8006c1e:	ee10 0a10 	vmov	r0, s0
 8006c22:	462b      	mov	r3, r5
 8006c24:	4629      	mov	r1, r5
 8006c26:	f7f9 fd13 	bl	8000650 <__aeabi_dmul>
 8006c2a:	a387      	add	r3, pc, #540	; (adr r3, 8006e48 <__ieee754_acos+0x288>)
 8006c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c30:	4606      	mov	r6, r0
 8006c32:	460f      	mov	r7, r1
 8006c34:	f7f9 fd0c 	bl	8000650 <__aeabi_dmul>
 8006c38:	a385      	add	r3, pc, #532	; (adr r3, 8006e50 <__ieee754_acos+0x290>)
 8006c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c3e:	f7f9 fb55 	bl	80002ec <__adddf3>
 8006c42:	4632      	mov	r2, r6
 8006c44:	463b      	mov	r3, r7
 8006c46:	f7f9 fd03 	bl	8000650 <__aeabi_dmul>
 8006c4a:	a383      	add	r3, pc, #524	; (adr r3, 8006e58 <__ieee754_acos+0x298>)
 8006c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c50:	f7f9 fb4a 	bl	80002e8 <__aeabi_dsub>
 8006c54:	4632      	mov	r2, r6
 8006c56:	463b      	mov	r3, r7
 8006c58:	f7f9 fcfa 	bl	8000650 <__aeabi_dmul>
 8006c5c:	a380      	add	r3, pc, #512	; (adr r3, 8006e60 <__ieee754_acos+0x2a0>)
 8006c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c62:	f7f9 fb43 	bl	80002ec <__adddf3>
 8006c66:	4632      	mov	r2, r6
 8006c68:	463b      	mov	r3, r7
 8006c6a:	f7f9 fcf1 	bl	8000650 <__aeabi_dmul>
 8006c6e:	a37e      	add	r3, pc, #504	; (adr r3, 8006e68 <__ieee754_acos+0x2a8>)
 8006c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c74:	f7f9 fb38 	bl	80002e8 <__aeabi_dsub>
 8006c78:	4632      	mov	r2, r6
 8006c7a:	463b      	mov	r3, r7
 8006c7c:	f7f9 fce8 	bl	8000650 <__aeabi_dmul>
 8006c80:	a37b      	add	r3, pc, #492	; (adr r3, 8006e70 <__ieee754_acos+0x2b0>)
 8006c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c86:	f7f9 fb31 	bl	80002ec <__adddf3>
 8006c8a:	4632      	mov	r2, r6
 8006c8c:	463b      	mov	r3, r7
 8006c8e:	f7f9 fcdf 	bl	8000650 <__aeabi_dmul>
 8006c92:	a379      	add	r3, pc, #484	; (adr r3, 8006e78 <__ieee754_acos+0x2b8>)
 8006c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c98:	4680      	mov	r8, r0
 8006c9a:	4689      	mov	r9, r1
 8006c9c:	4630      	mov	r0, r6
 8006c9e:	4639      	mov	r1, r7
 8006ca0:	f7f9 fcd6 	bl	8000650 <__aeabi_dmul>
 8006ca4:	a376      	add	r3, pc, #472	; (adr r3, 8006e80 <__ieee754_acos+0x2c0>)
 8006ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006caa:	f7f9 fb1d 	bl	80002e8 <__aeabi_dsub>
 8006cae:	4632      	mov	r2, r6
 8006cb0:	463b      	mov	r3, r7
 8006cb2:	f7f9 fccd 	bl	8000650 <__aeabi_dmul>
 8006cb6:	a374      	add	r3, pc, #464	; (adr r3, 8006e88 <__ieee754_acos+0x2c8>)
 8006cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cbc:	f7f9 fb16 	bl	80002ec <__adddf3>
 8006cc0:	4632      	mov	r2, r6
 8006cc2:	463b      	mov	r3, r7
 8006cc4:	f7f9 fcc4 	bl	8000650 <__aeabi_dmul>
 8006cc8:	a371      	add	r3, pc, #452	; (adr r3, 8006e90 <__ieee754_acos+0x2d0>)
 8006cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cce:	f7f9 fb0b 	bl	80002e8 <__aeabi_dsub>
 8006cd2:	4632      	mov	r2, r6
 8006cd4:	463b      	mov	r3, r7
 8006cd6:	f7f9 fcbb 	bl	8000650 <__aeabi_dmul>
 8006cda:	2200      	movs	r2, #0
 8006cdc:	4b75      	ldr	r3, [pc, #468]	; (8006eb4 <__ieee754_acos+0x2f4>)
 8006cde:	f7f9 fb05 	bl	80002ec <__adddf3>
 8006ce2:	4602      	mov	r2, r0
 8006ce4:	460b      	mov	r3, r1
 8006ce6:	4640      	mov	r0, r8
 8006ce8:	4649      	mov	r1, r9
 8006cea:	f7f9 fddb 	bl	80008a4 <__aeabi_ddiv>
 8006cee:	4622      	mov	r2, r4
 8006cf0:	462b      	mov	r3, r5
 8006cf2:	f7f9 fcad 	bl	8000650 <__aeabi_dmul>
 8006cf6:	4602      	mov	r2, r0
 8006cf8:	460b      	mov	r3, r1
 8006cfa:	a167      	add	r1, pc, #412	; (adr r1, 8006e98 <__ieee754_acos+0x2d8>)
 8006cfc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d00:	f7f9 faf2 	bl	80002e8 <__aeabi_dsub>
 8006d04:	4602      	mov	r2, r0
 8006d06:	460b      	mov	r3, r1
 8006d08:	4620      	mov	r0, r4
 8006d0a:	4629      	mov	r1, r5
 8006d0c:	f7f9 faec 	bl	80002e8 <__aeabi_dsub>
 8006d10:	4602      	mov	r2, r0
 8006d12:	460b      	mov	r3, r1
 8006d14:	a162      	add	r1, pc, #392	; (adr r1, 8006ea0 <__ieee754_acos+0x2e0>)
 8006d16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d1a:	f7f9 fae5 	bl	80002e8 <__aeabi_dsub>
 8006d1e:	e764      	b.n	8006bea <__ieee754_acos+0x2a>
 8006d20:	2d00      	cmp	r5, #0
 8006d22:	f280 80cb 	bge.w	8006ebc <__ieee754_acos+0x2fc>
 8006d26:	ee10 0a10 	vmov	r0, s0
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	4b61      	ldr	r3, [pc, #388]	; (8006eb4 <__ieee754_acos+0x2f4>)
 8006d2e:	4629      	mov	r1, r5
 8006d30:	f7f9 fadc 	bl	80002ec <__adddf3>
 8006d34:	2200      	movs	r2, #0
 8006d36:	4b60      	ldr	r3, [pc, #384]	; (8006eb8 <__ieee754_acos+0x2f8>)
 8006d38:	f7f9 fc8a 	bl	8000650 <__aeabi_dmul>
 8006d3c:	a342      	add	r3, pc, #264	; (adr r3, 8006e48 <__ieee754_acos+0x288>)
 8006d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d42:	4604      	mov	r4, r0
 8006d44:	460d      	mov	r5, r1
 8006d46:	f7f9 fc83 	bl	8000650 <__aeabi_dmul>
 8006d4a:	a341      	add	r3, pc, #260	; (adr r3, 8006e50 <__ieee754_acos+0x290>)
 8006d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d50:	f7f9 facc 	bl	80002ec <__adddf3>
 8006d54:	4622      	mov	r2, r4
 8006d56:	462b      	mov	r3, r5
 8006d58:	f7f9 fc7a 	bl	8000650 <__aeabi_dmul>
 8006d5c:	a33e      	add	r3, pc, #248	; (adr r3, 8006e58 <__ieee754_acos+0x298>)
 8006d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d62:	f7f9 fac1 	bl	80002e8 <__aeabi_dsub>
 8006d66:	4622      	mov	r2, r4
 8006d68:	462b      	mov	r3, r5
 8006d6a:	f7f9 fc71 	bl	8000650 <__aeabi_dmul>
 8006d6e:	a33c      	add	r3, pc, #240	; (adr r3, 8006e60 <__ieee754_acos+0x2a0>)
 8006d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d74:	f7f9 faba 	bl	80002ec <__adddf3>
 8006d78:	4622      	mov	r2, r4
 8006d7a:	462b      	mov	r3, r5
 8006d7c:	f7f9 fc68 	bl	8000650 <__aeabi_dmul>
 8006d80:	a339      	add	r3, pc, #228	; (adr r3, 8006e68 <__ieee754_acos+0x2a8>)
 8006d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d86:	f7f9 faaf 	bl	80002e8 <__aeabi_dsub>
 8006d8a:	4622      	mov	r2, r4
 8006d8c:	462b      	mov	r3, r5
 8006d8e:	f7f9 fc5f 	bl	8000650 <__aeabi_dmul>
 8006d92:	a337      	add	r3, pc, #220	; (adr r3, 8006e70 <__ieee754_acos+0x2b0>)
 8006d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d98:	f7f9 faa8 	bl	80002ec <__adddf3>
 8006d9c:	4622      	mov	r2, r4
 8006d9e:	462b      	mov	r3, r5
 8006da0:	f7f9 fc56 	bl	8000650 <__aeabi_dmul>
 8006da4:	ec45 4b10 	vmov	d0, r4, r5
 8006da8:	4680      	mov	r8, r0
 8006daa:	4689      	mov	r9, r1
 8006dac:	f000 f964 	bl	8007078 <__ieee754_sqrt>
 8006db0:	a331      	add	r3, pc, #196	; (adr r3, 8006e78 <__ieee754_acos+0x2b8>)
 8006db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006db6:	4620      	mov	r0, r4
 8006db8:	4629      	mov	r1, r5
 8006dba:	ec57 6b10 	vmov	r6, r7, d0
 8006dbe:	f7f9 fc47 	bl	8000650 <__aeabi_dmul>
 8006dc2:	a32f      	add	r3, pc, #188	; (adr r3, 8006e80 <__ieee754_acos+0x2c0>)
 8006dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dc8:	f7f9 fa8e 	bl	80002e8 <__aeabi_dsub>
 8006dcc:	4622      	mov	r2, r4
 8006dce:	462b      	mov	r3, r5
 8006dd0:	f7f9 fc3e 	bl	8000650 <__aeabi_dmul>
 8006dd4:	a32c      	add	r3, pc, #176	; (adr r3, 8006e88 <__ieee754_acos+0x2c8>)
 8006dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dda:	f7f9 fa87 	bl	80002ec <__adddf3>
 8006dde:	4622      	mov	r2, r4
 8006de0:	462b      	mov	r3, r5
 8006de2:	f7f9 fc35 	bl	8000650 <__aeabi_dmul>
 8006de6:	a32a      	add	r3, pc, #168	; (adr r3, 8006e90 <__ieee754_acos+0x2d0>)
 8006de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dec:	f7f9 fa7c 	bl	80002e8 <__aeabi_dsub>
 8006df0:	4622      	mov	r2, r4
 8006df2:	462b      	mov	r3, r5
 8006df4:	f7f9 fc2c 	bl	8000650 <__aeabi_dmul>
 8006df8:	2200      	movs	r2, #0
 8006dfa:	4b2e      	ldr	r3, [pc, #184]	; (8006eb4 <__ieee754_acos+0x2f4>)
 8006dfc:	f7f9 fa76 	bl	80002ec <__adddf3>
 8006e00:	4602      	mov	r2, r0
 8006e02:	460b      	mov	r3, r1
 8006e04:	4640      	mov	r0, r8
 8006e06:	4649      	mov	r1, r9
 8006e08:	f7f9 fd4c 	bl	80008a4 <__aeabi_ddiv>
 8006e0c:	4632      	mov	r2, r6
 8006e0e:	463b      	mov	r3, r7
 8006e10:	f7f9 fc1e 	bl	8000650 <__aeabi_dmul>
 8006e14:	a320      	add	r3, pc, #128	; (adr r3, 8006e98 <__ieee754_acos+0x2d8>)
 8006e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e1a:	f7f9 fa65 	bl	80002e8 <__aeabi_dsub>
 8006e1e:	4632      	mov	r2, r6
 8006e20:	463b      	mov	r3, r7
 8006e22:	f7f9 fa63 	bl	80002ec <__adddf3>
 8006e26:	4602      	mov	r2, r0
 8006e28:	460b      	mov	r3, r1
 8006e2a:	f7f9 fa5f 	bl	80002ec <__adddf3>
 8006e2e:	4602      	mov	r2, r0
 8006e30:	460b      	mov	r3, r1
 8006e32:	a103      	add	r1, pc, #12	; (adr r1, 8006e40 <__ieee754_acos+0x280>)
 8006e34:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e38:	e76f      	b.n	8006d1a <__ieee754_acos+0x15a>
 8006e3a:	bf00      	nop
 8006e3c:	f3af 8000 	nop.w
 8006e40:	54442d18 	.word	0x54442d18
 8006e44:	400921fb 	.word	0x400921fb
 8006e48:	0dfdf709 	.word	0x0dfdf709
 8006e4c:	3f023de1 	.word	0x3f023de1
 8006e50:	7501b288 	.word	0x7501b288
 8006e54:	3f49efe0 	.word	0x3f49efe0
 8006e58:	b5688f3b 	.word	0xb5688f3b
 8006e5c:	3fa48228 	.word	0x3fa48228
 8006e60:	0e884455 	.word	0x0e884455
 8006e64:	3fc9c155 	.word	0x3fc9c155
 8006e68:	03eb6f7d 	.word	0x03eb6f7d
 8006e6c:	3fd4d612 	.word	0x3fd4d612
 8006e70:	55555555 	.word	0x55555555
 8006e74:	3fc55555 	.word	0x3fc55555
 8006e78:	b12e9282 	.word	0xb12e9282
 8006e7c:	3fb3b8c5 	.word	0x3fb3b8c5
 8006e80:	1b8d0159 	.word	0x1b8d0159
 8006e84:	3fe6066c 	.word	0x3fe6066c
 8006e88:	9c598ac8 	.word	0x9c598ac8
 8006e8c:	40002ae5 	.word	0x40002ae5
 8006e90:	1c8a2d4b 	.word	0x1c8a2d4b
 8006e94:	40033a27 	.word	0x40033a27
 8006e98:	33145c07 	.word	0x33145c07
 8006e9c:	3c91a626 	.word	0x3c91a626
 8006ea0:	54442d18 	.word	0x54442d18
 8006ea4:	3ff921fb 	.word	0x3ff921fb
 8006ea8:	3fefffff 	.word	0x3fefffff
 8006eac:	3fdfffff 	.word	0x3fdfffff
 8006eb0:	3c600000 	.word	0x3c600000
 8006eb4:	3ff00000 	.word	0x3ff00000
 8006eb8:	3fe00000 	.word	0x3fe00000
 8006ebc:	ee10 2a10 	vmov	r2, s0
 8006ec0:	462b      	mov	r3, r5
 8006ec2:	2000      	movs	r0, #0
 8006ec4:	496a      	ldr	r1, [pc, #424]	; (8007070 <__ieee754_acos+0x4b0>)
 8006ec6:	f7f9 fa0f 	bl	80002e8 <__aeabi_dsub>
 8006eca:	2200      	movs	r2, #0
 8006ecc:	4b69      	ldr	r3, [pc, #420]	; (8007074 <__ieee754_acos+0x4b4>)
 8006ece:	f7f9 fbbf 	bl	8000650 <__aeabi_dmul>
 8006ed2:	4604      	mov	r4, r0
 8006ed4:	460d      	mov	r5, r1
 8006ed6:	ec45 4b10 	vmov	d0, r4, r5
 8006eda:	f000 f8cd 	bl	8007078 <__ieee754_sqrt>
 8006ede:	a34e      	add	r3, pc, #312	; (adr r3, 8007018 <__ieee754_acos+0x458>)
 8006ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ee4:	4620      	mov	r0, r4
 8006ee6:	4629      	mov	r1, r5
 8006ee8:	ec59 8b10 	vmov	r8, r9, d0
 8006eec:	f7f9 fbb0 	bl	8000650 <__aeabi_dmul>
 8006ef0:	a34b      	add	r3, pc, #300	; (adr r3, 8007020 <__ieee754_acos+0x460>)
 8006ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ef6:	f7f9 f9f9 	bl	80002ec <__adddf3>
 8006efa:	4622      	mov	r2, r4
 8006efc:	462b      	mov	r3, r5
 8006efe:	f7f9 fba7 	bl	8000650 <__aeabi_dmul>
 8006f02:	a349      	add	r3, pc, #292	; (adr r3, 8007028 <__ieee754_acos+0x468>)
 8006f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f08:	f7f9 f9ee 	bl	80002e8 <__aeabi_dsub>
 8006f0c:	4622      	mov	r2, r4
 8006f0e:	462b      	mov	r3, r5
 8006f10:	f7f9 fb9e 	bl	8000650 <__aeabi_dmul>
 8006f14:	a346      	add	r3, pc, #280	; (adr r3, 8007030 <__ieee754_acos+0x470>)
 8006f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f1a:	f7f9 f9e7 	bl	80002ec <__adddf3>
 8006f1e:	4622      	mov	r2, r4
 8006f20:	462b      	mov	r3, r5
 8006f22:	f7f9 fb95 	bl	8000650 <__aeabi_dmul>
 8006f26:	a344      	add	r3, pc, #272	; (adr r3, 8007038 <__ieee754_acos+0x478>)
 8006f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f2c:	f7f9 f9dc 	bl	80002e8 <__aeabi_dsub>
 8006f30:	4622      	mov	r2, r4
 8006f32:	462b      	mov	r3, r5
 8006f34:	f7f9 fb8c 	bl	8000650 <__aeabi_dmul>
 8006f38:	a341      	add	r3, pc, #260	; (adr r3, 8007040 <__ieee754_acos+0x480>)
 8006f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f3e:	f7f9 f9d5 	bl	80002ec <__adddf3>
 8006f42:	4622      	mov	r2, r4
 8006f44:	462b      	mov	r3, r5
 8006f46:	f7f9 fb83 	bl	8000650 <__aeabi_dmul>
 8006f4a:	a33f      	add	r3, pc, #252	; (adr r3, 8007048 <__ieee754_acos+0x488>)
 8006f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f50:	4682      	mov	sl, r0
 8006f52:	468b      	mov	fp, r1
 8006f54:	4620      	mov	r0, r4
 8006f56:	4629      	mov	r1, r5
 8006f58:	f7f9 fb7a 	bl	8000650 <__aeabi_dmul>
 8006f5c:	a33c      	add	r3, pc, #240	; (adr r3, 8007050 <__ieee754_acos+0x490>)
 8006f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f62:	f7f9 f9c1 	bl	80002e8 <__aeabi_dsub>
 8006f66:	4622      	mov	r2, r4
 8006f68:	462b      	mov	r3, r5
 8006f6a:	f7f9 fb71 	bl	8000650 <__aeabi_dmul>
 8006f6e:	a33a      	add	r3, pc, #232	; (adr r3, 8007058 <__ieee754_acos+0x498>)
 8006f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f74:	f7f9 f9ba 	bl	80002ec <__adddf3>
 8006f78:	4622      	mov	r2, r4
 8006f7a:	462b      	mov	r3, r5
 8006f7c:	f7f9 fb68 	bl	8000650 <__aeabi_dmul>
 8006f80:	a337      	add	r3, pc, #220	; (adr r3, 8007060 <__ieee754_acos+0x4a0>)
 8006f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f86:	f7f9 f9af 	bl	80002e8 <__aeabi_dsub>
 8006f8a:	4622      	mov	r2, r4
 8006f8c:	462b      	mov	r3, r5
 8006f8e:	f7f9 fb5f 	bl	8000650 <__aeabi_dmul>
 8006f92:	2200      	movs	r2, #0
 8006f94:	4b36      	ldr	r3, [pc, #216]	; (8007070 <__ieee754_acos+0x4b0>)
 8006f96:	f7f9 f9a9 	bl	80002ec <__adddf3>
 8006f9a:	4602      	mov	r2, r0
 8006f9c:	460b      	mov	r3, r1
 8006f9e:	4650      	mov	r0, sl
 8006fa0:	4659      	mov	r1, fp
 8006fa2:	f7f9 fc7f 	bl	80008a4 <__aeabi_ddiv>
 8006fa6:	4642      	mov	r2, r8
 8006fa8:	464b      	mov	r3, r9
 8006faa:	f7f9 fb51 	bl	8000650 <__aeabi_dmul>
 8006fae:	2600      	movs	r6, #0
 8006fb0:	4682      	mov	sl, r0
 8006fb2:	468b      	mov	fp, r1
 8006fb4:	4632      	mov	r2, r6
 8006fb6:	464b      	mov	r3, r9
 8006fb8:	4630      	mov	r0, r6
 8006fba:	4649      	mov	r1, r9
 8006fbc:	f7f9 fb48 	bl	8000650 <__aeabi_dmul>
 8006fc0:	4602      	mov	r2, r0
 8006fc2:	460b      	mov	r3, r1
 8006fc4:	4620      	mov	r0, r4
 8006fc6:	4629      	mov	r1, r5
 8006fc8:	f7f9 f98e 	bl	80002e8 <__aeabi_dsub>
 8006fcc:	4632      	mov	r2, r6
 8006fce:	4604      	mov	r4, r0
 8006fd0:	460d      	mov	r5, r1
 8006fd2:	464b      	mov	r3, r9
 8006fd4:	4640      	mov	r0, r8
 8006fd6:	4649      	mov	r1, r9
 8006fd8:	f7f9 f988 	bl	80002ec <__adddf3>
 8006fdc:	4602      	mov	r2, r0
 8006fde:	460b      	mov	r3, r1
 8006fe0:	4620      	mov	r0, r4
 8006fe2:	4629      	mov	r1, r5
 8006fe4:	f7f9 fc5e 	bl	80008a4 <__aeabi_ddiv>
 8006fe8:	4602      	mov	r2, r0
 8006fea:	460b      	mov	r3, r1
 8006fec:	4650      	mov	r0, sl
 8006fee:	4659      	mov	r1, fp
 8006ff0:	f7f9 f97c 	bl	80002ec <__adddf3>
 8006ff4:	4632      	mov	r2, r6
 8006ff6:	464b      	mov	r3, r9
 8006ff8:	f7f9 f978 	bl	80002ec <__adddf3>
 8006ffc:	4602      	mov	r2, r0
 8006ffe:	460b      	mov	r3, r1
 8007000:	f7f9 f974 	bl	80002ec <__adddf3>
 8007004:	e5f1      	b.n	8006bea <__ieee754_acos+0x2a>
 8007006:	2000      	movs	r0, #0
 8007008:	2100      	movs	r1, #0
 800700a:	e5ee      	b.n	8006bea <__ieee754_acos+0x2a>
 800700c:	a116      	add	r1, pc, #88	; (adr r1, 8007068 <__ieee754_acos+0x4a8>)
 800700e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007012:	e5ea      	b.n	8006bea <__ieee754_acos+0x2a>
 8007014:	f3af 8000 	nop.w
 8007018:	0dfdf709 	.word	0x0dfdf709
 800701c:	3f023de1 	.word	0x3f023de1
 8007020:	7501b288 	.word	0x7501b288
 8007024:	3f49efe0 	.word	0x3f49efe0
 8007028:	b5688f3b 	.word	0xb5688f3b
 800702c:	3fa48228 	.word	0x3fa48228
 8007030:	0e884455 	.word	0x0e884455
 8007034:	3fc9c155 	.word	0x3fc9c155
 8007038:	03eb6f7d 	.word	0x03eb6f7d
 800703c:	3fd4d612 	.word	0x3fd4d612
 8007040:	55555555 	.word	0x55555555
 8007044:	3fc55555 	.word	0x3fc55555
 8007048:	b12e9282 	.word	0xb12e9282
 800704c:	3fb3b8c5 	.word	0x3fb3b8c5
 8007050:	1b8d0159 	.word	0x1b8d0159
 8007054:	3fe6066c 	.word	0x3fe6066c
 8007058:	9c598ac8 	.word	0x9c598ac8
 800705c:	40002ae5 	.word	0x40002ae5
 8007060:	1c8a2d4b 	.word	0x1c8a2d4b
 8007064:	40033a27 	.word	0x40033a27
 8007068:	54442d18 	.word	0x54442d18
 800706c:	3ff921fb 	.word	0x3ff921fb
 8007070:	3ff00000 	.word	0x3ff00000
 8007074:	3fe00000 	.word	0x3fe00000

08007078 <__ieee754_sqrt>:
 8007078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800707c:	ec55 4b10 	vmov	r4, r5, d0
 8007080:	4e54      	ldr	r6, [pc, #336]	; (80071d4 <__ieee754_sqrt+0x15c>)
 8007082:	43ae      	bics	r6, r5
 8007084:	ee10 0a10 	vmov	r0, s0
 8007088:	462b      	mov	r3, r5
 800708a:	462a      	mov	r2, r5
 800708c:	4621      	mov	r1, r4
 800708e:	d113      	bne.n	80070b8 <__ieee754_sqrt+0x40>
 8007090:	ee10 2a10 	vmov	r2, s0
 8007094:	462b      	mov	r3, r5
 8007096:	ee10 0a10 	vmov	r0, s0
 800709a:	4629      	mov	r1, r5
 800709c:	f7f9 fad8 	bl	8000650 <__aeabi_dmul>
 80070a0:	4602      	mov	r2, r0
 80070a2:	460b      	mov	r3, r1
 80070a4:	4620      	mov	r0, r4
 80070a6:	4629      	mov	r1, r5
 80070a8:	f7f9 f920 	bl	80002ec <__adddf3>
 80070ac:	4604      	mov	r4, r0
 80070ae:	460d      	mov	r5, r1
 80070b0:	ec45 4b10 	vmov	d0, r4, r5
 80070b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070b8:	2d00      	cmp	r5, #0
 80070ba:	dc10      	bgt.n	80070de <__ieee754_sqrt+0x66>
 80070bc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80070c0:	4330      	orrs	r0, r6
 80070c2:	d0f5      	beq.n	80070b0 <__ieee754_sqrt+0x38>
 80070c4:	b15d      	cbz	r5, 80070de <__ieee754_sqrt+0x66>
 80070c6:	ee10 2a10 	vmov	r2, s0
 80070ca:	462b      	mov	r3, r5
 80070cc:	4620      	mov	r0, r4
 80070ce:	4629      	mov	r1, r5
 80070d0:	f7f9 f90a 	bl	80002e8 <__aeabi_dsub>
 80070d4:	4602      	mov	r2, r0
 80070d6:	460b      	mov	r3, r1
 80070d8:	f7f9 fbe4 	bl	80008a4 <__aeabi_ddiv>
 80070dc:	e7e6      	b.n	80070ac <__ieee754_sqrt+0x34>
 80070de:	151b      	asrs	r3, r3, #20
 80070e0:	d10c      	bne.n	80070fc <__ieee754_sqrt+0x84>
 80070e2:	2a00      	cmp	r2, #0
 80070e4:	d06d      	beq.n	80071c2 <__ieee754_sqrt+0x14a>
 80070e6:	2000      	movs	r0, #0
 80070e8:	02d6      	lsls	r6, r2, #11
 80070ea:	d56e      	bpl.n	80071ca <__ieee754_sqrt+0x152>
 80070ec:	1e44      	subs	r4, r0, #1
 80070ee:	1b1b      	subs	r3, r3, r4
 80070f0:	f1c0 0420 	rsb	r4, r0, #32
 80070f4:	fa21 f404 	lsr.w	r4, r1, r4
 80070f8:	4322      	orrs	r2, r4
 80070fa:	4081      	lsls	r1, r0
 80070fc:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007100:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8007104:	07dd      	lsls	r5, r3, #31
 8007106:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800710a:	bf42      	ittt	mi
 800710c:	0052      	lslmi	r2, r2, #1
 800710e:	eb02 72d1 	addmi.w	r2, r2, r1, lsr #31
 8007112:	0049      	lslmi	r1, r1, #1
 8007114:	1058      	asrs	r0, r3, #1
 8007116:	2500      	movs	r5, #0
 8007118:	eb02 73d1 	add.w	r3, r2, r1, lsr #31
 800711c:	441a      	add	r2, r3
 800711e:	0049      	lsls	r1, r1, #1
 8007120:	2316      	movs	r3, #22
 8007122:	462c      	mov	r4, r5
 8007124:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8007128:	19a7      	adds	r7, r4, r6
 800712a:	4297      	cmp	r7, r2
 800712c:	bfde      	ittt	le
 800712e:	1bd2      	suble	r2, r2, r7
 8007130:	19bc      	addle	r4, r7, r6
 8007132:	19ad      	addle	r5, r5, r6
 8007134:	0052      	lsls	r2, r2, #1
 8007136:	3b01      	subs	r3, #1
 8007138:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800713c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007140:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007144:	d1f0      	bne.n	8007128 <__ieee754_sqrt+0xb0>
 8007146:	f04f 0e20 	mov.w	lr, #32
 800714a:	469c      	mov	ip, r3
 800714c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8007150:	42a2      	cmp	r2, r4
 8007152:	eb06 070c 	add.w	r7, r6, ip
 8007156:	dc02      	bgt.n	800715e <__ieee754_sqrt+0xe6>
 8007158:	d112      	bne.n	8007180 <__ieee754_sqrt+0x108>
 800715a:	428f      	cmp	r7, r1
 800715c:	d810      	bhi.n	8007180 <__ieee754_sqrt+0x108>
 800715e:	2f00      	cmp	r7, #0
 8007160:	eb07 0c06 	add.w	ip, r7, r6
 8007164:	da34      	bge.n	80071d0 <__ieee754_sqrt+0x158>
 8007166:	f1bc 0f00 	cmp.w	ip, #0
 800716a:	db31      	blt.n	80071d0 <__ieee754_sqrt+0x158>
 800716c:	f104 0801 	add.w	r8, r4, #1
 8007170:	1b12      	subs	r2, r2, r4
 8007172:	428f      	cmp	r7, r1
 8007174:	bf88      	it	hi
 8007176:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800717a:	1bc9      	subs	r1, r1, r7
 800717c:	4433      	add	r3, r6
 800717e:	4644      	mov	r4, r8
 8007180:	eb02 77d1 	add.w	r7, r2, r1, lsr #31
 8007184:	f1be 0e01 	subs.w	lr, lr, #1
 8007188:	443a      	add	r2, r7
 800718a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800718e:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007192:	d1dd      	bne.n	8007150 <__ieee754_sqrt+0xd8>
 8007194:	430a      	orrs	r2, r1
 8007196:	d006      	beq.n	80071a6 <__ieee754_sqrt+0x12e>
 8007198:	1c5c      	adds	r4, r3, #1
 800719a:	bf13      	iteet	ne
 800719c:	3301      	addne	r3, #1
 800719e:	3501      	addeq	r5, #1
 80071a0:	4673      	moveq	r3, lr
 80071a2:	f023 0301 	bicne.w	r3, r3, #1
 80071a6:	106a      	asrs	r2, r5, #1
 80071a8:	085b      	lsrs	r3, r3, #1
 80071aa:	07e9      	lsls	r1, r5, #31
 80071ac:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80071b0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80071b4:	bf48      	it	mi
 80071b6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80071ba:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 80071be:	461c      	mov	r4, r3
 80071c0:	e776      	b.n	80070b0 <__ieee754_sqrt+0x38>
 80071c2:	0aca      	lsrs	r2, r1, #11
 80071c4:	3b15      	subs	r3, #21
 80071c6:	0549      	lsls	r1, r1, #21
 80071c8:	e78b      	b.n	80070e2 <__ieee754_sqrt+0x6a>
 80071ca:	0052      	lsls	r2, r2, #1
 80071cc:	3001      	adds	r0, #1
 80071ce:	e78b      	b.n	80070e8 <__ieee754_sqrt+0x70>
 80071d0:	46a0      	mov	r8, r4
 80071d2:	e7cd      	b.n	8007170 <__ieee754_sqrt+0xf8>
 80071d4:	7ff00000 	.word	0x7ff00000

080071d8 <__ieee754_acosf>:
 80071d8:	b508      	push	{r3, lr}
 80071da:	ee10 3a10 	vmov	r3, s0
 80071de:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80071e2:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 80071e6:	ed2d 8b0c 	vpush	{d8-d13}
 80071ea:	d10a      	bne.n	8007202 <__ieee754_acosf+0x2a>
 80071ec:	ed9f 8a67 	vldr	s16, [pc, #412]	; 800738c <__ieee754_acosf+0x1b4>
 80071f0:	ed9f 0a67 	vldr	s0, [pc, #412]	; 8007390 <__ieee754_acosf+0x1b8>
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	bfd8      	it	le
 80071f8:	eeb0 0a48 	vmovle.f32	s0, s16
 80071fc:	ecbd 8b0c 	vpop	{d8-d13}
 8007200:	bd08      	pop	{r3, pc}
 8007202:	dd04      	ble.n	800720e <__ieee754_acosf+0x36>
 8007204:	ee30 8a40 	vsub.f32	s16, s0, s0
 8007208:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800720c:	e7f6      	b.n	80071fc <__ieee754_acosf+0x24>
 800720e:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 8007212:	da3e      	bge.n	8007292 <__ieee754_acosf+0xba>
 8007214:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 8007218:	f340 80b5 	ble.w	8007386 <__ieee754_acosf+0x1ae>
 800721c:	ee60 7a00 	vmul.f32	s15, s0, s0
 8007220:	eddf 6a5c 	vldr	s13, [pc, #368]	; 8007394 <__ieee754_acosf+0x1bc>
 8007224:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8007398 <__ieee754_acosf+0x1c0>
 8007228:	ed9f 6a5c 	vldr	s12, [pc, #368]	; 800739c <__ieee754_acosf+0x1c4>
 800722c:	ed9f 8a5c 	vldr	s16, [pc, #368]	; 80073a0 <__ieee754_acosf+0x1c8>
 8007230:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8007234:	eddf 6a5b 	vldr	s13, [pc, #364]	; 80073a4 <__ieee754_acosf+0x1cc>
 8007238:	eee7 6a87 	vfma.f32	s13, s15, s14
 800723c:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 80073a8 <__ieee754_acosf+0x1d0>
 8007240:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8007244:	eddf 6a59 	vldr	s13, [pc, #356]	; 80073ac <__ieee754_acosf+0x1d4>
 8007248:	eee7 6a87 	vfma.f32	s13, s15, s14
 800724c:	ed9f 7a58 	vldr	s14, [pc, #352]	; 80073b0 <__ieee754_acosf+0x1d8>
 8007250:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8007254:	eddf 6a57 	vldr	s13, [pc, #348]	; 80073b4 <__ieee754_acosf+0x1dc>
 8007258:	eea7 6aa6 	vfma.f32	s12, s15, s13
 800725c:	eddf 6a56 	vldr	s13, [pc, #344]	; 80073b8 <__ieee754_acosf+0x1e0>
 8007260:	eee7 6a86 	vfma.f32	s13, s15, s12
 8007264:	ed9f 6a55 	vldr	s12, [pc, #340]	; 80073bc <__ieee754_acosf+0x1e4>
 8007268:	eea7 6aa6 	vfma.f32	s12, s15, s13
 800726c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007270:	eee7 6a86 	vfma.f32	s13, s15, s12
 8007274:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007278:	eef0 7a66 	vmov.f32	s15, s13
 800727c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8007280:	eea0 8a66 	vfms.f32	s16, s0, s13
 8007284:	ee30 8a48 	vsub.f32	s16, s0, s16
 8007288:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 80073c0 <__ieee754_acosf+0x1e8>
 800728c:	ee30 0a48 	vsub.f32	s0, s0, s16
 8007290:	e7b4      	b.n	80071fc <__ieee754_acosf+0x24>
 8007292:	2b00      	cmp	r3, #0
 8007294:	eddf da3f 	vldr	s27, [pc, #252]	; 8007394 <__ieee754_acosf+0x1bc>
 8007298:	eddf ca3f 	vldr	s25, [pc, #252]	; 8007398 <__ieee754_acosf+0x1c0>
 800729c:	ed9f ca41 	vldr	s24, [pc, #260]	; 80073a4 <__ieee754_acosf+0x1cc>
 80072a0:	eddf ba41 	vldr	s23, [pc, #260]	; 80073a8 <__ieee754_acosf+0x1d0>
 80072a4:	ed9f ba41 	vldr	s22, [pc, #260]	; 80073ac <__ieee754_acosf+0x1d4>
 80072a8:	eddf 8a41 	vldr	s17, [pc, #260]	; 80073b0 <__ieee754_acosf+0x1d8>
 80072ac:	ed9f da41 	vldr	s26, [pc, #260]	; 80073b4 <__ieee754_acosf+0x1dc>
 80072b0:	eddf aa3a 	vldr	s21, [pc, #232]	; 800739c <__ieee754_acosf+0x1c4>
 80072b4:	ed9f aa40 	vldr	s20, [pc, #256]	; 80073b8 <__ieee754_acosf+0x1e0>
 80072b8:	eddf 9a40 	vldr	s19, [pc, #256]	; 80073bc <__ieee754_acosf+0x1e4>
 80072bc:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 80072c0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80072c4:	da28      	bge.n	8007318 <__ieee754_acosf+0x140>
 80072c6:	ee30 0a09 	vadd.f32	s0, s0, s18
 80072ca:	ee20 0a27 	vmul.f32	s0, s0, s15
 80072ce:	eee0 ca2d 	vfma.f32	s25, s0, s27
 80072d2:	eee0 aa0d 	vfma.f32	s21, s0, s26
 80072d6:	eea0 ca2c 	vfma.f32	s24, s0, s25
 80072da:	eea0 aa2a 	vfma.f32	s20, s0, s21
 80072de:	eee0 ba0c 	vfma.f32	s23, s0, s24
 80072e2:	eee0 9a0a 	vfma.f32	s19, s0, s20
 80072e6:	eea0 ba2b 	vfma.f32	s22, s0, s23
 80072ea:	eea0 9a29 	vfma.f32	s18, s0, s19
 80072ee:	eee0 8a0b 	vfma.f32	s17, s0, s22
 80072f2:	ee68 8a80 	vmul.f32	s17, s17, s0
 80072f6:	f000 f86b 	bl	80073d0 <__ieee754_sqrtf>
 80072fa:	ee88 7a89 	vdiv.f32	s14, s17, s18
 80072fe:	eddf 7a31 	vldr	s15, [pc, #196]	; 80073c4 <__ieee754_acosf+0x1ec>
 8007302:	eee0 7a07 	vfma.f32	s15, s0, s14
 8007306:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800730a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800730e:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 80073c8 <__ieee754_acosf+0x1f0>
 8007312:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8007316:	e771      	b.n	80071fc <__ieee754_acosf+0x24>
 8007318:	ee39 8a40 	vsub.f32	s16, s18, s0
 800731c:	ee28 8a27 	vmul.f32	s16, s16, s15
 8007320:	eeb0 0a48 	vmov.f32	s0, s16
 8007324:	f000 f854 	bl	80073d0 <__ieee754_sqrtf>
 8007328:	eee8 ca2d 	vfma.f32	s25, s16, s27
 800732c:	eee8 aa0d 	vfma.f32	s21, s16, s26
 8007330:	eea8 ca2c 	vfma.f32	s24, s16, s25
 8007334:	eea8 aa2a 	vfma.f32	s20, s16, s21
 8007338:	eee8 ba0c 	vfma.f32	s23, s16, s24
 800733c:	ee10 3a10 	vmov	r3, s0
 8007340:	eea8 ba2b 	vfma.f32	s22, s16, s23
 8007344:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007348:	f023 030f 	bic.w	r3, r3, #15
 800734c:	eee8 9a0a 	vfma.f32	s19, s16, s20
 8007350:	ee07 3a90 	vmov	s15, r3
 8007354:	eee8 8a0b 	vfma.f32	s17, s16, s22
 8007358:	eeb0 6a48 	vmov.f32	s12, s16
 800735c:	eea7 6ae7 	vfms.f32	s12, s15, s15
 8007360:	eea8 9a29 	vfma.f32	s18, s16, s19
 8007364:	ee77 6a80 	vadd.f32	s13, s15, s0
 8007368:	ee68 8a88 	vmul.f32	s17, s17, s16
 800736c:	eeb0 7a40 	vmov.f32	s14, s0
 8007370:	ee86 0a26 	vdiv.f32	s0, s12, s13
 8007374:	eec8 6a89 	vdiv.f32	s13, s17, s18
 8007378:	eea7 0a26 	vfma.f32	s0, s14, s13
 800737c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007380:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007384:	e73a      	b.n	80071fc <__ieee754_acosf+0x24>
 8007386:	ed9f 0a11 	vldr	s0, [pc, #68]	; 80073cc <__ieee754_acosf+0x1f4>
 800738a:	e737      	b.n	80071fc <__ieee754_acosf+0x24>
 800738c:	40490fdb 	.word	0x40490fdb
 8007390:	00000000 	.word	0x00000000
 8007394:	3811ef08 	.word	0x3811ef08
 8007398:	3a4f7f04 	.word	0x3a4f7f04
 800739c:	bf303361 	.word	0xbf303361
 80073a0:	33a22168 	.word	0x33a22168
 80073a4:	bd241146 	.word	0xbd241146
 80073a8:	3e4e0aa8 	.word	0x3e4e0aa8
 80073ac:	bea6b090 	.word	0xbea6b090
 80073b0:	3e2aaaab 	.word	0x3e2aaaab
 80073b4:	3d9dc62e 	.word	0x3d9dc62e
 80073b8:	4001572d 	.word	0x4001572d
 80073bc:	c019d139 	.word	0xc019d139
 80073c0:	3fc90fda 	.word	0x3fc90fda
 80073c4:	b3a22168 	.word	0xb3a22168
 80073c8:	40490fda 	.word	0x40490fda
 80073cc:	3fc90fdb 	.word	0x3fc90fdb

080073d0 <__ieee754_sqrtf>:
 80073d0:	ee10 2a10 	vmov	r2, s0
 80073d4:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80073d8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80073dc:	b570      	push	{r4, r5, r6, lr}
 80073de:	d302      	bcc.n	80073e6 <__ieee754_sqrtf+0x16>
 80073e0:	eea0 0a00 	vfma.f32	s0, s0, s0
 80073e4:	bd70      	pop	{r4, r5, r6, pc}
 80073e6:	b3b1      	cbz	r1, 8007456 <__ieee754_sqrtf+0x86>
 80073e8:	2a00      	cmp	r2, #0
 80073ea:	da04      	bge.n	80073f6 <__ieee754_sqrtf+0x26>
 80073ec:	ee70 7a40 	vsub.f32	s15, s0, s0
 80073f0:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80073f4:	bd70      	pop	{r4, r5, r6, pc}
 80073f6:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80073fa:	ea4f 53e2 	mov.w	r3, r2, asr #23
 80073fe:	d204      	bcs.n	800740a <__ieee754_sqrtf+0x3a>
 8007400:	2100      	movs	r1, #0
 8007402:	0210      	lsls	r0, r2, #8
 8007404:	d528      	bpl.n	8007458 <__ieee754_sqrtf+0x88>
 8007406:	3901      	subs	r1, #1
 8007408:	1a5b      	subs	r3, r3, r1
 800740a:	3b7f      	subs	r3, #127	; 0x7f
 800740c:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8007410:	07d9      	lsls	r1, r3, #31
 8007412:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8007416:	bf48      	it	mi
 8007418:	0052      	lslmi	r2, r2, #1
 800741a:	1059      	asrs	r1, r3, #1
 800741c:	2300      	movs	r3, #0
 800741e:	0052      	lsls	r2, r2, #1
 8007420:	2419      	movs	r4, #25
 8007422:	461e      	mov	r6, r3
 8007424:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8007428:	1835      	adds	r5, r6, r0
 800742a:	4295      	cmp	r5, r2
 800742c:	bfde      	ittt	le
 800742e:	182e      	addle	r6, r5, r0
 8007430:	1b52      	suble	r2, r2, r5
 8007432:	181b      	addle	r3, r3, r0
 8007434:	3c01      	subs	r4, #1
 8007436:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800743a:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800743e:	d1f3      	bne.n	8007428 <__ieee754_sqrtf+0x58>
 8007440:	b112      	cbz	r2, 8007448 <__ieee754_sqrtf+0x78>
 8007442:	3301      	adds	r3, #1
 8007444:	f023 0301 	bic.w	r3, r3, #1
 8007448:	105b      	asrs	r3, r3, #1
 800744a:	f103 537c 	add.w	r3, r3, #1056964608	; 0x3f000000
 800744e:	eb03 53c1 	add.w	r3, r3, r1, lsl #23
 8007452:	ee00 3a10 	vmov	s0, r3
 8007456:	bd70      	pop	{r4, r5, r6, pc}
 8007458:	0052      	lsls	r2, r2, #1
 800745a:	3101      	adds	r1, #1
 800745c:	e7d1      	b.n	8007402 <__ieee754_sqrtf+0x32>

0800745e <fabs>:
 800745e:	ec53 2b10 	vmov	r2, r3, d0
 8007462:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007466:	ec43 2b10 	vmov	d0, r2, r3
 800746a:	4770      	bx	lr

0800746c <matherr>:
 800746c:	2000      	movs	r0, #0
 800746e:	4770      	bx	lr

08007470 <nan>:
 8007470:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007478 <nan+0x8>
 8007474:	4770      	bx	lr
 8007476:	bf00      	nop
 8007478:	00000000 	.word	0x00000000
 800747c:	7ff80000 	.word	0x7ff80000

08007480 <_init>:
 8007480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007482:	bf00      	nop
 8007484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007486:	bc08      	pop	{r3}
 8007488:	469e      	mov	lr, r3
 800748a:	4770      	bx	lr

0800748c <_fini>:
 800748c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800748e:	bf00      	nop
 8007490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007492:	bc08      	pop	{r3}
 8007494:	469e      	mov	lr, r3
 8007496:	4770      	bx	lr
