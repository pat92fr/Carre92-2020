
RM_stm32sw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007588  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000304  08007758  08007758  00017758  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007a5c  08007a5c  00017a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007a64  08007a64  00017a64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007a68  08007a68  00017a68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000002d4  20000000  08007a6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000964  200002d4  08007d40  000202d4  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000c38  08007d40  00020c38  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000202d4  2**0
                  CONTENTS, READONLY
 10 .debug_info   00024e04  00000000  00000000  00020304  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000405f  00000000  00000000  00045108  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000c193  00000000  00000000  00049167  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000ec0  00000000  00000000  00055300  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000014a0  00000000  00000000  000561c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00009985  00000000  00000000  00057660  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00005b07  00000000  00000000  00060fe5  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00066aec  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003b70  00000000  00000000  00066b68  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200002d4 	.word	0x200002d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007740 	.word	0x08007740

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200002d8 	.word	0x200002d8
 800020c:	08007740 	.word	0x08007740

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f092 0f00 	teq	r2, #0
 80005aa:	bf14      	ite	ne
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	4770      	bxeq	lr
 80005b2:	b530      	push	{r4, r5, lr}
 80005b4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c0:	e720      	b.n	8000404 <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_ul2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	e00a      	b.n	80005ea <__aeabi_l2d+0x16>

080005d4 <__aeabi_l2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005e2:	d502      	bpl.n	80005ea <__aeabi_l2d+0x16>
 80005e4:	4240      	negs	r0, r0
 80005e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f6:	f43f aedc 	beq.w	80003b2 <__adddf3+0xe6>
 80005fa:	f04f 0203 	mov.w	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000612:	f1c2 0320 	rsb	r3, r2, #32
 8000616:	fa00 fc03 	lsl.w	ip, r0, r3
 800061a:	fa20 f002 	lsr.w	r0, r0, r2
 800061e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000622:	ea40 000e 	orr.w	r0, r0, lr
 8000626:	fa21 f102 	lsr.w	r1, r1, r2
 800062a:	4414      	add	r4, r2
 800062c:	e6c1      	b.n	80003b2 <__adddf3+0xe6>
 800062e:	bf00      	nop

08000630 <__aeabi_dmul>:
 8000630:	b570      	push	{r4, r5, r6, lr}
 8000632:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000636:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800063a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063e:	bf1d      	ittte	ne
 8000640:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000644:	ea94 0f0c 	teqne	r4, ip
 8000648:	ea95 0f0c 	teqne	r5, ip
 800064c:	f000 f8de 	bleq	800080c <__aeabi_dmul+0x1dc>
 8000650:	442c      	add	r4, r5
 8000652:	ea81 0603 	eor.w	r6, r1, r3
 8000656:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800065a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000662:	bf18      	it	ne
 8000664:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000668:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800066c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000670:	d038      	beq.n	80006e4 <__aeabi_dmul+0xb4>
 8000672:	fba0 ce02 	umull	ip, lr, r0, r2
 8000676:	f04f 0500 	mov.w	r5, #0
 800067a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000682:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000686:	f04f 0600 	mov.w	r6, #0
 800068a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068e:	f09c 0f00 	teq	ip, #0
 8000692:	bf18      	it	ne
 8000694:	f04e 0e01 	orrne.w	lr, lr, #1
 8000698:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800069c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006a4:	d204      	bcs.n	80006b0 <__aeabi_dmul+0x80>
 80006a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006aa:	416d      	adcs	r5, r5
 80006ac:	eb46 0606 	adc.w	r6, r6, r6
 80006b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c8:	bf88      	it	hi
 80006ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ce:	d81e      	bhi.n	800070e <__aeabi_dmul+0xde>
 80006d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006d4:	bf08      	it	eq
 80006d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006da:	f150 0000 	adcs.w	r0, r0, #0
 80006de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e8:	ea46 0101 	orr.w	r1, r6, r1
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f8:	bfc2      	ittt	gt
 80006fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000702:	bd70      	popgt	{r4, r5, r6, pc}
 8000704:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000708:	f04f 0e00 	mov.w	lr, #0
 800070c:	3c01      	subs	r4, #1
 800070e:	f300 80ab 	bgt.w	8000868 <__aeabi_dmul+0x238>
 8000712:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000716:	bfde      	ittt	le
 8000718:	2000      	movle	r0, #0
 800071a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd70      	pople	{r4, r5, r6, pc}
 8000720:	f1c4 0400 	rsb	r4, r4, #0
 8000724:	3c20      	subs	r4, #32
 8000726:	da35      	bge.n	8000794 <__aeabi_dmul+0x164>
 8000728:	340c      	adds	r4, #12
 800072a:	dc1b      	bgt.n	8000764 <__aeabi_dmul+0x134>
 800072c:	f104 0414 	add.w	r4, r4, #20
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f305 	lsl.w	r3, r0, r5
 8000738:	fa20 f004 	lsr.w	r0, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000748:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800074c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000750:	fa21 f604 	lsr.w	r6, r1, r4
 8000754:	eb42 0106 	adc.w	r1, r2, r6
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 040c 	rsb	r4, r4, #12
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f304 	lsl.w	r3, r0, r4
 8000770:	fa20 f005 	lsr.w	r0, r0, r5
 8000774:	fa01 f204 	lsl.w	r2, r1, r4
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000784:	f141 0100 	adc.w	r1, r1, #0
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f1c4 0520 	rsb	r5, r4, #32
 8000798:	fa00 f205 	lsl.w	r2, r0, r5
 800079c:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a0:	fa20 f304 	lsr.w	r3, r0, r4
 80007a4:	fa01 f205 	lsl.w	r2, r1, r5
 80007a8:	ea43 0302 	orr.w	r3, r3, r2
 80007ac:	fa21 f004 	lsr.w	r0, r1, r4
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	fa21 f204 	lsr.w	r2, r1, r4
 80007b8:	ea20 0002 	bic.w	r0, r0, r2
 80007bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f094 0f00 	teq	r4, #0
 80007d0:	d10f      	bne.n	80007f2 <__aeabi_dmul+0x1c2>
 80007d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007d6:	0040      	lsls	r0, r0, #1
 80007d8:	eb41 0101 	adc.w	r1, r1, r1
 80007dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3c01      	subeq	r4, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1a6>
 80007e6:	ea41 0106 	orr.w	r1, r1, r6
 80007ea:	f095 0f00 	teq	r5, #0
 80007ee:	bf18      	it	ne
 80007f0:	4770      	bxne	lr
 80007f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007f6:	0052      	lsls	r2, r2, #1
 80007f8:	eb43 0303 	adc.w	r3, r3, r3
 80007fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000800:	bf08      	it	eq
 8000802:	3d01      	subeq	r5, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1c6>
 8000806:	ea43 0306 	orr.w	r3, r3, r6
 800080a:	4770      	bx	lr
 800080c:	ea94 0f0c 	teq	r4, ip
 8000810:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000814:	bf18      	it	ne
 8000816:	ea95 0f0c 	teqne	r5, ip
 800081a:	d00c      	beq.n	8000836 <__aeabi_dmul+0x206>
 800081c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000820:	bf18      	it	ne
 8000822:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000826:	d1d1      	bne.n	80007cc <__aeabi_dmul+0x19c>
 8000828:	ea81 0103 	eor.w	r1, r1, r3
 800082c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000830:	f04f 0000 	mov.w	r0, #0
 8000834:	bd70      	pop	{r4, r5, r6, pc}
 8000836:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083a:	bf06      	itte	eq
 800083c:	4610      	moveq	r0, r2
 800083e:	4619      	moveq	r1, r3
 8000840:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000844:	d019      	beq.n	800087a <__aeabi_dmul+0x24a>
 8000846:	ea94 0f0c 	teq	r4, ip
 800084a:	d102      	bne.n	8000852 <__aeabi_dmul+0x222>
 800084c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000850:	d113      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000852:	ea95 0f0c 	teq	r5, ip
 8000856:	d105      	bne.n	8000864 <__aeabi_dmul+0x234>
 8000858:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800085c:	bf1c      	itt	ne
 800085e:	4610      	movne	r0, r2
 8000860:	4619      	movne	r1, r3
 8000862:	d10a      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000864:	ea81 0103 	eor.w	r1, r1, r3
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800086c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000870:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	bd70      	pop	{r4, r5, r6, pc}
 800087a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000882:	bd70      	pop	{r4, r5, r6, pc}

08000884 <__aeabi_ddiv>:
 8000884:	b570      	push	{r4, r5, r6, lr}
 8000886:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800088a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800088e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000892:	bf1d      	ittte	ne
 8000894:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000898:	ea94 0f0c 	teqne	r4, ip
 800089c:	ea95 0f0c 	teqne	r5, ip
 80008a0:	f000 f8a7 	bleq	80009f2 <__aeabi_ddiv+0x16e>
 80008a4:	eba4 0405 	sub.w	r4, r4, r5
 80008a8:	ea81 0e03 	eor.w	lr, r1, r3
 80008ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b4:	f000 8088 	beq.w	80009c8 <__aeabi_ddiv+0x144>
 80008b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008bc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008dc:	429d      	cmp	r5, r3
 80008de:	bf08      	it	eq
 80008e0:	4296      	cmpeq	r6, r2
 80008e2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008e6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ea:	d202      	bcs.n	80008f2 <__aeabi_ddiv+0x6e>
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f2:	1ab6      	subs	r6, r6, r2
 80008f4:	eb65 0503 	sbc.w	r5, r5, r3
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000902:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 000c 	orrcs.w	r0, r0, ip
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000960:	ea55 0e06 	orrs.w	lr, r5, r6
 8000964:	d018      	beq.n	8000998 <__aeabi_ddiv+0x114>
 8000966:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800096a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000972:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000976:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800097a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000982:	d1c0      	bne.n	8000906 <__aeabi_ddiv+0x82>
 8000984:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000988:	d10b      	bne.n	80009a2 <__aeabi_ddiv+0x11e>
 800098a:	ea41 0100 	orr.w	r1, r1, r0
 800098e:	f04f 0000 	mov.w	r0, #0
 8000992:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000996:	e7b6      	b.n	8000906 <__aeabi_ddiv+0x82>
 8000998:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800099c:	bf04      	itt	eq
 800099e:	4301      	orreq	r1, r0
 80009a0:	2000      	moveq	r0, #0
 80009a2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009a6:	bf88      	it	hi
 80009a8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009ac:	f63f aeaf 	bhi.w	800070e <__aeabi_dmul+0xde>
 80009b0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b4:	bf04      	itt	eq
 80009b6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009be:	f150 0000 	adcs.w	r0, r0, #0
 80009c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	pop	{r4, r5, r6, pc}
 80009c8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d4:	bfc2      	ittt	gt
 80009d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009de:	bd70      	popgt	{r4, r5, r6, pc}
 80009e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e4:	f04f 0e00 	mov.w	lr, #0
 80009e8:	3c01      	subs	r4, #1
 80009ea:	e690      	b.n	800070e <__aeabi_dmul+0xde>
 80009ec:	ea45 0e06 	orr.w	lr, r5, r6
 80009f0:	e68d      	b.n	800070e <__aeabi_dmul+0xde>
 80009f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f6:	ea94 0f0c 	teq	r4, ip
 80009fa:	bf08      	it	eq
 80009fc:	ea95 0f0c 	teqeq	r5, ip
 8000a00:	f43f af3b 	beq.w	800087a <__aeabi_dmul+0x24a>
 8000a04:	ea94 0f0c 	teq	r4, ip
 8000a08:	d10a      	bne.n	8000a20 <__aeabi_ddiv+0x19c>
 8000a0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0e:	f47f af34 	bne.w	800087a <__aeabi_dmul+0x24a>
 8000a12:	ea95 0f0c 	teq	r5, ip
 8000a16:	f47f af25 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	e72c      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a20:	ea95 0f0c 	teq	r5, ip
 8000a24:	d106      	bne.n	8000a34 <__aeabi_ddiv+0x1b0>
 8000a26:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a2a:	f43f aefd 	beq.w	8000828 <__aeabi_dmul+0x1f8>
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4619      	mov	r1, r3
 8000a32:	e722      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3e:	f47f aec5 	bne.w	80007cc <__aeabi_dmul+0x19c>
 8000a42:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a46:	f47f af0d 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a4a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4e:	f47f aeeb 	bne.w	8000828 <__aeabi_dmul+0x1f8>
 8000a52:	e712      	b.n	800087a <__aeabi_dmul+0x24a>

08000a54 <__gedf2>:
 8000a54:	f04f 3cff 	mov.w	ip, #4294967295
 8000a58:	e006      	b.n	8000a68 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__ledf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	e002      	b.n	8000a68 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__cmpdf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a78:	bf18      	it	ne
 8000a7a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a7e:	d01b      	beq.n	8000ab8 <__cmpdf2+0x54>
 8000a80:	b001      	add	sp, #4
 8000a82:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a86:	bf0c      	ite	eq
 8000a88:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a8c:	ea91 0f03 	teqne	r1, r3
 8000a90:	bf02      	ittt	eq
 8000a92:	ea90 0f02 	teqeq	r0, r2
 8000a96:	2000      	moveq	r0, #0
 8000a98:	4770      	bxeq	lr
 8000a9a:	f110 0f00 	cmn.w	r0, #0
 8000a9e:	ea91 0f03 	teq	r1, r3
 8000aa2:	bf58      	it	pl
 8000aa4:	4299      	cmppl	r1, r3
 8000aa6:	bf08      	it	eq
 8000aa8:	4290      	cmpeq	r0, r2
 8000aaa:	bf2c      	ite	cs
 8000aac:	17d8      	asrcs	r0, r3, #31
 8000aae:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ab2:	f040 0001 	orr.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000abc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac0:	d102      	bne.n	8000ac8 <__cmpdf2+0x64>
 8000ac2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac6:	d107      	bne.n	8000ad8 <__cmpdf2+0x74>
 8000ac8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d1d6      	bne.n	8000a80 <__cmpdf2+0x1c>
 8000ad2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad6:	d0d3      	beq.n	8000a80 <__cmpdf2+0x1c>
 8000ad8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop

08000ae0 <__aeabi_cdrcmple>:
 8000ae0:	4684      	mov	ip, r0
 8000ae2:	4610      	mov	r0, r2
 8000ae4:	4662      	mov	r2, ip
 8000ae6:	468c      	mov	ip, r1
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4663      	mov	r3, ip
 8000aec:	e000      	b.n	8000af0 <__aeabi_cdcmpeq>
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdcmpeq>:
 8000af0:	b501      	push	{r0, lr}
 8000af2:	f7ff ffb7 	bl	8000a64 <__cmpdf2>
 8000af6:	2800      	cmp	r0, #0
 8000af8:	bf48      	it	mi
 8000afa:	f110 0f00 	cmnmi.w	r0, #0
 8000afe:	bd01      	pop	{r0, pc}

08000b00 <__aeabi_dcmpeq>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff fff4 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b08:	bf0c      	ite	eq
 8000b0a:	2001      	moveq	r0, #1
 8000b0c:	2000      	movne	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmplt>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffea 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b1c:	bf34      	ite	cc
 8000b1e:	2001      	movcc	r0, #1
 8000b20:	2000      	movcs	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmple>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffe0 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b30:	bf94      	ite	ls
 8000b32:	2001      	movls	r0, #1
 8000b34:	2000      	movhi	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpge>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffce 	bl	8000ae0 <__aeabi_cdrcmple>
 8000b44:	bf94      	ite	ls
 8000b46:	2001      	movls	r0, #1
 8000b48:	2000      	movhi	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmpgt>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffc4 	bl	8000ae0 <__aeabi_cdrcmple>
 8000b58:	bf34      	ite	cc
 8000b5a:	2001      	movcc	r0, #1
 8000b5c:	2000      	movcs	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpun>:
 8000b64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b6c:	d102      	bne.n	8000b74 <__aeabi_dcmpun+0x10>
 8000b6e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b72:	d10a      	bne.n	8000b8a <__aeabi_dcmpun+0x26>
 8000b74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x20>
 8000b7e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b82:	d102      	bne.n	8000b8a <__aeabi_dcmpun+0x26>
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	f04f 0001 	mov.w	r0, #1
 8000b8e:	4770      	bx	lr

08000b90 <__aeabi_d2iz>:
 8000b90:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b94:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b98:	d215      	bcs.n	8000bc6 <__aeabi_d2iz+0x36>
 8000b9a:	d511      	bpl.n	8000bc0 <__aeabi_d2iz+0x30>
 8000b9c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba4:	d912      	bls.n	8000bcc <__aeabi_d2iz+0x3c>
 8000ba6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000baa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bae:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bb2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bb6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bba:	bf18      	it	ne
 8000bbc:	4240      	negne	r0, r0
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bca:	d105      	bne.n	8000bd8 <__aeabi_d2iz+0x48>
 8000bcc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd0:	bf08      	it	eq
 8000bd2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop

08000be0 <__aeabi_d2f>:
 8000be0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000be4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be8:	bf24      	itt	cs
 8000bea:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bee:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bf2:	d90d      	bls.n	8000c10 <__aeabi_d2f+0x30>
 8000bf4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bfc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c00:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c04:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c08:	bf08      	it	eq
 8000c0a:	f020 0001 	biceq.w	r0, r0, #1
 8000c0e:	4770      	bx	lr
 8000c10:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c14:	d121      	bne.n	8000c5a <__aeabi_d2f+0x7a>
 8000c16:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c1a:	bfbc      	itt	lt
 8000c1c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c20:	4770      	bxlt	lr
 8000c22:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c26:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c2a:	f1c2 0218 	rsb	r2, r2, #24
 8000c2e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c32:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c36:	fa20 f002 	lsr.w	r0, r0, r2
 8000c3a:	bf18      	it	ne
 8000c3c:	f040 0001 	orrne.w	r0, r0, #1
 8000c40:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c44:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c48:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c4c:	ea40 000c 	orr.w	r0, r0, ip
 8000c50:	fa23 f302 	lsr.w	r3, r3, r2
 8000c54:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c58:	e7cc      	b.n	8000bf4 <__aeabi_d2f+0x14>
 8000c5a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c5e:	d107      	bne.n	8000c70 <__aeabi_d2f+0x90>
 8000c60:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c64:	bf1e      	ittt	ne
 8000c66:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c6a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c6e:	4770      	bxne	lr
 8000c70:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c74:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c78:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop

08000c80 <__aeabi_uldivmod>:
 8000c80:	b953      	cbnz	r3, 8000c98 <__aeabi_uldivmod+0x18>
 8000c82:	b94a      	cbnz	r2, 8000c98 <__aeabi_uldivmod+0x18>
 8000c84:	2900      	cmp	r1, #0
 8000c86:	bf08      	it	eq
 8000c88:	2800      	cmpeq	r0, #0
 8000c8a:	bf1c      	itt	ne
 8000c8c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c90:	f04f 30ff 	movne.w	r0, #4294967295
 8000c94:	f000 b97a 	b.w	8000f8c <__aeabi_idiv0>
 8000c98:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c9c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca0:	f000 f806 	bl	8000cb0 <__udivmoddi4>
 8000ca4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cac:	b004      	add	sp, #16
 8000cae:	4770      	bx	lr

08000cb0 <__udivmoddi4>:
 8000cb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cb4:	468c      	mov	ip, r1
 8000cb6:	460d      	mov	r5, r1
 8000cb8:	4604      	mov	r4, r0
 8000cba:	9e08      	ldr	r6, [sp, #32]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d151      	bne.n	8000d64 <__udivmoddi4+0xb4>
 8000cc0:	428a      	cmp	r2, r1
 8000cc2:	4617      	mov	r7, r2
 8000cc4:	d96d      	bls.n	8000da2 <__udivmoddi4+0xf2>
 8000cc6:	fab2 fe82 	clz	lr, r2
 8000cca:	f1be 0f00 	cmp.w	lr, #0
 8000cce:	d00b      	beq.n	8000ce8 <__udivmoddi4+0x38>
 8000cd0:	f1ce 0c20 	rsb	ip, lr, #32
 8000cd4:	fa01 f50e 	lsl.w	r5, r1, lr
 8000cd8:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000cdc:	fa02 f70e 	lsl.w	r7, r2, lr
 8000ce0:	ea4c 0c05 	orr.w	ip, ip, r5
 8000ce4:	fa00 f40e 	lsl.w	r4, r0, lr
 8000ce8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000cec:	0c25      	lsrs	r5, r4, #16
 8000cee:	fbbc f8fa 	udiv	r8, ip, sl
 8000cf2:	fa1f f987 	uxth.w	r9, r7
 8000cf6:	fb0a cc18 	mls	ip, sl, r8, ip
 8000cfa:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000cfe:	fb08 f309 	mul.w	r3, r8, r9
 8000d02:	42ab      	cmp	r3, r5
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x6c>
 8000d06:	19ed      	adds	r5, r5, r7
 8000d08:	f108 32ff 	add.w	r2, r8, #4294967295
 8000d0c:	f080 8123 	bcs.w	8000f56 <__udivmoddi4+0x2a6>
 8000d10:	42ab      	cmp	r3, r5
 8000d12:	f240 8120 	bls.w	8000f56 <__udivmoddi4+0x2a6>
 8000d16:	f1a8 0802 	sub.w	r8, r8, #2
 8000d1a:	443d      	add	r5, r7
 8000d1c:	1aed      	subs	r5, r5, r3
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb5 f0fa 	udiv	r0, r5, sl
 8000d24:	fb0a 5510 	mls	r5, sl, r0, r5
 8000d28:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d2c:	fb00 f909 	mul.w	r9, r0, r9
 8000d30:	45a1      	cmp	r9, r4
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x98>
 8000d34:	19e4      	adds	r4, r4, r7
 8000d36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3a:	f080 810a 	bcs.w	8000f52 <__udivmoddi4+0x2a2>
 8000d3e:	45a1      	cmp	r9, r4
 8000d40:	f240 8107 	bls.w	8000f52 <__udivmoddi4+0x2a2>
 8000d44:	3802      	subs	r0, #2
 8000d46:	443c      	add	r4, r7
 8000d48:	eba4 0409 	sub.w	r4, r4, r9
 8000d4c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d50:	2100      	movs	r1, #0
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d061      	beq.n	8000e1a <__udivmoddi4+0x16a>
 8000d56:	fa24 f40e 	lsr.w	r4, r4, lr
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	6034      	str	r4, [r6, #0]
 8000d5e:	6073      	str	r3, [r6, #4]
 8000d60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d64:	428b      	cmp	r3, r1
 8000d66:	d907      	bls.n	8000d78 <__udivmoddi4+0xc8>
 8000d68:	2e00      	cmp	r6, #0
 8000d6a:	d054      	beq.n	8000e16 <__udivmoddi4+0x166>
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000d72:	4608      	mov	r0, r1
 8000d74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d78:	fab3 f183 	clz	r1, r3
 8000d7c:	2900      	cmp	r1, #0
 8000d7e:	f040 808e 	bne.w	8000e9e <__udivmoddi4+0x1ee>
 8000d82:	42ab      	cmp	r3, r5
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xdc>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80fa 	bhi.w	8000f80 <__udivmoddi4+0x2d0>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb65 0503 	sbc.w	r5, r5, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	46ac      	mov	ip, r5
 8000d96:	2e00      	cmp	r6, #0
 8000d98:	d03f      	beq.n	8000e1a <__udivmoddi4+0x16a>
 8000d9a:	e886 1010 	stmia.w	r6, {r4, ip}
 8000d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da2:	b912      	cbnz	r2, 8000daa <__udivmoddi4+0xfa>
 8000da4:	2701      	movs	r7, #1
 8000da6:	fbb7 f7f2 	udiv	r7, r7, r2
 8000daa:	fab7 fe87 	clz	lr, r7
 8000dae:	f1be 0f00 	cmp.w	lr, #0
 8000db2:	d134      	bne.n	8000e1e <__udivmoddi4+0x16e>
 8000db4:	1beb      	subs	r3, r5, r7
 8000db6:	0c3a      	lsrs	r2, r7, #16
 8000db8:	fa1f fc87 	uxth.w	ip, r7
 8000dbc:	2101      	movs	r1, #1
 8000dbe:	fbb3 f8f2 	udiv	r8, r3, r2
 8000dc2:	0c25      	lsrs	r5, r4, #16
 8000dc4:	fb02 3318 	mls	r3, r2, r8, r3
 8000dc8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000dcc:	fb0c f308 	mul.w	r3, ip, r8
 8000dd0:	42ab      	cmp	r3, r5
 8000dd2:	d907      	bls.n	8000de4 <__udivmoddi4+0x134>
 8000dd4:	19ed      	adds	r5, r5, r7
 8000dd6:	f108 30ff 	add.w	r0, r8, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x132>
 8000ddc:	42ab      	cmp	r3, r5
 8000dde:	f200 80d1 	bhi.w	8000f84 <__udivmoddi4+0x2d4>
 8000de2:	4680      	mov	r8, r0
 8000de4:	1aed      	subs	r5, r5, r3
 8000de6:	b2a3      	uxth	r3, r4
 8000de8:	fbb5 f0f2 	udiv	r0, r5, r2
 8000dec:	fb02 5510 	mls	r5, r2, r0, r5
 8000df0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000df4:	fb0c fc00 	mul.w	ip, ip, r0
 8000df8:	45a4      	cmp	ip, r4
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x15c>
 8000dfc:	19e4      	adds	r4, r4, r7
 8000dfe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x15a>
 8000e04:	45a4      	cmp	ip, r4
 8000e06:	f200 80b8 	bhi.w	8000f7a <__udivmoddi4+0x2ca>
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	eba4 040c 	sub.w	r4, r4, ip
 8000e10:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e14:	e79d      	b.n	8000d52 <__udivmoddi4+0xa2>
 8000e16:	4631      	mov	r1, r6
 8000e18:	4630      	mov	r0, r6
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	f1ce 0420 	rsb	r4, lr, #32
 8000e22:	fa05 f30e 	lsl.w	r3, r5, lr
 8000e26:	fa07 f70e 	lsl.w	r7, r7, lr
 8000e2a:	fa20 f804 	lsr.w	r8, r0, r4
 8000e2e:	0c3a      	lsrs	r2, r7, #16
 8000e30:	fa25 f404 	lsr.w	r4, r5, r4
 8000e34:	ea48 0803 	orr.w	r8, r8, r3
 8000e38:	fbb4 f1f2 	udiv	r1, r4, r2
 8000e3c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000e40:	fb02 4411 	mls	r4, r2, r1, r4
 8000e44:	fa1f fc87 	uxth.w	ip, r7
 8000e48:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000e4c:	fb01 f30c 	mul.w	r3, r1, ip
 8000e50:	42ab      	cmp	r3, r5
 8000e52:	fa00 f40e 	lsl.w	r4, r0, lr
 8000e56:	d909      	bls.n	8000e6c <__udivmoddi4+0x1bc>
 8000e58:	19ed      	adds	r5, r5, r7
 8000e5a:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e5e:	f080 808a 	bcs.w	8000f76 <__udivmoddi4+0x2c6>
 8000e62:	42ab      	cmp	r3, r5
 8000e64:	f240 8087 	bls.w	8000f76 <__udivmoddi4+0x2c6>
 8000e68:	3902      	subs	r1, #2
 8000e6a:	443d      	add	r5, r7
 8000e6c:	1aeb      	subs	r3, r5, r3
 8000e6e:	fa1f f588 	uxth.w	r5, r8
 8000e72:	fbb3 f0f2 	udiv	r0, r3, r2
 8000e76:	fb02 3310 	mls	r3, r2, r0, r3
 8000e7a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000e7e:	fb00 f30c 	mul.w	r3, r0, ip
 8000e82:	42ab      	cmp	r3, r5
 8000e84:	d907      	bls.n	8000e96 <__udivmoddi4+0x1e6>
 8000e86:	19ed      	adds	r5, r5, r7
 8000e88:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e8c:	d26f      	bcs.n	8000f6e <__udivmoddi4+0x2be>
 8000e8e:	42ab      	cmp	r3, r5
 8000e90:	d96d      	bls.n	8000f6e <__udivmoddi4+0x2be>
 8000e92:	3802      	subs	r0, #2
 8000e94:	443d      	add	r5, r7
 8000e96:	1aeb      	subs	r3, r5, r3
 8000e98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e9c:	e78f      	b.n	8000dbe <__udivmoddi4+0x10e>
 8000e9e:	f1c1 0720 	rsb	r7, r1, #32
 8000ea2:	fa22 f807 	lsr.w	r8, r2, r7
 8000ea6:	408b      	lsls	r3, r1
 8000ea8:	fa05 f401 	lsl.w	r4, r5, r1
 8000eac:	ea48 0303 	orr.w	r3, r8, r3
 8000eb0:	fa20 fe07 	lsr.w	lr, r0, r7
 8000eb4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	ea4e 0e04 	orr.w	lr, lr, r4
 8000ebe:	fbb5 f9fc 	udiv	r9, r5, ip
 8000ec2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000ec6:	fb0c 5519 	mls	r5, ip, r9, r5
 8000eca:	fa1f f883 	uxth.w	r8, r3
 8000ece:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000ed2:	fb09 f408 	mul.w	r4, r9, r8
 8000ed6:	42ac      	cmp	r4, r5
 8000ed8:	fa02 f201 	lsl.w	r2, r2, r1
 8000edc:	fa00 fa01 	lsl.w	sl, r0, r1
 8000ee0:	d908      	bls.n	8000ef4 <__udivmoddi4+0x244>
 8000ee2:	18ed      	adds	r5, r5, r3
 8000ee4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ee8:	d243      	bcs.n	8000f72 <__udivmoddi4+0x2c2>
 8000eea:	42ac      	cmp	r4, r5
 8000eec:	d941      	bls.n	8000f72 <__udivmoddi4+0x2c2>
 8000eee:	f1a9 0902 	sub.w	r9, r9, #2
 8000ef2:	441d      	add	r5, r3
 8000ef4:	1b2d      	subs	r5, r5, r4
 8000ef6:	fa1f fe8e 	uxth.w	lr, lr
 8000efa:	fbb5 f0fc 	udiv	r0, r5, ip
 8000efe:	fb0c 5510 	mls	r5, ip, r0, r5
 8000f02:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000f06:	fb00 f808 	mul.w	r8, r0, r8
 8000f0a:	45a0      	cmp	r8, r4
 8000f0c:	d907      	bls.n	8000f1e <__udivmoddi4+0x26e>
 8000f0e:	18e4      	adds	r4, r4, r3
 8000f10:	f100 35ff 	add.w	r5, r0, #4294967295
 8000f14:	d229      	bcs.n	8000f6a <__udivmoddi4+0x2ba>
 8000f16:	45a0      	cmp	r8, r4
 8000f18:	d927      	bls.n	8000f6a <__udivmoddi4+0x2ba>
 8000f1a:	3802      	subs	r0, #2
 8000f1c:	441c      	add	r4, r3
 8000f1e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f22:	eba4 0408 	sub.w	r4, r4, r8
 8000f26:	fba0 8902 	umull	r8, r9, r0, r2
 8000f2a:	454c      	cmp	r4, r9
 8000f2c:	46c6      	mov	lr, r8
 8000f2e:	464d      	mov	r5, r9
 8000f30:	d315      	bcc.n	8000f5e <__udivmoddi4+0x2ae>
 8000f32:	d012      	beq.n	8000f5a <__udivmoddi4+0x2aa>
 8000f34:	b156      	cbz	r6, 8000f4c <__udivmoddi4+0x29c>
 8000f36:	ebba 030e 	subs.w	r3, sl, lr
 8000f3a:	eb64 0405 	sbc.w	r4, r4, r5
 8000f3e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f42:	40cb      	lsrs	r3, r1
 8000f44:	431f      	orrs	r7, r3
 8000f46:	40cc      	lsrs	r4, r1
 8000f48:	6037      	str	r7, [r6, #0]
 8000f4a:	6074      	str	r4, [r6, #4]
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f52:	4618      	mov	r0, r3
 8000f54:	e6f8      	b.n	8000d48 <__udivmoddi4+0x98>
 8000f56:	4690      	mov	r8, r2
 8000f58:	e6e0      	b.n	8000d1c <__udivmoddi4+0x6c>
 8000f5a:	45c2      	cmp	sl, r8
 8000f5c:	d2ea      	bcs.n	8000f34 <__udivmoddi4+0x284>
 8000f5e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f62:	eb69 0503 	sbc.w	r5, r9, r3
 8000f66:	3801      	subs	r0, #1
 8000f68:	e7e4      	b.n	8000f34 <__udivmoddi4+0x284>
 8000f6a:	4628      	mov	r0, r5
 8000f6c:	e7d7      	b.n	8000f1e <__udivmoddi4+0x26e>
 8000f6e:	4640      	mov	r0, r8
 8000f70:	e791      	b.n	8000e96 <__udivmoddi4+0x1e6>
 8000f72:	4681      	mov	r9, r0
 8000f74:	e7be      	b.n	8000ef4 <__udivmoddi4+0x244>
 8000f76:	4601      	mov	r1, r0
 8000f78:	e778      	b.n	8000e6c <__udivmoddi4+0x1bc>
 8000f7a:	3802      	subs	r0, #2
 8000f7c:	443c      	add	r4, r7
 8000f7e:	e745      	b.n	8000e0c <__udivmoddi4+0x15c>
 8000f80:	4608      	mov	r0, r1
 8000f82:	e708      	b.n	8000d96 <__udivmoddi4+0xe6>
 8000f84:	f1a8 0802 	sub.w	r8, r8, #2
 8000f88:	443d      	add	r5, r7
 8000f8a:	e72b      	b.n	8000de4 <__udivmoddi4+0x134>

08000f8c <__aeabi_idiv0>:
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop

08000f90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f90:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f92:	4a0e      	ldr	r2, [pc, #56]	; (8000fcc <HAL_InitTick+0x3c>)
 8000f94:	4b0e      	ldr	r3, [pc, #56]	; (8000fd0 <HAL_InitTick+0x40>)
{
 8000f96:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f98:	7818      	ldrb	r0, [r3, #0]
 8000f9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f9e:	fbb3 f3f0 	udiv	r3, r3, r0
 8000fa2:	6810      	ldr	r0, [r2, #0]
 8000fa4:	fbb0 f0f3 	udiv	r0, r0, r3
 8000fa8:	f000 f8a8 	bl	80010fc <HAL_SYSTICK_Config>
 8000fac:	4604      	mov	r4, r0
 8000fae:	b958      	cbnz	r0, 8000fc8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fb0:	2d0f      	cmp	r5, #15
 8000fb2:	d809      	bhi.n	8000fc8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	4629      	mov	r1, r5
 8000fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fbc:	f000 f85e 	bl	800107c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fc0:	4b04      	ldr	r3, [pc, #16]	; (8000fd4 <HAL_InitTick+0x44>)
 8000fc2:	4620      	mov	r0, r4
 8000fc4:	601d      	str	r5, [r3, #0]
 8000fc6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000fc8:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000fca:	bd38      	pop	{r3, r4, r5, pc}
 8000fcc:	200000fc 	.word	0x200000fc
 8000fd0:	20000000 	.word	0x20000000
 8000fd4:	20000004 	.word	0x20000004

08000fd8 <HAL_Init>:
{
 8000fd8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fda:	4b0b      	ldr	r3, [pc, #44]	; (8001008 <HAL_Init+0x30>)
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000fe2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000fea:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000ff2:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ff4:	2003      	movs	r0, #3
 8000ff6:	f000 f82f 	bl	8001058 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ffa:	2000      	movs	r0, #0
 8000ffc:	f7ff ffc8 	bl	8000f90 <HAL_InitTick>
  HAL_MspInit();
 8001000:	f002 ffc6 	bl	8003f90 <HAL_MspInit>
}
 8001004:	2000      	movs	r0, #0
 8001006:	bd08      	pop	{r3, pc}
 8001008:	40023c00 	.word	0x40023c00

0800100c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800100c:	4a03      	ldr	r2, [pc, #12]	; (800101c <HAL_IncTick+0x10>)
 800100e:	4b04      	ldr	r3, [pc, #16]	; (8001020 <HAL_IncTick+0x14>)
 8001010:	6811      	ldr	r1, [r2, #0]
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	440b      	add	r3, r1
 8001016:	6013      	str	r3, [r2, #0]
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	2000030c 	.word	0x2000030c
 8001020:	20000000 	.word	0x20000000

08001024 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001024:	4b01      	ldr	r3, [pc, #4]	; (800102c <HAL_GetTick+0x8>)
 8001026:	6818      	ldr	r0, [r3, #0]
}
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	2000030c 	.word	0x2000030c

08001030 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001030:	b538      	push	{r3, r4, r5, lr}
 8001032:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001034:	f7ff fff6 	bl	8001024 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001038:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800103a:	bf1c      	itt	ne
 800103c:	4b05      	ldrne	r3, [pc, #20]	; (8001054 <HAL_Delay+0x24>)
 800103e:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8001040:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8001042:	bf18      	it	ne
 8001044:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001046:	f7ff ffed 	bl	8001024 <HAL_GetTick>
 800104a:	1b40      	subs	r0, r0, r5
 800104c:	4284      	cmp	r4, r0
 800104e:	d8fa      	bhi.n	8001046 <HAL_Delay+0x16>
  {
  }
}
 8001050:	bd38      	pop	{r3, r4, r5, pc}
 8001052:	bf00      	nop
 8001054:	20000000 	.word	0x20000000

08001058 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001058:	4a07      	ldr	r2, [pc, #28]	; (8001078 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800105a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800105c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001060:	041b      	lsls	r3, r3, #16
 8001062:	0c1b      	lsrs	r3, r3, #16
 8001064:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001068:	0200      	lsls	r0, r0, #8
 800106a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800106e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8001072:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001074:	60d3      	str	r3, [r2, #12]
 8001076:	4770      	bx	lr
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800107c:	4b17      	ldr	r3, [pc, #92]	; (80010dc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800107e:	b530      	push	{r4, r5, lr}
 8001080:	68dc      	ldr	r4, [r3, #12]
 8001082:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001086:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800108a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800108c:	2b04      	cmp	r3, #4
 800108e:	bf28      	it	cs
 8001090:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001092:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001094:	f04f 0501 	mov.w	r5, #1
 8001098:	fa05 f303 	lsl.w	r3, r5, r3
 800109c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010a0:	bf8c      	ite	hi
 80010a2:	3c03      	subhi	r4, #3
 80010a4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a6:	4019      	ands	r1, r3
 80010a8:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010aa:	fa05 f404 	lsl.w	r4, r5, r4
 80010ae:	3c01      	subs	r4, #1
 80010b0:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80010b2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b4:	ea42 0201 	orr.w	r2, r2, r1
 80010b8:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010bc:	bfaf      	iteee	ge
 80010be:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c2:	f000 000f 	andlt.w	r0, r0, #15
 80010c6:	4b06      	ldrlt	r3, [pc, #24]	; (80010e0 <HAL_NVIC_SetPriority+0x64>)
 80010c8:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ca:	bfa5      	ittet	ge
 80010cc:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80010d0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80010d8:	bd30      	pop	{r4, r5, pc}
 80010da:	bf00      	nop
 80010dc:	e000ed00 	.word	0xe000ed00
 80010e0:	e000ed14 	.word	0xe000ed14

080010e4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80010e4:	0942      	lsrs	r2, r0, #5
 80010e6:	2301      	movs	r3, #1
 80010e8:	f000 001f 	and.w	r0, r0, #31
 80010ec:	fa03 f000 	lsl.w	r0, r3, r0
 80010f0:	4b01      	ldr	r3, [pc, #4]	; (80010f8 <HAL_NVIC_EnableIRQ+0x14>)
 80010f2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80010f6:	4770      	bx	lr
 80010f8:	e000e100 	.word	0xe000e100

080010fc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010fc:	3801      	subs	r0, #1
 80010fe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001102:	d20a      	bcs.n	800111a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001104:	4b06      	ldr	r3, [pc, #24]	; (8001120 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001106:	4a07      	ldr	r2, [pc, #28]	; (8001124 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001108:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800110a:	21f0      	movs	r1, #240	; 0xf0
 800110c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001110:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001112:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001114:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800111a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	e000e010 	.word	0xe000e010
 8001124:	e000ed00 	.word	0xe000ed00

08001128 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001128:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800112c:	2b02      	cmp	r3, #2
 800112e:	d003      	beq.n	8001138 <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001130:	2380      	movs	r3, #128	; 0x80
 8001132:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8001134:	2001      	movs	r0, #1
 8001136:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001138:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 800113a:	2305      	movs	r3, #5
 800113c:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8001140:	6813      	ldr	r3, [r2, #0]
 8001142:	f023 0301 	bic.w	r3, r3, #1
 8001146:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8001148:	2000      	movs	r0, #0
}
 800114a:	4770      	bx	lr

0800114c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800114c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001150:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001152:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001154:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80012f8 <HAL_GPIO_Init+0x1ac>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001158:	4a65      	ldr	r2, [pc, #404]	; (80012f0 <HAL_GPIO_Init+0x1a4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800115a:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 80012fc <HAL_GPIO_Init+0x1b0>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800115e:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001160:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8001162:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001166:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8001168:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800116c:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8001170:	45b6      	cmp	lr, r6
 8001172:	f040 80aa 	bne.w	80012ca <HAL_GPIO_Init+0x17e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001176:	684c      	ldr	r4, [r1, #4]
 8001178:	f024 0710 	bic.w	r7, r4, #16
 800117c:	2f02      	cmp	r7, #2
 800117e:	d116      	bne.n	80011ae <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8001180:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8001184:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001188:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 800118c:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001190:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001194:	f04f 0c0f 	mov.w	ip, #15
 8001198:	fa0c fc0b 	lsl.w	ip, ip, fp
 800119c:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011a0:	690d      	ldr	r5, [r1, #16]
 80011a2:	fa05 f50b 	lsl.w	r5, r5, fp
 80011a6:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 80011aa:	f8ca 5020 	str.w	r5, [sl, #32]
 80011ae:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011b2:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80011b4:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011b8:	fa05 f50a 	lsl.w	r5, r5, sl
 80011bc:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011be:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011c2:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011c6:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011ca:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011cc:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011d0:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80011d2:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011d6:	d811      	bhi.n	80011fc <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 80011d8:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011da:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011de:	68cf      	ldr	r7, [r1, #12]
 80011e0:	fa07 fc0a 	lsl.w	ip, r7, sl
 80011e4:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 80011e8:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80011ea:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011ec:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80011f0:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80011f4:	409f      	lsls	r7, r3
 80011f6:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80011fa:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80011fc:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011fe:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001200:	688f      	ldr	r7, [r1, #8]
 8001202:	fa07 f70a 	lsl.w	r7, r7, sl
 8001206:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8001208:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800120a:	00e5      	lsls	r5, r4, #3
 800120c:	d55d      	bpl.n	80012ca <HAL_GPIO_Init+0x17e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800120e:	f04f 0b00 	mov.w	fp, #0
 8001212:	f8cd b00c 	str.w	fp, [sp, #12]
 8001216:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800121a:	4d36      	ldr	r5, [pc, #216]	; (80012f4 <HAL_GPIO_Init+0x1a8>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800121c:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8001220:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8001224:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8001228:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 800122c:	9703      	str	r7, [sp, #12]
 800122e:	9f03      	ldr	r7, [sp, #12]
 8001230:	f023 0703 	bic.w	r7, r3, #3
 8001234:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001238:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800123c:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8001240:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001244:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001248:	f04f 0e0f 	mov.w	lr, #15
 800124c:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001250:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001252:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001256:	d03f      	beq.n	80012d8 <HAL_GPIO_Init+0x18c>
 8001258:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800125c:	42a8      	cmp	r0, r5
 800125e:	d03d      	beq.n	80012dc <HAL_GPIO_Init+0x190>
 8001260:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001264:	42a8      	cmp	r0, r5
 8001266:	d03b      	beq.n	80012e0 <HAL_GPIO_Init+0x194>
 8001268:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800126c:	42a8      	cmp	r0, r5
 800126e:	d039      	beq.n	80012e4 <HAL_GPIO_Init+0x198>
 8001270:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001274:	42a8      	cmp	r0, r5
 8001276:	d037      	beq.n	80012e8 <HAL_GPIO_Init+0x19c>
 8001278:	4548      	cmp	r0, r9
 800127a:	d037      	beq.n	80012ec <HAL_GPIO_Init+0x1a0>
 800127c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001280:	42a8      	cmp	r0, r5
 8001282:	bf14      	ite	ne
 8001284:	2507      	movne	r5, #7
 8001286:	2506      	moveq	r5, #6
 8001288:	fa05 f50c 	lsl.w	r5, r5, ip
 800128c:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001290:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8001292:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001294:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001296:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 800129a:	bf0c      	ite	eq
 800129c:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800129e:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 80012a0:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 80012a2:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012a4:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80012a8:	bf0c      	ite	eq
 80012aa:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80012ac:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 80012ae:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012b0:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012b2:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80012b6:	bf0c      	ite	eq
 80012b8:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80012ba:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 80012bc:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 80012be:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012c0:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80012c2:	bf54      	ite	pl
 80012c4:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 80012c6:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 80012c8:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012ca:	3301      	adds	r3, #1
 80012cc:	2b10      	cmp	r3, #16
 80012ce:	f47f af48 	bne.w	8001162 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80012d2:	b005      	add	sp, #20
 80012d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012d8:	465d      	mov	r5, fp
 80012da:	e7d5      	b.n	8001288 <HAL_GPIO_Init+0x13c>
 80012dc:	2501      	movs	r5, #1
 80012de:	e7d3      	b.n	8001288 <HAL_GPIO_Init+0x13c>
 80012e0:	2502      	movs	r5, #2
 80012e2:	e7d1      	b.n	8001288 <HAL_GPIO_Init+0x13c>
 80012e4:	2503      	movs	r5, #3
 80012e6:	e7cf      	b.n	8001288 <HAL_GPIO_Init+0x13c>
 80012e8:	2504      	movs	r5, #4
 80012ea:	e7cd      	b.n	8001288 <HAL_GPIO_Init+0x13c>
 80012ec:	2505      	movs	r5, #5
 80012ee:	e7cb      	b.n	8001288 <HAL_GPIO_Init+0x13c>
 80012f0:	40013c00 	.word	0x40013c00
 80012f4:	40020000 	.word	0x40020000
 80012f8:	40023800 	.word	0x40023800
 80012fc:	40021400 	.word	0x40021400

08001300 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001300:	6903      	ldr	r3, [r0, #16]
 8001302:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001304:	bf14      	ite	ne
 8001306:	2001      	movne	r0, #1
 8001308:	2000      	moveq	r0, #0
 800130a:	4770      	bx	lr

0800130c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800130c:	b10a      	cbz	r2, 8001312 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800130e:	6181      	str	r1, [r0, #24]
 8001310:	4770      	bx	lr
 8001312:	0409      	lsls	r1, r1, #16
 8001314:	e7fb      	b.n	800130e <HAL_GPIO_WritePin+0x2>

08001316 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8001316:	6943      	ldr	r3, [r0, #20]
 8001318:	4059      	eors	r1, r3
 800131a:	6141      	str	r1, [r0, #20]
 800131c:	4770      	bx	lr
	...

08001320 <HAL_I2C_Init>:
  * @param  hi2c pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001320:	b570      	push	{r4, r5, r6, lr}
  uint32_t freqrange = 0U;
  uint32_t pclk1 = 0U;

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8001322:	4604      	mov	r4, r0
 8001324:	2800      	cmp	r0, #0
 8001326:	d062      	beq.n	80013ee <HAL_I2C_Init+0xce>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8001328:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800132c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001330:	b91b      	cbnz	r3, 800133a <HAL_I2C_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001332:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001336:	f002 fe47 	bl	8003fc8 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800133a:	6822      	ldr	r2, [r4, #0]
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800133c:	4e2d      	ldr	r6, [pc, #180]	; (80013f4 <HAL_I2C_Init+0xd4>)
  freqrange = I2C_FREQRANGE(pclk1);
 800133e:	4d2e      	ldr	r5, [pc, #184]	; (80013f8 <HAL_I2C_Init+0xd8>)
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001340:	2324      	movs	r3, #36	; 0x24
 8001342:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001346:	6813      	ldr	r3, [r2, #0]
 8001348:	f023 0301 	bic.w	r3, r3, #1
 800134c:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800134e:	f000 f92b 	bl	80015a8 <HAL_RCC_GetPCLK1Freq>
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001352:	6863      	ldr	r3, [r4, #4]
  hi2c->Instance->CR2 = freqrange;
 8001354:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8001356:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800135a:	42b3      	cmp	r3, r6
 800135c:	bf84      	itt	hi
 800135e:	f44f 7196 	movhi.w	r1, #300	; 0x12c
 8001362:	4369      	mulhi	r1, r5
  hi2c->Instance->CR2 = freqrange;
 8001364:	6055      	str	r5, [r2, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001366:	bf91      	iteee	ls
 8001368:	1c69      	addls	r1, r5, #1
 800136a:	f44f 757a 	movhi.w	r5, #1000	; 0x3e8
 800136e:	fbb1 f1f5 	udivhi	r1, r1, r5
 8001372:	3101      	addhi	r1, #1

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001374:	42b3      	cmp	r3, r6
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001376:	6211      	str	r1, [r2, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001378:	d821      	bhi.n	80013be <HAL_I2C_Init+0x9e>
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001380:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8001384:	2b03      	cmp	r3, #3
 8001386:	bf98      	it	ls
 8001388:	2004      	movls	r0, #4

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800138a:	6a21      	ldr	r1, [r4, #32]
 800138c:	69e3      	ldr	r3, [r4, #28]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 800138e:	61d0      	str	r0, [r2, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001390:	430b      	orrs	r3, r1
 8001392:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8001394:	68e1      	ldr	r1, [r4, #12]
 8001396:	6923      	ldr	r3, [r4, #16]
 8001398:	430b      	orrs	r3, r1
 800139a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 800139c:	69a1      	ldr	r1, [r4, #24]
 800139e:	6963      	ldr	r3, [r4, #20]
 80013a0:	430b      	orrs	r3, r1
 80013a2:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80013a4:	6813      	ldr	r3, [r2, #0]
 80013a6:	f043 0301 	orr.w	r3, r3, #1
 80013aa:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013ac:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 80013ae:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013b0:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80013b2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80013b6:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80013b8:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e

  return HAL_OK;
 80013bc:	bd70      	pop	{r4, r5, r6, pc}
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80013be:	68a1      	ldr	r1, [r4, #8]
 80013c0:	b949      	cbnz	r1, 80013d6 <HAL_I2C_Init+0xb6>
 80013c2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80013c6:	fbb0 f0f3 	udiv	r0, r0, r3
 80013ca:	f3c0 030b 	ubfx	r3, r0, #0, #12
 80013ce:	b163      	cbz	r3, 80013ea <HAL_I2C_Init+0xca>
 80013d0:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 80013d4:	e7d9      	b.n	800138a <HAL_I2C_Init+0x6a>
 80013d6:	2119      	movs	r1, #25
 80013d8:	434b      	muls	r3, r1
 80013da:	fbb0 f0f3 	udiv	r0, r0, r3
 80013de:	f3c0 030b 	ubfx	r3, r0, #0, #12
 80013e2:	b113      	cbz	r3, 80013ea <HAL_I2C_Init+0xca>
 80013e4:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 80013e8:	e7cf      	b.n	800138a <HAL_I2C_Init+0x6a>
 80013ea:	2001      	movs	r0, #1
 80013ec:	e7cd      	b.n	800138a <HAL_I2C_Init+0x6a>
    return HAL_ERROR;
 80013ee:	2001      	movs	r0, #1
}
 80013f0:	bd70      	pop	{r4, r5, r6, pc}
 80013f2:	bf00      	nop
 80013f4:	000186a0 	.word	0x000186a0
 80013f8:	000f4240 	.word	0x000f4240

080013fc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80013fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	9301      	str	r3, [sp, #4]
 8001402:	4b18      	ldr	r3, [pc, #96]	; (8001464 <HAL_PWREx_EnableOverDrive+0x68>)
  __HAL_PWR_OVERDRIVE_ENABLE();

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001404:	4c18      	ldr	r4, [pc, #96]	; (8001468 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001406:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001408:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800140c:	641a      	str	r2, [r3, #64]	; 0x40
 800140e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001410:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001414:	9301      	str	r3, [sp, #4]
 8001416:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001418:	4b14      	ldr	r3, [pc, #80]	; (800146c <HAL_PWREx_EnableOverDrive+0x70>)
 800141a:	2201      	movs	r2, #1
 800141c:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 800141e:	f7ff fe01 	bl	8001024 <HAL_GetTick>
 8001422:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001424:	6863      	ldr	r3, [r4, #4]
 8001426:	03da      	lsls	r2, r3, #15
 8001428:	d50b      	bpl.n	8001442 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800142a:	4b11      	ldr	r3, [pc, #68]	; (8001470 <HAL_PWREx_EnableOverDrive+0x74>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800142c:	4c0e      	ldr	r4, [pc, #56]	; (8001468 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800142e:	2201      	movs	r2, #1
 8001430:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8001432:	f7ff fdf7 	bl	8001024 <HAL_GetTick>
 8001436:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001438:	6863      	ldr	r3, [r4, #4]
 800143a:	039b      	lsls	r3, r3, #14
 800143c:	d50a      	bpl.n	8001454 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 800143e:	2000      	movs	r0, #0
 8001440:	e006      	b.n	8001450 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001442:	f7ff fdef 	bl	8001024 <HAL_GetTick>
 8001446:	1b40      	subs	r0, r0, r5
 8001448:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800144c:	d9ea      	bls.n	8001424 <HAL_PWREx_EnableOverDrive+0x28>
      return HAL_TIMEOUT;
 800144e:	2003      	movs	r0, #3
}
 8001450:	b003      	add	sp, #12
 8001452:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001454:	f7ff fde6 	bl	8001024 <HAL_GetTick>
 8001458:	1b40      	subs	r0, r0, r5
 800145a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800145e:	d9eb      	bls.n	8001438 <HAL_PWREx_EnableOverDrive+0x3c>
 8001460:	e7f5      	b.n	800144e <HAL_PWREx_EnableOverDrive+0x52>
 8001462:	bf00      	nop
 8001464:	40023800 	.word	0x40023800
 8001468:	40007000 	.word	0x40007000
 800146c:	420e0040 	.word	0x420e0040
 8001470:	420e0044 	.word	0x420e0044

08001474 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001478:	460d      	mov	r5, r1
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800147a:	4604      	mov	r4, r0
 800147c:	b910      	cbnz	r0, 8001484 <HAL_RCC_ClockConfig+0x10>
  {
    return HAL_ERROR;
 800147e:	2001      	movs	r0, #1
 8001480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001484:	4b44      	ldr	r3, [pc, #272]	; (8001598 <HAL_RCC_ClockConfig+0x124>)
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	f002 020f 	and.w	r2, r2, #15
 800148c:	428a      	cmp	r2, r1
 800148e:	d328      	bcc.n	80014e2 <HAL_RCC_ClockConfig+0x6e>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001490:	6821      	ldr	r1, [r4, #0]
 8001492:	078f      	lsls	r7, r1, #30
 8001494:	d42d      	bmi.n	80014f2 <HAL_RCC_ClockConfig+0x7e>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001496:	07c8      	lsls	r0, r1, #31
 8001498:	d440      	bmi.n	800151c <HAL_RCC_ClockConfig+0xa8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800149a:	4b3f      	ldr	r3, [pc, #252]	; (8001598 <HAL_RCC_ClockConfig+0x124>)
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	f002 020f 	and.w	r2, r2, #15
 80014a2:	4295      	cmp	r5, r2
 80014a4:	d366      	bcc.n	8001574 <HAL_RCC_ClockConfig+0x100>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014a6:	6822      	ldr	r2, [r4, #0]
 80014a8:	0751      	lsls	r1, r2, #29
 80014aa:	d46c      	bmi.n	8001586 <HAL_RCC_ClockConfig+0x112>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014ac:	0713      	lsls	r3, r2, #28
 80014ae:	d507      	bpl.n	80014c0 <HAL_RCC_ClockConfig+0x4c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80014b0:	4a3a      	ldr	r2, [pc, #232]	; (800159c <HAL_RCC_ClockConfig+0x128>)
 80014b2:	6921      	ldr	r1, [r4, #16]
 80014b4:	6893      	ldr	r3, [r2, #8]
 80014b6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80014ba:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80014be:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80014c0:	f000 fa9a 	bl	80019f8 <HAL_RCC_GetSysClockFreq>
 80014c4:	4b35      	ldr	r3, [pc, #212]	; (800159c <HAL_RCC_ClockConfig+0x128>)
 80014c6:	4a36      	ldr	r2, [pc, #216]	; (80015a0 <HAL_RCC_ClockConfig+0x12c>)
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80014ce:	5cd3      	ldrb	r3, [r2, r3]
 80014d0:	40d8      	lsrs	r0, r3
 80014d2:	4b34      	ldr	r3, [pc, #208]	; (80015a4 <HAL_RCC_ClockConfig+0x130>)
 80014d4:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80014d6:	2000      	movs	r0, #0
 80014d8:	f7ff fd5a 	bl	8000f90 <HAL_InitTick>

  return HAL_OK;
 80014dc:	2000      	movs	r0, #0
 80014de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014e2:	b2ca      	uxtb	r2, r1
 80014e4:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f003 030f 	and.w	r3, r3, #15
 80014ec:	4299      	cmp	r1, r3
 80014ee:	d1c6      	bne.n	800147e <HAL_RCC_ClockConfig+0xa>
 80014f0:	e7ce      	b.n	8001490 <HAL_RCC_ClockConfig+0x1c>
 80014f2:	4b2a      	ldr	r3, [pc, #168]	; (800159c <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014f4:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014f8:	bf1e      	ittt	ne
 80014fa:	689a      	ldrne	r2, [r3, #8]
 80014fc:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8001500:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001502:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001504:	bf42      	ittt	mi
 8001506:	689a      	ldrmi	r2, [r3, #8]
 8001508:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 800150c:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800150e:	689a      	ldr	r2, [r3, #8]
 8001510:	68a0      	ldr	r0, [r4, #8]
 8001512:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001516:	4302      	orrs	r2, r0
 8001518:	609a      	str	r2, [r3, #8]
 800151a:	e7bc      	b.n	8001496 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800151c:	6862      	ldr	r2, [r4, #4]
 800151e:	4b1f      	ldr	r3, [pc, #124]	; (800159c <HAL_RCC_ClockConfig+0x128>)
 8001520:	2a01      	cmp	r2, #1
 8001522:	d11d      	bne.n	8001560 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800152a:	d0a8      	beq.n	800147e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800152c:	4e1b      	ldr	r6, [pc, #108]	; (800159c <HAL_RCC_ClockConfig+0x128>)
 800152e:	68b3      	ldr	r3, [r6, #8]
 8001530:	f023 0303 	bic.w	r3, r3, #3
 8001534:	4313      	orrs	r3, r2
 8001536:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001538:	f7ff fd74 	bl	8001024 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800153c:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001540:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001542:	68b3      	ldr	r3, [r6, #8]
 8001544:	6862      	ldr	r2, [r4, #4]
 8001546:	f003 030c 	and.w	r3, r3, #12
 800154a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800154e:	d0a4      	beq.n	800149a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001550:	f7ff fd68 	bl	8001024 <HAL_GetTick>
 8001554:	1bc0      	subs	r0, r0, r7
 8001556:	4540      	cmp	r0, r8
 8001558:	d9f3      	bls.n	8001542 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 800155a:	2003      	movs	r0, #3
}
 800155c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001560:	1e91      	subs	r1, r2, #2
 8001562:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001564:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001566:	d802      	bhi.n	800156e <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001568:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800156c:	e7dd      	b.n	800152a <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800156e:	f013 0f02 	tst.w	r3, #2
 8001572:	e7da      	b.n	800152a <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001574:	b2ea      	uxtb	r2, r5
 8001576:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 030f 	and.w	r3, r3, #15
 800157e:	429d      	cmp	r5, r3
 8001580:	f47f af7d 	bne.w	800147e <HAL_RCC_ClockConfig+0xa>
 8001584:	e78f      	b.n	80014a6 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001586:	4905      	ldr	r1, [pc, #20]	; (800159c <HAL_RCC_ClockConfig+0x128>)
 8001588:	68e0      	ldr	r0, [r4, #12]
 800158a:	688b      	ldr	r3, [r1, #8]
 800158c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001590:	4303      	orrs	r3, r0
 8001592:	608b      	str	r3, [r1, #8]
 8001594:	e78a      	b.n	80014ac <HAL_RCC_ClockConfig+0x38>
 8001596:	bf00      	nop
 8001598:	40023c00 	.word	0x40023c00
 800159c:	40023800 	.word	0x40023800
 80015a0:	080077b2 	.word	0x080077b2
 80015a4:	200000fc 	.word	0x200000fc

080015a8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80015a8:	4b04      	ldr	r3, [pc, #16]	; (80015bc <HAL_RCC_GetPCLK1Freq+0x14>)
 80015aa:	4a05      	ldr	r2, [pc, #20]	; (80015c0 <HAL_RCC_GetPCLK1Freq+0x18>)
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80015b2:	5cd3      	ldrb	r3, [r2, r3]
 80015b4:	4a03      	ldr	r2, [pc, #12]	; (80015c4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80015b6:	6810      	ldr	r0, [r2, #0]
}
 80015b8:	40d8      	lsrs	r0, r3
 80015ba:	4770      	bx	lr
 80015bc:	40023800 	.word	0x40023800
 80015c0:	080077c2 	.word	0x080077c2
 80015c4:	200000fc 	.word	0x200000fc

080015c8 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80015c8:	4b04      	ldr	r3, [pc, #16]	; (80015dc <HAL_RCC_GetPCLK2Freq+0x14>)
 80015ca:	4a05      	ldr	r2, [pc, #20]	; (80015e0 <HAL_RCC_GetPCLK2Freq+0x18>)
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80015d2:	5cd3      	ldrb	r3, [r2, r3]
 80015d4:	4a03      	ldr	r2, [pc, #12]	; (80015e4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80015d6:	6810      	ldr	r0, [r2, #0]
}
 80015d8:	40d8      	lsrs	r0, r3
 80015da:	4770      	bx	lr
 80015dc:	40023800 	.word	0x40023800
 80015e0:	080077c2 	.word	0x080077c2
 80015e4:	200000fc 	.word	0x200000fc

080015e8 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80015e8:	6803      	ldr	r3, [r0, #0]
{
 80015ea:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80015ee:	f013 0601 	ands.w	r6, r3, #1
{
 80015f2:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80015f4:	d00b      	beq.n	800160e <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80015f6:	49aa      	ldr	r1, [pc, #680]	; (80018a0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80015f8:	6b86      	ldr	r6, [r0, #56]	; 0x38
 80015fa:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 80015fe:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8001602:	4332      	orrs	r2, r6
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8001604:	fab6 f686 	clz	r6, r6
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001608:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800160c:	0976      	lsrs	r6, r6, #5
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800160e:	079d      	lsls	r5, r3, #30
 8001610:	d50b      	bpl.n	800162a <HAL_RCCEx_PeriphCLKConfig+0x42>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8001612:	48a3      	ldr	r0, [pc, #652]	; (80018a0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8001614:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001616:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 800161a:	f022 52c0 	bic.w	r2, r2, #402653184	; 0x18000000
 800161e:	430a      	orrs	r2, r1
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
    {
      plli2sused = 1U;
 8001620:	2900      	cmp	r1, #0
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8001622:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
      plli2sused = 1U;
 8001626:	bf08      	it	eq
 8001628:	2601      	moveq	r6, #1
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800162a:	f013 0504 	ands.w	r5, r3, #4
 800162e:	d012      	beq.n	8001656 <HAL_RCCEx_PeriphCLKConfig+0x6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001630:	499b      	ldr	r1, [pc, #620]	; (80018a0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8001632:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8001634:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001638:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800163c:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001640:	ea42 0205 	orr.w	r2, r2, r5
    {
      plli2sused = 1U;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001644:	bf18      	it	ne
 8001646:	fab5 f585 	clzne	r5, r5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800164a:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800164e:	bf12      	itee	ne
 8001650:	096d      	lsrne	r5, r5, #5
  uint32_t pllsaiused = 0U;
 8001652:	2500      	moveq	r5, #0
      plli2sused = 1U;
 8001654:	2601      	moveq	r6, #1
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001656:	0718      	lsls	r0, r3, #28
 8001658:	d50f      	bpl.n	800167a <HAL_RCCEx_PeriphCLKConfig+0x92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800165a:	4891      	ldr	r0, [pc, #580]	; (80018a0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800165c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800165e:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8001662:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8001666:	430a      	orrs	r2, r1

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001668:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800166c:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001670:	f000 8109 	beq.w	8001886 <HAL_RCCEx_PeriphCLKConfig+0x29e>
      plli2sused = 1U;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1U;
 8001674:	2900      	cmp	r1, #0
 8001676:	bf08      	it	eq
 8001678:	2501      	moveq	r5, #1
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800167a:	0699      	lsls	r1, r3, #26
 800167c:	d533      	bpl.n	80016e6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	9301      	str	r3, [sp, #4]
 8001682:	4b87      	ldr	r3, [pc, #540]	; (80018a0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001684:	4f87      	ldr	r7, [pc, #540]	; (80018a4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8001686:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001688:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800168c:	641a      	str	r2, [r3, #64]	; 0x40
 800168e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001690:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001694:	9301      	str	r3, [sp, #4]
 8001696:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800169e:	603b      	str	r3, [r7, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80016a0:	f7ff fcc0 	bl	8001024 <HAL_GetTick>
 80016a4:	4680      	mov	r8, r0

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	05da      	lsls	r2, r3, #23
 80016aa:	f140 80ee 	bpl.w	800188a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
      {
        return HAL_TIMEOUT;
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80016ae:	4f7c      	ldr	r7, [pc, #496]	; (80018a0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80016b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80016b2:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80016b6:	f040 80fb 	bne.w	80018b0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80016ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80016bc:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80016c0:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80016c4:	4a76      	ldr	r2, [pc, #472]	; (80018a0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80016c6:	f040 8116 	bne.w	80018f6 <HAL_RCCEx_PeriphCLKConfig+0x30e>
 80016ca:	6891      	ldr	r1, [r2, #8]
 80016cc:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 80016d0:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80016d4:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 80016d8:	4301      	orrs	r1, r0
 80016da:	6091      	str	r1, [r2, #8]
 80016dc:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80016de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016e2:	430b      	orrs	r3, r1
 80016e4:	6713      	str	r3, [r2, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80016e6:	6823      	ldr	r3, [r4, #0]
 80016e8:	06d9      	lsls	r1, r3, #27
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80016ea:	bf42      	ittt	mi
 80016ec:	4b6e      	ldrmi	r3, [pc, #440]	; (80018a8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80016ee:	f894 2058 	ldrbmi.w	r2, [r4, #88]	; 0x58
 80016f2:	601a      	strmi	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80016f4:	6823      	ldr	r3, [r4, #0]
 80016f6:	061a      	lsls	r2, r3, #24
 80016f8:	d508      	bpl.n	800170c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80016fa:	4969      	ldr	r1, [pc, #420]	; (80018a0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80016fc:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80016fe:	f8d1 2094 	ldr.w	r2, [r1, #148]	; 0x94
 8001702:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8001706:	4302      	orrs	r2, r0
 8001708:	f8c1 2094 	str.w	r2, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800170c:	065f      	lsls	r7, r3, #25
 800170e:	d508      	bpl.n	8001722 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001710:	4963      	ldr	r1, [pc, #396]	; (80018a0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8001712:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8001714:	f8d1 2094 	ldr.w	r2, [r1, #148]	; 0x94
 8001718:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800171c:	4302      	orrs	r2, r0
 800171e:	f8c1 2094 	str.w	r2, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001722:	05d8      	lsls	r0, r3, #23
 8001724:	d50c      	bpl.n	8001740 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001726:	485e      	ldr	r0, [pc, #376]	; (80018a0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8001728:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800172a:	f8d0 2094 	ldr.w	r2, [r0, #148]	; 0x94
 800172e:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
 8001732:	430a      	orrs	r2, r1

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
    {
      pllsaiused = 1U;
 8001734:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001738:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
      pllsaiused = 1U;
 800173c:	bf08      	it	eq
 800173e:	2501      	moveq	r5, #1
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8001740:	0599      	lsls	r1, r3, #22
 8001742:	d508      	bpl.n	8001756 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8001744:	4956      	ldr	r1, [pc, #344]	; (80018a0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8001746:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8001748:	f8d1 2094 	ldr.w	r2, [r1, #148]	; 0x94
 800174c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001750:	4302      	orrs	r2, r0
 8001752:	f8c1 2094 	str.w	r2, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001756:	055a      	lsls	r2, r3, #21
 8001758:	f100 80d1 	bmi.w	80018fe <HAL_RCCEx_PeriphCLKConfig+0x316>
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800175c:	2e01      	cmp	r6, #1
 800175e:	f040 80dc 	bne.w	800191a <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001762:	4e52      	ldr	r6, [pc, #328]	; (80018ac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
    /* Get tick */
    tickstart = HAL_GetTick();
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001764:	4f4e      	ldr	r7, [pc, #312]	; (80018a0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
    __HAL_RCC_PLLI2S_DISABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800176a:	f7ff fc5b 	bl	8001024 <HAL_GetTick>
 800176e:	4680      	mov	r8, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	011b      	lsls	r3, r3, #4
 8001774:	f100 8125 	bmi.w	80019c2 <HAL_RCCEx_PeriphCLKConfig+0x3da>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001778:	6822      	ldr	r2, [r4, #0]
 800177a:	07d0      	lsls	r0, r2, #31
 800177c:	d501      	bpl.n	8001782 <HAL_RCCEx_PeriphCLKConfig+0x19a>
 800177e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001780:	b11b      	cbz	r3, 800178a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8001782:	0791      	lsls	r1, r2, #30
 8001784:	d515      	bpl.n	80017b2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001786:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001788:	b99b      	cbnz	r3, 80017b2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800178a:	4945      	ldr	r1, [pc, #276]	; (80018a0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800178c:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001790:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8001794:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001798:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 800179c:	4303      	orrs	r3, r0
 800179e:	6860      	ldr	r0, [r4, #4]
 80017a0:	4303      	orrs	r3, r0
 80017a2:	68a0      	ldr	r0, [r4, #8]
 80017a4:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80017a8:	6960      	ldr	r0, [r4, #20]
 80017aa:	ea43 7300 	orr.w	r3, r3, r0, lsl #28
 80017ae:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80017b2:	0753      	lsls	r3, r2, #29
 80017b4:	d503      	bpl.n	80017be <HAL_RCCEx_PeriphCLKConfig+0x1d6>
 80017b6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80017b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80017bc:	d005      	beq.n	80017ca <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80017be:	0717      	lsls	r7, r2, #28
 80017c0:	d520      	bpl.n	8001804 <HAL_RCCEx_PeriphCLKConfig+0x21c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80017c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80017c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80017c8:	d11c      	bne.n	8001804 <HAL_RCCEx_PeriphCLKConfig+0x21c>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80017ca:	4935      	ldr	r1, [pc, #212]	; (80018a0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80017cc:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80017d0:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80017d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017d8:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80017dc:	4303      	orrs	r3, r0
 80017de:	6860      	ldr	r0, [r4, #4]
 80017e0:	4303      	orrs	r3, r0
 80017e2:	68a0      	ldr	r0, [r4, #8]
 80017e4:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80017e8:	6920      	ldr	r0, [r4, #16]
 80017ea:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80017ee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80017f2:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 80017f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80017f8:	f020 001f 	bic.w	r0, r0, #31
 80017fc:	3b01      	subs	r3, #1
 80017fe:	4303      	orrs	r3, r0
 8001800:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8001804:	0550      	lsls	r0, r2, #21
 8001806:	d51b      	bpl.n	8001840 <HAL_RCCEx_PeriphCLKConfig+0x258>
 8001808:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800180a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800180e:	d117      	bne.n	8001840 <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001810:	4823      	ldr	r0, [pc, #140]	; (80018a0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8001812:	6867      	ldr	r7, [r4, #4]
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001814:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001818:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800181c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8001820:	433b      	orrs	r3, r7
 8001822:	68a7      	ldr	r7, [r4, #8]
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001824:	f3c1 4101 	ubfx	r1, r1, #16, #2
 8001828:	3101      	adds	r1, #1
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800182a:	ea43 1387 	orr.w	r3, r3, r7, lsl #6
 800182e:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 8001832:	68e1      	ldr	r1, [r4, #12]
 8001834:	0849      	lsrs	r1, r1, #1
 8001836:	3901      	subs	r1, #1
 8001838:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800183c:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001840:	0511      	lsls	r1, r2, #20
 8001842:	d511      	bpl.n	8001868 <HAL_RCCEx_PeriphCLKConfig+0x280>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001844:	6923      	ldr	r3, [r4, #16]
 8001846:	68a2      	ldr	r2, [r4, #8]
 8001848:	061b      	lsls	r3, r3, #24
 800184a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800184e:	6862      	ldr	r2, [r4, #4]
 8001850:	4313      	orrs	r3, r2
 8001852:	6962      	ldr	r2, [r4, #20]
 8001854:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001858:	68e2      	ldr	r2, [r4, #12]
 800185a:	0852      	lsrs	r2, r2, #1
 800185c:	3a01      	subs	r2, #1
 800185e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001862:	4a0f      	ldr	r2, [pc, #60]	; (80018a0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8001864:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001868:	2301      	movs	r3, #1
 800186a:	6033      	str	r3, [r6, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800186c:	f7ff fbda 	bl	8001024 <HAL_GetTick>
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001870:	4e0b      	ldr	r6, [pc, #44]	; (80018a0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
    tickstart = HAL_GetTick();
 8001872:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001874:	6833      	ldr	r3, [r6, #0]
 8001876:	011a      	lsls	r2, r3, #4
 8001878:	d453      	bmi.n	8001922 <HAL_RCCEx_PeriphCLKConfig+0x33a>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800187a:	f7ff fbd3 	bl	8001024 <HAL_GetTick>
 800187e:	1bc0      	subs	r0, r0, r7
 8001880:	2802      	cmp	r0, #2
 8001882:	d9f7      	bls.n	8001874 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8001884:	e008      	b.n	8001898 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
      plli2sused = 1U;
 8001886:	2601      	movs	r6, #1
 8001888:	e6f7      	b.n	800167a <HAL_RCCEx_PeriphCLKConfig+0x92>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800188a:	f7ff fbcb 	bl	8001024 <HAL_GetTick>
 800188e:	eba0 0008 	sub.w	r0, r0, r8
 8001892:	2802      	cmp	r0, #2
 8001894:	f67f af07 	bls.w	80016a6 <HAL_RCCEx_PeriphCLKConfig+0xbe>
        return HAL_TIMEOUT;
 8001898:	2003      	movs	r0, #3
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
}
 800189a:	b003      	add	sp, #12
 800189c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80018a0:	40023800 	.word	0x40023800
 80018a4:	40007000 	.word	0x40007000
 80018a8:	424711e0 	.word	0x424711e0
 80018ac:	42470068 	.word	0x42470068
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80018b0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80018b2:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80018b6:	4293      	cmp	r3, r2
 80018b8:	f43f aeff 	beq.w	80016ba <HAL_RCCEx_PeriphCLKConfig+0xd2>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80018bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 80018be:	4a4b      	ldr	r2, [pc, #300]	; (80019ec <HAL_RCCEx_PeriphCLKConfig+0x404>)
 80018c0:	2101      	movs	r1, #1
 80018c2:	6011      	str	r1, [r2, #0]
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80018c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 80018c8:	2100      	movs	r1, #0
 80018ca:	6011      	str	r1, [r2, #0]
      RCC->BDCR = tmpreg1;
 80018cc:	673b      	str	r3, [r7, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80018ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80018d0:	07db      	lsls	r3, r3, #31
 80018d2:	f57f aef2 	bpl.w	80016ba <HAL_RCCEx_PeriphCLKConfig+0xd2>
        tickstart = HAL_GetTick();
 80018d6:	f7ff fba5 	bl	8001024 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018da:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80018de:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80018e2:	0798      	lsls	r0, r3, #30
 80018e4:	f53f aee9 	bmi.w	80016ba <HAL_RCCEx_PeriphCLKConfig+0xd2>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018e8:	f7ff fb9c 	bl	8001024 <HAL_GetTick>
 80018ec:	eba0 0008 	sub.w	r0, r0, r8
 80018f0:	4548      	cmp	r0, r9
 80018f2:	d9f5      	bls.n	80018e0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 80018f4:	e7d0      	b.n	8001898 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80018f6:	6891      	ldr	r1, [r2, #8]
 80018f8:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80018fc:	e6ed      	b.n	80016da <HAL_RCCEx_PeriphCLKConfig+0xf2>
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80018fe:	483c      	ldr	r0, [pc, #240]	; (80019f0 <HAL_RCCEx_PeriphCLKConfig+0x408>)
 8001900:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8001902:	f8d0 2094 	ldr.w	r2, [r0, #148]	; 0x94
 8001906:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800190a:	430a      	orrs	r2, r1
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 800190c:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8001910:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8001914:	f47f af22 	bne.w	800175c <HAL_RCCEx_PeriphCLKConfig+0x174>
 8001918:	e723      	b.n	8001762 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800191a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800191e:	f43f af20 	beq.w	8001762 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  if(pllsaiused == 1U)
 8001922:	2d01      	cmp	r5, #1
 8001924:	d14b      	bne.n	80019be <HAL_RCCEx_PeriphCLKConfig+0x3d6>
    __HAL_RCC_PLLSAI_DISABLE();
 8001926:	4d33      	ldr	r5, [pc, #204]	; (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x40c>)
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001928:	4e31      	ldr	r6, [pc, #196]	; (80019f0 <HAL_RCCEx_PeriphCLKConfig+0x408>)
    __HAL_RCC_PLLSAI_DISABLE();
 800192a:	2300      	movs	r3, #0
 800192c:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 800192e:	f7ff fb79 	bl	8001024 <HAL_GetTick>
 8001932:	4607      	mov	r7, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001934:	6833      	ldr	r3, [r6, #0]
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	d44b      	bmi.n	80019d2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800193a:	6821      	ldr	r1, [r4, #0]
 800193c:	074e      	lsls	r6, r1, #29
 800193e:	d501      	bpl.n	8001944 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8001940:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001942:	b11b      	cbz	r3, 800194c <HAL_RCCEx_PeriphCLKConfig+0x364>
 8001944:	0708      	lsls	r0, r1, #28
 8001946:	d51a      	bpl.n	800197e <HAL_RCCEx_PeriphCLKConfig+0x396>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001948:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800194a:	b9c3      	cbnz	r3, 800197e <HAL_RCCEx_PeriphCLKConfig+0x396>
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800194c:	4a28      	ldr	r2, [pc, #160]	; (80019f0 <HAL_RCCEx_PeriphCLKConfig+0x408>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 800194e:	69a0      	ldr	r0, [r4, #24]
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8001950:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8001954:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001958:	4303      	orrs	r3, r0
 800195a:	69e0      	ldr	r0, [r4, #28]
 800195c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001960:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001962:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8001966:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800196a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800196e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001970:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8001974:	3801      	subs	r0, #1
 8001976:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800197a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800197e:	05ca      	lsls	r2, r1, #23
 8001980:	d514      	bpl.n	80019ac <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8001982:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001984:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001988:	d110      	bne.n	80019ac <HAL_RCCEx_PeriphCLKConfig+0x3c4>
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800198a:	4919      	ldr	r1, [pc, #100]	; (80019f0 <HAL_RCCEx_PeriphCLKConfig+0x408>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800198c:	69a2      	ldr	r2, [r4, #24]
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800198e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8001992:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8001996:	4313      	orrs	r3, r2
 8001998:	69e2      	ldr	r2, [r4, #28]
 800199a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800199e:	6a22      	ldr	r2, [r4, #32]
 80019a0:	0852      	lsrs	r2, r2, #1
 80019a2:	3a01      	subs	r2, #1
 80019a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80019a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    __HAL_RCC_PLLSAI_ENABLE();
 80019ac:	2301      	movs	r3, #1
 80019ae:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80019b0:	f7ff fb38 	bl	8001024 <HAL_GetTick>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80019b4:	4c0e      	ldr	r4, [pc, #56]	; (80019f0 <HAL_RCCEx_PeriphCLKConfig+0x408>)
    tickstart = HAL_GetTick();
 80019b6:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80019b8:	6823      	ldr	r3, [r4, #0]
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	d50f      	bpl.n	80019de <HAL_RCCEx_PeriphCLKConfig+0x3f6>
  return HAL_OK;
 80019be:	2000      	movs	r0, #0
 80019c0:	e76b      	b.n	800189a <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80019c2:	f7ff fb2f 	bl	8001024 <HAL_GetTick>
 80019c6:	eba0 0008 	sub.w	r0, r0, r8
 80019ca:	2802      	cmp	r0, #2
 80019cc:	f67f aed0 	bls.w	8001770 <HAL_RCCEx_PeriphCLKConfig+0x188>
 80019d0:	e762      	b.n	8001898 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80019d2:	f7ff fb27 	bl	8001024 <HAL_GetTick>
 80019d6:	1bc0      	subs	r0, r0, r7
 80019d8:	2802      	cmp	r0, #2
 80019da:	d9ab      	bls.n	8001934 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80019dc:	e75c      	b.n	8001898 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80019de:	f7ff fb21 	bl	8001024 <HAL_GetTick>
 80019e2:	1b40      	subs	r0, r0, r5
 80019e4:	2802      	cmp	r0, #2
 80019e6:	d9e7      	bls.n	80019b8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80019e8:	e756      	b.n	8001898 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80019ea:	bf00      	nop
 80019ec:	42470e40 	.word	0x42470e40
 80019f0:	40023800 	.word	0x40023800
 80019f4:	42470070 	.word	0x42470070

080019f8 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019f8:	4920      	ldr	r1, [pc, #128]	; (8001a7c <HAL_RCC_GetSysClockFreq+0x84>)
{
 80019fa:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019fc:	688b      	ldr	r3, [r1, #8]
 80019fe:	f003 030c 	and.w	r3, r3, #12
 8001a02:	2b08      	cmp	r3, #8
 8001a04:	d007      	beq.n	8001a16 <HAL_RCC_GetSysClockFreq+0x1e>
 8001a06:	2b0c      	cmp	r3, #12
 8001a08:	d020      	beq.n	8001a4c <HAL_RCC_GetSysClockFreq+0x54>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a0a:	4a1d      	ldr	r2, [pc, #116]	; (8001a80 <HAL_RCC_GetSysClockFreq+0x88>)
 8001a0c:	481d      	ldr	r0, [pc, #116]	; (8001a84 <HAL_RCC_GetSysClockFreq+0x8c>)
 8001a0e:	2b04      	cmp	r3, #4
 8001a10:	bf18      	it	ne
 8001a12:	4610      	movne	r0, r2
 8001a14:	bd08      	pop	{r3, pc}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a16:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a18:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a1a:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a1c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a20:	bf14      	ite	ne
 8001a22:	4818      	ldrne	r0, [pc, #96]	; (8001a84 <HAL_RCC_GetSysClockFreq+0x8c>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a24:	4816      	ldreq	r0, [pc, #88]	; (8001a80 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a26:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001a2a:	bf18      	it	ne
 8001a2c:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a2e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a32:	fba1 0100 	umull	r0, r1, r1, r0
 8001a36:	f7ff f923 	bl	8000c80 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a3a:	4b10      	ldr	r3, [pc, #64]	; (8001a7c <HAL_RCC_GetSysClockFreq+0x84>)
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001a42:	3301      	adds	r3, #1
 8001a44:	005b      	lsls	r3, r3, #1
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);

      sysclockfreq = pllvco/pllr;
 8001a46:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001a4a:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a4c:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a4e:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a50:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a52:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a56:	bf14      	ite	ne
 8001a58:	480a      	ldrne	r0, [pc, #40]	; (8001a84 <HAL_RCC_GetSysClockFreq+0x8c>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a5a:	4809      	ldreq	r0, [pc, #36]	; (8001a80 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a5c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001a60:	bf18      	it	ne
 8001a62:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a64:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a68:	fba1 0100 	umull	r0, r1, r1, r0
 8001a6c:	f7ff f908 	bl	8000c80 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001a70:	4b02      	ldr	r3, [pc, #8]	; (8001a7c <HAL_RCC_GetSysClockFreq+0x84>)
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f3c3 7302 	ubfx	r3, r3, #28, #3
 8001a78:	e7e5      	b.n	8001a46 <HAL_RCC_GetSysClockFreq+0x4e>
 8001a7a:	bf00      	nop
 8001a7c:	40023800 	.word	0x40023800
 8001a80:	00f42400 	.word	0x00f42400
 8001a84:	017d7840 	.word	0x017d7840

08001a88 <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a88:	6803      	ldr	r3, [r0, #0]
{
 8001a8a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a8e:	07df      	lsls	r7, r3, #31
{
 8001a90:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a92:	d410      	bmi.n	8001ab6 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a94:	6823      	ldr	r3, [r4, #0]
 8001a96:	079e      	lsls	r6, r3, #30
 8001a98:	d467      	bmi.n	8001b6a <HAL_RCC_OscConfig+0xe2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a9a:	6823      	ldr	r3, [r4, #0]
 8001a9c:	071a      	lsls	r2, r3, #28
 8001a9e:	f100 80b2 	bmi.w	8001c06 <HAL_RCC_OscConfig+0x17e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001aa2:	6823      	ldr	r3, [r4, #0]
 8001aa4:	075b      	lsls	r3, r3, #29
 8001aa6:	f100 80d0 	bmi.w	8001c4a <HAL_RCC_OscConfig+0x1c2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001aaa:	69a2      	ldr	r2, [r4, #24]
 8001aac:	2a00      	cmp	r2, #0
 8001aae:	f040 8139 	bne.w	8001d24 <HAL_RCC_OscConfig+0x29c>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8001ab2:	2000      	movs	r0, #0
 8001ab4:	e01e      	b.n	8001af4 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001ab6:	4b97      	ldr	r3, [pc, #604]	; (8001d14 <HAL_RCC_OscConfig+0x28c>)
 8001ab8:	689a      	ldr	r2, [r3, #8]
 8001aba:	f002 020c 	and.w	r2, r2, #12
 8001abe:	2a04      	cmp	r2, #4
 8001ac0:	d010      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001ac2:	689a      	ldr	r2, [r3, #8]
 8001ac4:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001ac8:	2a08      	cmp	r2, #8
 8001aca:	d102      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x4a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	025d      	lsls	r5, r3, #9
 8001ad0:	d408      	bmi.n	8001ae4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ad2:	4b90      	ldr	r3, [pc, #576]	; (8001d14 <HAL_RCC_OscConfig+0x28c>)
 8001ad4:	689a      	ldr	r2, [r3, #8]
 8001ad6:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001ada:	2a0c      	cmp	r2, #12
 8001adc:	d10d      	bne.n	8001afa <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ade:	685a      	ldr	r2, [r3, #4]
 8001ae0:	0250      	lsls	r0, r2, #9
 8001ae2:	d50a      	bpl.n	8001afa <HAL_RCC_OscConfig+0x72>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ae4:	4b8b      	ldr	r3, [pc, #556]	; (8001d14 <HAL_RCC_OscConfig+0x28c>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	0399      	lsls	r1, r3, #14
 8001aea:	d5d3      	bpl.n	8001a94 <HAL_RCC_OscConfig+0xc>
 8001aec:	6863      	ldr	r3, [r4, #4]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d1d0      	bne.n	8001a94 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8001af2:	2001      	movs	r0, #1
}
 8001af4:	b002      	add	sp, #8
 8001af6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001afa:	6862      	ldr	r2, [r4, #4]
 8001afc:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8001b00:	d111      	bne.n	8001b26 <HAL_RCC_OscConfig+0x9e>
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001b08:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001b0a:	f7ff fa8b 	bl	8001024 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b0e:	4d81      	ldr	r5, [pc, #516]	; (8001d14 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8001b10:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b12:	682b      	ldr	r3, [r5, #0]
 8001b14:	039a      	lsls	r2, r3, #14
 8001b16:	d4bd      	bmi.n	8001a94 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b18:	f7ff fa84 	bl	8001024 <HAL_GetTick>
 8001b1c:	1b80      	subs	r0, r0, r6
 8001b1e:	2864      	cmp	r0, #100	; 0x64
 8001b20:	d9f7      	bls.n	8001b12 <HAL_RCC_OscConfig+0x8a>
            return HAL_TIMEOUT;
 8001b22:	2003      	movs	r0, #3
 8001b24:	e7e6      	b.n	8001af4 <HAL_RCC_OscConfig+0x6c>
 8001b26:	4d7b      	ldr	r5, [pc, #492]	; (8001d14 <HAL_RCC_OscConfig+0x28c>)
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b28:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8001b2c:	682b      	ldr	r3, [r5, #0]
 8001b2e:	d107      	bne.n	8001b40 <HAL_RCC_OscConfig+0xb8>
 8001b30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b34:	602b      	str	r3, [r5, #0]
 8001b36:	682b      	ldr	r3, [r5, #0]
 8001b38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b3c:	602b      	str	r3, [r5, #0]
 8001b3e:	e7e4      	b.n	8001b0a <HAL_RCC_OscConfig+0x82>
 8001b40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b44:	602b      	str	r3, [r5, #0]
 8001b46:	682b      	ldr	r3, [r5, #0]
 8001b48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b4c:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b4e:	2a00      	cmp	r2, #0
 8001b50:	d1db      	bne.n	8001b0a <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8001b52:	f7ff fa67 	bl	8001024 <HAL_GetTick>
 8001b56:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b58:	682b      	ldr	r3, [r5, #0]
 8001b5a:	039b      	lsls	r3, r3, #14
 8001b5c:	d59a      	bpl.n	8001a94 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b5e:	f7ff fa61 	bl	8001024 <HAL_GetTick>
 8001b62:	1b80      	subs	r0, r0, r6
 8001b64:	2864      	cmp	r0, #100	; 0x64
 8001b66:	d9f7      	bls.n	8001b58 <HAL_RCC_OscConfig+0xd0>
 8001b68:	e7db      	b.n	8001b22 <HAL_RCC_OscConfig+0x9a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001b6a:	4b6a      	ldr	r3, [pc, #424]	; (8001d14 <HAL_RCC_OscConfig+0x28c>)
 8001b6c:	689a      	ldr	r2, [r3, #8]
 8001b6e:	f012 0f0c 	tst.w	r2, #12
 8001b72:	d010      	beq.n	8001b96 <HAL_RCC_OscConfig+0x10e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001b74:	689a      	ldr	r2, [r3, #8]
 8001b76:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001b7a:	2a08      	cmp	r2, #8
 8001b7c:	d102      	bne.n	8001b84 <HAL_RCC_OscConfig+0xfc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	025f      	lsls	r7, r3, #9
 8001b82:	d508      	bpl.n	8001b96 <HAL_RCC_OscConfig+0x10e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b84:	4a63      	ldr	r2, [pc, #396]	; (8001d14 <HAL_RCC_OscConfig+0x28c>)
 8001b86:	6893      	ldr	r3, [r2, #8]
 8001b88:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001b8c:	2b0c      	cmp	r3, #12
 8001b8e:	d111      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x12c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b90:	6853      	ldr	r3, [r2, #4]
 8001b92:	025e      	lsls	r6, r3, #9
 8001b94:	d40e      	bmi.n	8001bb4 <HAL_RCC_OscConfig+0x12c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b96:	4b5f      	ldr	r3, [pc, #380]	; (8001d14 <HAL_RCC_OscConfig+0x28c>)
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	0795      	lsls	r5, r2, #30
 8001b9c:	d502      	bpl.n	8001ba4 <HAL_RCC_OscConfig+0x11c>
 8001b9e:	68e2      	ldr	r2, [r4, #12]
 8001ba0:	2a01      	cmp	r2, #1
 8001ba2:	d1a6      	bne.n	8001af2 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	6921      	ldr	r1, [r4, #16]
 8001ba8:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001bac:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8001bb0:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bb2:	e772      	b.n	8001a9a <HAL_RCC_OscConfig+0x12>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001bb4:	68e2      	ldr	r2, [r4, #12]
 8001bb6:	4b58      	ldr	r3, [pc, #352]	; (8001d18 <HAL_RCC_OscConfig+0x290>)
 8001bb8:	b1b2      	cbz	r2, 8001be8 <HAL_RCC_OscConfig+0x160>
        __HAL_RCC_HSI_ENABLE();
 8001bba:	2201      	movs	r2, #1
 8001bbc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001bbe:	f7ff fa31 	bl	8001024 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bc2:	4d54      	ldr	r5, [pc, #336]	; (8001d14 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8001bc4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bc6:	682b      	ldr	r3, [r5, #0]
 8001bc8:	0798      	lsls	r0, r3, #30
 8001bca:	d507      	bpl.n	8001bdc <HAL_RCC_OscConfig+0x154>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bcc:	682b      	ldr	r3, [r5, #0]
 8001bce:	6922      	ldr	r2, [r4, #16]
 8001bd0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001bd4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001bd8:	602b      	str	r3, [r5, #0]
 8001bda:	e75e      	b.n	8001a9a <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bdc:	f7ff fa22 	bl	8001024 <HAL_GetTick>
 8001be0:	1b80      	subs	r0, r0, r6
 8001be2:	2802      	cmp	r0, #2
 8001be4:	d9ef      	bls.n	8001bc6 <HAL_RCC_OscConfig+0x13e>
 8001be6:	e79c      	b.n	8001b22 <HAL_RCC_OscConfig+0x9a>
        __HAL_RCC_HSI_DISABLE();
 8001be8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001bea:	f7ff fa1b 	bl	8001024 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bee:	4d49      	ldr	r5, [pc, #292]	; (8001d14 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8001bf0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bf2:	682b      	ldr	r3, [r5, #0]
 8001bf4:	0799      	lsls	r1, r3, #30
 8001bf6:	f57f af50 	bpl.w	8001a9a <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bfa:	f7ff fa13 	bl	8001024 <HAL_GetTick>
 8001bfe:	1b80      	subs	r0, r0, r6
 8001c00:	2802      	cmp	r0, #2
 8001c02:	d9f6      	bls.n	8001bf2 <HAL_RCC_OscConfig+0x16a>
 8001c04:	e78d      	b.n	8001b22 <HAL_RCC_OscConfig+0x9a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c06:	6962      	ldr	r2, [r4, #20]
 8001c08:	4b44      	ldr	r3, [pc, #272]	; (8001d1c <HAL_RCC_OscConfig+0x294>)
 8001c0a:	b17a      	cbz	r2, 8001c2c <HAL_RCC_OscConfig+0x1a4>
      __HAL_RCC_LSI_ENABLE();
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001c10:	f7ff fa08 	bl	8001024 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c14:	4d3f      	ldr	r5, [pc, #252]	; (8001d14 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8001c16:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c18:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001c1a:	079f      	lsls	r7, r3, #30
 8001c1c:	f53f af41 	bmi.w	8001aa2 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c20:	f7ff fa00 	bl	8001024 <HAL_GetTick>
 8001c24:	1b80      	subs	r0, r0, r6
 8001c26:	2802      	cmp	r0, #2
 8001c28:	d9f6      	bls.n	8001c18 <HAL_RCC_OscConfig+0x190>
 8001c2a:	e77a      	b.n	8001b22 <HAL_RCC_OscConfig+0x9a>
      __HAL_RCC_LSI_DISABLE();
 8001c2c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001c2e:	f7ff f9f9 	bl	8001024 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c32:	4d38      	ldr	r5, [pc, #224]	; (8001d14 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8001c34:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c36:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001c38:	0798      	lsls	r0, r3, #30
 8001c3a:	f57f af32 	bpl.w	8001aa2 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c3e:	f7ff f9f1 	bl	8001024 <HAL_GetTick>
 8001c42:	1b80      	subs	r0, r0, r6
 8001c44:	2802      	cmp	r0, #2
 8001c46:	d9f6      	bls.n	8001c36 <HAL_RCC_OscConfig+0x1ae>
 8001c48:	e76b      	b.n	8001b22 <HAL_RCC_OscConfig+0x9a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c4a:	4b32      	ldr	r3, [pc, #200]	; (8001d14 <HAL_RCC_OscConfig+0x28c>)
 8001c4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c4e:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8001c52:	d128      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x21e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c54:	9201      	str	r2, [sp, #4]
 8001c56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c58:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001c5c:	641a      	str	r2, [r3, #64]	; 0x40
 8001c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c64:	9301      	str	r3, [sp, #4]
 8001c66:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001c68:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c6a:	4d2d      	ldr	r5, [pc, #180]	; (8001d20 <HAL_RCC_OscConfig+0x298>)
 8001c6c:	682b      	ldr	r3, [r5, #0]
 8001c6e:	05d9      	lsls	r1, r3, #23
 8001c70:	d51b      	bpl.n	8001caa <HAL_RCC_OscConfig+0x222>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c72:	68a3      	ldr	r3, [r4, #8]
 8001c74:	4d27      	ldr	r5, [pc, #156]	; (8001d14 <HAL_RCC_OscConfig+0x28c>)
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d127      	bne.n	8001cca <HAL_RCC_OscConfig+0x242>
 8001c7a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001c7c:	f043 0301 	orr.w	r3, r3, #1
 8001c80:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001c82:	f7ff f9cf 	bl	8001024 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c86:	4d23      	ldr	r5, [pc, #140]	; (8001d14 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8001c88:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c8a:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c8e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001c90:	079b      	lsls	r3, r3, #30
 8001c92:	d539      	bpl.n	8001d08 <HAL_RCC_OscConfig+0x280>
    if(pwrclkchanged == SET)
 8001c94:	2e00      	cmp	r6, #0
 8001c96:	f43f af08 	beq.w	8001aaa <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c9a:	4a1e      	ldr	r2, [pc, #120]	; (8001d14 <HAL_RCC_OscConfig+0x28c>)
 8001c9c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001c9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ca2:	6413      	str	r3, [r2, #64]	; 0x40
 8001ca4:	e701      	b.n	8001aaa <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8001ca6:	2600      	movs	r6, #0
 8001ca8:	e7df      	b.n	8001c6a <HAL_RCC_OscConfig+0x1e2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001caa:	682b      	ldr	r3, [r5, #0]
 8001cac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cb0:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001cb2:	f7ff f9b7 	bl	8001024 <HAL_GetTick>
 8001cb6:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cb8:	682b      	ldr	r3, [r5, #0]
 8001cba:	05da      	lsls	r2, r3, #23
 8001cbc:	d4d9      	bmi.n	8001c72 <HAL_RCC_OscConfig+0x1ea>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cbe:	f7ff f9b1 	bl	8001024 <HAL_GetTick>
 8001cc2:	1bc0      	subs	r0, r0, r7
 8001cc4:	2802      	cmp	r0, #2
 8001cc6:	d9f7      	bls.n	8001cb8 <HAL_RCC_OscConfig+0x230>
 8001cc8:	e72b      	b.n	8001b22 <HAL_RCC_OscConfig+0x9a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cca:	2b05      	cmp	r3, #5
 8001ccc:	d104      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x250>
 8001cce:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001cd0:	f043 0304 	orr.w	r3, r3, #4
 8001cd4:	672b      	str	r3, [r5, #112]	; 0x70
 8001cd6:	e7d0      	b.n	8001c7a <HAL_RCC_OscConfig+0x1f2>
 8001cd8:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001cda:	f022 0201 	bic.w	r2, r2, #1
 8001cde:	672a      	str	r2, [r5, #112]	; 0x70
 8001ce0:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001ce2:	f022 0204 	bic.w	r2, r2, #4
 8001ce6:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d1ca      	bne.n	8001c82 <HAL_RCC_OscConfig+0x1fa>
      tickstart = HAL_GetTick();
 8001cec:	f7ff f99a 	bl	8001024 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cf0:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001cf4:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cf6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001cf8:	0798      	lsls	r0, r3, #30
 8001cfa:	d5cb      	bpl.n	8001c94 <HAL_RCC_OscConfig+0x20c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cfc:	f7ff f992 	bl	8001024 <HAL_GetTick>
 8001d00:	1bc0      	subs	r0, r0, r7
 8001d02:	4540      	cmp	r0, r8
 8001d04:	d9f7      	bls.n	8001cf6 <HAL_RCC_OscConfig+0x26e>
 8001d06:	e70c      	b.n	8001b22 <HAL_RCC_OscConfig+0x9a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d08:	f7ff f98c 	bl	8001024 <HAL_GetTick>
 8001d0c:	1bc0      	subs	r0, r0, r7
 8001d0e:	4540      	cmp	r0, r8
 8001d10:	d9bd      	bls.n	8001c8e <HAL_RCC_OscConfig+0x206>
 8001d12:	e706      	b.n	8001b22 <HAL_RCC_OscConfig+0x9a>
 8001d14:	40023800 	.word	0x40023800
 8001d18:	42470000 	.word	0x42470000
 8001d1c:	42470e80 	.word	0x42470e80
 8001d20:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d24:	4d23      	ldr	r5, [pc, #140]	; (8001db4 <HAL_RCC_OscConfig+0x32c>)
 8001d26:	68ab      	ldr	r3, [r5, #8]
 8001d28:	f003 030c 	and.w	r3, r3, #12
 8001d2c:	2b08      	cmp	r3, #8
 8001d2e:	f43f aee0 	beq.w	8001af2 <HAL_RCC_OscConfig+0x6a>
 8001d32:	4e21      	ldr	r6, [pc, #132]	; (8001db8 <HAL_RCC_OscConfig+0x330>)
 8001d34:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d36:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001d38:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d3a:	d12d      	bne.n	8001d98 <HAL_RCC_OscConfig+0x310>
        tickstart = HAL_GetTick();
 8001d3c:	f7ff f972 	bl	8001024 <HAL_GetTick>
 8001d40:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d42:	682b      	ldr	r3, [r5, #0]
 8001d44:	0199      	lsls	r1, r3, #6
 8001d46:	d421      	bmi.n	8001d8c <HAL_RCC_OscConfig+0x304>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d48:	6a22      	ldr	r2, [r4, #32]
 8001d4a:	69e3      	ldr	r3, [r4, #28]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001d50:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001d54:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001d56:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001d5a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001d5c:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001d60:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d62:	4c14      	ldr	r4, [pc, #80]	; (8001db4 <HAL_RCC_OscConfig+0x32c>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d64:	0852      	lsrs	r2, r2, #1
 8001d66:	3a01      	subs	r2, #1
 8001d68:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001d6c:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001d6e:	2301      	movs	r3, #1
 8001d70:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001d72:	f7ff f957 	bl	8001024 <HAL_GetTick>
 8001d76:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d78:	6823      	ldr	r3, [r4, #0]
 8001d7a:	019a      	lsls	r2, r3, #6
 8001d7c:	f53f ae99 	bmi.w	8001ab2 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d80:	f7ff f950 	bl	8001024 <HAL_GetTick>
 8001d84:	1b40      	subs	r0, r0, r5
 8001d86:	2802      	cmp	r0, #2
 8001d88:	d9f6      	bls.n	8001d78 <HAL_RCC_OscConfig+0x2f0>
 8001d8a:	e6ca      	b.n	8001b22 <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d8c:	f7ff f94a 	bl	8001024 <HAL_GetTick>
 8001d90:	1bc0      	subs	r0, r0, r7
 8001d92:	2802      	cmp	r0, #2
 8001d94:	d9d5      	bls.n	8001d42 <HAL_RCC_OscConfig+0x2ba>
 8001d96:	e6c4      	b.n	8001b22 <HAL_RCC_OscConfig+0x9a>
        tickstart = HAL_GetTick();
 8001d98:	f7ff f944 	bl	8001024 <HAL_GetTick>
 8001d9c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d9e:	682b      	ldr	r3, [r5, #0]
 8001da0:	019b      	lsls	r3, r3, #6
 8001da2:	f57f ae86 	bpl.w	8001ab2 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001da6:	f7ff f93d 	bl	8001024 <HAL_GetTick>
 8001daa:	1b00      	subs	r0, r0, r4
 8001dac:	2802      	cmp	r0, #2
 8001dae:	d9f6      	bls.n	8001d9e <HAL_RCC_OscConfig+0x316>
 8001db0:	e6b7      	b.n	8001b22 <HAL_RCC_OscConfig+0x9a>
 8001db2:	bf00      	nop
 8001db4:	40023800 	.word	0x40023800
 8001db8:	42470060 	.word	0x42470060

08001dbc <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8001dbc:	6802      	ldr	r2, [r0, #0]
{
 8001dbe:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8001dc0:	68d3      	ldr	r3, [r2, #12]
 8001dc2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001dc6:	60d3      	str	r3, [r2, #12]
{
 8001dc8:	4604      	mov	r4, r0

    /* Get tick */
    tickstart = HAL_GetTick();
 8001dca:	f7ff f92b 	bl	8001024 <HAL_GetTick>
 8001dce:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8001dd0:	6823      	ldr	r3, [r4, #0]
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	069b      	lsls	r3, r3, #26
 8001dd6:	d501      	bpl.n	8001ddc <HAL_RTC_WaitForSynchro+0x20>
    {       
      return HAL_TIMEOUT;
    } 
  }

  return HAL_OK;
 8001dd8:	2000      	movs	r0, #0
 8001dda:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8001ddc:	f7ff f922 	bl	8001024 <HAL_GetTick>
 8001de0:	1b40      	subs	r0, r0, r5
 8001de2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001de6:	d9f3      	bls.n	8001dd0 <HAL_RTC_WaitForSynchro+0x14>
      return HAL_TIMEOUT;
 8001de8:	2003      	movs	r0, #3
}
 8001dea:	bd38      	pop	{r3, r4, r5, pc}

08001dec <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8001dec:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U; 
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001dee:	6803      	ldr	r3, [r0, #0]
 8001df0:	68da      	ldr	r2, [r3, #12]
 8001df2:	0652      	lsls	r2, r2, #25
{
 8001df4:	4604      	mov	r4, r0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001df6:	d501      	bpl.n	8001dfc <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      } 
    }
  }
  
  return HAL_OK;  
 8001df8:	2000      	movs	r0, #0
 8001dfa:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8001dfc:	f04f 32ff 	mov.w	r2, #4294967295
 8001e00:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8001e02:	f7ff f90f 	bl	8001024 <HAL_GetTick>
 8001e06:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001e08:	6823      	ldr	r3, [r4, #0]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	065b      	lsls	r3, r3, #25
 8001e0e:	d4f3      	bmi.n	8001df8 <RTC_EnterInitMode+0xc>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8001e10:	f7ff f908 	bl	8001024 <HAL_GetTick>
 8001e14:	1b40      	subs	r0, r0, r5
 8001e16:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001e1a:	d9f5      	bls.n	8001e08 <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 8001e1c:	2003      	movs	r0, #3
}
 8001e1e:	bd38      	pop	{r3, r4, r5, pc}

08001e20 <HAL_RTC_Init>:
{
 8001e20:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 8001e22:	4604      	mov	r4, r0
 8001e24:	b1b8      	cbz	r0, 8001e56 <HAL_RTC_Init+0x36>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8001e26:	7f43      	ldrb	r3, [r0, #29]
 8001e28:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001e2c:	b913      	cbnz	r3, 8001e34 <HAL_RTC_Init+0x14>
    hrtc->Lock = HAL_UNLOCKED;
 8001e2e:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8001e30:	f002 f902 	bl	8004038 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8001e34:	2302      	movs	r3, #2
 8001e36:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001e38:	6823      	ldr	r3, [r4, #0]
 8001e3a:	22ca      	movs	r2, #202	; 0xca
 8001e3c:	625a      	str	r2, [r3, #36]	; 0x24
 8001e3e:	2253      	movs	r2, #83	; 0x53
 8001e40:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001e42:	4620      	mov	r0, r4
 8001e44:	f7ff ffd2 	bl	8001dec <RTC_EnterInitMode>
 8001e48:	6823      	ldr	r3, [r4, #0]
 8001e4a:	4605      	mov	r5, r0
 8001e4c:	b128      	cbz	r0, 8001e5a <HAL_RTC_Init+0x3a>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001e4e:	22ff      	movs	r2, #255	; 0xff
 8001e50:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001e52:	2304      	movs	r3, #4
 8001e54:	7763      	strb	r3, [r4, #29]
     return HAL_ERROR;
 8001e56:	2501      	movs	r5, #1
 8001e58:	e02e      	b.n	8001eb8 <HAL_RTC_Init+0x98>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001e5a:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001e5c:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001e5e:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 8001e62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e66:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001e68:	6862      	ldr	r2, [r4, #4]
 8001e6a:	6899      	ldr	r1, [r3, #8]
 8001e6c:	4302      	orrs	r2, r0
 8001e6e:	6960      	ldr	r0, [r4, #20]
 8001e70:	4302      	orrs	r2, r0
 8001e72:	430a      	orrs	r2, r1
 8001e74:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001e76:	68e2      	ldr	r2, [r4, #12]
 8001e78:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8001e7a:	691a      	ldr	r2, [r3, #16]
 8001e7c:	68a1      	ldr	r1, [r4, #8]
 8001e7e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001e82:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 8001e84:	68da      	ldr	r2, [r3, #12]
 8001e86:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e8a:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	069b      	lsls	r3, r3, #26
 8001e90:	d405      	bmi.n	8001e9e <HAL_RTC_Init+0x7e>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001e92:	4620      	mov	r0, r4
 8001e94:	f7ff ff92 	bl	8001dbc <HAL_RTC_WaitForSynchro>
 8001e98:	b108      	cbz	r0, 8001e9e <HAL_RTC_Init+0x7e>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001e9a:	6823      	ldr	r3, [r4, #0]
 8001e9c:	e7d7      	b.n	8001e4e <HAL_RTC_Init+0x2e>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8001e9e:	6823      	ldr	r3, [r4, #0]
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8001ea0:	69a1      	ldr	r1, [r4, #24]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8001ea2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ea4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001ea8:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8001eaa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001eac:	430a      	orrs	r2, r1
 8001eae:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8001eb0:	22ff      	movs	r2, #255	; 0xff
 8001eb2:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	7763      	strb	r3, [r4, #29]
}
 8001eb8:	4628      	mov	r0, r5
 8001eba:	bd38      	pop	{r3, r4, r5, pc}

08001ebc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001ebc:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8001ebe:	4604      	mov	r4, r0
 8001ec0:	2800      	cmp	r0, #0
 8001ec2:	d036      	beq.n	8001f32 <HAL_SPI_Init+0x76>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8001ec8:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8001ecc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001ed0:	b91b      	cbnz	r3, 8001eda <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001ed2:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001ed6:	f002 f8bb 	bl	8004050 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001eda:	6821      	ldr	r1, [r4, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001edc:	68a0      	ldr	r0, [r4, #8]
 8001ede:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8001ee6:	680b      	ldr	r3, [r1, #0]
 8001ee8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001eec:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001eee:	6863      	ldr	r3, [r4, #4]
 8001ef0:	4303      	orrs	r3, r0
 8001ef2:	68e0      	ldr	r0, [r4, #12]
 8001ef4:	4303      	orrs	r3, r0
 8001ef6:	6920      	ldr	r0, [r4, #16]
 8001ef8:	4303      	orrs	r3, r0
 8001efa:	6960      	ldr	r0, [r4, #20]
 8001efc:	4303      	orrs	r3, r0
 8001efe:	69e0      	ldr	r0, [r4, #28]
 8001f00:	4303      	orrs	r3, r0
 8001f02:	6a20      	ldr	r0, [r4, #32]
 8001f04:	4303      	orrs	r3, r0
 8001f06:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001f08:	4303      	orrs	r3, r0
 8001f0a:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8001f0e:	4303      	orrs	r3, r0
 8001f10:	600b      	str	r3, [r1, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001f12:	0c12      	lsrs	r2, r2, #16
 8001f14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001f16:	f002 0204 	and.w	r2, r2, #4
 8001f1a:	431a      	orrs	r2, r3
 8001f1c:	604a      	str	r2, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001f1e:	69cb      	ldr	r3, [r1, #28]
 8001f20:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001f24:	61cb      	str	r3, [r1, #28]
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001f26:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8001f28:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001f2a:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001f2c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
 8001f30:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001f32:	2001      	movs	r0, #1
}
 8001f34:	bd10      	pop	{r4, pc}
	...

08001f38 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f38:	6a03      	ldr	r3, [r0, #32]
 8001f3a:	f023 0301 	bic.w	r3, r3, #1
 8001f3e:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f40:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8001f42:	6842      	ldr	r2, [r0, #4]
{
 8001f44:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001f46:	6984      	ldr	r4, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001f48:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001f4a:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001f4e:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001f50:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8001f52:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8001f56:	4323      	orrs	r3, r4

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001f58:	4c0c      	ldr	r4, [pc, #48]	; (8001f8c <TIM_OC1_SetConfig+0x54>)
 8001f5a:	42a0      	cmp	r0, r4
 8001f5c:	d009      	beq.n	8001f72 <TIM_OC1_SetConfig+0x3a>
 8001f5e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001f62:	42a0      	cmp	r0, r4
 8001f64:	d005      	beq.n	8001f72 <TIM_OC1_SetConfig+0x3a>
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f66:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001f68:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001f6a:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8001f6c:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8001f6e:	6203      	str	r3, [r0, #32]
} 
 8001f70:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= OC_Config->OCNPolarity;
 8001f72:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 8001f74:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC1NP;
 8001f76:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8001f7a:	4323      	orrs	r3, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 8001f7c:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001f7e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8001f82:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8001f84:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8001f88:	4322      	orrs	r2, r4
 8001f8a:	e7ec      	b.n	8001f66 <TIM_OC1_SetConfig+0x2e>
 8001f8c:	40010000 	.word	0x40010000

08001f90 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001f90:	6a03      	ldr	r3, [r0, #32]
 8001f92:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f96:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f98:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8001f9a:	6842      	ldr	r2, [r0, #4]
{
 8001f9c:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001f9e:	69c4      	ldr	r4, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001fa0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8001fa2:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001fa6:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001fa8:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8001faa:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001fae:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001fb2:	4c0e      	ldr	r4, [pc, #56]	; (8001fec <TIM_OC3_SetConfig+0x5c>)
 8001fb4:	42a0      	cmp	r0, r4
 8001fb6:	d009      	beq.n	8001fcc <TIM_OC3_SetConfig+0x3c>
 8001fb8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001fbc:	42a0      	cmp	r0, r4
 8001fbe:	d005      	beq.n	8001fcc <TIM_OC3_SetConfig+0x3c>
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001fc0:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001fc2:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001fc4:	61c5      	str	r5, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8001fc6:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001fc8:	6203      	str	r3, [r0, #32]
}
 8001fca:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001fcc:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001fce:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC3NP;
 8001fd0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001fd4:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001fd8:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001fda:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001fde:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8001fe0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001fe4:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 8001fe8:	e7ea      	b.n	8001fc0 <TIM_OC3_SetConfig+0x30>
 8001fea:	bf00      	nop
 8001fec:	40010000 	.word	0x40010000

08001ff0 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001ff0:	6a03      	ldr	r3, [r0, #32]
 8001ff2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001ff6:	6203      	str	r3, [r0, #32]
{
 8001ff8:	b530      	push	{r4, r5, lr}
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001ffa:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8001ffc:	6843      	ldr	r3, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001ffe:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002000:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002002:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002006:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800200a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 800200c:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002010:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002014:	4d09      	ldr	r5, [pc, #36]	; (800203c <TIM_OC4_SetConfig+0x4c>)
 8002016:	42a8      	cmp	r0, r5
 8002018:	d009      	beq.n	800202e <TIM_OC4_SetConfig+0x3e>
 800201a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800201e:	42a8      	cmp	r0, r5
 8002020:	d005      	beq.n	800202e <TIM_OC4_SetConfig+0x3e>
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002022:	6043      	str	r3, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002024:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8002026:	61c2      	str	r2, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8002028:	6403      	str	r3, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800202a:	6204      	str	r4, [r0, #32]
}
 800202c:	bd30      	pop	{r4, r5, pc}
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800202e:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002030:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002034:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8002038:	e7f3      	b.n	8002022 <TIM_OC4_SetConfig+0x32>
 800203a:	bf00      	nop
 800203c:	40010000 	.word	0x40010000

08002040 <TIM_SlaveTimer_SetConfig>:
  uint32_t tmpsmcr = 0U;
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;

 /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002040:	6803      	ldr	r3, [r0, #0]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8002042:	6848      	ldr	r0, [r1, #4]
  tmpsmcr = htim->Instance->SMCR;
 8002044:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002046:	f022 0270 	bic.w	r2, r2, #112	; 0x70
{
 800204a:	b530      	push	{r4, r5, lr}
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800204c:	4302      	orrs	r2, r0

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800204e:	680c      	ldr	r4, [r1, #0]
  tmpsmcr &= ~TIM_SMCR_SMS;
 8002050:	f022 0207 	bic.w	r2, r2, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8002054:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
  
  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8002056:	2850      	cmp	r0, #80	; 0x50
  htim->Instance->SMCR = tmpsmcr;
 8002058:	609a      	str	r2, [r3, #8]
  switch (sSlaveConfig->InputTrigger)
 800205a:	d021      	beq.n	80020a0 <TIM_SlaveTimer_SetConfig+0x60>
 800205c:	d802      	bhi.n	8002064 <TIM_SlaveTimer_SetConfig+0x24>
 800205e:	2840      	cmp	r0, #64	; 0x40
 8002060:	d010      	beq.n	8002084 <TIM_SlaveTimer_SetConfig+0x44>
 8002062:	bd30      	pop	{r4, r5, pc}
 8002064:	2860      	cmp	r0, #96	; 0x60
 8002066:	d02d      	beq.n	80020c4 <TIM_SlaveTimer_SetConfig+0x84>
 8002068:	2870      	cmp	r0, #112	; 0x70
 800206a:	d13d      	bne.n	80020e8 <TIM_SlaveTimer_SetConfig+0xa8>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800206c:	68ca      	ldr	r2, [r1, #12]
 800206e:	688c      	ldr	r4, [r1, #8]
  tmpsmcr = TIMx->SMCR;
 8002070:	6898      	ldr	r0, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8002072:	6909      	ldr	r1, [r1, #16]
 8002074:	4322      	orrs	r2, r4
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002076:	f420 407f 	bic.w	r0, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800207a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800207e:	4302      	orrs	r2, r0

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002080:	609a      	str	r2, [r3, #8]
 8002082:	bd30      	pop	{r4, r5, pc}
      tmpccer = htim->Instance->CCER;
 8002084:	6a18      	ldr	r0, [r3, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8002086:	6a1a      	ldr	r2, [r3, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8002088:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800208a:	f022 0201 	bic.w	r2, r2, #1
 800208e:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;    
 8002090:	699a      	ldr	r2, [r3, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002092:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8002096:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 800209a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;                               
 800209c:	6218      	str	r0, [r3, #32]
    break;
 800209e:	bd30      	pop	{r4, r5, pc}
      TIM_TI1_ConfigInputStage(htim->Instance,
 80020a0:	6888      	ldr	r0, [r1, #8]
 80020a2:	690d      	ldr	r5, [r1, #16]
  tmpccer = TIMx->CCER;
 80020a4:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80020a6:	6a1c      	ldr	r4, [r3, #32]
 80020a8:	f024 0401 	bic.w	r4, r4, #1
 80020ac:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 80020ae:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80020b0:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80020b4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80020b8:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer |= TIM_ICPolarity;
 80020bc:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 80020be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80020c0:	6219      	str	r1, [r3, #32]
 80020c2:	bd30      	pop	{r4, r5, pc}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80020c4:	6a18      	ldr	r0, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80020c6:	688c      	ldr	r4, [r1, #8]
 80020c8:	690d      	ldr	r5, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80020ca:	f020 0010 	bic.w	r0, r0, #16
 80020ce:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80020d0:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 80020d2:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80020d4:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80020d8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80020dc:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 80020e0:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 80020e4:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 80020e6:	621a      	str	r2, [r3, #32]
 80020e8:	bd30      	pop	{r4, r5, pc}

080020ea <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80020ea:	6803      	ldr	r3, [r0, #0]
 80020ec:	68da      	ldr	r2, [r3, #12]
 80020ee:	f042 0201 	orr.w	r2, r2, #1
 80020f2:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	f042 0201 	orr.w	r2, r2, #1
 80020fa:	601a      	str	r2, [r3, #0]
}
 80020fc:	2000      	movs	r0, #0
 80020fe:	4770      	bx	lr

08002100 <HAL_TIM_PWM_MspInit>:
 8002100:	4770      	bx	lr

08002102 <HAL_TIM_IC_MspInit>:
 8002102:	4770      	bx	lr

08002104 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002104:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002108:	2b01      	cmp	r3, #1
{
 800210a:	b570      	push	{r4, r5, r6, lr}
 800210c:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8002110:	d01c      	beq.n	800214c <HAL_TIM_ConfigClockSource+0x48>
  htim->State = HAL_TIM_STATE_BUSY;
 8002112:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  tmpsmcr = htim->Instance->SMCR;
 8002116:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 8002118:	2201      	movs	r2, #1
 800211a:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  tmpsmcr = htim->Instance->SMCR;
 800211e:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002120:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002124:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8002128:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 800212a:	680a      	ldr	r2, [r1, #0]
 800212c:	2a40      	cmp	r2, #64	; 0x40
 800212e:	d079      	beq.n	8002224 <HAL_TIM_ConfigClockSource+0x120>
 8002130:	d819      	bhi.n	8002166 <HAL_TIM_ConfigClockSource+0x62>
 8002132:	2a10      	cmp	r2, #16
 8002134:	f000 8093 	beq.w	800225e <HAL_TIM_ConfigClockSource+0x15a>
 8002138:	d80a      	bhi.n	8002150 <HAL_TIM_ConfigClockSource+0x4c>
 800213a:	2a00      	cmp	r2, #0
 800213c:	f000 8089 	beq.w	8002252 <HAL_TIM_ConfigClockSource+0x14e>
  htim->State = HAL_TIM_STATE_READY;
 8002140:	2301      	movs	r3, #1
 8002142:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8002146:	2300      	movs	r3, #0
 8002148:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 800214c:	4618      	mov	r0, r3
}
 800214e:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8002150:	2a20      	cmp	r2, #32
 8002152:	f000 808a 	beq.w	800226a <HAL_TIM_ConfigClockSource+0x166>
 8002156:	2a30      	cmp	r2, #48	; 0x30
 8002158:	d1f2      	bne.n	8002140 <HAL_TIM_ConfigClockSource+0x3c>
   tmpsmcr = TIMx->SMCR;
 800215a:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800215c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8002160:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8002164:	e036      	b.n	80021d4 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8002166:	2a70      	cmp	r2, #112	; 0x70
 8002168:	d036      	beq.n	80021d8 <HAL_TIM_ConfigClockSource+0xd4>
 800216a:	d81b      	bhi.n	80021a4 <HAL_TIM_ConfigClockSource+0xa0>
 800216c:	2a50      	cmp	r2, #80	; 0x50
 800216e:	d042      	beq.n	80021f6 <HAL_TIM_ConfigClockSource+0xf2>
 8002170:	2a60      	cmp	r2, #96	; 0x60
 8002172:	d1e5      	bne.n	8002140 <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002174:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8002176:	684d      	ldr	r5, [r1, #4]
 8002178:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800217a:	f024 0410 	bic.w	r4, r4, #16
 800217e:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002180:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8002182:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002184:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002188:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800218c:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002190:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8002194:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8002196:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8002198:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800219a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800219e:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 80021a2:	e017      	b.n	80021d4 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 80021a4:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80021a8:	d011      	beq.n	80021ce <HAL_TIM_ConfigClockSource+0xca>
 80021aa:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80021ae:	d1c7      	bne.n	8002140 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80021b0:	688a      	ldr	r2, [r1, #8]
 80021b2:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80021b4:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80021b6:	68c9      	ldr	r1, [r1, #12]
 80021b8:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021ba:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80021be:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80021c2:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 80021c4:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80021c6:	689a      	ldr	r2, [r3, #8]
 80021c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80021cc:	e002      	b.n	80021d4 <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80021ce:	689a      	ldr	r2, [r3, #8]
 80021d0:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 80021d4:	609a      	str	r2, [r3, #8]
 80021d6:	e7b3      	b.n	8002140 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80021d8:	688a      	ldr	r2, [r1, #8]
 80021da:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80021dc:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80021de:	68c9      	ldr	r1, [r1, #12]
 80021e0:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021e2:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80021e6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80021ea:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 80021ec:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 80021ee:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80021f0:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 80021f4:	e7ee      	b.n	80021d4 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 80021f6:	684c      	ldr	r4, [r1, #4]
 80021f8:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80021fa:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80021fc:	6a1d      	ldr	r5, [r3, #32]
 80021fe:	f025 0501 	bic.w	r5, r5, #1
 8002202:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8002204:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002206:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800220a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800220e:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8002212:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8002214:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002216:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8002218:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800221a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800221e:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8002222:	e7d7      	b.n	80021d4 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8002224:	684c      	ldr	r4, [r1, #4]
 8002226:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002228:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800222a:	6a1d      	ldr	r5, [r3, #32]
 800222c:	f025 0501 	bic.w	r5, r5, #1
 8002230:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8002232:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002234:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002238:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800223c:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8002240:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8002242:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002244:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8002246:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002248:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800224c:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8002250:	e7c0      	b.n	80021d4 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8002252:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002254:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8002258:	f042 0207 	orr.w	r2, r2, #7
 800225c:	e7ba      	b.n	80021d4 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 800225e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002260:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8002264:	f042 0217 	orr.w	r2, r2, #23
 8002268:	e7b4      	b.n	80021d4 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 800226a:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800226c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8002270:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8002274:	e7ae      	b.n	80021d4 <HAL_TIM_ConfigClockSource+0xd0>

08002276 <HAL_TIM_SlaveConfigSynchronization>:
{
 8002276:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8002278:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800227c:	2b01      	cmp	r3, #1
{
 800227e:	4604      	mov	r4, r0
 8002280:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8002284:	d015      	beq.n	80022b2 <HAL_TIM_SlaveConfigSynchronization+0x3c>
 8002286:	2501      	movs	r5, #1
 8002288:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 800228c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  TIM_SlaveTimer_SetConfig(htim, sSlaveConfig);
 8002290:	f7ff fed6 	bl	8002040 <TIM_SlaveTimer_SetConfig>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8002294:	6823      	ldr	r3, [r4, #0]
 8002296:	68da      	ldr	r2, [r3, #12]
 8002298:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800229c:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800229e:	68da      	ldr	r2, [r3, #12]
  __HAL_UNLOCK(htim);  
 80022a0:	2000      	movs	r0, #0
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80022a2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80022a6:	60da      	str	r2, [r3, #12]
  htim->State = HAL_TIM_STATE_READY;
 80022a8:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);  
 80022ac:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  return HAL_OK;
 80022b0:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 80022b2:	4618      	mov	r0, r3
} 
 80022b4:	bd38      	pop	{r3, r4, r5, pc}

080022b6 <HAL_TIM_OC_DelayElapsedCallback>:
 80022b6:	4770      	bx	lr

080022b8 <HAL_TIM_IC_CaptureCallback>:
 80022b8:	4770      	bx	lr

080022ba <HAL_TIM_PWM_PulseFinishedCallback>:
 80022ba:	4770      	bx	lr

080022bc <HAL_TIM_TriggerCallback>:
 80022bc:	4770      	bx	lr

080022be <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80022be:	6803      	ldr	r3, [r0, #0]
 80022c0:	691a      	ldr	r2, [r3, #16]
 80022c2:	0791      	lsls	r1, r2, #30
{
 80022c4:	b510      	push	{r4, lr}
 80022c6:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80022c8:	d50e      	bpl.n	80022e8 <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80022ca:	68da      	ldr	r2, [r3, #12]
 80022cc:	0792      	lsls	r2, r2, #30
 80022ce:	d50b      	bpl.n	80022e8 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80022d0:	f06f 0202 	mvn.w	r2, #2
 80022d4:	611a      	str	r2, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80022d6:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80022d8:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80022da:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80022dc:	7602      	strb	r2, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80022de:	d077      	beq.n	80023d0 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 80022e0:	f7ff ffea 	bl	80022b8 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022e4:	2300      	movs	r3, #0
 80022e6:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80022e8:	6823      	ldr	r3, [r4, #0]
 80022ea:	691a      	ldr	r2, [r3, #16]
 80022ec:	0750      	lsls	r0, r2, #29
 80022ee:	d510      	bpl.n	8002312 <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80022f0:	68da      	ldr	r2, [r3, #12]
 80022f2:	0751      	lsls	r1, r2, #29
 80022f4:	d50d      	bpl.n	8002312 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80022f6:	f06f 0204 	mvn.w	r2, #4
 80022fa:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80022fc:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80022fe:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002300:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002304:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8002306:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002308:	d068      	beq.n	80023dc <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 800230a:	f7ff ffd5 	bl	80022b8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800230e:	2300      	movs	r3, #0
 8002310:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002312:	6823      	ldr	r3, [r4, #0]
 8002314:	691a      	ldr	r2, [r3, #16]
 8002316:	0712      	lsls	r2, r2, #28
 8002318:	d50f      	bpl.n	800233a <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 800231a:	68da      	ldr	r2, [r3, #12]
 800231c:	0710      	lsls	r0, r2, #28
 800231e:	d50c      	bpl.n	800233a <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002320:	f06f 0208 	mvn.w	r2, #8
 8002324:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002326:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002328:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800232a:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800232c:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 800232e:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002330:	d05a      	beq.n	80023e8 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8002332:	f7ff ffc1 	bl	80022b8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002336:	2300      	movs	r3, #0
 8002338:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800233a:	6823      	ldr	r3, [r4, #0]
 800233c:	691a      	ldr	r2, [r3, #16]
 800233e:	06d2      	lsls	r2, r2, #27
 8002340:	d510      	bpl.n	8002364 <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8002342:	68da      	ldr	r2, [r3, #12]
 8002344:	06d0      	lsls	r0, r2, #27
 8002346:	d50d      	bpl.n	8002364 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002348:	f06f 0210 	mvn.w	r2, #16
 800234c:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800234e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002350:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002352:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002356:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8002358:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800235a:	d04b      	beq.n	80023f4 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 800235c:	f7ff ffac 	bl	80022b8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002360:	2300      	movs	r3, #0
 8002362:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002364:	6823      	ldr	r3, [r4, #0]
 8002366:	691a      	ldr	r2, [r3, #16]
 8002368:	07d1      	lsls	r1, r2, #31
 800236a:	d508      	bpl.n	800237e <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800236c:	68da      	ldr	r2, [r3, #12]
 800236e:	07d2      	lsls	r2, r2, #31
 8002370:	d505      	bpl.n	800237e <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002372:	f06f 0201 	mvn.w	r2, #1
 8002376:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002378:	4620      	mov	r0, r4
 800237a:	f001 fad3 	bl	8003924 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800237e:	6823      	ldr	r3, [r4, #0]
 8002380:	691a      	ldr	r2, [r3, #16]
 8002382:	0610      	lsls	r0, r2, #24
 8002384:	d508      	bpl.n	8002398 <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002386:	68da      	ldr	r2, [r3, #12]
 8002388:	0611      	lsls	r1, r2, #24
 800238a:	d505      	bpl.n	8002398 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800238c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002390:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002392:	4620      	mov	r0, r4
 8002394:	f000 fadd 	bl	8002952 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002398:	6823      	ldr	r3, [r4, #0]
 800239a:	691a      	ldr	r2, [r3, #16]
 800239c:	0652      	lsls	r2, r2, #25
 800239e:	d508      	bpl.n	80023b2 <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80023a0:	68da      	ldr	r2, [r3, #12]
 80023a2:	0650      	lsls	r0, r2, #25
 80023a4:	d505      	bpl.n	80023b2 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80023a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80023aa:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80023ac:	4620      	mov	r0, r4
 80023ae:	f7ff ff85 	bl	80022bc <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80023b2:	6823      	ldr	r3, [r4, #0]
 80023b4:	691a      	ldr	r2, [r3, #16]
 80023b6:	0691      	lsls	r1, r2, #26
 80023b8:	d522      	bpl.n	8002400 <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80023ba:	68da      	ldr	r2, [r3, #12]
 80023bc:	0692      	lsls	r2, r2, #26
 80023be:	d51f      	bpl.n	8002400 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80023c0:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 80023c4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80023c6:	611a      	str	r2, [r3, #16]
}
 80023c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 80023cc:	f000 bac0 	b.w	8002950 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80023d0:	f7ff ff71 	bl	80022b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023d4:	4620      	mov	r0, r4
 80023d6:	f7ff ff70 	bl	80022ba <HAL_TIM_PWM_PulseFinishedCallback>
 80023da:	e783      	b.n	80022e4 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023dc:	f7ff ff6b 	bl	80022b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023e0:	4620      	mov	r0, r4
 80023e2:	f7ff ff6a 	bl	80022ba <HAL_TIM_PWM_PulseFinishedCallback>
 80023e6:	e792      	b.n	800230e <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023e8:	f7ff ff65 	bl	80022b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 80023ec:	4620      	mov	r0, r4
 80023ee:	f7ff ff64 	bl	80022ba <HAL_TIM_PWM_PulseFinishedCallback>
 80023f2:	e7a0      	b.n	8002336 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023f4:	f7ff ff5f 	bl	80022b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023f8:	4620      	mov	r0, r4
 80023fa:	f7ff ff5e 	bl	80022ba <HAL_TIM_PWM_PulseFinishedCallback>
 80023fe:	e7af      	b.n	8002360 <HAL_TIM_IRQHandler+0xa2>
 8002400:	bd10      	pop	{r4, pc}
	...

08002404 <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8002404:	4a2e      	ldr	r2, [pc, #184]	; (80024c0 <TIM_Base_SetConfig+0xbc>)
  tmpcr1 = TIMx->CR1;
 8002406:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8002408:	4290      	cmp	r0, r2
 800240a:	d012      	beq.n	8002432 <TIM_Base_SetConfig+0x2e>
 800240c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002410:	d00f      	beq.n	8002432 <TIM_Base_SetConfig+0x2e>
 8002412:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002416:	4290      	cmp	r0, r2
 8002418:	d00b      	beq.n	8002432 <TIM_Base_SetConfig+0x2e>
 800241a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800241e:	4290      	cmp	r0, r2
 8002420:	d007      	beq.n	8002432 <TIM_Base_SetConfig+0x2e>
 8002422:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002426:	4290      	cmp	r0, r2
 8002428:	d003      	beq.n	8002432 <TIM_Base_SetConfig+0x2e>
 800242a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800242e:	4290      	cmp	r0, r2
 8002430:	d11d      	bne.n	800246e <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 8002432:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002434:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002438:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 800243a:	4a21      	ldr	r2, [pc, #132]	; (80024c0 <TIM_Base_SetConfig+0xbc>)
 800243c:	4290      	cmp	r0, r2
 800243e:	d104      	bne.n	800244a <TIM_Base_SetConfig+0x46>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002440:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002442:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002446:	4313      	orrs	r3, r2
 8002448:	e028      	b.n	800249c <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 800244a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800244e:	d0f7      	beq.n	8002440 <TIM_Base_SetConfig+0x3c>
 8002450:	4a1c      	ldr	r2, [pc, #112]	; (80024c4 <TIM_Base_SetConfig+0xc0>)
 8002452:	4290      	cmp	r0, r2
 8002454:	d0f4      	beq.n	8002440 <TIM_Base_SetConfig+0x3c>
 8002456:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800245a:	4290      	cmp	r0, r2
 800245c:	d0f0      	beq.n	8002440 <TIM_Base_SetConfig+0x3c>
 800245e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002462:	4290      	cmp	r0, r2
 8002464:	d0ec      	beq.n	8002440 <TIM_Base_SetConfig+0x3c>
 8002466:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800246a:	4290      	cmp	r0, r2
 800246c:	d0e8      	beq.n	8002440 <TIM_Base_SetConfig+0x3c>
 800246e:	4a16      	ldr	r2, [pc, #88]	; (80024c8 <TIM_Base_SetConfig+0xc4>)
 8002470:	4290      	cmp	r0, r2
 8002472:	d0e5      	beq.n	8002440 <TIM_Base_SetConfig+0x3c>
 8002474:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002478:	4290      	cmp	r0, r2
 800247a:	d0e1      	beq.n	8002440 <TIM_Base_SetConfig+0x3c>
 800247c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002480:	4290      	cmp	r0, r2
 8002482:	d0dd      	beq.n	8002440 <TIM_Base_SetConfig+0x3c>
 8002484:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8002488:	4290      	cmp	r0, r2
 800248a:	d0d9      	beq.n	8002440 <TIM_Base_SetConfig+0x3c>
 800248c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002490:	4290      	cmp	r0, r2
 8002492:	d0d5      	beq.n	8002440 <TIM_Base_SetConfig+0x3c>
 8002494:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002498:	4290      	cmp	r0, r2
 800249a:	d0d1      	beq.n	8002440 <TIM_Base_SetConfig+0x3c>
  TIMx->CR1 = tmpcr1;
 800249c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800249e:	688b      	ldr	r3, [r1, #8]
 80024a0:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80024a2:	680b      	ldr	r3, [r1, #0]
 80024a4:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 80024a6:	4b06      	ldr	r3, [pc, #24]	; (80024c0 <TIM_Base_SetConfig+0xbc>)
 80024a8:	4298      	cmp	r0, r3
 80024aa:	d006      	beq.n	80024ba <TIM_Base_SetConfig+0xb6>
 80024ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024b0:	4298      	cmp	r0, r3
 80024b2:	d002      	beq.n	80024ba <TIM_Base_SetConfig+0xb6>
  TIMx->EGR = TIM_EGR_UG;
 80024b4:	2301      	movs	r3, #1
 80024b6:	6143      	str	r3, [r0, #20]
}
 80024b8:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 80024ba:	690b      	ldr	r3, [r1, #16]
 80024bc:	6303      	str	r3, [r0, #48]	; 0x30
 80024be:	e7f9      	b.n	80024b4 <TIM_Base_SetConfig+0xb0>
 80024c0:	40010000 	.word	0x40010000
 80024c4:	40000400 	.word	0x40000400
 80024c8:	40014000 	.word	0x40014000

080024cc <HAL_TIM_Base_Init>:
{ 
 80024cc:	b510      	push	{r4, lr}
  if(htim == NULL)
 80024ce:	4604      	mov	r4, r0
 80024d0:	b1a0      	cbz	r0, 80024fc <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80024d2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80024d6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80024da:	b91b      	cbnz	r3, 80024e4 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80024dc:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 80024e0:	f001 fe0c 	bl	80040fc <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80024e4:	2302      	movs	r3, #2
 80024e6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80024ea:	6820      	ldr	r0, [r4, #0]
 80024ec:	1d21      	adds	r1, r4, #4
 80024ee:	f7ff ff89 	bl	8002404 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80024f2:	2301      	movs	r3, #1
 80024f4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 80024f8:	2000      	movs	r0, #0
 80024fa:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80024fc:	2001      	movs	r0, #1
}
 80024fe:	bd10      	pop	{r4, pc}

08002500 <HAL_TIM_PWM_Init>:
{
 8002500:	b510      	push	{r4, lr}
  if(htim == NULL)
 8002502:	4604      	mov	r4, r0
 8002504:	b1a0      	cbz	r0, 8002530 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002506:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800250a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800250e:	b91b      	cbnz	r3, 8002518 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002510:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_PWM_MspInit(htim);
 8002514:	f7ff fdf4 	bl	8002100 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;  
 8002518:	2302      	movs	r3, #2
 800251a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800251e:	6820      	ldr	r0, [r4, #0]
 8002520:	1d21      	adds	r1, r4, #4
 8002522:	f7ff ff6f 	bl	8002404 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002526:	2301      	movs	r3, #1
 8002528:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 800252c:	2000      	movs	r0, #0
 800252e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002530:	2001      	movs	r0, #1
}  
 8002532:	bd10      	pop	{r4, pc}

08002534 <HAL_TIM_IC_Init>:
{
 8002534:	b510      	push	{r4, lr}
  if(htim == NULL)
 8002536:	4604      	mov	r4, r0
 8002538:	b1a0      	cbz	r0, 8002564 <HAL_TIM_IC_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 800253a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800253e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002542:	b91b      	cbnz	r3, 800254c <HAL_TIM_IC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002544:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_IC_MspInit(htim);
 8002548:	f7ff fddb 	bl	8002102 <HAL_TIM_IC_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;   
 800254c:	2302      	movs	r3, #2
 800254e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002552:	6820      	ldr	r0, [r4, #0]
 8002554:	1d21      	adds	r1, r4, #4
 8002556:	f7ff ff55 	bl	8002404 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800255a:	2301      	movs	r3, #1
 800255c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8002560:	2000      	movs	r0, #0
 8002562:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002564:	2001      	movs	r0, #1
}
 8002566:	bd10      	pop	{r4, pc}

08002568 <TIM_TI1_SetConfig>:
{
 8002568:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800256a:	6a04      	ldr	r4, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800256c:	4e1a      	ldr	r6, [pc, #104]	; (80025d8 <TIM_TI1_SetConfig+0x70>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800256e:	f024 0401 	bic.w	r4, r4, #1
 8002572:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002574:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8002576:	6a05      	ldr	r5, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002578:	42b0      	cmp	r0, r6
 800257a:	f024 0403 	bic.w	r4, r4, #3
 800257e:	d01a      	beq.n	80025b6 <TIM_TI1_SetConfig+0x4e>
 8002580:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002584:	d017      	beq.n	80025b6 <TIM_TI1_SetConfig+0x4e>
 8002586:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 800258a:	42b0      	cmp	r0, r6
 800258c:	d013      	beq.n	80025b6 <TIM_TI1_SetConfig+0x4e>
 800258e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002592:	42b0      	cmp	r0, r6
 8002594:	d00f      	beq.n	80025b6 <TIM_TI1_SetConfig+0x4e>
 8002596:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800259a:	42b0      	cmp	r0, r6
 800259c:	d00b      	beq.n	80025b6 <TIM_TI1_SetConfig+0x4e>
 800259e:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 80025a2:	42b0      	cmp	r0, r6
 80025a4:	d007      	beq.n	80025b6 <TIM_TI1_SetConfig+0x4e>
 80025a6:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 80025aa:	42b0      	cmp	r0, r6
 80025ac:	d003      	beq.n	80025b6 <TIM_TI1_SetConfig+0x4e>
 80025ae:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 80025b2:	42b0      	cmp	r0, r6
 80025b4:	d10d      	bne.n	80025d2 <TIM_TI1_SetConfig+0x6a>
    tmpccmr1 |= TIM_ICSelection;
 80025b6:	4322      	orrs	r2, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80025b8:	011b      	lsls	r3, r3, #4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80025ba:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80025be:	b2db      	uxtb	r3, r3
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80025c0:	f025 050a 	bic.w	r5, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80025c4:	f001 010a 	and.w	r1, r1, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80025c8:	431a      	orrs	r2, r3
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80025ca:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1;
 80025cc:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80025ce:	6201      	str	r1, [r0, #32]
}
 80025d0:	bd70      	pop	{r4, r5, r6, pc}
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80025d2:	f044 0201 	orr.w	r2, r4, #1
 80025d6:	e7ef      	b.n	80025b8 <TIM_TI1_SetConfig+0x50>
 80025d8:	40010000 	.word	0x40010000

080025dc <HAL_TIM_IC_ConfigChannel>:
{
 80025dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 80025de:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80025e2:	2b01      	cmp	r3, #1
{
 80025e4:	4604      	mov	r4, r0
 80025e6:	460d      	mov	r5, r1
 80025e8:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 80025ec:	d019      	beq.n	8002622 <HAL_TIM_IC_ConfigChannel+0x46>
 80025ee:	2301      	movs	r3, #1
 80025f0:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 80025f4:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  if (Channel == TIM_CHANNEL_1)
 80025f8:	b9a2      	cbnz	r2, 8002624 <HAL_TIM_IC_ConfigChannel+0x48>
    TIM_TI1_SetConfig(htim->Instance,
 80025fa:	68cb      	ldr	r3, [r1, #12]
 80025fc:	6820      	ldr	r0, [r4, #0]
 80025fe:	c906      	ldmia	r1, {r1, r2}
 8002600:	f7ff ffb2 	bl	8002568 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002604:	6823      	ldr	r3, [r4, #0]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002606:	68a9      	ldr	r1, [r5, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002608:	699a      	ldr	r2, [r3, #24]
 800260a:	f022 020c 	bic.w	r2, r2, #12
 800260e:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002610:	699a      	ldr	r2, [r3, #24]
 8002612:	430a      	orrs	r2, r1
 8002614:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8002616:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8002618:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800261a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 800261e:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 8002622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (Channel == TIM_CHANNEL_2)
 8002624:	2a04      	cmp	r2, #4
 8002626:	688e      	ldr	r6, [r1, #8]
 8002628:	6823      	ldr	r3, [r4, #0]
 800262a:	68e8      	ldr	r0, [r5, #12]
 800262c:	c982      	ldmia	r1, {r1, r7}
 800262e:	d11f      	bne.n	8002670 <HAL_TIM_IC_ConfigChannel+0x94>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002630:	6a1a      	ldr	r2, [r3, #32]
 8002632:	f022 0210 	bic.w	r2, r2, #16
 8002636:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002638:	699a      	ldr	r2, [r3, #24]
  tmpccer = TIMx->CCER;
 800263a:	6a1d      	ldr	r5, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800263c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002640:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002644:	0300      	lsls	r0, r0, #12
 8002646:	b280      	uxth	r0, r0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002648:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800264c:	0109      	lsls	r1, r1, #4
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800264e:	4302      	orrs	r2, r0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002650:	f001 01a0 	and.w	r1, r1, #160	; 0xa0
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002654:	f025 00a0 	bic.w	r0, r5, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002658:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1 ;
 800265a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800265c:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800265e:	699a      	ldr	r2, [r3, #24]
 8002660:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002664:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002666:	699a      	ldr	r2, [r3, #24]
 8002668:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 800266c:	619e      	str	r6, [r3, #24]
 800266e:	e7d2      	b.n	8002616 <HAL_TIM_IC_ConfigChannel+0x3a>
  else if (Channel == TIM_CHANNEL_3)
 8002670:	2a08      	cmp	r2, #8
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002672:	6a1a      	ldr	r2, [r3, #32]
  else if (Channel == TIM_CHANNEL_3)
 8002674:	d11c      	bne.n	80026b0 <HAL_TIM_IC_ConfigChannel+0xd4>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002676:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800267a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800267c:	69da      	ldr	r2, [r3, #28]
  tmpccer = TIMx->CCER;
 800267e:	6a1d      	ldr	r5, [r3, #32]
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002680:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr2 |= TIM_ICSelection;
 8002684:	433a      	orrs	r2, r7
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002686:	0100      	lsls	r0, r0, #4
 8002688:	b2c0      	uxtb	r0, r0
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800268a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800268e:	0209      	lsls	r1, r1, #8
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002690:	4302      	orrs	r2, r0
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002692:	f401 6120 	and.w	r1, r1, #2560	; 0xa00
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002696:	f425 6020 	bic.w	r0, r5, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800269a:	4301      	orrs	r1, r0
  TIMx->CCMR2 = tmpccmr2;
 800269c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800269e:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80026a0:	69da      	ldr	r2, [r3, #28]
 80026a2:	f022 020c 	bic.w	r2, r2, #12
 80026a6:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80026a8:	69da      	ldr	r2, [r3, #28]
 80026aa:	4316      	orrs	r6, r2
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80026ac:	61de      	str	r6, [r3, #28]
 80026ae:	e7b2      	b.n	8002616 <HAL_TIM_IC_ConfigChannel+0x3a>
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80026b0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80026b4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80026b6:	69da      	ldr	r2, [r3, #28]
  tmpccer = TIMx->CCER;
 80026b8:	6a1d      	ldr	r5, [r3, #32]
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80026ba:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80026be:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80026c2:	0300      	lsls	r0, r0, #12
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80026c4:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80026c8:	b280      	uxth	r0, r0
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80026ca:	0309      	lsls	r1, r1, #12
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80026cc:	4310      	orrs	r0, r2
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80026ce:	f401 4120 	and.w	r1, r1, #40960	; 0xa000
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80026d2:	f425 4220 	bic.w	r2, r5, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80026d6:	4311      	orrs	r1, r2
  TIMx->CCMR2 = tmpccmr2;
 80026d8:	61d8      	str	r0, [r3, #28]
  TIMx->CCER = tmpccer ;
 80026da:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80026dc:	69da      	ldr	r2, [r3, #28]
 80026de:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80026e2:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80026e4:	69da      	ldr	r2, [r3, #28]
 80026e6:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 80026ea:	e7df      	b.n	80026ac <HAL_TIM_IC_ConfigChannel+0xd0>

080026ec <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80026ec:	6a03      	ldr	r3, [r0, #32]
 80026ee:	f023 0310 	bic.w	r3, r3, #16
 80026f2:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80026f4:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 80026f6:	6842      	ldr	r2, [r0, #4]
{
 80026f8:	b570      	push	{r4, r5, r6, lr}
  tmpccmrx = TIMx->CCMR1;
 80026fa:	6984      	ldr	r4, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80026fc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80026fe:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002702:	ea44 2505 	orr.w	r5, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002706:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8002708:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800270c:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002710:	4c0d      	ldr	r4, [pc, #52]	; (8002748 <TIM_OC2_SetConfig+0x5c>)
 8002712:	42a0      	cmp	r0, r4
 8002714:	d009      	beq.n	800272a <TIM_OC2_SetConfig+0x3e>
 8002716:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800271a:	42a0      	cmp	r0, r4
 800271c:	d005      	beq.n	800272a <TIM_OC2_SetConfig+0x3e>
  TIMx->CR2 = tmpcr2;
 800271e:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8002720:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002722:	6185      	str	r5, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002724:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8002726:	6203      	str	r3, [r0, #32]
}
 8002728:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800272a:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800272c:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC2NP;
 800272e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002732:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002736:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002738:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800273c:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 800273e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002742:	ea42 0284 	orr.w	r2, r2, r4, lsl #2
 8002746:	e7ea      	b.n	800271e <TIM_OC2_SetConfig+0x32>
 8002748:	40010000 	.word	0x40010000

0800274c <HAL_TIM_PWM_ConfigChannel>:
{
 800274c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800274e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002752:	2b01      	cmp	r3, #1
{
 8002754:	4604      	mov	r4, r0
 8002756:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 800275a:	d025      	beq.n	80027a8 <HAL_TIM_PWM_ConfigChannel+0x5c>
 800275c:	2301      	movs	r3, #1
 800275e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 8002762:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  switch (Channel)
 8002766:	2a0c      	cmp	r2, #12
 8002768:	d818      	bhi.n	800279c <HAL_TIM_PWM_ConfigChannel+0x50>
 800276a:	e8df f002 	tbb	[pc, r2]
 800276e:	1707      	.short	0x1707
 8002770:	171e1717 	.word	0x171e1717
 8002774:	172f1717 	.word	0x172f1717
 8002778:	1717      	.short	0x1717
 800277a:	40          	.byte	0x40
 800277b:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800277c:	6820      	ldr	r0, [r4, #0]
 800277e:	f7ff fbdb 	bl	8001f38 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002782:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002784:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002786:	699a      	ldr	r2, [r3, #24]
 8002788:	f042 0208 	orr.w	r2, r2, #8
 800278c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800278e:	699a      	ldr	r2, [r3, #24]
 8002790:	f022 0204 	bic.w	r2, r2, #4
 8002794:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002796:	699a      	ldr	r2, [r3, #24]
 8002798:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800279a:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 800279c:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800279e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80027a0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 80027a4:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 80027a8:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80027aa:	6820      	ldr	r0, [r4, #0]
 80027ac:	f7ff ff9e 	bl	80026ec <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80027b0:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80027b2:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80027b4:	699a      	ldr	r2, [r3, #24]
 80027b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80027bc:	699a      	ldr	r2, [r3, #24]
 80027be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80027c4:	699a      	ldr	r2, [r3, #24]
 80027c6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80027ca:	e7e6      	b.n	800279a <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80027cc:	6820      	ldr	r0, [r4, #0]
 80027ce:	f7ff fbdf 	bl	8001f90 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80027d2:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 80027d4:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80027d6:	69da      	ldr	r2, [r3, #28]
 80027d8:	f042 0208 	orr.w	r2, r2, #8
 80027dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80027de:	69da      	ldr	r2, [r3, #28]
 80027e0:	f022 0204 	bic.w	r2, r2, #4
 80027e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 80027e6:	69da      	ldr	r2, [r3, #28]
 80027e8:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 80027ea:	61da      	str	r2, [r3, #28]
    break;
 80027ec:	e7d6      	b.n	800279c <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80027ee:	6820      	ldr	r0, [r4, #0]
 80027f0:	f7ff fbfe 	bl	8001ff0 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80027f4:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 80027f6:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80027f8:	69da      	ldr	r2, [r3, #28]
 80027fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027fe:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002800:	69da      	ldr	r2, [r3, #28]
 8002802:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002806:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8002808:	69da      	ldr	r2, [r3, #28]
 800280a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800280e:	e7ec      	b.n	80027ea <HAL_TIM_PWM_ConfigChannel+0x9e>

08002810 <TIM_CCxChannelCmd>:
  TIMx->CCER &= ~tmp;
 8002810:	6a03      	ldr	r3, [r0, #32]
{
 8002812:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << Channel;
 8002814:	2401      	movs	r4, #1
 8002816:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8002818:	ea23 0304 	bic.w	r3, r3, r4
 800281c:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 800281e:	6a03      	ldr	r3, [r0, #32]
 8002820:	408a      	lsls	r2, r1
 8002822:	431a      	orrs	r2, r3
 8002824:	6202      	str	r2, [r0, #32]
 8002826:	bd10      	pop	{r4, pc}

08002828 <HAL_TIM_PWM_Start>:
{
 8002828:	b510      	push	{r4, lr}
 800282a:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800282c:	2201      	movs	r2, #1
 800282e:	6800      	ldr	r0, [r0, #0]
 8002830:	f7ff ffee 	bl	8002810 <TIM_CCxChannelCmd>
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8002834:	6823      	ldr	r3, [r4, #0]
 8002836:	4a08      	ldr	r2, [pc, #32]	; (8002858 <HAL_TIM_PWM_Start+0x30>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d003      	beq.n	8002844 <HAL_TIM_PWM_Start+0x1c>
 800283c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002840:	4293      	cmp	r3, r2
 8002842:	d103      	bne.n	800284c <HAL_TIM_PWM_Start+0x24>
    __HAL_TIM_MOE_ENABLE(htim);
 8002844:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002846:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800284a:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	f042 0201 	orr.w	r2, r2, #1
 8002852:	601a      	str	r2, [r3, #0]
} 
 8002854:	2000      	movs	r0, #0
 8002856:	bd10      	pop	{r4, pc}
 8002858:	40010000 	.word	0x40010000

0800285c <HAL_TIM_PWM_Stop>:
{ 
 800285c:	b510      	push	{r4, lr}
 800285e:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002860:	2200      	movs	r2, #0
 8002862:	6800      	ldr	r0, [r0, #0]
 8002864:	f7ff ffd4 	bl	8002810 <TIM_CCxChannelCmd>
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8002868:	6823      	ldr	r3, [r4, #0]
 800286a:	4a14      	ldr	r2, [pc, #80]	; (80028bc <HAL_TIM_PWM_Stop+0x60>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d003      	beq.n	8002878 <HAL_TIM_PWM_Stop+0x1c>
 8002870:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002874:	4293      	cmp	r3, r2
 8002876:	d10d      	bne.n	8002894 <HAL_TIM_PWM_Stop+0x38>
    __HAL_TIM_MOE_DISABLE(htim);
 8002878:	6a19      	ldr	r1, [r3, #32]
 800287a:	f241 1211 	movw	r2, #4369	; 0x1111
 800287e:	4211      	tst	r1, r2
 8002880:	d108      	bne.n	8002894 <HAL_TIM_PWM_Stop+0x38>
 8002882:	6a19      	ldr	r1, [r3, #32]
 8002884:	f240 4244 	movw	r2, #1092	; 0x444
 8002888:	4211      	tst	r1, r2
 800288a:	bf02      	ittt	eq
 800288c:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 800288e:	f422 4200 	biceq.w	r2, r2, #32768	; 0x8000
 8002892:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 8002894:	6a19      	ldr	r1, [r3, #32]
 8002896:	f241 1211 	movw	r2, #4369	; 0x1111
 800289a:	4211      	tst	r1, r2
 800289c:	d108      	bne.n	80028b0 <HAL_TIM_PWM_Stop+0x54>
 800289e:	6a19      	ldr	r1, [r3, #32]
 80028a0:	f240 4244 	movw	r2, #1092	; 0x444
 80028a4:	4211      	tst	r1, r2
 80028a6:	d103      	bne.n	80028b0 <HAL_TIM_PWM_Stop+0x54>
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	f022 0201 	bic.w	r2, r2, #1
 80028ae:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 80028b0:	2301      	movs	r3, #1
 80028b2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
} 
 80028b6:	2000      	movs	r0, #0
 80028b8:	bd10      	pop	{r4, pc}
 80028ba:	bf00      	nop
 80028bc:	40010000 	.word	0x40010000

080028c0 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 80028c0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80028c4:	2b01      	cmp	r3, #1
{
 80028c6:	b510      	push	{r4, lr}
 80028c8:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 80028cc:	d018      	beq.n	8002900 <HAL_TIMEx_MasterConfigSynchronization+0x40>
  
  htim->State = HAL_TIM_STATE_BUSY;
 80028ce:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80028d2:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 80028d4:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80028d6:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80028d8:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80028da:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80028de:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 80028e0:	685a      	ldr	r2, [r3, #4]
 80028e2:	4322      	orrs	r2, r4
 80028e4:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80028e6:	689a      	ldr	r2, [r3, #8]
 80028e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028ec:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80028ee:	689a      	ldr	r2, [r3, #8]
 80028f0:	430a      	orrs	r2, r1
 80028f2:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 80028f4:	2301      	movs	r3, #1
 80028f6:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 80028fa:	2300      	movs	r3, #0
 80028fc:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 8002900:	4618      	mov	r0, r3
  
  return HAL_OK;
} 
 8002902:	bd10      	pop	{r4, pc}

08002904 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8002904:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002908:	2b01      	cmp	r3, #1
 800290a:	d01f      	beq.n	800294c <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */
  
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800290c:	68cb      	ldr	r3, [r1, #12]
 800290e:	688a      	ldr	r2, [r1, #8]
 8002910:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002914:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002916:	684a      	ldr	r2, [r1, #4]
 8002918:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800291c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800291e:	680a      	ldr	r2, [r1, #0]
 8002920:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002924:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002926:	690a      	ldr	r2, [r1, #16]
 8002928:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800292c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800292e:	694a      	ldr	r2, [r1, #20]
 8002930:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002934:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002936:	698a      	ldr	r2, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002938:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800293c:	4313      	orrs	r3, r2
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800293e:	6802      	ldr	r2, [r0, #0]
 8002940:	6453      	str	r3, [r2, #68]	; 0x44
  
  __HAL_UNLOCK(htim);
 8002942:	2300      	movs	r3, #0
 8002944:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

  return HAL_OK;
 8002948:	4618      	mov	r0, r3
 800294a:	4770      	bx	lr
  __HAL_LOCK(htim);
 800294c:	2002      	movs	r0, #2
}
 800294e:	4770      	bx	lr

08002950 <HAL_TIMEx_CommutationCallback>:
 8002950:	4770      	bx	lr

08002952 <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002952:	4770      	bx	lr

08002954 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002954:	6803      	ldr	r3, [r0, #0]
 8002956:	68da      	ldr	r2, [r3, #12]
 8002958:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800295c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800295e:	695a      	ldr	r2, [r3, #20]
 8002960:	f022 0201 	bic.w	r2, r2, #1
 8002964:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002966:	2320      	movs	r3, #32
 8002968:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 800296c:	4770      	bx	lr
	...

08002970 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8002974:	6806      	ldr	r6, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8002976:	68c2      	ldr	r2, [r0, #12]
  tmpreg = huart->Instance->CR2;
 8002978:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800297a:	69c1      	ldr	r1, [r0, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 800297c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8002980:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8002982:	6133      	str	r3, [r6, #16]
{
 8002984:	4604      	mov	r4, r0
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002986:	6883      	ldr	r3, [r0, #8]
 8002988:	6900      	ldr	r0, [r0, #16]
  tmpreg = huart->Instance->CR1;
 800298a:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800298c:	4303      	orrs	r3, r0
 800298e:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8002990:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002994:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8002996:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800299a:	430b      	orrs	r3, r1
 800299c:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 800299e:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 80029a0:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 80029a2:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 80029a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 80029a8:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029aa:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 80029ae:	6173      	str	r3, [r6, #20]
 80029b0:	4b7a      	ldr	r3, [pc, #488]	; (8002b9c <UART_SetConfig+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029b2:	d17c      	bne.n	8002aae <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80029b4:	429e      	cmp	r6, r3
 80029b6:	d003      	beq.n	80029c0 <UART_SetConfig+0x50>
 80029b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80029bc:	429e      	cmp	r6, r3
 80029be:	d144      	bne.n	8002a4a <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80029c0:	f7fe fe02 	bl	80015c8 <HAL_RCC_GetPCLK2Freq>
 80029c4:	2519      	movs	r5, #25
 80029c6:	fb05 f300 	mul.w	r3, r5, r0
 80029ca:	6860      	ldr	r0, [r4, #4]
 80029cc:	f04f 0964 	mov.w	r9, #100	; 0x64
 80029d0:	0040      	lsls	r0, r0, #1
 80029d2:	fbb3 f3f0 	udiv	r3, r3, r0
 80029d6:	fbb3 f3f9 	udiv	r3, r3, r9
 80029da:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80029de:	f7fe fdf3 	bl	80015c8 <HAL_RCC_GetPCLK2Freq>
 80029e2:	6863      	ldr	r3, [r4, #4]
 80029e4:	4368      	muls	r0, r5
 80029e6:	005b      	lsls	r3, r3, #1
 80029e8:	fbb0 f7f3 	udiv	r7, r0, r3
 80029ec:	f7fe fdec 	bl	80015c8 <HAL_RCC_GetPCLK2Freq>
 80029f0:	6863      	ldr	r3, [r4, #4]
 80029f2:	4368      	muls	r0, r5
 80029f4:	005b      	lsls	r3, r3, #1
 80029f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80029fa:	fbb3 f3f9 	udiv	r3, r3, r9
 80029fe:	fb09 7313 	mls	r3, r9, r3, r7
 8002a02:	00db      	lsls	r3, r3, #3
 8002a04:	3332      	adds	r3, #50	; 0x32
 8002a06:	fbb3 f3f9 	udiv	r3, r3, r9
 8002a0a:	005b      	lsls	r3, r3, #1
 8002a0c:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8002a10:	f7fe fdda 	bl	80015c8 <HAL_RCC_GetPCLK2Freq>
 8002a14:	6862      	ldr	r2, [r4, #4]
 8002a16:	4368      	muls	r0, r5
 8002a18:	0052      	lsls	r2, r2, #1
 8002a1a:	fbb0 faf2 	udiv	sl, r0, r2
 8002a1e:	f7fe fdd3 	bl	80015c8 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002a22:	6863      	ldr	r3, [r4, #4]
 8002a24:	4368      	muls	r0, r5
 8002a26:	005b      	lsls	r3, r3, #1
 8002a28:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a2c:	fbb3 f3f9 	udiv	r3, r3, r9
 8002a30:	fb09 a313 	mls	r3, r9, r3, sl
 8002a34:	00db      	lsls	r3, r3, #3
 8002a36:	3332      	adds	r3, #50	; 0x32
 8002a38:	fbb3 f3f9 	udiv	r3, r3, r9
 8002a3c:	f003 0307 	and.w	r3, r3, #7
 8002a40:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002a42:	443b      	add	r3, r7
 8002a44:	60b3      	str	r3, [r6, #8]
 8002a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002a4a:	f7fe fdad 	bl	80015a8 <HAL_RCC_GetPCLK1Freq>
 8002a4e:	2519      	movs	r5, #25
 8002a50:	fb05 f300 	mul.w	r3, r5, r0
 8002a54:	6860      	ldr	r0, [r4, #4]
 8002a56:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002a5a:	0040      	lsls	r0, r0, #1
 8002a5c:	fbb3 f3f0 	udiv	r3, r3, r0
 8002a60:	fbb3 f3f9 	udiv	r3, r3, r9
 8002a64:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002a68:	f7fe fd9e 	bl	80015a8 <HAL_RCC_GetPCLK1Freq>
 8002a6c:	6863      	ldr	r3, [r4, #4]
 8002a6e:	4368      	muls	r0, r5
 8002a70:	005b      	lsls	r3, r3, #1
 8002a72:	fbb0 f7f3 	udiv	r7, r0, r3
 8002a76:	f7fe fd97 	bl	80015a8 <HAL_RCC_GetPCLK1Freq>
 8002a7a:	6863      	ldr	r3, [r4, #4]
 8002a7c:	4368      	muls	r0, r5
 8002a7e:	005b      	lsls	r3, r3, #1
 8002a80:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a84:	fbb3 f3f9 	udiv	r3, r3, r9
 8002a88:	fb09 7313 	mls	r3, r9, r3, r7
 8002a8c:	00db      	lsls	r3, r3, #3
 8002a8e:	3332      	adds	r3, #50	; 0x32
 8002a90:	fbb3 f3f9 	udiv	r3, r3, r9
 8002a94:	005b      	lsls	r3, r3, #1
 8002a96:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8002a9a:	f7fe fd85 	bl	80015a8 <HAL_RCC_GetPCLK1Freq>
 8002a9e:	6862      	ldr	r2, [r4, #4]
 8002aa0:	4368      	muls	r0, r5
 8002aa2:	0052      	lsls	r2, r2, #1
 8002aa4:	fbb0 faf2 	udiv	sl, r0, r2
 8002aa8:	f7fe fd7e 	bl	80015a8 <HAL_RCC_GetPCLK1Freq>
 8002aac:	e7b9      	b.n	8002a22 <UART_SetConfig+0xb2>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8002aae:	429e      	cmp	r6, r3
 8002ab0:	d002      	beq.n	8002ab8 <UART_SetConfig+0x148>
 8002ab2:	4b3b      	ldr	r3, [pc, #236]	; (8002ba0 <UART_SetConfig+0x230>)
 8002ab4:	429e      	cmp	r6, r3
 8002ab6:	d140      	bne.n	8002b3a <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002ab8:	f7fe fd86 	bl	80015c8 <HAL_RCC_GetPCLK2Freq>
 8002abc:	6867      	ldr	r7, [r4, #4]
 8002abe:	2519      	movs	r5, #25
 8002ac0:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002ac4:	fb05 f300 	mul.w	r3, r5, r0
 8002ac8:	00bf      	lsls	r7, r7, #2
 8002aca:	fbb3 f3f7 	udiv	r3, r3, r7
 8002ace:	fbb3 f3f9 	udiv	r3, r3, r9
 8002ad2:	011f      	lsls	r7, r3, #4
 8002ad4:	f7fe fd78 	bl	80015c8 <HAL_RCC_GetPCLK2Freq>
 8002ad8:	6863      	ldr	r3, [r4, #4]
 8002ada:	4368      	muls	r0, r5
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	fbb0 f8f3 	udiv	r8, r0, r3
 8002ae2:	f7fe fd71 	bl	80015c8 <HAL_RCC_GetPCLK2Freq>
 8002ae6:	6863      	ldr	r3, [r4, #4]
 8002ae8:	4368      	muls	r0, r5
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	fbb0 f3f3 	udiv	r3, r0, r3
 8002af0:	fbb3 f3f9 	udiv	r3, r3, r9
 8002af4:	fb09 8313 	mls	r3, r9, r3, r8
 8002af8:	011b      	lsls	r3, r3, #4
 8002afa:	3332      	adds	r3, #50	; 0x32
 8002afc:	fbb3 f3f9 	udiv	r3, r3, r9
 8002b00:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8002b04:	f7fe fd60 	bl	80015c8 <HAL_RCC_GetPCLK2Freq>
 8002b08:	6862      	ldr	r2, [r4, #4]
 8002b0a:	4368      	muls	r0, r5
 8002b0c:	0092      	lsls	r2, r2, #2
 8002b0e:	fbb0 faf2 	udiv	sl, r0, r2
 8002b12:	f7fe fd59 	bl	80015c8 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002b16:	6863      	ldr	r3, [r4, #4]
 8002b18:	4368      	muls	r0, r5
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b20:	fbb3 f3f9 	udiv	r3, r3, r9
 8002b24:	fb09 a313 	mls	r3, r9, r3, sl
 8002b28:	011b      	lsls	r3, r3, #4
 8002b2a:	3332      	adds	r3, #50	; 0x32
 8002b2c:	fbb3 f3f9 	udiv	r3, r3, r9
 8002b30:	f003 030f 	and.w	r3, r3, #15
 8002b34:	ea43 0308 	orr.w	r3, r3, r8
 8002b38:	e783      	b.n	8002a42 <UART_SetConfig+0xd2>
 8002b3a:	f7fe fd35 	bl	80015a8 <HAL_RCC_GetPCLK1Freq>
 8002b3e:	6867      	ldr	r7, [r4, #4]
 8002b40:	2519      	movs	r5, #25
 8002b42:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002b46:	fb05 f300 	mul.w	r3, r5, r0
 8002b4a:	00bf      	lsls	r7, r7, #2
 8002b4c:	fbb3 f3f7 	udiv	r3, r3, r7
 8002b50:	fbb3 f3f9 	udiv	r3, r3, r9
 8002b54:	011f      	lsls	r7, r3, #4
 8002b56:	f7fe fd27 	bl	80015a8 <HAL_RCC_GetPCLK1Freq>
 8002b5a:	6863      	ldr	r3, [r4, #4]
 8002b5c:	4368      	muls	r0, r5
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	fbb0 f8f3 	udiv	r8, r0, r3
 8002b64:	f7fe fd20 	bl	80015a8 <HAL_RCC_GetPCLK1Freq>
 8002b68:	6863      	ldr	r3, [r4, #4]
 8002b6a:	4368      	muls	r0, r5
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b72:	fbb3 f3f9 	udiv	r3, r3, r9
 8002b76:	fb09 8313 	mls	r3, r9, r3, r8
 8002b7a:	011b      	lsls	r3, r3, #4
 8002b7c:	3332      	adds	r3, #50	; 0x32
 8002b7e:	fbb3 f3f9 	udiv	r3, r3, r9
 8002b82:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8002b86:	f7fe fd0f 	bl	80015a8 <HAL_RCC_GetPCLK1Freq>
 8002b8a:	6862      	ldr	r2, [r4, #4]
 8002b8c:	4368      	muls	r0, r5
 8002b8e:	0092      	lsls	r2, r2, #2
 8002b90:	fbb0 faf2 	udiv	sl, r0, r2
 8002b94:	f7fe fd08 	bl	80015a8 <HAL_RCC_GetPCLK1Freq>
 8002b98:	e7bd      	b.n	8002b16 <UART_SetConfig+0x1a6>
 8002b9a:	bf00      	nop
 8002b9c:	40011000 	.word	0x40011000
 8002ba0:	40011400 	.word	0x40011400

08002ba4 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8002ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ba6:	4604      	mov	r4, r0
 8002ba8:	460e      	mov	r6, r1
 8002baa:	4617      	mov	r7, r2
 8002bac:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8002bae:	6821      	ldr	r1, [r4, #0]
 8002bb0:	680b      	ldr	r3, [r1, #0]
 8002bb2:	ea36 0303 	bics.w	r3, r6, r3
 8002bb6:	d101      	bne.n	8002bbc <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8002bb8:	2000      	movs	r0, #0
}
 8002bba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8002bbc:	1c6b      	adds	r3, r5, #1
 8002bbe:	d0f7      	beq.n	8002bb0 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002bc0:	b995      	cbnz	r5, 8002be8 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002bc2:	6823      	ldr	r3, [r4, #0]
 8002bc4:	68da      	ldr	r2, [r3, #12]
 8002bc6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002bca:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bcc:	695a      	ldr	r2, [r3, #20]
 8002bce:	f022 0201 	bic.w	r2, r2, #1
 8002bd2:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8002bd4:	2320      	movs	r3, #32
 8002bd6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002bda:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8002bde:	2300      	movs	r3, #0
 8002be0:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8002be4:	2003      	movs	r0, #3
 8002be6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002be8:	f7fe fa1c 	bl	8001024 <HAL_GetTick>
 8002bec:	1bc0      	subs	r0, r0, r7
 8002bee:	4285      	cmp	r5, r0
 8002bf0:	d2dd      	bcs.n	8002bae <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8002bf2:	e7e6      	b.n	8002bc2 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08002bf4 <HAL_UART_Init>:
{
 8002bf4:	b510      	push	{r4, lr}
  if(huart == NULL)
 8002bf6:	4604      	mov	r4, r0
 8002bf8:	b340      	cbz	r0, 8002c4c <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8002bfa:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002bfe:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002c02:	b91b      	cbnz	r3, 8002c0c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002c04:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8002c08:	f001 fc66 	bl	80044d8 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8002c0c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002c0e:	2324      	movs	r3, #36	; 0x24
 8002c10:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002c14:	68d3      	ldr	r3, [r2, #12]
 8002c16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c1a:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002c1c:	4620      	mov	r0, r4
 8002c1e:	f7ff fea7 	bl	8002970 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c22:	6823      	ldr	r3, [r4, #0]
 8002c24:	691a      	ldr	r2, [r3, #16]
 8002c26:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c2a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c2c:	695a      	ldr	r2, [r3, #20]
 8002c2e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c32:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8002c34:	68da      	ldr	r2, [r3, #12]
 8002c36:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c3a:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c3c:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8002c3e:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c40:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8002c42:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8002c46:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8002c4a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002c4c:	2001      	movs	r0, #1
}
 8002c4e:	bd10      	pop	{r4, pc}

08002c50 <HAL_UART_Transmit>:
{
 8002c50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c54:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY) 
 8002c56:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002c5a:	2b20      	cmp	r3, #32
{
 8002c5c:	4604      	mov	r4, r0
 8002c5e:	460d      	mov	r5, r1
 8002c60:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY) 
 8002c62:	d14f      	bne.n	8002d04 <HAL_UART_Transmit+0xb4>
    if((pData == NULL ) || (Size == 0)) 
 8002c64:	2900      	cmp	r1, #0
 8002c66:	d04a      	beq.n	8002cfe <HAL_UART_Transmit+0xae>
 8002c68:	2a00      	cmp	r2, #0
 8002c6a:	d048      	beq.n	8002cfe <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 8002c6c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d047      	beq.n	8002d04 <HAL_UART_Transmit+0xb4>
 8002c74:	2301      	movs	r3, #1
 8002c76:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c7e:	2321      	movs	r3, #33	; 0x21
 8002c80:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8002c84:	f7fe f9ce 	bl	8001024 <HAL_GetTick>
    huart->TxXferSize = Size;
 8002c88:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 8002c8c:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8002c8e:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8002c92:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	b96b      	cbnz	r3, 8002cb4 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c98:	463b      	mov	r3, r7
 8002c9a:	4632      	mov	r2, r6
 8002c9c:	2140      	movs	r1, #64	; 0x40
 8002c9e:	4620      	mov	r0, r4
 8002ca0:	f7ff ff80 	bl	8002ba4 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002ca4:	b9b0      	cbnz	r0, 8002cd4 <HAL_UART_Transmit+0x84>
      huart->gState = HAL_UART_STATE_READY;
 8002ca6:	2320      	movs	r3, #32
 8002ca8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8002cac:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 8002cb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8002cb4:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002cb6:	3b01      	subs	r3, #1
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002cbc:	68a3      	ldr	r3, [r4, #8]
 8002cbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002cc2:	4632      	mov	r2, r6
 8002cc4:	463b      	mov	r3, r7
 8002cc6:	f04f 0180 	mov.w	r1, #128	; 0x80
 8002cca:	4620      	mov	r0, r4
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002ccc:	d10e      	bne.n	8002cec <HAL_UART_Transmit+0x9c>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002cce:	f7ff ff69 	bl	8002ba4 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002cd2:	b110      	cbz	r0, 8002cda <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 8002cd4:	2003      	movs	r0, #3
 8002cd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002cda:	882b      	ldrh	r3, [r5, #0]
 8002cdc:	6822      	ldr	r2, [r4, #0]
 8002cde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ce2:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8002ce4:	6923      	ldr	r3, [r4, #16]
 8002ce6:	b943      	cbnz	r3, 8002cfa <HAL_UART_Transmit+0xaa>
          pData +=2U;
 8002ce8:	3502      	adds	r5, #2
 8002cea:	e7d2      	b.n	8002c92 <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002cec:	f7ff ff5a 	bl	8002ba4 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002cf0:	2800      	cmp	r0, #0
 8002cf2:	d1ef      	bne.n	8002cd4 <HAL_UART_Transmit+0x84>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002cf4:	6823      	ldr	r3, [r4, #0]
 8002cf6:	782a      	ldrb	r2, [r5, #0]
 8002cf8:	605a      	str	r2, [r3, #4]
 8002cfa:	3501      	adds	r5, #1
 8002cfc:	e7c9      	b.n	8002c92 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8002cfe:	2001      	movs	r0, #1
 8002d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8002d04:	2002      	movs	r0, #2
}
 8002d06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002d0a <HAL_UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_READY)
 8002d0a:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8002d0e:	2b20      	cmp	r3, #32
 8002d10:	d11c      	bne.n	8002d4c <HAL_UART_Receive_IT+0x42>
    if((pData == NULL ) || (Size == 0)) 
 8002d12:	b1c9      	cbz	r1, 8002d48 <HAL_UART_Receive_IT+0x3e>
 8002d14:	b1c2      	cbz	r2, 8002d48 <HAL_UART_Receive_IT+0x3e>
    __HAL_LOCK(huart);
 8002d16:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d016      	beq.n	8002d4c <HAL_UART_Receive_IT+0x42>
    huart->RxXferCount = Size;
 8002d1e:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxXferSize = Size;
 8002d20:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d22:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002d24:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d26:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002d28:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d2c:	6802      	ldr	r2, [r0, #0]
    huart->pRxBuffPtr = pData;
 8002d2e:	6281      	str	r1, [r0, #40]	; 0x28
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d30:	6951      	ldr	r1, [r2, #20]
    __HAL_UNLOCK(huart);
 8002d32:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d36:	f041 0101 	orr.w	r1, r1, #1
 8002d3a:	6151      	str	r1, [r2, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8002d3c:	68d1      	ldr	r1, [r2, #12]
 8002d3e:	f441 7190 	orr.w	r1, r1, #288	; 0x120
 8002d42:	60d1      	str	r1, [r2, #12]
    return HAL_OK;
 8002d44:	4618      	mov	r0, r3
 8002d46:	4770      	bx	lr
      return HAL_ERROR;
 8002d48:	2001      	movs	r0, #1
 8002d4a:	4770      	bx	lr
    return HAL_BUSY; 
 8002d4c:	2002      	movs	r0, #2
}
 8002d4e:	4770      	bx	lr

08002d50 <HAL_UART_TxCpltCallback>:
 8002d50:	4770      	bx	lr

08002d52 <UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8002d52:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8002d56:	2b22      	cmp	r3, #34	; 0x22
{
 8002d58:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8002d5a:	d132      	bne.n	8002dc2 <UART_Receive_IT+0x70>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002d5c:	6883      	ldr	r3, [r0, #8]
 8002d5e:	6901      	ldr	r1, [r0, #16]
 8002d60:	6802      	ldr	r2, [r0, #0]
 8002d62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d66:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002d68:	d11f      	bne.n	8002daa <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002d6a:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002d6c:	b9c9      	cbnz	r1, 8002da2 <UART_Receive_IT+0x50>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002d6e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d72:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8002d76:	6283      	str	r3, [r0, #40]	; 0x28
    if(--huart->RxXferCount == 0U)
 8002d78:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8002d7a:	3c01      	subs	r4, #1
 8002d7c:	b2a4      	uxth	r4, r4
 8002d7e:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8002d80:	b96c      	cbnz	r4, 8002d9e <UART_Receive_IT+0x4c>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d82:	6803      	ldr	r3, [r0, #0]
 8002d84:	68da      	ldr	r2, [r3, #12]
 8002d86:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002d8a:	60da      	str	r2, [r3, #12]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d8c:	695a      	ldr	r2, [r3, #20]
 8002d8e:	f022 0201 	bic.w	r2, r2, #1
 8002d92:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8002d94:	2320      	movs	r3, #32
 8002d96:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8002d9a:	f001 f861 	bl	8003e60 <HAL_UART_RxCpltCallback>
    if(--huart->RxXferCount == 0U)
 8002d9e:	2000      	movs	r0, #0
}
 8002da0:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002da2:	b2d2      	uxtb	r2, r2
 8002da4:	f823 2b01 	strh.w	r2, [r3], #1
 8002da8:	e7e5      	b.n	8002d76 <UART_Receive_IT+0x24>
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002daa:	b921      	cbnz	r1, 8002db6 <UART_Receive_IT+0x64>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002dac:	1c59      	adds	r1, r3, #1
 8002dae:	6852      	ldr	r2, [r2, #4]
 8002db0:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002db2:	701a      	strb	r2, [r3, #0]
 8002db4:	e7e0      	b.n	8002d78 <UART_Receive_IT+0x26>
 8002db6:	6852      	ldr	r2, [r2, #4]
 8002db8:	1c59      	adds	r1, r3, #1
 8002dba:	6281      	str	r1, [r0, #40]	; 0x28
 8002dbc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002dc0:	e7f7      	b.n	8002db2 <UART_Receive_IT+0x60>
    return HAL_BUSY;
 8002dc2:	2002      	movs	r0, #2
 8002dc4:	bd10      	pop	{r4, pc}

08002dc6 <HAL_UART_ErrorCallback>:
 8002dc6:	4770      	bx	lr

08002dc8 <HAL_UART_IRQHandler>:
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002dc8:	6803      	ldr	r3, [r0, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002dcc:	68d9      	ldr	r1, [r3, #12]
{
 8002dce:	b570      	push	{r4, r5, r6, lr}
  if(errorflags == RESET)
 8002dd0:	0716      	lsls	r6, r2, #28
{
 8002dd2:	4604      	mov	r4, r0
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002dd4:	695d      	ldr	r5, [r3, #20]
  if(errorflags == RESET)
 8002dd6:	d107      	bne.n	8002de8 <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002dd8:	0696      	lsls	r6, r2, #26
 8002dda:	d55a      	bpl.n	8002e92 <HAL_UART_IRQHandler+0xca>
 8002ddc:	068d      	lsls	r5, r1, #26
 8002dde:	d558      	bpl.n	8002e92 <HAL_UART_IRQHandler+0xca>
}
 8002de0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8002de4:	f7ff bfb5 	b.w	8002d52 <UART_Receive_IT>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002de8:	f015 0501 	ands.w	r5, r5, #1
 8002dec:	d102      	bne.n	8002df4 <HAL_UART_IRQHandler+0x2c>
 8002dee:	f411 7f90 	tst.w	r1, #288	; 0x120
 8002df2:	d04e      	beq.n	8002e92 <HAL_UART_IRQHandler+0xca>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002df4:	07d3      	lsls	r3, r2, #31
 8002df6:	d505      	bpl.n	8002e04 <HAL_UART_IRQHandler+0x3c>
 8002df8:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002dfa:	bf42      	ittt	mi
 8002dfc:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8002dfe:	f043 0301 	orrmi.w	r3, r3, #1
 8002e02:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e04:	0750      	lsls	r0, r2, #29
 8002e06:	d504      	bpl.n	8002e12 <HAL_UART_IRQHandler+0x4a>
 8002e08:	b11d      	cbz	r5, 8002e12 <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e0a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002e0c:	f043 0302 	orr.w	r3, r3, #2
 8002e10:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e12:	0793      	lsls	r3, r2, #30
 8002e14:	d504      	bpl.n	8002e20 <HAL_UART_IRQHandler+0x58>
 8002e16:	b11d      	cbz	r5, 8002e20 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e18:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002e1a:	f043 0304 	orr.w	r3, r3, #4
 8002e1e:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e20:	0716      	lsls	r6, r2, #28
 8002e22:	d504      	bpl.n	8002e2e <HAL_UART_IRQHandler+0x66>
 8002e24:	b11d      	cbz	r5, 8002e2e <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e26:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002e28:	f043 0308 	orr.w	r3, r3, #8
 8002e2c:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002e2e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d066      	beq.n	8002f02 <HAL_UART_IRQHandler+0x13a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e34:	0695      	lsls	r5, r2, #26
 8002e36:	d504      	bpl.n	8002e42 <HAL_UART_IRQHandler+0x7a>
 8002e38:	0688      	lsls	r0, r1, #26
 8002e3a:	d502      	bpl.n	8002e42 <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 8002e3c:	4620      	mov	r0, r4
 8002e3e:	f7ff ff88 	bl	8002d52 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002e42:	6823      	ldr	r3, [r4, #0]
 8002e44:	695d      	ldr	r5, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002e46:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002e48:	0711      	lsls	r1, r2, #28
        UART_EndRxTransfer(huart);
 8002e4a:	4620      	mov	r0, r4
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002e4c:	d402      	bmi.n	8002e54 <HAL_UART_IRQHandler+0x8c>
 8002e4e:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8002e52:	d01a      	beq.n	8002e8a <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8002e54:	f7ff fd7e 	bl	8002954 <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e58:	6823      	ldr	r3, [r4, #0]
 8002e5a:	695a      	ldr	r2, [r3, #20]
 8002e5c:	0652      	lsls	r2, r2, #25
 8002e5e:	d510      	bpl.n	8002e82 <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e60:	695a      	ldr	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8002e62:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e68:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8002e6a:	b150      	cbz	r0, 8002e82 <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002e6c:	4b25      	ldr	r3, [pc, #148]	; (8002f04 <HAL_UART_IRQHandler+0x13c>)
 8002e6e:	6503      	str	r3, [r0, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002e70:	f7fe f95a 	bl	8001128 <HAL_DMA_Abort_IT>
 8002e74:	2800      	cmp	r0, #0
 8002e76:	d044      	beq.n	8002f02 <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002e78:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8002e7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002e7e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002e80:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8002e82:	4620      	mov	r0, r4
 8002e84:	f7ff ff9f 	bl	8002dc6 <HAL_UART_ErrorCallback>
 8002e88:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8002e8a:	f7ff ff9c 	bl	8002dc6 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e8e:	63e5      	str	r5, [r4, #60]	; 0x3c
 8002e90:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002e92:	0616      	lsls	r6, r2, #24
 8002e94:	d527      	bpl.n	8002ee6 <HAL_UART_IRQHandler+0x11e>
 8002e96:	060d      	lsls	r5, r1, #24
 8002e98:	d525      	bpl.n	8002ee6 <HAL_UART_IRQHandler+0x11e>
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8002e9a:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8002e9e:	2a21      	cmp	r2, #33	; 0x21
 8002ea0:	d12f      	bne.n	8002f02 <HAL_UART_IRQHandler+0x13a>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002ea2:	68a2      	ldr	r2, [r4, #8]
 8002ea4:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002ea8:	6a22      	ldr	r2, [r4, #32]
 8002eaa:	d117      	bne.n	8002edc <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002eac:	8811      	ldrh	r1, [r2, #0]
 8002eae:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8002eb2:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002eb4:	6921      	ldr	r1, [r4, #16]
 8002eb6:	b979      	cbnz	r1, 8002ed8 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 8002eb8:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 8002eba:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0U)
 8002ebc:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8002ebe:	3a01      	subs	r2, #1
 8002ec0:	b292      	uxth	r2, r2
 8002ec2:	84e2      	strh	r2, [r4, #38]	; 0x26
 8002ec4:	b9ea      	cbnz	r2, 8002f02 <HAL_UART_IRQHandler+0x13a>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002ec6:	68da      	ldr	r2, [r3, #12]
 8002ec8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ecc:	60da      	str	r2, [r3, #12]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002ece:	68da      	ldr	r2, [r3, #12]
 8002ed0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ed4:	60da      	str	r2, [r3, #12]
 8002ed6:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 8002ed8:	3201      	adds	r2, #1
 8002eda:	e7ee      	b.n	8002eba <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002edc:	1c51      	adds	r1, r2, #1
 8002ede:	6221      	str	r1, [r4, #32]
 8002ee0:	7812      	ldrb	r2, [r2, #0]
 8002ee2:	605a      	str	r2, [r3, #4]
 8002ee4:	e7ea      	b.n	8002ebc <HAL_UART_IRQHandler+0xf4>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002ee6:	0650      	lsls	r0, r2, #25
 8002ee8:	d50b      	bpl.n	8002f02 <HAL_UART_IRQHandler+0x13a>
 8002eea:	064a      	lsls	r2, r1, #25
 8002eec:	d509      	bpl.n	8002f02 <HAL_UART_IRQHandler+0x13a>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002eee:	68da      	ldr	r2, [r3, #12]
 8002ef0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ef4:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002ef6:	2320      	movs	r3, #32
 8002ef8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8002efc:	4620      	mov	r0, r4
 8002efe:	f7ff ff27 	bl	8002d50 <HAL_UART_TxCpltCallback>
 8002f02:	bd70      	pop	{r4, r5, r6, pc}
 8002f04:	08002f09 	.word	0x08002f09

08002f08 <UART_DMAAbortOnError>:
{
 8002f08:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002f0a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0U;
 8002f10:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8002f12:	f7ff ff58 	bl	8002dc6 <HAL_UART_ErrorCallback>
 8002f16:	bd08      	pop	{r3, pc}

08002f18 <Leg_Init>:
{
  float t1;

  hleg->hservoH=hservoH;
  hleg->hservoM=hservoM;
  hleg->hservoL=hservoL;
 8002f18:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  hleg->reverse=reverse;
 8002f1c:	9b00      	ldr	r3, [sp, #0]
 8002f1e:	60c3      	str	r3, [r0, #12]

  // Set start position
  t1=(LEG_LENGTH_L-LEG_HEIGHT)*(LEG_LENGTH_L-LEG_HEIGHT);
  hleg->span_min=LEG_LENGTH_H+sqrtf(LEG_LENGTH_M*LEG_LENGTH_M-t1);
 8002f20:	4b06      	ldr	r3, [pc, #24]	; (8002f3c <Leg_Init+0x24>)
 8002f22:	6243      	str	r3, [r0, #36]	; 0x24
  t1=(LEG_LENGTH_M+LEG_LENGTH_L)*(LEG_LENGTH_M+LEG_LENGTH_L);
  hleg->span_max=LEG_LENGTH_H+sqrtf(t1-LEG_HEIGHT*LEG_HEIGHT);
 8002f24:	4b06      	ldr	r3, [pc, #24]	; (8002f40 <Leg_Init+0x28>)
 8002f26:	6283      	str	r3, [r0, #40]	; 0x28
  hleg->origin_y=hleg->span_max*cosf(SERVO_ANGLE_MAX);
 8002f28:	4b06      	ldr	r3, [pc, #24]	; (8002f44 <Leg_Init+0x2c>)
 8002f2a:	6203      	str	r3, [r0, #32]
  hleg->origin_x=hleg->span_max*sinf(SERVO_ANGLE_MAX);
 8002f2c:	61c3      	str	r3, [r0, #28]
  hleg->x_min=-hleg->origin_x;
 8002f2e:	4a06      	ldr	r2, [pc, #24]	; (8002f48 <Leg_Init+0x30>)
  hleg->x_max=hleg->origin_x;
 8002f30:	6303      	str	r3, [r0, #48]	; 0x30
  hleg->x_amplitude=2*hleg->origin_x;
 8002f32:	4b06      	ldr	r3, [pc, #24]	; (8002f4c <Leg_Init+0x34>)
  hleg->x_min=-hleg->origin_x;
 8002f34:	62c2      	str	r2, [r0, #44]	; 0x2c
  hleg->x_amplitude=2*hleg->origin_x;
 8002f36:	6343      	str	r3, [r0, #52]	; 0x34
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	42b175ac 	.word	0x42b175ac
 8002f40:	42faff27 	.word	0x42faff27
 8002f44:	42b17b41 	.word	0x42b17b41
 8002f48:	c2b17b41 	.word	0xc2b17b41
 8002f4c:	43317b41 	.word	0x43317b41

08002f50 <Leg_SetPos>:
}

void Leg_SetPos(t_leg *hleg, float x, float y, float z)
{
 8002f50:	b510      	push	{r4, lr}
 8002f52:	4604      	mov	r4, r0
 8002f54:	ed2d 8b06 	vpush	{d8-d10}
  float alpha_h;
  float alpha_m;
  float alpha_l;
  float t1, t2;

  hleg->x=x;
 8002f58:	ed84 0a04 	vstr	s0, [r4, #16]
{
 8002f5c:	eeb0 9a40 	vmov.f32	s18, s0
  hleg->y=y;
  hleg->z=z;

  // rho and angle
  rho=sqrtf(x*x+y*y);
 8002f60:	ee20 0aa0 	vmul.f32	s0, s1, s1
{
 8002f64:	b082      	sub	sp, #8
  hleg->y=y;
 8002f66:	edc4 0a05 	vstr	s1, [r4, #20]
  hleg->z=z;
 8002f6a:	ed84 1a06 	vstr	s2, [r4, #24]
  rho=sqrtf(x*x+y*y);
 8002f6e:	eea9 0a09 	vfma.f32	s0, s18, s18
{
 8002f72:	eeb0 8a60 	vmov.f32	s16, s1
 8002f76:	eef0 8a41 	vmov.f32	s17, s2
  rho=sqrtf(x*x+y*y);
 8002f7a:	f003 ff1b 	bl	8006db4 <sqrtf>
  if(hleg->reverse)
 8002f7e:	68e3      	ldr	r3, [r4, #12]
  rho=sqrtf(x*x+y*y);
 8002f80:	eef0 9a40 	vmov.f32	s19, s0
 8002f84:	ee89 0a08 	vdiv.f32	s0, s18, s16
  if(hleg->reverse)
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d06b      	beq.n	8003064 <Leg_SetPos+0x114>
    alpha_h=-atanf(x/y);
 8002f8c:	f003 fd46 	bl	8006a1c <atanf>
 8002f90:	eeb1 aa40 	vneg.f32	s20, s0
  else
    alpha_h=atanf(x/y);

  c=sqrtf(rho*rho+z*z);
 8002f94:	ee28 0aa8 	vmul.f32	s0, s17, s17
 8002f98:	eea9 0aa9 	vfma.f32	s0, s19, s19
 8002f9c:	f003 ff0a 	bl	8006db4 <sqrtf>
  t1=c*c-LEG_LENGTH_M*LEG_LENGTH_M-LEG_LENGTH_L*LEG_LENGTH_L;
 8002fa0:	ee60 7a00 	vmul.f32	s15, s0, s0
  c=sqrtf(rho*rho+z*z);
 8002fa4:	eeb0 9a40 	vmov.f32	s18, s0
  t1=c*c-LEG_LENGTH_M*LEG_LENGTH_M-LEG_LENGTH_L*LEG_LENGTH_L;
 8002fa8:	ee17 0a90 	vmov	r0, s15
 8002fac:	f7fd faec 	bl	8000588 <__aeabi_f2d>
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	4b33      	ldr	r3, [pc, #204]	; (8003080 <Leg_SetPos+0x130>)
 8002fb4:	f7fd f988 	bl	80002c8 <__aeabi_dsub>
 8002fb8:	a32d      	add	r3, pc, #180	; (adr r3, 8003070 <Leg_SetPos+0x120>)
 8002fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fbe:	f7fd f983 	bl	80002c8 <__aeabi_dsub>
 8002fc2:	f7fd fe0d 	bl	8000be0 <__aeabi_d2f>
  t2=2.*c*LEG_LENGTH_M;
  alpha_m=atanf(z/rho)-acosf(t1/t2);
 8002fc6:	ee88 0aa9 	vdiv.f32	s0, s17, s19
  t1=c*c-LEG_LENGTH_M*LEG_LENGTH_M-LEG_LENGTH_L*LEG_LENGTH_L;
 8002fca:	ee08 0a10 	vmov	s16, r0
  alpha_m=atanf(z/rho)-acosf(t1/t2);
 8002fce:	f003 fd25 	bl	8006a1c <atanf>
  t2=2.*c*LEG_LENGTH_M;
 8002fd2:	ee19 0a10 	vmov	r0, s18
  alpha_m=atanf(z/rho)-acosf(t1/t2);
 8002fd6:	eef0 8a40 	vmov.f32	s17, s0
  t2=2.*c*LEG_LENGTH_M;
 8002fda:	f7fd fad5 	bl	8000588 <__aeabi_f2d>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	460b      	mov	r3, r1
 8002fe2:	f7fd f973 	bl	80002cc <__adddf3>
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	4b26      	ldr	r3, [pc, #152]	; (8003084 <Leg_SetPos+0x134>)
 8002fea:	f7fd fb21 	bl	8000630 <__aeabi_dmul>
 8002fee:	f7fd fdf7 	bl	8000be0 <__aeabi_d2f>
  alpha_m=atanf(z/rho)-acosf(t1/t2);
 8002ff2:	ee07 0a90 	vmov	s15, r0
 8002ff6:	ee88 0a27 	vdiv.f32	s0, s16, s15
 8002ffa:	f003 fe83 	bl	8006d04 <acosf>

  t2=2.*LEG_LENGTH_M*LEG_LENGTH_L;
  alpha_l=M_PI-acos(-t1/t2);
 8002ffe:	eddf 7a22 	vldr	s15, [pc, #136]	; 8003088 <Leg_SetPos+0x138>
 8003002:	eeb1 8a48 	vneg.f32	s16, s16
 8003006:	ee88 7a27 	vdiv.f32	s14, s16, s15
  alpha_m=atanf(z/rho)-acosf(t1/t2);
 800300a:	ee78 8ac0 	vsub.f32	s17, s17, s0
  alpha_l=M_PI-acos(-t1/t2);
 800300e:	ee17 0a10 	vmov	r0, s14
 8003012:	f7fd fab9 	bl	8000588 <__aeabi_f2d>
 8003016:	ec41 0b10 	vmov	d0, r0, r1
 800301a:	f003 fe1b 	bl	8006c54 <acos>
 800301e:	ec53 2b10 	vmov	r2, r3, d0

  Servo_SetAngle(hleg->hservoH, alpha_h);
 8003022:	6820      	ldr	r0, [r4, #0]
 8003024:	eeb0 0a4a 	vmov.f32	s0, s20
  alpha_l=M_PI-acos(-t1/t2);
 8003028:	e9cd 2300 	strd	r2, r3, [sp]
  Servo_SetAngle(hleg->hservoH, alpha_h);
 800302c:	f000 ff78 	bl	8003f20 <Servo_SetAngle>
  Servo_SetAngle(hleg->hservoM, -alpha_m);
 8003030:	eeb1 0a68 	vneg.f32	s0, s17
 8003034:	6860      	ldr	r0, [r4, #4]
 8003036:	f000 ff73 	bl	8003f20 <Servo_SetAngle>
  alpha_l=M_PI-acos(-t1/t2);
 800303a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800303e:	a10e      	add	r1, pc, #56	; (adr r1, 8003078 <Leg_SetPos+0x128>)
 8003040:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003044:	f7fd f940 	bl	80002c8 <__aeabi_dsub>
 8003048:	f7fd fdca 	bl	8000be0 <__aeabi_d2f>
  Servo_SetAngle(hleg->hservoL, -alpha_l);
 800304c:	ee07 0a90 	vmov	s15, r0
 8003050:	68a0      	ldr	r0, [r4, #8]
 8003052:	eeb1 0a67 	vneg.f32	s0, s15
}
 8003056:	b002      	add	sp, #8
 8003058:	ecbd 8b06 	vpop	{d8-d10}
 800305c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  Servo_SetAngle(hleg->hservoL, -alpha_l);
 8003060:	f000 bf5e 	b.w	8003f20 <Servo_SetAngle>
    alpha_h=atanf(x/y);
 8003064:	f003 fcda 	bl	8006a1c <atanf>
 8003068:	eeb0 aa40 	vmov.f32	s20, s0
 800306c:	e792      	b.n	8002f94 <Leg_SetPos+0x44>
 800306e:	bf00      	nop
 8003070:	00000000 	.word	0x00000000
 8003074:	40b32400 	.word	0x40b32400
 8003078:	54442d18 	.word	0x54442d18
 800307c:	400921fb 	.word	0x400921fb
 8003080:	40990000 	.word	0x40990000
 8003084:	40440000 	.word	0x40440000
 8003088:	45af0000 	.word	0x45af0000

0800308c <Leg_Move>:
  float ny;
  float nz;

  nx=hleg->x+dx;
  ny=hleg->y+dy;
  nz=hleg->z+dz;
 800308c:	edd0 6a06 	vldr	s13, [r0, #24]
  ny=hleg->y+dy;
 8003090:	ed90 7a05 	vldr	s14, [r0, #20]
  nx=hleg->x+dx;
 8003094:	edd0 7a04 	vldr	s15, [r0, #16]
  Leg_SetPos(hleg, nx, ny, nz);
 8003098:	ee31 1a26 	vadd.f32	s2, s2, s13
 800309c:	ee70 0a87 	vadd.f32	s1, s1, s14
 80030a0:	ee30 0a27 	vadd.f32	s0, s0, s15
 80030a4:	f7ff bf54 	b.w	8002f50 <Leg_SetPos>

080030a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80030a8:	b530      	push	{r4, r5, lr}
 80030aa:	b0ad      	sub	sp, #180	; 0xb4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80030ac:	2234      	movs	r2, #52	; 0x34
 80030ae:	2100      	movs	r1, #0
 80030b0:	a808      	add	r0, sp, #32
 80030b2:	f001 fb74 	bl	800479e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80030b6:	2214      	movs	r2, #20
 80030b8:	2100      	movs	r1, #0
 80030ba:	a803      	add	r0, sp, #12
 80030bc:	f001 fb6f 	bl	800479e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80030c0:	2100      	movs	r1, #0
 80030c2:	225c      	movs	r2, #92	; 0x5c
 80030c4:	a815      	add	r0, sp, #84	; 0x54
 80030c6:	f001 fb6a 	bl	800479e <memset>

  /**Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80030ca:	2400      	movs	r4, #0
 80030cc:	4b21      	ldr	r3, [pc, #132]	; (8003154 <SystemClock_Config+0xac>)
 80030ce:	9401      	str	r4, [sp, #4]
 80030d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030d2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80030d6:	641a      	str	r2, [r3, #64]	; 0x40
 80030d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030de:	9301      	str	r3, [sp, #4]
 80030e0:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80030e2:	4b1d      	ldr	r3, [pc, #116]	; (8003158 <SystemClock_Config+0xb0>)
 80030e4:	9402      	str	r4, [sp, #8]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80030ec:	601a      	str	r2, [r3, #0]
 80030ee:	681b      	ldr	r3, [r3, #0]
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 80030f0:	940a      	str	r4, [sp, #40]	; 0x28
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80030f2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80030f6:	9302      	str	r3, [sp, #8]
 80030f8:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80030fa:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80030fc:	230a      	movs	r3, #10
 80030fe:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003100:	2301      	movs	r3, #1
 8003102:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003104:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003106:	2308      	movs	r3, #8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003108:	2210      	movs	r2, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800310a:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLM = 8;
 800310c:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800310e:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLN = 180;
 8003110:	23b4      	movs	r3, #180	; 0xb4
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003112:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLN = 180;
 8003114:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003116:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003118:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800311a:	9513      	str	r5, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800311c:	9514      	str	r5, [sp, #80]	; 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800311e:	f7fe fcb3 	bl	8001a88 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003122:	f7fe f96b 	bl	80013fc <HAL_PWREx_EnableOverDrive>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003126:	230f      	movs	r3, #15
 8003128:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800312a:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800312c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003130:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003132:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8003134:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003136:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003138:	9405      	str	r4, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800313a:	f7fe f99b 	bl	8001474 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800313e:	2320      	movs	r3, #32
 8003140:	9315      	str	r3, [sp, #84]	; 0x54
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003142:	a815      	add	r0, sp, #84	; 0x54
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003144:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003148:	9325      	str	r3, [sp, #148]	; 0x94
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800314a:	f7fe fa4d 	bl	80015e8 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 800314e:	b02d      	add	sp, #180	; 0xb4
 8003150:	bd30      	pop	{r4, r5, pc}
 8003152:	bf00      	nop
 8003154:	40023800 	.word	0x40023800
 8003158:	40007000 	.word	0x40007000

0800315c <main>:
{
 800315c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003160:	b09f      	sub	sp, #124	; 0x7c
  HAL_Init();
 8003162:	f7fd ff39 	bl	8000fd8 <HAL_Init>
  SystemClock_Config();
 8003166:	f7ff ff9f 	bl	80030a8 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800316a:	2214      	movs	r2, #20
 800316c:	2100      	movs	r1, #0
 800316e:	a816      	add	r0, sp, #88	; 0x58

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003170:	2700      	movs	r7, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003172:	f001 fb14 	bl	800479e <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003176:	4ab4      	ldr	r2, [pc, #720]	; (8003448 <main+0x2ec>)
 8003178:	9704      	str	r7, [sp, #16]
 800317a:	6b11      	ldr	r1, [r2, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 800317c:	48b3      	ldr	r0, [pc, #716]	; (800344c <main+0x2f0>)
  htim12.Instance = TIM12;
 800317e:	4cb4      	ldr	r4, [pc, #720]	; (8003450 <main+0x2f4>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003180:	f041 0104 	orr.w	r1, r1, #4
 8003184:	6311      	str	r1, [r2, #48]	; 0x30
 8003186:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003188:	f001 0104 	and.w	r1, r1, #4
 800318c:	9104      	str	r1, [sp, #16]
 800318e:	9904      	ldr	r1, [sp, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003190:	9705      	str	r7, [sp, #20]
 8003192:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003194:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8003198:	6311      	str	r1, [r2, #48]	; 0x30
 800319a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800319c:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80031a0:	9105      	str	r1, [sp, #20]
 80031a2:	9905      	ldr	r1, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80031a4:	9706      	str	r7, [sp, #24]
 80031a6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80031a8:	f041 0101 	orr.w	r1, r1, #1
 80031ac:	6311      	str	r1, [r2, #48]	; 0x30
 80031ae:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80031b0:	f001 0101 	and.w	r1, r1, #1
 80031b4:	9106      	str	r1, [sp, #24]
 80031b6:	9906      	ldr	r1, [sp, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80031b8:	9707      	str	r7, [sp, #28]
 80031ba:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80031bc:	f041 0102 	orr.w	r1, r1, #2
 80031c0:	6311      	str	r1, [r2, #48]	; 0x30
 80031c2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80031c4:	f001 0102 	and.w	r1, r1, #2
 80031c8:	9107      	str	r1, [sp, #28]
 80031ca:	9907      	ldr	r1, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80031cc:	9708      	str	r7, [sp, #32]
 80031ce:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80031d0:	f041 0108 	orr.w	r1, r1, #8
 80031d4:	6311      	str	r1, [r2, #48]	; 0x30
 80031d6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80031d8:	f002 0208 	and.w	r2, r2, #8
 80031dc:	9208      	str	r2, [sp, #32]
 80031de:	9a08      	ldr	r2, [sp, #32]
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 80031e0:	2101      	movs	r1, #1
 80031e2:	463a      	mov	r2, r7
 80031e4:	f7fe f892 	bl	800130c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, IO_OUT_1_Pin|IO_OUT_2_Pin, GPIO_PIN_RESET);
 80031e8:	463a      	mov	r2, r7
 80031ea:	2109      	movs	r1, #9
 80031ec:	4899      	ldr	r0, [pc, #612]	; (8003454 <main+0x2f8>)
 80031ee:	f7fe f88d 	bl	800130c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 80031f2:	463a      	mov	r2, r7
 80031f4:	f241 0110 	movw	r1, #4112	; 0x1010
 80031f8:	4897      	ldr	r0, [pc, #604]	; (8003458 <main+0x2fc>)
 80031fa:	f7fe f887 	bl	800130c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USR_BUTT_Pin */
  GPIO_InitStruct.Pin = USR_BUTT_Pin;
 80031fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USR_BUTT_GPIO_Port, &GPIO_InitStruct);
 8003202:	a916      	add	r1, sp, #88	; 0x58
 8003204:	4893      	ldr	r0, [pc, #588]	; (8003454 <main+0x2f8>)
  GPIO_InitStruct.Pin = USR_BUTT_Pin;
 8003206:	9316      	str	r3, [sp, #88]	; 0x58

  /*Configure GPIO pin : LED4_Pin */
  GPIO_InitStruct.Pin = LED4_Pin;
 8003208:	f04f 0a01 	mov.w	sl, #1
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800320c:	9717      	str	r7, [sp, #92]	; 0x5c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800320e:	9718      	str	r7, [sp, #96]	; 0x60
  HAL_GPIO_Init(USR_BUTT_GPIO_Port, &GPIO_InitStruct);
 8003210:	f7fd ff9c 	bl	800114c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 8003214:	a916      	add	r1, sp, #88	; 0x58
 8003216:	488d      	ldr	r0, [pc, #564]	; (800344c <main+0x2f0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003218:	9718      	str	r7, [sp, #96]	; 0x60

  /*Configure GPIO pin : IO_IN_2_Pin */
  GPIO_InitStruct.Pin = IO_IN_2_Pin;
 800321a:	2502      	movs	r5, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800321c:	9719      	str	r7, [sp, #100]	; 0x64
  GPIO_InitStruct.Pin = LED4_Pin;
 800321e:	f8cd a058 	str.w	sl, [sp, #88]	; 0x58
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003222:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
  HAL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 8003226:	f7fd ff91 	bl	800114c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(IO_IN_2_GPIO_Port, &GPIO_InitStruct);
 800322a:	a916      	add	r1, sp, #88	; 0x58
 800322c:	4887      	ldr	r0, [pc, #540]	; (800344c <main+0x2f0>)
  GPIO_InitStruct.Pin = IO_IN_2_Pin;
 800322e:	9516      	str	r5, [sp, #88]	; 0x58
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003230:	9717      	str	r7, [sp, #92]	; 0x5c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003232:	9718      	str	r7, [sp, #96]	; 0x60
  HAL_GPIO_Init(IO_IN_2_GPIO_Port, &GPIO_InitStruct);
 8003234:	f7fd ff8a 	bl	800114c <HAL_GPIO_Init>

  /*Configure GPIO pins : IO_OUT_1_Pin IO_OUT_2_Pin */
  GPIO_InitStruct.Pin = IO_OUT_1_Pin|IO_OUT_2_Pin;
 8003238:	2209      	movs	r2, #9
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800323a:	a916      	add	r1, sp, #88	; 0x58
 800323c:	4885      	ldr	r0, [pc, #532]	; (8003454 <main+0x2f8>)
  GPIO_InitStruct.Pin = IO_OUT_1_Pin|IO_OUT_2_Pin;
 800323e:	9216      	str	r2, [sp, #88]	; 0x58

  /*Configure GPIO pin : ADC_IN_Pin */
  GPIO_InitStruct.Pin = ADC_IN_Pin;
 8003240:	f04f 0910 	mov.w	r9, #16
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003244:	9718      	str	r7, [sp, #96]	; 0x60
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003246:	9719      	str	r7, [sp, #100]	; 0x64
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003248:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800324c:	f7fd ff7e 	bl	800114c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003250:	2303      	movs	r3, #3
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(ADC_IN_GPIO_Port, &GPIO_InitStruct);
 8003252:	a916      	add	r1, sp, #88	; 0x58
 8003254:	4881      	ldr	r0, [pc, #516]	; (800345c <main+0x300>)
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003256:	9317      	str	r3, [sp, #92]	; 0x5c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003258:	9718      	str	r7, [sp, #96]	; 0x60
  GPIO_InitStruct.Pin = ADC_IN_Pin;
 800325a:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
  HAL_GPIO_Init(ADC_IN_GPIO_Port, &GPIO_InitStruct);
 800325e:	f7fd ff75 	bl	800114c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 8003262:	f241 0210 	movw	r2, #4112	; 0x1010
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003266:	a916      	add	r1, sp, #88	; 0x58
 8003268:	487b      	ldr	r0, [pc, #492]	; (8003458 <main+0x2fc>)
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 800326a:	9216      	str	r2, [sp, #88]	; 0x58
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800326c:	9718      	str	r7, [sp, #96]	; 0x60
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800326e:	9719      	str	r7, [sp, #100]	; 0x64
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003270:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003274:	f7fd ff6a 	bl	800114c <HAL_GPIO_Init>
  huart2.Instance = USART2;
 8003278:	4879      	ldr	r0, [pc, #484]	; (8003460 <main+0x304>)
  huart2.Init.BaudRate = 9600;
 800327a:	4a7a      	ldr	r2, [pc, #488]	; (8003464 <main+0x308>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800327c:	6087      	str	r7, [r0, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800327e:	f04f 0b0c 	mov.w	fp, #12
  huart2.Init.BaudRate = 9600;
 8003282:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8003286:	e880 000c 	stmia.w	r0, {r2, r3}
  huart2.Init.StopBits = UART_STOPBITS_1;
 800328a:	60c7      	str	r7, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800328c:	6107      	str	r7, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800328e:	6187      	str	r7, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003290:	61c7      	str	r7, [r0, #28]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003292:	f8c0 b014 	str.w	fp, [r0, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003296:	f7ff fcad 	bl	8002bf4 <HAL_UART_Init>
  hi2c1.Instance = I2C1;
 800329a:	4873      	ldr	r0, [pc, #460]	; (8003468 <main+0x30c>)
  hi2c1.Init.ClockSpeed = 100000;
 800329c:	4973      	ldr	r1, [pc, #460]	; (800346c <main+0x310>)
 800329e:	4a74      	ldr	r2, [pc, #464]	; (8003470 <main+0x314>)
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80032a0:	6087      	str	r7, [r0, #8]
  hi2c1.Init.ClockSpeed = 100000;
 80032a2:	e880 0006 	stmia.w	r0, {r1, r2}
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80032a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c1.Init.OwnAddress1 = 0;
 80032aa:	60c7      	str	r7, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80032ac:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80032ae:	6147      	str	r7, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80032b0:	6187      	str	r7, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80032b2:	61c7      	str	r7, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80032b4:	6207      	str	r7, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80032b6:	f7fe f833 	bl	8001320 <HAL_I2C_Init>
  huart4.Instance = UART4;
 80032ba:	486e      	ldr	r0, [pc, #440]	; (8003474 <main+0x318>)
  huart4.Init.BaudRate = 115200;
 80032bc:	4a6e      	ldr	r2, [pc, #440]	; (8003478 <main+0x31c>)
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80032be:	6087      	str	r7, [r0, #8]
  huart4.Init.BaudRate = 115200;
 80032c0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80032c4:	e880 000c 	stmia.w	r0, {r2, r3}
 80032c8:	9303      	str	r3, [sp, #12]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80032ca:	60c7      	str	r7, [r0, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80032cc:	6107      	str	r7, [r0, #16]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80032ce:	6187      	str	r7, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80032d0:	61c7      	str	r7, [r0, #28]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80032d2:	f8c0 b014 	str.w	fp, [r0, #20]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80032d6:	f7ff fc8d 	bl	8002bf4 <HAL_UART_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80032da:	4639      	mov	r1, r7
 80032dc:	464a      	mov	r2, r9
 80032de:	a80b      	add	r0, sp, #44	; 0x2c
 80032e0:	f001 fa5d 	bl	800479e <memset>
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80032e4:	4639      	mov	r1, r7
 80032e6:	2214      	movs	r2, #20
 80032e8:	a816      	add	r0, sp, #88	; 0x58
 80032ea:	f001 fa58 	bl	800479e <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 80032ee:	4639      	mov	r1, r7
 80032f0:	464a      	mov	r2, r9
 80032f2:	a80f      	add	r0, sp, #60	; 0x3c
 80032f4:	f001 fa53 	bl	800479e <memset>
  htim12.Instance = TIM12;
 80032f8:	4a60      	ldr	r2, [pc, #384]	; (800347c <main+0x320>)
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032fa:	60a7      	str	r7, [r4, #8]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 80032fc:	4620      	mov	r0, r4
  htim12.Init.Prescaler = 0;
 80032fe:	e884 0084 	stmia.w	r4, {r2, r7}
  htim12.Init.Period = 0;
 8003302:	60e7      	str	r7, [r4, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003304:	6127      	str	r7, [r4, #16]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8003306:	f7ff f8e1 	bl	80024cc <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800330a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 800330e:	a90b      	add	r1, sp, #44	; 0x2c
 8003310:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003312:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8003314:	f7fe fef6 	bl	8002104 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_IC_Init(&htim12) != HAL_OK)
 8003318:	4620      	mov	r0, r4
 800331a:	f7ff f90b 	bl	8002534 <HAL_TIM_IC_Init>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800331e:	2304      	movs	r3, #4
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8003320:	2250      	movs	r2, #80	; 0x50
  if (HAL_TIM_SlaveConfigSynchronization(&htim12, &sSlaveConfig) != HAL_OK)
 8003322:	a916      	add	r1, sp, #88	; 0x58
 8003324:	4620      	mov	r0, r4
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8003326:	9316      	str	r3, [sp, #88]	; 0x58
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8003328:	9217      	str	r2, [sp, #92]	; 0x5c
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800332a:	9718      	str	r7, [sp, #96]	; 0x60
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 800332c:	9719      	str	r7, [sp, #100]	; 0x64
  sSlaveConfig.TriggerFilter = 0;
 800332e:	971a      	str	r7, [sp, #104]	; 0x68
  if (HAL_TIM_SlaveConfigSynchronization(&htim12, &sSlaveConfig) != HAL_OK)
 8003330:	f7fe ffa1 	bl	8002276 <HAL_TIM_SlaveConfigSynchronization>
  if (HAL_TIM_IC_ConfigChannel(&htim12, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003334:	463a      	mov	r2, r7
 8003336:	a90f      	add	r1, sp, #60	; 0x3c
 8003338:	4620      	mov	r0, r4
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800333a:	970f      	str	r7, [sp, #60]	; 0x3c
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800333c:	9711      	str	r7, [sp, #68]	; 0x44
  sConfigIC.ICFilter = 0;
 800333e:	9712      	str	r7, [sp, #72]	; 0x48
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003340:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
  if (HAL_TIM_IC_ConfigChannel(&htim12, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003344:	f7ff f94a 	bl	80025dc <HAL_TIM_IC_ConfigChannel>
  if (HAL_TIM_IC_ConfigChannel(&htim12, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8003348:	2204      	movs	r2, #4
 800334a:	a90f      	add	r1, sp, #60	; 0x3c
 800334c:	4620      	mov	r0, r4
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800334e:	950f      	str	r5, [sp, #60]	; 0x3c
  htim11.Instance = TIM11;
 8003350:	4c4b      	ldr	r4, [pc, #300]	; (8003480 <main+0x324>)
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8003352:	9510      	str	r5, [sp, #64]	; 0x40
  if (HAL_TIM_IC_ConfigChannel(&htim12, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8003354:	f7ff f942 	bl	80025dc <HAL_TIM_IC_ConfigChannel>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003358:	4639      	mov	r1, r7
 800335a:	221c      	movs	r2, #28
 800335c:	a816      	add	r0, sp, #88	; 0x58
 800335e:	f001 fa1e 	bl	800479e <memset>
  htim11.Init.Prescaler = 89;
 8003362:	4a48      	ldr	r2, [pc, #288]	; (8003484 <main+0x328>)
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003364:	60a7      	str	r7, [r4, #8]
  htim11.Init.Prescaler = 89;
 8003366:	2659      	movs	r6, #89	; 0x59
  htim11.Init.Period = 20000;
 8003368:	f644 6520 	movw	r5, #20000	; 0x4e20
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800336c:	4620      	mov	r0, r4
  htim11.Init.Prescaler = 89;
 800336e:	e884 0044 	stmia.w	r4, {r2, r6}
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003372:	6127      	str	r7, [r4, #16]
  htim11.Init.Period = 20000;
 8003374:	60e5      	str	r5, [r4, #12]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8003376:	f7ff f8a9 	bl	80024cc <HAL_TIM_Base_Init>
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 800337a:	4620      	mov	r0, r4
 800337c:	f7ff f8c0 	bl	8002500 <HAL_TIM_PWM_Init>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003380:	f04f 0860 	mov.w	r8, #96	; 0x60
  sConfigOC.Pulse = 1500;
 8003384:	f240 53dc 	movw	r3, #1500	; 0x5dc
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003388:	463a      	mov	r2, r7
 800338a:	a916      	add	r1, sp, #88	; 0x58
 800338c:	4620      	mov	r0, r4
  sConfigOC.Pulse = 1500;
 800338e:	9317      	str	r3, [sp, #92]	; 0x5c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003390:	9718      	str	r7, [sp, #96]	; 0x60
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003392:	971a      	str	r7, [sp, #104]	; 0x68
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003394:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003398:	f7ff f9d8 	bl	800274c <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim11);
 800339c:	4620      	mov	r0, r4
 800339e:	f000 ff9d 	bl	80042dc <HAL_TIM_MspPostInit>
  htim10.Instance = TIM10;
 80033a2:	4c39      	ldr	r4, [pc, #228]	; (8003488 <main+0x32c>)
  TIM_OC_InitTypeDef sConfigOC = {0};
 80033a4:	4639      	mov	r1, r7
 80033a6:	221c      	movs	r2, #28
 80033a8:	a816      	add	r0, sp, #88	; 0x58
 80033aa:	f001 f9f8 	bl	800479e <memset>
  htim10.Instance = TIM10;
 80033ae:	4a37      	ldr	r2, [pc, #220]	; (800348c <main+0x330>)
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033b0:	6127      	str	r7, [r4, #16]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80033b2:	4620      	mov	r0, r4
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033b4:	e884 00c4 	stmia.w	r4, {r2, r6, r7}
  htim10.Init.Period = 20000;
 80033b8:	60e5      	str	r5, [r4, #12]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80033ba:	f7ff f887 	bl	80024cc <HAL_TIM_Base_Init>
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80033be:	4620      	mov	r0, r4
 80033c0:	f7ff f89e 	bl	8002500 <HAL_TIM_PWM_Init>
  sConfigOC.Pulse = 1500;
 80033c4:	f240 53dc 	movw	r3, #1500	; 0x5dc
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80033c8:	463a      	mov	r2, r7
 80033ca:	a916      	add	r1, sp, #88	; 0x58
 80033cc:	4620      	mov	r0, r4
  sConfigOC.Pulse = 1500;
 80033ce:	9317      	str	r3, [sp, #92]	; 0x5c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80033d0:	9718      	str	r7, [sp, #96]	; 0x60
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80033d2:	971a      	str	r7, [sp, #104]	; 0x68
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80033d4:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80033d8:	f7ff f9b8 	bl	800274c <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim10);
 80033dc:	4620      	mov	r0, r4
 80033de:	f000 ff7d 	bl	80042dc <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80033e2:	4639      	mov	r1, r7
 80033e4:	464a      	mov	r2, r9
 80033e6:	a80b      	add	r0, sp, #44	; 0x2c
 80033e8:	f001 f9d9 	bl	800479e <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80033ec:	4639      	mov	r1, r7
 80033ee:	221c      	movs	r2, #28
 80033f0:	a80f      	add	r0, sp, #60	; 0x3c
  htim8.Instance = TIM8;
 80033f2:	4c27      	ldr	r4, [pc, #156]	; (8003490 <main+0x334>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033f4:	9709      	str	r7, [sp, #36]	; 0x24
 80033f6:	970a      	str	r7, [sp, #40]	; 0x28
  TIM_OC_InitTypeDef sConfigOC = {0};
 80033f8:	f001 f9d1 	bl	800479e <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80033fc:	4639      	mov	r1, r7
 80033fe:	221c      	movs	r2, #28
 8003400:	a816      	add	r0, sp, #88	; 0x58
 8003402:	f001 f9cc 	bl	800479e <memset>
  htim8.Instance = TIM8;
 8003406:	4a23      	ldr	r2, [pc, #140]	; (8003494 <main+0x338>)
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003408:	6127      	str	r7, [r4, #16]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800340a:	4620      	mov	r0, r4
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800340c:	e884 00c4 	stmia.w	r4, {r2, r6, r7}
  htim8.Init.RepetitionCounter = 0;
 8003410:	6167      	str	r7, [r4, #20]
  htim8.Init.Period = 20000;
 8003412:	60e5      	str	r5, [r4, #12]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8003414:	f7ff f85a 	bl	80024cc <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003418:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800341c:	a90b      	add	r1, sp, #44	; 0x2c
 800341e:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003420:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8003422:	f7fe fe6f 	bl	8002104 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8003426:	4620      	mov	r0, r4
 8003428:	f7ff f86a 	bl	8002500 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800342c:	a909      	add	r1, sp, #36	; 0x24
 800342e:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003430:	9709      	str	r7, [sp, #36]	; 0x24
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003432:	970a      	str	r7, [sp, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003434:	f7ff fa44 	bl	80028c0 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.Pulse = 1500;
 8003438:	f240 53dc 	movw	r3, #1500	; 0x5dc
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800343c:	463a      	mov	r2, r7
 800343e:	a90f      	add	r1, sp, #60	; 0x3c
 8003440:	4620      	mov	r0, r4
  sConfigOC.Pulse = 1500;
 8003442:	9310      	str	r3, [sp, #64]	; 0x40
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003444:	9711      	str	r7, [sp, #68]	; 0x44
 8003446:	e027      	b.n	8003498 <main+0x33c>
 8003448:	40023800 	.word	0x40023800
 800344c:	40021c00 	.word	0x40021c00
 8003450:	200006b8 	.word	0x200006b8
 8003454:	40020800 	.word	0x40020800
 8003458:	40020400 	.word	0x40020400
 800345c:	40020000 	.word	0x40020000
 8003460:	2000063c 	.word	0x2000063c
 8003464:	40004400 	.word	0x40004400
 8003468:	200003a4 	.word	0x200003a4
 800346c:	40005400 	.word	0x40005400
 8003470:	000186a0 	.word	0x000186a0
 8003474:	200005c0 	.word	0x200005c0
 8003478:	40004c00 	.word	0x40004c00
 800347c:	40001800 	.word	0x40001800
 8003480:	20000528 	.word	0x20000528
 8003484:	40014800 	.word	0x40014800
 8003488:	200003f8 	.word	0x200003f8
 800348c:	40014400 	.word	0x40014400
 8003490:	20000368 	.word	0x20000368
 8003494:	40010400 	.word	0x40010400
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003498:	9712      	str	r7, [sp, #72]	; 0x48
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800349a:	9713      	str	r7, [sp, #76]	; 0x4c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800349c:	9714      	str	r7, [sp, #80]	; 0x50
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800349e:	9715      	str	r7, [sp, #84]	; 0x54
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80034a0:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80034a4:	f7ff f952 	bl	800274c <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80034a8:	2204      	movs	r2, #4
 80034aa:	a90f      	add	r1, sp, #60	; 0x3c
 80034ac:	4620      	mov	r0, r4
 80034ae:	f7ff f94d 	bl	800274c <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80034b2:	2208      	movs	r2, #8
 80034b4:	a90f      	add	r1, sp, #60	; 0x3c
 80034b6:	4620      	mov	r0, r4
 80034b8:	f7ff f948 	bl	800274c <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80034bc:	465a      	mov	r2, fp
 80034be:	a90f      	add	r1, sp, #60	; 0x3c
 80034c0:	4620      	mov	r0, r4
 80034c2:	f7ff f943 	bl	800274c <HAL_TIM_PWM_ConfigChannel>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80034c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80034ca:	a916      	add	r1, sp, #88	; 0x58
 80034cc:	4620      	mov	r0, r4
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80034ce:	931b      	str	r3, [sp, #108]	; 0x6c
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80034d0:	9716      	str	r7, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80034d2:	9717      	str	r7, [sp, #92]	; 0x5c
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80034d4:	9718      	str	r7, [sp, #96]	; 0x60
  sBreakDeadTimeConfig.DeadTime = 0;
 80034d6:	9719      	str	r7, [sp, #100]	; 0x64
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80034d8:	971a      	str	r7, [sp, #104]	; 0x68
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80034da:	971c      	str	r7, [sp, #112]	; 0x70
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80034dc:	f7ff fa12 	bl	8002904 <HAL_TIMEx_ConfigBreakDeadTime>
  HAL_TIM_MspPostInit(&htim8);
 80034e0:	4620      	mov	r0, r4
  htim7.Instance = TIM7;
 80034e2:	4cba      	ldr	r4, [pc, #744]	; (80037cc <main+0x670>)
  HAL_TIM_MspPostInit(&htim8);
 80034e4:	f000 fefa 	bl	80042dc <HAL_TIM_MspPostInit>
  htim7.Instance = TIM7;
 80034e8:	4ab9      	ldr	r2, [pc, #740]	; (80037d0 <main+0x674>)
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034ea:	60a7      	str	r7, [r4, #8]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80034ec:	4620      	mov	r0, r4
  htim7.Init.Prescaler = 0;
 80034ee:	e884 0084 	stmia.w	r4, {r2, r7}
  htim7.Init.Period = 0;
 80034f2:	60e7      	str	r7, [r4, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034f4:	9716      	str	r7, [sp, #88]	; 0x58
 80034f6:	9717      	str	r7, [sp, #92]	; 0x5c
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80034f8:	f7fe ffe8 	bl	80024cc <HAL_TIM_Base_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80034fc:	a916      	add	r1, sp, #88	; 0x58
 80034fe:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003500:	9716      	str	r7, [sp, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003502:	9717      	str	r7, [sp, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003504:	f7ff f9dc 	bl	80028c0 <HAL_TIMEx_MasterConfigSynchronization>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003508:	4639      	mov	r1, r7
 800350a:	464a      	mov	r2, r9
 800350c:	a80f      	add	r0, sp, #60	; 0x3c
  htim5.Instance = TIM5;
 800350e:	4cb1      	ldr	r4, [pc, #708]	; (80037d4 <main+0x678>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003510:	f001 f945 	bl	800479e <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003514:	4639      	mov	r1, r7
 8003516:	221c      	movs	r2, #28
 8003518:	a816      	add	r0, sp, #88	; 0x58
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800351a:	970b      	str	r7, [sp, #44]	; 0x2c
 800351c:	970c      	str	r7, [sp, #48]	; 0x30
  TIM_OC_InitTypeDef sConfigOC = {0};
 800351e:	f001 f93e 	bl	800479e <memset>
  htim5.Instance = TIM5;
 8003522:	4aad      	ldr	r2, [pc, #692]	; (80037d8 <main+0x67c>)
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003524:	6127      	str	r7, [r4, #16]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003526:	4620      	mov	r0, r4
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003528:	e884 00c4 	stmia.w	r4, {r2, r6, r7}
  htim5.Init.Period = 20000;
 800352c:	60e5      	str	r5, [r4, #12]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800352e:	f7fe ffcd 	bl	80024cc <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003532:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003536:	a90f      	add	r1, sp, #60	; 0x3c
 8003538:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800353a:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800353c:	f7fe fde2 	bl	8002104 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8003540:	4620      	mov	r0, r4
 8003542:	f7fe ffdd 	bl	8002500 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003546:	a90b      	add	r1, sp, #44	; 0x2c
 8003548:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800354a:	970b      	str	r7, [sp, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800354c:	970c      	str	r7, [sp, #48]	; 0x30
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800354e:	f7ff f9b7 	bl	80028c0 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.Pulse = 1500;
 8003552:	f240 53dc 	movw	r3, #1500	; 0x5dc
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003556:	463a      	mov	r2, r7
 8003558:	a916      	add	r1, sp, #88	; 0x58
 800355a:	4620      	mov	r0, r4
  sConfigOC.Pulse = 1500;
 800355c:	9317      	str	r3, [sp, #92]	; 0x5c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800355e:	9718      	str	r7, [sp, #96]	; 0x60
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003560:	971a      	str	r7, [sp, #104]	; 0x68
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003562:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003566:	f7ff f8f1 	bl	800274c <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800356a:	2204      	movs	r2, #4
 800356c:	a916      	add	r1, sp, #88	; 0x58
 800356e:	4620      	mov	r0, r4
 8003570:	f7ff f8ec 	bl	800274c <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim5);
 8003574:	4620      	mov	r0, r4
 8003576:	f000 feb1 	bl	80042dc <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800357a:	4639      	mov	r1, r7
 800357c:	464a      	mov	r2, r9
 800357e:	a80f      	add	r0, sp, #60	; 0x3c
  htim3.Instance = TIM3;
 8003580:	4c96      	ldr	r4, [pc, #600]	; (80037dc <main+0x680>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003582:	f001 f90c 	bl	800479e <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003586:	4639      	mov	r1, r7
 8003588:	221c      	movs	r2, #28
 800358a:	a816      	add	r0, sp, #88	; 0x58
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800358c:	970b      	str	r7, [sp, #44]	; 0x2c
 800358e:	970c      	str	r7, [sp, #48]	; 0x30
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003590:	f001 f905 	bl	800479e <memset>
  htim3.Instance = TIM3;
 8003594:	4a92      	ldr	r2, [pc, #584]	; (80037e0 <main+0x684>)
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003596:	6127      	str	r7, [r4, #16]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003598:	4620      	mov	r0, r4
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800359a:	e884 00c4 	stmia.w	r4, {r2, r6, r7}
  htim3.Init.Period = 20000;
 800359e:	60e5      	str	r5, [r4, #12]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80035a0:	f7fe ff94 	bl	80024cc <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80035a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80035a8:	a90f      	add	r1, sp, #60	; 0x3c
 80035aa:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80035ac:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80035ae:	f7fe fda9 	bl	8002104 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80035b2:	4620      	mov	r0, r4
 80035b4:	f7fe ffa4 	bl	8002500 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80035b8:	a90b      	add	r1, sp, #44	; 0x2c
 80035ba:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035bc:	970b      	str	r7, [sp, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035be:	970c      	str	r7, [sp, #48]	; 0x30
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80035c0:	f7ff f97e 	bl	80028c0 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.Pulse = 1500;
 80035c4:	f240 53dc 	movw	r3, #1500	; 0x5dc
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80035c8:	463a      	mov	r2, r7
 80035ca:	a916      	add	r1, sp, #88	; 0x58
 80035cc:	4620      	mov	r0, r4
  sConfigOC.Pulse = 1500;
 80035ce:	9317      	str	r3, [sp, #92]	; 0x5c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80035d0:	9718      	str	r7, [sp, #96]	; 0x60
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80035d2:	971a      	str	r7, [sp, #104]	; 0x68
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80035d4:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80035d8:	f7ff f8b8 	bl	800274c <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80035dc:	2204      	movs	r2, #4
 80035de:	a916      	add	r1, sp, #88	; 0x58
 80035e0:	4620      	mov	r0, r4
 80035e2:	f7ff f8b3 	bl	800274c <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80035e6:	2208      	movs	r2, #8
 80035e8:	a916      	add	r1, sp, #88	; 0x58
 80035ea:	4620      	mov	r0, r4
 80035ec:	f7ff f8ae 	bl	800274c <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80035f0:	465a      	mov	r2, fp
 80035f2:	a916      	add	r1, sp, #88	; 0x58
 80035f4:	4620      	mov	r0, r4
 80035f6:	f7ff f8a9 	bl	800274c <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim3);
 80035fa:	4620      	mov	r0, r4
 80035fc:	f000 fe6e 	bl	80042dc <HAL_TIM_MspPostInit>
  htim2.Instance = TIM2;
 8003600:	4c78      	ldr	r4, [pc, #480]	; (80037e4 <main+0x688>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003602:	4639      	mov	r1, r7
 8003604:	464a      	mov	r2, r9
 8003606:	a80f      	add	r0, sp, #60	; 0x3c
 8003608:	f001 f8c9 	bl	800479e <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800360c:	4639      	mov	r1, r7
 800360e:	221c      	movs	r2, #28
 8003610:	a816      	add	r0, sp, #88	; 0x58
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003612:	970b      	str	r7, [sp, #44]	; 0x2c
 8003614:	970c      	str	r7, [sp, #48]	; 0x30
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003616:	f001 f8c2 	bl	800479e <memset>
  htim2.Instance = TIM2;
 800361a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800361e:	4620      	mov	r0, r4
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003620:	e884 00c4 	stmia.w	r4, {r2, r6, r7}
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003624:	6127      	str	r7, [r4, #16]
  htim2.Init.Period = 20000;
 8003626:	60e5      	str	r5, [r4, #12]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003628:	f7fe ff50 	bl	80024cc <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800362c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003630:	a90f      	add	r1, sp, #60	; 0x3c
 8003632:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003634:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003636:	f7fe fd65 	bl	8002104 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800363a:	4620      	mov	r0, r4
 800363c:	f7fe ff60 	bl	8002500 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003640:	a90b      	add	r1, sp, #44	; 0x2c
 8003642:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003644:	970b      	str	r7, [sp, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003646:	970c      	str	r7, [sp, #48]	; 0x30
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003648:	f7ff f93a 	bl	80028c0 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.Pulse = 1500;
 800364c:	f240 53dc 	movw	r3, #1500	; 0x5dc
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003650:	463a      	mov	r2, r7
 8003652:	a916      	add	r1, sp, #88	; 0x58
 8003654:	4620      	mov	r0, r4
  sConfigOC.Pulse = 1500;
 8003656:	9317      	str	r3, [sp, #92]	; 0x5c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003658:	9718      	str	r7, [sp, #96]	; 0x60
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800365a:	971a      	str	r7, [sp, #104]	; 0x68
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800365c:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003660:	f7ff f874 	bl	800274c <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003664:	2204      	movs	r2, #4
 8003666:	a916      	add	r1, sp, #88	; 0x58
 8003668:	4620      	mov	r0, r4
 800366a:	f7ff f86f 	bl	800274c <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800366e:	2208      	movs	r2, #8
 8003670:	a916      	add	r1, sp, #88	; 0x58
 8003672:	4620      	mov	r0, r4
 8003674:	f7ff f86a 	bl	800274c <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003678:	465a      	mov	r2, fp
 800367a:	a916      	add	r1, sp, #88	; 0x58
 800367c:	4620      	mov	r0, r4
 800367e:	f7ff f865 	bl	800274c <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim2);
 8003682:	4620      	mov	r0, r4
 8003684:	f000 fe2a 	bl	80042dc <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003688:	4639      	mov	r1, r7
 800368a:	464a      	mov	r2, r9
 800368c:	a80b      	add	r0, sp, #44	; 0x2c
 800368e:	f001 f886 	bl	800479e <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003692:	4639      	mov	r1, r7
 8003694:	221c      	movs	r2, #28
 8003696:	a80f      	add	r0, sp, #60	; 0x3c
  htim1.Instance = TIM1;
 8003698:	4c53      	ldr	r4, [pc, #332]	; (80037e8 <main+0x68c>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800369a:	9709      	str	r7, [sp, #36]	; 0x24
 800369c:	970a      	str	r7, [sp, #40]	; 0x28
  TIM_OC_InitTypeDef sConfigOC = {0};
 800369e:	f001 f87e 	bl	800479e <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80036a2:	4639      	mov	r1, r7
 80036a4:	221c      	movs	r2, #28
 80036a6:	a816      	add	r0, sp, #88	; 0x58
 80036a8:	f001 f879 	bl	800479e <memset>
  htim1.Instance = TIM1;
 80036ac:	4a4f      	ldr	r2, [pc, #316]	; (80037ec <main+0x690>)
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036ae:	6127      	str	r7, [r4, #16]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80036b0:	4620      	mov	r0, r4
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036b2:	e884 00c4 	stmia.w	r4, {r2, r6, r7}
  htim1.Init.RepetitionCounter = 0;
 80036b6:	6167      	str	r7, [r4, #20]
  htim1.Init.Period = 20000;
 80036b8:	60e5      	str	r5, [r4, #12]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80036ba:	f7fe ff07 	bl	80024cc <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80036be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80036c2:	a90b      	add	r1, sp, #44	; 0x2c
 80036c4:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80036c6:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80036c8:	f7fe fd1c 	bl	8002104 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80036cc:	4620      	mov	r0, r4
 80036ce:	f7fe ff17 	bl	8002500 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80036d2:	a909      	add	r1, sp, #36	; 0x24
 80036d4:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036d6:	9709      	str	r7, [sp, #36]	; 0x24
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036d8:	970a      	str	r7, [sp, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80036da:	f7ff f8f1 	bl	80028c0 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.Pulse = 1500;
 80036de:	f240 53dc 	movw	r3, #1500	; 0x5dc
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80036e2:	463a      	mov	r2, r7
 80036e4:	a90f      	add	r1, sp, #60	; 0x3c
 80036e6:	4620      	mov	r0, r4
  sConfigOC.Pulse = 1500;
 80036e8:	9310      	str	r3, [sp, #64]	; 0x40
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80036ea:	9711      	str	r7, [sp, #68]	; 0x44
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80036ec:	9712      	str	r7, [sp, #72]	; 0x48
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80036ee:	9713      	str	r7, [sp, #76]	; 0x4c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80036f0:	9714      	str	r7, [sp, #80]	; 0x50
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80036f2:	9715      	str	r7, [sp, #84]	; 0x54
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80036f4:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80036f8:	f7ff f828 	bl	800274c <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80036fc:	2204      	movs	r2, #4
 80036fe:	a90f      	add	r1, sp, #60	; 0x3c
 8003700:	4620      	mov	r0, r4
 8003702:	f7ff f823 	bl	800274c <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003706:	2208      	movs	r2, #8
 8003708:	a90f      	add	r1, sp, #60	; 0x3c
 800370a:	4620      	mov	r0, r4
 800370c:	f7ff f81e 	bl	800274c <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003710:	465a      	mov	r2, fp
 8003712:	a90f      	add	r1, sp, #60	; 0x3c
 8003714:	4620      	mov	r0, r4
 8003716:	f7ff f819 	bl	800274c <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800371a:	a916      	add	r1, sp, #88	; 0x58
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800371c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003720:	4620      	mov	r0, r4
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003722:	931b      	str	r3, [sp, #108]	; 0x6c
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003724:	9716      	str	r7, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003726:	9717      	str	r7, [sp, #92]	; 0x5c
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003728:	9718      	str	r7, [sp, #96]	; 0x60
  sBreakDeadTimeConfig.DeadTime = 0;
 800372a:	9719      	str	r7, [sp, #100]	; 0x64
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800372c:	971a      	str	r7, [sp, #104]	; 0x68
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800372e:	971c      	str	r7, [sp, #112]	; 0x70
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003730:	f7ff f8e8 	bl	8002904 <HAL_TIMEx_ConfigBreakDeadTime>
  HAL_TIM_MspPostInit(&htim1);
 8003734:	4620      	mov	r0, r4
 8003736:	f000 fdd1 	bl	80042dc <HAL_TIM_MspPostInit>
  huart5.Instance = UART5;
 800373a:	482d      	ldr	r0, [pc, #180]	; (80037f0 <main+0x694>)
  huart5.Init.BaudRate = 115200;
 800373c:	9b03      	ldr	r3, [sp, #12]
  huart5.Instance = UART5;
 800373e:	4a2d      	ldr	r2, [pc, #180]	; (80037f4 <main+0x698>)
  huart5.Init.BaudRate = 115200;
 8003740:	6043      	str	r3, [r0, #4]
  huart5.Instance = UART5;
 8003742:	6002      	str	r2, [r0, #0]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8003744:	6087      	str	r7, [r0, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8003746:	60c7      	str	r7, [r0, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8003748:	6107      	str	r7, [r0, #16]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800374a:	6187      	str	r7, [r0, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800374c:	61c7      	str	r7, [r0, #28]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800374e:	f8c0 b014 	str.w	fp, [r0, #20]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8003752:	f7ff fa4f 	bl	8002bf4 <HAL_UART_Init>
  hspi2.Instance = SPI2;
 8003756:	4828      	ldr	r0, [pc, #160]	; (80037f8 <main+0x69c>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003758:	4a28      	ldr	r2, [pc, #160]	; (80037fc <main+0x6a0>)
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800375a:	6087      	str	r7, [r0, #8]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800375c:	f44f 7482 	mov.w	r4, #260	; 0x104
 8003760:	e880 0014 	stmia.w	r0, {r2, r4}
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003764:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003768:	6182      	str	r2, [r0, #24]
  hspi2.Init.CRCPolynomial = 10;
 800376a:	220a      	movs	r2, #10
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800376c:	60c7      	str	r7, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800376e:	6107      	str	r7, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003770:	6147      	str	r7, [r0, #20]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003772:	61c7      	str	r7, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003774:	6207      	str	r7, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003776:	6247      	str	r7, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003778:	6287      	str	r7, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800377a:	62c2      	str	r2, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800377c:	f7fe fb9e 	bl	8001ebc <HAL_SPI_Init>
  hrtc.Instance = RTC;
 8003780:	481f      	ldr	r0, [pc, #124]	; (8003800 <main+0x6a4>)
 8003782:	4a20      	ldr	r2, [pc, #128]	; (8003804 <main+0x6a8>)
  htim14.Instance = TIM14;
 8003784:	4c20      	ldr	r4, [pc, #128]	; (8003808 <main+0x6ac>)
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003786:	6107      	str	r7, [r0, #16]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003788:	e880 0084 	stmia.w	r0, {r2, r7}
  hrtc.Init.AsynchPrediv = 127;
 800378c:	227f      	movs	r2, #127	; 0x7f
 800378e:	6082      	str	r2, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 8003790:	22ff      	movs	r2, #255	; 0xff
 8003792:	60c2      	str	r2, [r0, #12]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003794:	6147      	str	r7, [r0, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003796:	6187      	str	r7, [r0, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003798:	f7fe fb42 	bl	8001e20 <HAL_RTC_Init>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800379c:	4639      	mov	r1, r7
 800379e:	221c      	movs	r2, #28
 80037a0:	a816      	add	r0, sp, #88	; 0x58
 80037a2:	f000 fffc 	bl	800479e <memset>
  htim14.Instance = TIM14;
 80037a6:	4a19      	ldr	r2, [pc, #100]	; (800380c <main+0x6b0>)
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037a8:	6127      	str	r7, [r4, #16]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80037aa:	4620      	mov	r0, r4
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037ac:	e884 00c4 	stmia.w	r4, {r2, r6, r7}
  htim14.Init.Period = 20000;
 80037b0:	60e5      	str	r5, [r4, #12]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80037b2:	f7fe fe8b 	bl	80024cc <HAL_TIM_Base_Init>
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 80037b6:	4620      	mov	r0, r4
 80037b8:	f7fe fea2 	bl	8002500 <HAL_TIM_PWM_Init>
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80037bc:	a916      	add	r1, sp, #88	; 0x58
 80037be:	463a      	mov	r2, r7
 80037c0:	4620      	mov	r0, r4
  sConfigOC.Pulse = 0;
 80037c2:	9717      	str	r7, [sp, #92]	; 0x5c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80037c4:	9718      	str	r7, [sp, #96]	; 0x60
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80037c6:	971a      	str	r7, [sp, #104]	; 0x68
 80037c8:	e022      	b.n	8003810 <main+0x6b4>
 80037ca:	bf00      	nop
 80037cc:	200006f4 	.word	0x200006f4
 80037d0:	40001400 	.word	0x40001400
 80037d4:	20000434 	.word	0x20000434
 80037d8:	40000c00 	.word	0x40000c00
 80037dc:	20000470 	.word	0x20000470
 80037e0:	40000400 	.word	0x40000400
 80037e4:	20000600 	.word	0x20000600
 80037e8:	20000584 	.word	0x20000584
 80037ec:	40010000 	.word	0x40010000
 80037f0:	200004ac 	.word	0x200004ac
 80037f4:	40005000 	.word	0x40005000
 80037f8:	20000310 	.word	0x20000310
 80037fc:	40003800 	.word	0x40003800
 8003800:	20000564 	.word	0x20000564
 8003804:	40002800 	.word	0x40002800
 8003808:	2000067c 	.word	0x2000067c
 800380c:	40002000 	.word	0x40002000
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003810:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003814:	f7fe ff9a 	bl	800274c <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim14);
 8003818:	4620      	mov	r0, r4
  htim13.Instance = TIM13;
 800381a:	4c3b      	ldr	r4, [pc, #236]	; (8003908 <main+0x7ac>)
  HAL_TIM_MspPostInit(&htim14);
 800381c:	f000 fd5e 	bl	80042dc <HAL_TIM_MspPostInit>
  htim13.Instance = TIM13;
 8003820:	4a3a      	ldr	r2, [pc, #232]	; (800390c <main+0x7b0>)
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003822:	6127      	str	r7, [r4, #16]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8003824:	4620      	mov	r0, r4
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003826:	e884 00c4 	stmia.w	r4, {r2, r6, r7}
  htim13.Init.Period = 20000;
 800382a:	60e5      	str	r5, [r4, #12]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800382c:	f7fe fe4e 	bl	80024cc <HAL_TIM_Base_Init>
  Robot_Init();
 8003830:	f000 f88c 	bl	800394c <Robot_Init>
  Robot_Start();
 8003834:	f000 f9e6 	bl	8003c04 <Robot_Start>
  LedSwitch(3,GPIO_PIN_SET);
 8003838:	4651      	mov	r1, sl
 800383a:	2003      	movs	r0, #3
 800383c:	f000 ff3c 	bl	80046b8 <LedSwitch>
  LedSwitch(4,GPIO_PIN_SET);
 8003840:	4651      	mov	r1, sl
 8003842:	2004      	movs	r0, #4
 8003844:	f000 ff38 	bl	80046b8 <LedSwitch>
  HAL_TIM_Base_Start_IT(&htim13);
 8003848:	4620      	mov	r0, r4
 800384a:	f7fe fc4e 	bl	80020ea <HAL_TIM_Base_Start_IT>
  Message_StartReceive(5);
 800384e:	2005      	movs	r0, #5
      if(robot.robot_on == 1)
 8003850:	4c2f      	ldr	r4, [pc, #188]	; (8003910 <main+0x7b4>)
    if(HAL_GPIO_ReadPin(USR_BUTT_GPIO_Port,USR_BUTT_Pin)==GPIO_PIN_RESET)
 8003852:	4e30      	ldr	r6, [pc, #192]	; (8003914 <main+0x7b8>)
  Message_StartReceive(5);
 8003854:	f000 fae2 	bl	8003e1c <Message_StartReceive>
 8003858:	4627      	mov	r7, r4
    if(HAL_GPIO_ReadPin(USR_BUTT_GPIO_Port,USR_BUTT_Pin)==GPIO_PIN_RESET)
 800385a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800385e:	4630      	mov	r0, r6
 8003860:	f7fd fd4e 	bl	8001300 <HAL_GPIO_ReadPin>
 8003864:	b980      	cbnz	r0, 8003888 <main+0x72c>
      while(HAL_GPIO_ReadPin(USR_BUTT_GPIO_Port,USR_BUTT_Pin)==GPIO_PIN_RESET)
 8003866:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800386a:	4630      	mov	r0, r6
 800386c:	f7fd fd48 	bl	8001300 <HAL_GPIO_ReadPin>
 8003870:	2800      	cmp	r0, #0
 8003872:	d0f8      	beq.n	8003866 <main+0x70a>
      if(robot.robot_on == 1)
 8003874:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8003876:	2901      	cmp	r1, #1
 8003878:	d13c      	bne.n	80038f4 <main+0x798>
        LedSwitch(4,GPIO_PIN_SET);
 800387a:	2004      	movs	r0, #4
 800387c:	f000 ff1c 	bl	80046b8 <LedSwitch>
        robot.robot_on=0;
 8003880:	2300      	movs	r3, #0
 8003882:	6663      	str	r3, [r4, #100]	; 0x64
        Robot_Stop();
 8003884:	f000 f9d0 	bl	8003c28 <Robot_Stop>
    Robot_ReadCommand();
 8003888:	f000 fa6c 	bl	8003d64 <Robot_ReadCommand>
    if(robot.tim13_nb>=50)
 800388c:	f8d4 31f8 	ldr.w	r3, [r4, #504]	; 0x1f8
 8003890:	2b31      	cmp	r3, #49	; 0x31
 8003892:	dd2b      	ble.n	80038ec <main+0x790>
 8003894:	2500      	movs	r5, #0
 8003896:	4820      	ldr	r0, [pc, #128]	; (8003918 <main+0x7bc>)
 8003898:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800391c <main+0x7c0>
 800389c:	4629      	mov	r1, r5
        if( tim13_ctr_max < robot.tim13_ctr[i])
 800389e:	f850 2f04 	ldr.w	r2, [r0, #4]!
        tim13_ctr_mean+=(float)robot.tim13_ctr[i];
 80038a2:	ee07 2a90 	vmov	s15, r2
 80038a6:	4295      	cmp	r5, r2
 80038a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
      for(i=0;i<robot.tim13_nb;i++)
 80038ac:	f101 0101 	add.w	r1, r1, #1
 80038b0:	bfb8      	it	lt
 80038b2:	4615      	movlt	r5, r2
 80038b4:	428b      	cmp	r3, r1
        tim13_ctr_mean+=(float)robot.tim13_ctr[i];
 80038b6:	ee37 7a27 	vadd.f32	s14, s14, s15
      for(i=0;i<robot.tim13_nb;i++)
 80038ba:	d1f0      	bne.n	800389e <main+0x742>
      tim13_ctr_mean/=(float)robot.tim13_nb;
 80038bc:	ee07 3a90 	vmov	s15, r3
 80038c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
      robot.tim13_nb=0;
 80038c4:	2200      	movs	r2, #0
      Message_Send((uint8_t *)buf, sprintf(buf, "** TIM13 ctr max=%d mean=%f\r\n", tim13_ctr_max, tim13_ctr_mean));
 80038c6:	eec7 6a27 	vdiv.f32	s13, s14, s15
      robot.tim13_nb=0;
 80038ca:	f8c7 21f8 	str.w	r2, [r7, #504]	; 0x1f8
      Message_Send((uint8_t *)buf, sprintf(buf, "** TIM13 ctr max=%d mean=%f\r\n", tim13_ctr_max, tim13_ctr_mean));
 80038ce:	ee16 0a90 	vmov	r0, s13
 80038d2:	f7fc fe59 	bl	8000588 <__aeabi_f2d>
 80038d6:	462a      	mov	r2, r5
 80038d8:	e9cd 0100 	strd	r0, r1, [sp]
 80038dc:	4910      	ldr	r1, [pc, #64]	; (8003920 <main+0x7c4>)
 80038de:	a816      	add	r0, sp, #88	; 0x58
 80038e0:	f001 fbd2 	bl	8005088 <siprintf>
 80038e4:	4601      	mov	r1, r0
 80038e6:	a816      	add	r0, sp, #88	; 0x58
 80038e8:	f000 fa8e 	bl	8003e08 <Message_Send>
    HAL_Delay(100);
 80038ec:	2064      	movs	r0, #100	; 0x64
 80038ee:	f7fd fb9f 	bl	8001030 <HAL_Delay>
    if(HAL_GPIO_ReadPin(USR_BUTT_GPIO_Port,USR_BUTT_Pin)==GPIO_PIN_RESET)
 80038f2:	e7b2      	b.n	800385a <main+0x6fe>
        LedSwitch(4,GPIO_PIN_RESET);
 80038f4:	2100      	movs	r1, #0
 80038f6:	2004      	movs	r0, #4
 80038f8:	f000 fede 	bl	80046b8 <LedSwitch>
        robot.robot_on=1;
 80038fc:	2301      	movs	r3, #1
 80038fe:	6663      	str	r3, [r4, #100]	; 0x64
        Robot_Start();
 8003900:	f000 f980 	bl	8003c04 <Robot_Start>
 8003904:	e7c0      	b.n	8003888 <main+0x72c>
 8003906:	bf00      	nop
 8003908:	200004ec 	.word	0x200004ec
 800390c:	40001c00 	.word	0x40001c00
 8003910:	200008d4 	.word	0x200008d4
 8003914:	40020800 	.word	0x40020800
 8003918:	20000938 	.word	0x20000938
 800391c:	00000000 	.word	0x00000000
 8003920:	08007758 	.word	0x08007758

08003924 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003924:	b508      	push	{r3, lr}
    if (htim->Instance == htim13.Instance)
 8003926:	4b07      	ldr	r3, [pc, #28]	; (8003944 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003928:	6802      	ldr	r2, [r0, #0]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	429a      	cmp	r2, r3
 800392e:	d107      	bne.n	8003940 <HAL_TIM_PeriodElapsedCallback+0x1c>
    {
        /* Toggle LED */
        HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8003930:	2110      	movs	r1, #16
 8003932:	4805      	ldr	r0, [pc, #20]	; (8003948 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8003934:	f7fd fcef 	bl	8001316 <HAL_GPIO_TogglePin>
        // Robot update
        Robot_Update();
    }
}
 8003938:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        Robot_Update();
 800393c:	f000 b984 	b.w	8003c48 <Robot_Update>
 8003940:	bd08      	pop	{r3, pc}
 8003942:	bf00      	nop
 8003944:	200004ec 	.word	0x200004ec
 8003948:	40020400 	.word	0x40020400

0800394c <Robot_Init>:
int pulse=1500;

int ctr50Hz=0;

void Robot_Init()
{
 800394c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003950:	ed2d 8b02 	vpush	{d8}
  int i;
  t_leg *hleg_temp;

  Servo_Init(&servo01, &htim3,  TIM_CHANNEL_4); // Servo connector 01 : tim3, ch4  => RRL, 19
 8003954:	4b84      	ldr	r3, [pc, #528]	; (8003b68 <Robot_Init+0x21c>)
  Servo_Init(&servo02, &htim2,  TIM_CHANNEL_4); // Servo connector 02 : tim2, ch4  => RRM, 12
 8003956:	f8df b298 	ldr.w	fp, [pc, #664]	; 8003bf0 <Robot_Init+0x2a4>
  Servo_Init(&servo03, &htim2,  TIM_CHANNEL_3); // Servo connector 03 : tim2, ch3  => RRH, 08
 800395a:	f8df a298 	ldr.w	sl, [pc, #664]	; 8003bf4 <Robot_Init+0x2a8>
  Servo_Init(&servo01, &htim3,  TIM_CHANNEL_4); // Servo connector 01 : tim3, ch4  => RRL, 19
 800395e:	4983      	ldr	r1, [pc, #524]	; (8003b6c <Robot_Init+0x220>)
  // Servo connector 04 : tim5, ch2 => unused
  // Servo connector 05 : tim3, ch1 => unused
  // Servo connector 06 : tim8, ch2 => unused
  Servo_Init(&servo07, &htim8,  TIM_CHANNEL_3); // Servo connector 07 : tim8, ch3  => RLH, 03
 8003960:	f8df 9294 	ldr.w	r9, [pc, #660]	; 8003bf8 <Robot_Init+0x2ac>
  Servo_Init(&servo08, &htim8,  TIM_CHANNEL_4); // Servo connector 08 : tim8, ch4  => RLM, 11
 8003964:	f8df 8294 	ldr.w	r8, [pc, #660]	; 8003bfc <Robot_Init+0x2b0>
  Servo_Init(&servo11, &htim14, TIM_CHANNEL_1); // Servo connector 11 : tim14, ch1 => FLM, 05
  Servo_Init(&servo12, &htim11, TIM_CHANNEL_1); // Servo connector 12 : tim11, ch1 => FLH, 01
  // Servo connector 13 : tim3, ch2 => unused
  // Servo connector 14 : tim2, ch2 => unused
  // Servo connector 15 : tim1, ch1 => unused
  Servo_Init(&servo16, &htim10, TIM_CHANNEL_1); // Servo connector 16 : tim10, ch1 => FRH, 02
 8003968:	4e81      	ldr	r6, [pc, #516]	; (8003b70 <Robot_Init+0x224>)
  Servo_Init(&servo17, &htim1,  TIM_CHANNEL_4); // Servo connector 17 : tim1, ch4  => FRM, 09
 800396a:	4f82      	ldr	r7, [pc, #520]	; (8003b74 <Robot_Init+0x228>)
  Servo_Init(&servo18, &htim1,  TIM_CHANNEL_3); // Servo connector 18 : tim1, ch3  => FRL, 10
 800396c:	4d82      	ldr	r5, [pc, #520]	; (8003b78 <Robot_Init+0x22c>)
  Servo_SetLimits(&servo12, s01_limits);
  Servo_SetLimits(&servo16, s02_limits);
  Servo_SetLimits(&servo17, s09_limits);
  Servo_SetLimits(&servo18, s10_limits);

  robot.hservos[RRL]=&servo01;
 800396e:	4c83      	ldr	r4, [pc, #524]	; (8003b7c <Robot_Init+0x230>)

  // set initial position for legs
  // at 1st update, the array will be rotated, and last leg shall be returning
  // we initialise the positions, and rotate the array in reverse order
  for(i=0;i<NBLEGS;i++)
    Leg_SetPos(robot.hlegs[i], robot.hlegs[i]->origin_x-(i/(NBLEGS-1.))*robot.hlegs[i]->x_amplitude, robot.hlegs[i]->origin_y, LEG_HEIGHT);
 8003970:	ed9f 8a83 	vldr	s16, [pc, #524]	; 8003b80 <Robot_Init+0x234>
{
 8003974:	b085      	sub	sp, #20
  Servo_Init(&servo01, &htim3,  TIM_CHANNEL_4); // Servo connector 01 : tim3, ch4  => RRL, 19
 8003976:	4618      	mov	r0, r3
 8003978:	220c      	movs	r2, #12
 800397a:	9303      	str	r3, [sp, #12]
 800397c:	f000 fa9e 	bl	8003ebc <Servo_Init>
  Servo_Init(&servo02, &htim2,  TIM_CHANNEL_4); // Servo connector 02 : tim2, ch4  => RRM, 12
 8003980:	220c      	movs	r2, #12
 8003982:	4980      	ldr	r1, [pc, #512]	; (8003b84 <Robot_Init+0x238>)
 8003984:	4658      	mov	r0, fp
 8003986:	f000 fa99 	bl	8003ebc <Servo_Init>
  Servo_Init(&servo03, &htim2,  TIM_CHANNEL_3); // Servo connector 03 : tim2, ch3  => RRH, 08
 800398a:	4650      	mov	r0, sl
 800398c:	2208      	movs	r2, #8
 800398e:	497d      	ldr	r1, [pc, #500]	; (8003b84 <Robot_Init+0x238>)
 8003990:	f000 fa94 	bl	8003ebc <Servo_Init>
  Servo_Init(&servo07, &htim8,  TIM_CHANNEL_3); // Servo connector 07 : tim8, ch3  => RLH, 03
 8003994:	4648      	mov	r0, r9
 8003996:	2208      	movs	r2, #8
 8003998:	497b      	ldr	r1, [pc, #492]	; (8003b88 <Robot_Init+0x23c>)
 800399a:	f000 fa8f 	bl	8003ebc <Servo_Init>
  Servo_Init(&servo08, &htim8,  TIM_CHANNEL_4); // Servo connector 08 : tim8, ch4  => RLM, 11
 800399e:	4640      	mov	r0, r8
 80039a0:	220c      	movs	r2, #12
 80039a2:	4979      	ldr	r1, [pc, #484]	; (8003b88 <Robot_Init+0x23c>)
 80039a4:	f000 fa8a 	bl	8003ebc <Servo_Init>
  Servo_Init(&servo09, &htim1,  TIM_CHANNEL_2); // Servo connector 09 : tim1, ch2  => RLL, 16
 80039a8:	2204      	movs	r2, #4
 80039aa:	4978      	ldr	r1, [pc, #480]	; (8003b8c <Robot_Init+0x240>)
 80039ac:	4878      	ldr	r0, [pc, #480]	; (8003b90 <Robot_Init+0x244>)
 80039ae:	f000 fa85 	bl	8003ebc <Servo_Init>
  Servo_Init(&servo10, &htim3,  TIM_CHANNEL_3); // Servo connector 10 : tim3, ch3  => FLL, 13
 80039b2:	2208      	movs	r2, #8
 80039b4:	496d      	ldr	r1, [pc, #436]	; (8003b6c <Robot_Init+0x220>)
 80039b6:	4877      	ldr	r0, [pc, #476]	; (8003b94 <Robot_Init+0x248>)
 80039b8:	f000 fa80 	bl	8003ebc <Servo_Init>
  Servo_Init(&servo11, &htim14, TIM_CHANNEL_1); // Servo connector 11 : tim14, ch1 => FLM, 05
 80039bc:	2200      	movs	r2, #0
 80039be:	4976      	ldr	r1, [pc, #472]	; (8003b98 <Robot_Init+0x24c>)
 80039c0:	4876      	ldr	r0, [pc, #472]	; (8003b9c <Robot_Init+0x250>)
 80039c2:	f000 fa7b 	bl	8003ebc <Servo_Init>
  Servo_Init(&servo12, &htim11, TIM_CHANNEL_1); // Servo connector 12 : tim11, ch1 => FLH, 01
 80039c6:	2200      	movs	r2, #0
 80039c8:	4975      	ldr	r1, [pc, #468]	; (8003ba0 <Robot_Init+0x254>)
 80039ca:	4876      	ldr	r0, [pc, #472]	; (8003ba4 <Robot_Init+0x258>)
 80039cc:	f000 fa76 	bl	8003ebc <Servo_Init>
  Servo_Init(&servo16, &htim10, TIM_CHANNEL_1); // Servo connector 16 : tim10, ch1 => FRH, 02
 80039d0:	4630      	mov	r0, r6
 80039d2:	2200      	movs	r2, #0
 80039d4:	4974      	ldr	r1, [pc, #464]	; (8003ba8 <Robot_Init+0x25c>)
 80039d6:	f000 fa71 	bl	8003ebc <Servo_Init>
  Servo_Init(&servo17, &htim1,  TIM_CHANNEL_4); // Servo connector 17 : tim1, ch4  => FRM, 09
 80039da:	4638      	mov	r0, r7
 80039dc:	220c      	movs	r2, #12
 80039de:	496b      	ldr	r1, [pc, #428]	; (8003b8c <Robot_Init+0x240>)
 80039e0:	f000 fa6c 	bl	8003ebc <Servo_Init>
  Servo_Init(&servo18, &htim1,  TIM_CHANNEL_3); // Servo connector 18 : tim1, ch3  => FRL, 10
 80039e4:	2208      	movs	r2, #8
 80039e6:	4628      	mov	r0, r5
 80039e8:	4968      	ldr	r1, [pc, #416]	; (8003b8c <Robot_Init+0x240>)
 80039ea:	f000 fa67 	bl	8003ebc <Servo_Init>
  Servo_SetLimits(&servo01, s19_limits);
 80039ee:	9b03      	ldr	r3, [sp, #12]
 80039f0:	496e      	ldr	r1, [pc, #440]	; (8003bac <Robot_Init+0x260>)
 80039f2:	4618      	mov	r0, r3
 80039f4:	f000 fa68 	bl	8003ec8 <Servo_SetLimits>
  Servo_SetLimits(&servo02, s12_limits);
 80039f8:	496d      	ldr	r1, [pc, #436]	; (8003bb0 <Robot_Init+0x264>)
 80039fa:	4658      	mov	r0, fp
 80039fc:	f000 fa64 	bl	8003ec8 <Servo_SetLimits>
  Servo_SetLimits(&servo03, s08_limits);
 8003a00:	4650      	mov	r0, sl
 8003a02:	496c      	ldr	r1, [pc, #432]	; (8003bb4 <Robot_Init+0x268>)
 8003a04:	f000 fa60 	bl	8003ec8 <Servo_SetLimits>
  Servo_SetLimits(&servo07, s03_limits);
 8003a08:	4648      	mov	r0, r9
 8003a0a:	496b      	ldr	r1, [pc, #428]	; (8003bb8 <Robot_Init+0x26c>)
 8003a0c:	f000 fa5c 	bl	8003ec8 <Servo_SetLimits>
  Servo_SetLimits(&servo08, s11_limits);
 8003a10:	4640      	mov	r0, r8
 8003a12:	496a      	ldr	r1, [pc, #424]	; (8003bbc <Robot_Init+0x270>)
 8003a14:	f000 fa58 	bl	8003ec8 <Servo_SetLimits>
  Servo_SetLimits(&servo09, s16_limits);
 8003a18:	4969      	ldr	r1, [pc, #420]	; (8003bc0 <Robot_Init+0x274>)
 8003a1a:	485d      	ldr	r0, [pc, #372]	; (8003b90 <Robot_Init+0x244>)
 8003a1c:	f000 fa54 	bl	8003ec8 <Servo_SetLimits>
  Servo_SetLimits(&servo10, s13_limits);
 8003a20:	4968      	ldr	r1, [pc, #416]	; (8003bc4 <Robot_Init+0x278>)
 8003a22:	485c      	ldr	r0, [pc, #368]	; (8003b94 <Robot_Init+0x248>)
 8003a24:	f000 fa50 	bl	8003ec8 <Servo_SetLimits>
  Servo_SetLimits(&servo11, s05_limits);
 8003a28:	4967      	ldr	r1, [pc, #412]	; (8003bc8 <Robot_Init+0x27c>)
 8003a2a:	485c      	ldr	r0, [pc, #368]	; (8003b9c <Robot_Init+0x250>)
 8003a2c:	f000 fa4c 	bl	8003ec8 <Servo_SetLimits>
  Servo_SetLimits(&servo12, s01_limits);
 8003a30:	4966      	ldr	r1, [pc, #408]	; (8003bcc <Robot_Init+0x280>)
 8003a32:	485c      	ldr	r0, [pc, #368]	; (8003ba4 <Robot_Init+0x258>)
 8003a34:	f000 fa48 	bl	8003ec8 <Servo_SetLimits>
  Servo_SetLimits(&servo16, s02_limits);
 8003a38:	4630      	mov	r0, r6
 8003a3a:	4965      	ldr	r1, [pc, #404]	; (8003bd0 <Robot_Init+0x284>)
 8003a3c:	f000 fa44 	bl	8003ec8 <Servo_SetLimits>
  Servo_SetLimits(&servo17, s09_limits);
 8003a40:	4638      	mov	r0, r7
 8003a42:	4964      	ldr	r1, [pc, #400]	; (8003bd4 <Robot_Init+0x288>)
 8003a44:	f000 fa40 	bl	8003ec8 <Servo_SetLimits>
  Servo_SetLimits(&servo18, s10_limits);
 8003a48:	4628      	mov	r0, r5
 8003a4a:	4963      	ldr	r1, [pc, #396]	; (8003bd8 <Robot_Init+0x28c>)
 8003a4c:	f000 fa3c 	bl	8003ec8 <Servo_SetLimits>
  robot.hservos[RRL]=&servo01;
 8003a50:	9b03      	ldr	r3, [sp, #12]
 8003a52:	6263      	str	r3, [r4, #36]	; 0x24
  robot.hservos[RLL]=&servo09;
 8003a54:	4b4e      	ldr	r3, [pc, #312]	; (8003b90 <Robot_Init+0x244>)
 8003a56:	63e3      	str	r3, [r4, #60]	; 0x3c
  robot.hservos[FLL]=&servo10;
 8003a58:	4b4e      	ldr	r3, [pc, #312]	; (8003b94 <Robot_Init+0x248>)
  robot.hservos[RLH]=&servo07;
 8003a5a:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
  robot.hservos[FLL]=&servo10;
 8003a5e:	6323      	str	r3, [r4, #48]	; 0x30
  Leg_Init(&legFR, robot.hservos[FRH], robot.hservos[FRM], robot.hservos[FRL], 0);
 8003a60:	f8df 919c 	ldr.w	r9, [pc, #412]	; 8003c00 <Robot_Init+0x2b4>
  robot.hservos[FLM]=&servo11;
 8003a64:	4b4d      	ldr	r3, [pc, #308]	; (8003b9c <Robot_Init+0x250>)
  robot.hservos[RLM]=&servo08;
 8003a66:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  robot.hservos[FLM]=&servo11;
 8003a6a:	62e3      	str	r3, [r4, #44]	; 0x2c
  Leg_Init(&legFR, robot.hservos[FRH], robot.hservos[FRM], robot.hservos[FRL], 0);
 8003a6c:	f04f 0800 	mov.w	r8, #0
  robot.hservos[FLH]=&servo12;
 8003a70:	4b4c      	ldr	r3, [pc, #304]	; (8003ba4 <Robot_Init+0x258>)
  robot.hservos[RRH]=&servo03;
 8003a72:	f8c4 a01c 	str.w	sl, [r4, #28]
  Leg_Init(&legFR, robot.hservos[FRH], robot.hservos[FRM], robot.hservos[FRL], 0);
 8003a76:	463a      	mov	r2, r7
 8003a78:	4631      	mov	r1, r6
  robot.hservos[FLH]=&servo12;
 8003a7a:	62a3      	str	r3, [r4, #40]	; 0x28
  robot.hservos[FRM]=&servo17;
 8003a7c:	6167      	str	r7, [r4, #20]
  Leg_Init(&legFR, robot.hservos[FRH], robot.hservos[FRM], robot.hservos[FRL], 0);
 8003a7e:	462b      	mov	r3, r5
 8003a80:	4648      	mov	r0, r9
  Leg_Init(&legFL, robot.hservos[FLH], robot.hservos[FLM], robot.hservos[FLL], 1);
 8003a82:	4f56      	ldr	r7, [pc, #344]	; (8003bdc <Robot_Init+0x290>)
  Leg_Init(&legFR, robot.hservos[FRH], robot.hservos[FRM], robot.hservos[FRL], 0);
 8003a84:	f8cd 8000 	str.w	r8, [sp]
  Leg_Init(&legFL, robot.hservos[FLH], robot.hservos[FLM], robot.hservos[FLL], 1);
 8003a88:	f04f 0a01 	mov.w	sl, #1
  robot.hservos[FRH]=&servo16;
 8003a8c:	6126      	str	r6, [r4, #16]
  robot.hservos[FRL]=&servo18;
 8003a8e:	61a5      	str	r5, [r4, #24]
  robot.hservos[RRM]=&servo02;
 8003a90:	f8c4 b020 	str.w	fp, [r4, #32]
  Leg_Init(&legFR, robot.hservos[FRH], robot.hservos[FRM], robot.hservos[FRL], 0);
 8003a94:	f7ff fa40 	bl	8002f18 <Leg_Init>
  Leg_Init(&legFL, robot.hservos[FLH], robot.hservos[FLM], robot.hservos[FLL], 1);
 8003a98:	f8cd a000 	str.w	sl, [sp]
 8003a9c:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8003aa0:	c90e      	ldmia	r1, {r1, r2, r3}
  Leg_Init(&legRR, robot.hservos[RRH], robot.hservos[RRM], robot.hservos[RRL], 0);
 8003aa2:	4d4f      	ldr	r5, [pc, #316]	; (8003be0 <Robot_Init+0x294>)
  Leg_Init(&legRL, robot.hservos[RLH], robot.hservos[RLM], robot.hservos[RLL], 1);
 8003aa4:	4e4f      	ldr	r6, [pc, #316]	; (8003be4 <Robot_Init+0x298>)
  Leg_Init(&legFL, robot.hservos[FLH], robot.hservos[FLM], robot.hservos[FLL], 1);
 8003aa6:	4638      	mov	r0, r7
 8003aa8:	f7ff fa36 	bl	8002f18 <Leg_Init>
  Leg_Init(&legRR, robot.hservos[RRH], robot.hservos[RRM], robot.hservos[RRL], 0);
 8003aac:	f8cd 8000 	str.w	r8, [sp]
 8003ab0:	f104 011c 	add.w	r1, r4, #28
 8003ab4:	c90e      	ldmia	r1, {r1, r2, r3}
 8003ab6:	4628      	mov	r0, r5
 8003ab8:	f7ff fa2e 	bl	8002f18 <Leg_Init>
  Leg_Init(&legRL, robot.hservos[RLH], robot.hservos[RLM], robot.hservos[RLL], 1);
 8003abc:	f8cd a000 	str.w	sl, [sp]
 8003ac0:	f104 0134 	add.w	r1, r4, #52	; 0x34
 8003ac4:	c90e      	ldmia	r1, {r1, r2, r3}
 8003ac6:	4630      	mov	r0, r6
 8003ac8:	f7ff fa26 	bl	8002f18 <Leg_Init>
  robot.hlegs[3]=&legRR;
 8003acc:	60e5      	str	r5, [r4, #12]
  robot.hlegs[0]=&legFL;
 8003ace:	6027      	str	r7, [r4, #0]
  robot.hlegs[1]=&legRL;
 8003ad0:	6066      	str	r6, [r4, #4]
  robot.hlegs[2]=&legFR;
 8003ad2:	f8c4 9008 	str.w	r9, [r4, #8]
  for(i=0;i<NBLEGS;i++)
 8003ad6:	4645      	mov	r5, r8
    Leg_SetPos(robot.hlegs[i], robot.hlegs[i]->origin_x-(i/(NBLEGS-1.))*robot.hlegs[i]->x_amplitude, robot.hlegs[i]->origin_y, LEG_HEIGHT);
 8003ad8:	f854 a025 	ldr.w	sl, [r4, r5, lsl #2]
 8003adc:	f8da 001c 	ldr.w	r0, [sl, #28]
 8003ae0:	f7fc fd52 	bl	8000588 <__aeabi_f2d>
 8003ae4:	4606      	mov	r6, r0
 8003ae6:	4628      	mov	r0, r5
 8003ae8:	460f      	mov	r7, r1
 8003aea:	f7fc fd3b 	bl	8000564 <__aeabi_i2d>
 8003aee:	2200      	movs	r2, #0
 8003af0:	4b3d      	ldr	r3, [pc, #244]	; (8003be8 <Robot_Init+0x29c>)
 8003af2:	f7fc fec7 	bl	8000884 <__aeabi_ddiv>
 8003af6:	4680      	mov	r8, r0
 8003af8:	f8da 0034 	ldr.w	r0, [sl, #52]	; 0x34
 8003afc:	4689      	mov	r9, r1
 8003afe:	f7fc fd43 	bl	8000588 <__aeabi_f2d>
 8003b02:	4602      	mov	r2, r0
 8003b04:	460b      	mov	r3, r1
 8003b06:	4640      	mov	r0, r8
 8003b08:	4649      	mov	r1, r9
 8003b0a:	f7fc fd91 	bl	8000630 <__aeabi_dmul>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	460b      	mov	r3, r1
 8003b12:	4630      	mov	r0, r6
 8003b14:	4639      	mov	r1, r7
 8003b16:	f7fc fbd7 	bl	80002c8 <__aeabi_dsub>
 8003b1a:	f7fd f861 	bl	8000be0 <__aeabi_d2f>
  for(i=0;i<NBLEGS;i++)
 8003b1e:	3501      	adds	r5, #1
    Leg_SetPos(robot.hlegs[i], robot.hlegs[i]->origin_x-(i/(NBLEGS-1.))*robot.hlegs[i]->x_amplitude, robot.hlegs[i]->origin_y, LEG_HEIGHT);
 8003b20:	ee00 0a10 	vmov	s0, r0
 8003b24:	eeb0 1a48 	vmov.f32	s2, s16
 8003b28:	edda 0a08 	vldr	s1, [sl, #32]
 8003b2c:	4650      	mov	r0, sl
 8003b2e:	f7ff fa0f 	bl	8002f50 <Leg_SetPos>
  for(i=0;i<NBLEGS;i++)
 8003b32:	2d04      	cmp	r5, #4
 8003b34:	d1d0      	bne.n	8003ad8 <Robot_Init+0x18c>
  hleg_temp=robot.hlegs[0];
  for(i=0;i<NBLEGS-1;i++)
    robot.hlegs[i]=robot.hlegs[i+1];
 8003b36:	6862      	ldr	r2, [r4, #4]
  hleg_temp=robot.hlegs[0];
 8003b38:	6823      	ldr	r3, [r4, #0]
    robot.hlegs[i]=robot.hlegs[i+1];
 8003b3a:	6022      	str	r2, [r4, #0]
 8003b3c:	68a2      	ldr	r2, [r4, #8]
 8003b3e:	6062      	str	r2, [r4, #4]
 8003b40:	68e2      	ldr	r2, [r4, #12]
  robot.hlegs[NBLEGS-1]=hleg_temp;
 8003b42:	60e3      	str	r3, [r4, #12]

  robot.robot_on=0;
 8003b44:	2300      	movs	r3, #0
 8003b46:	6663      	str	r3, [r4, #100]	; 0x64
  robot.robot_mode=Standard;
 8003b48:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
  robot.step_x=0;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	6423      	str	r3, [r4, #64]	; 0x40
  robot.step_y=0;
 8003b50:	6463      	str	r3, [r4, #68]	; 0x44

  pulse=1500;
 8003b52:	4b26      	ldr	r3, [pc, #152]	; (8003bec <Robot_Init+0x2a0>)
    robot.hlegs[i]=robot.hlegs[i+1];
 8003b54:	60a2      	str	r2, [r4, #8]
  pulse=1500;
 8003b56:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003b5a:	601a      	str	r2, [r3, #0]
}
 8003b5c:	b005      	add	sp, #20
 8003b5e:	ecbd 8b02 	vpop	{d8}
 8003b62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b66:	bf00      	nop
 8003b68:	2000078c 	.word	0x2000078c
 8003b6c:	20000470 	.word	0x20000470
 8003b70:	200008b0 	.word	0x200008b0
 8003b74:	200007b0 	.word	0x200007b0
 8003b78:	20000bec 	.word	0x20000bec
 8003b7c:	200008d4 	.word	0x200008d4
 8003b80:	42a00000 	.word	0x42a00000
 8003b84:	20000600 	.word	0x20000600
 8003b88:	20000368 	.word	0x20000368
 8003b8c:	20000584 	.word	0x20000584
 8003b90:	20000830 	.word	0x20000830
 8003b94:	2000080c 	.word	0x2000080c
 8003b98:	2000067c 	.word	0x2000067c
 8003b9c:	2000088c 	.word	0x2000088c
 8003ba0:	20000528 	.word	0x20000528
 8003ba4:	20000b80 	.word	0x20000b80
 8003ba8:	200003f8 	.word	0x200003f8
 8003bac:	200000e8 	.word	0x200000e8
 8003bb0:	200000ac 	.word	0x200000ac
 8003bb4:	2000005c 	.word	0x2000005c
 8003bb8:	20000034 	.word	0x20000034
 8003bbc:	20000098 	.word	0x20000098
 8003bc0:	200000d4 	.word	0x200000d4
 8003bc4:	200000c0 	.word	0x200000c0
 8003bc8:	20000048 	.word	0x20000048
 8003bcc:	2000000c 	.word	0x2000000c
 8003bd0:	20000020 	.word	0x20000020
 8003bd4:	20000070 	.word	0x20000070
 8003bd8:	20000084 	.word	0x20000084
 8003bdc:	20000854 	.word	0x20000854
 8003be0:	20000754 	.word	0x20000754
 8003be4:	20000b10 	.word	0x20000b10
 8003be8:	40080000 	.word	0x40080000
 8003bec:	20000008 	.word	0x20000008
 8003bf0:	20000730 	.word	0x20000730
 8003bf4:	20000b48 	.word	0x20000b48
 8003bf8:	20000ba4 	.word	0x20000ba4
 8003bfc:	20000bc8 	.word	0x20000bc8
 8003c00:	200007d4 	.word	0x200007d4

08003c04 <Robot_Start>:

void Robot_Start()
{
 8003c04:	b538      	push	{r3, r4, r5, lr}
  int i;

  robot.speed=50.; // speed in mm/s
 8003c06:	4d06      	ldr	r5, [pc, #24]	; (8003c20 <Robot_Start+0x1c>)
 8003c08:	4a06      	ldr	r2, [pc, #24]	; (8003c24 <Robot_Start+0x20>)
 8003c0a:	65aa      	str	r2, [r5, #88]	; 0x58
 8003c0c:	2400      	movs	r4, #0

  for(i=0;i<3*NBLEGS;i++)
    Servo_Start(robot.hservos[i]);
 8003c0e:	192b      	adds	r3, r5, r4
 8003c10:	3404      	adds	r4, #4
 8003c12:	6918      	ldr	r0, [r3, #16]
 8003c14:	f000 f97c 	bl	8003f10 <Servo_Start>
  for(i=0;i<3*NBLEGS;i++)
 8003c18:	2c30      	cmp	r4, #48	; 0x30
 8003c1a:	d1f8      	bne.n	8003c0e <Robot_Start+0xa>
}
 8003c1c:	bd38      	pop	{r3, r4, r5, pc}
 8003c1e:	bf00      	nop
 8003c20:	200008d4 	.word	0x200008d4
 8003c24:	42480000 	.word	0x42480000

08003c28 <Robot_Stop>:

void Robot_Stop()
{
 8003c28:	b538      	push	{r3, r4, r5, lr}
  int i;

  robot.speed=0.; // speed in mm/s
 8003c2a:	4d06      	ldr	r5, [pc, #24]	; (8003c44 <Robot_Stop+0x1c>)
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	65aa      	str	r2, [r5, #88]	; 0x58
 8003c30:	2400      	movs	r4, #0

  for(i=0;i<3*NBLEGS;i++)
    Servo_Stop(robot.hservos[i]);
 8003c32:	192b      	adds	r3, r5, r4
 8003c34:	3404      	adds	r4, #4
 8003c36:	6918      	ldr	r0, [r3, #16]
 8003c38:	f000 f96d 	bl	8003f16 <Servo_Stop>
  for(i=0;i<3*NBLEGS;i++)
 8003c3c:	2c30      	cmp	r4, #48	; 0x30
 8003c3e:	d1f8      	bne.n	8003c32 <Robot_Stop+0xa>
}
 8003c40:	bd38      	pop	{r3, r4, r5, pc}
 8003c42:	bf00      	nop
 8003c44:	200008d4 	.word	0x200008d4

08003c48 <Robot_Update>:
/**********************************************************
  * @brief  Update legs position
  * This function is run every 20ms by Timer 13.
  */
void Robot_Update()
{
 8003c48:	b570      	push	{r4, r5, r6, lr}

  if(robot.robot_on == 1)
 8003c4a:	4c43      	ldr	r4, [pc, #268]	; (8003d58 <Robot_Update+0x110>)
 8003c4c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003c4e:	2b01      	cmp	r3, #1
{
 8003c50:	ed2d 8b02 	vpush	{d8}
  if(robot.robot_on == 1)
 8003c54:	d16d      	bne.n	8003d32 <Robot_Update+0xea>
  {
    int i;

    if(robot.remsteps_before_return == 0)// new sequence, update return leg
 8003c56:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d14e      	bne.n	8003cfa <Robot_Update+0xb2>
      float return_d; // return distance
      float step_dist; // distance at each step
      // rotate legs array so returning leg is at last position
      hleg_temp=robot.hlegs[NBLEGS-1];
      for(i=NBLEGS-2;i>=0;i--)
        robot.hlegs[i+1]=robot.hlegs[i];
 8003c5c:	68a5      	ldr	r5, [r4, #8]
 8003c5e:	6862      	ldr	r2, [r4, #4]
      robot.hlegs[0]=hleg_temp;
      hleg_temp=robot.hlegs[NBLEGS-1];

      // Distance for returning leg
      return_x=hleg_temp->origin_x-hleg_temp->x;
 8003c60:	edd5 7a04 	vldr	s15, [r5, #16]
 8003c64:	ed95 8a07 	vldr	s16, [r5, #28]
      return_y=hleg_temp->origin_y-hleg_temp->y;
 8003c68:	edd5 8a08 	vldr	s17, [r5, #32]
      hleg_temp=robot.hlegs[NBLEGS-1];
 8003c6c:	68e3      	ldr	r3, [r4, #12]
        robot.hlegs[i+1]=robot.hlegs[i];
 8003c6e:	60a2      	str	r2, [r4, #8]
      return_x=hleg_temp->origin_x-hleg_temp->x;
 8003c70:	ee38 8a67 	vsub.f32	s16, s16, s15
      return_y=hleg_temp->origin_y-hleg_temp->y;
 8003c74:	edd5 7a05 	vldr	s15, [r5, #20]
        robot.hlegs[i+1]=robot.hlegs[i];
 8003c78:	6822      	ldr	r2, [r4, #0]
 8003c7a:	6062      	str	r2, [r4, #4]
      return_d=sqrtf(return_x*return_x+return_x*return_x);
 8003c7c:	ee28 0a08 	vmul.f32	s0, s16, s16
      return_y=hleg_temp->origin_y-hleg_temp->y;
 8003c80:	ee78 8ae7 	vsub.f32	s17, s17, s15
      return_d=sqrtf(return_x*return_x+return_x*return_x);
 8003c84:	ee30 0a00 	vadd.f32	s0, s0, s0
      robot.hlegs[0]=hleg_temp;
 8003c88:	6023      	str	r3, [r4, #0]
        robot.hlegs[i+1]=robot.hlegs[i];
 8003c8a:	60e5      	str	r5, [r4, #12]
      return_d=sqrtf(return_x*return_x+return_x*return_x);
 8003c8c:	f003 f892 	bl	8006db4 <sqrtf>
      step_dist=robot.speed*SERVO_PULSE_PERIOD;
 8003c90:	6da6      	ldr	r6, [r4, #88]	; 0x58
 8003c92:	4630      	mov	r0, r6
 8003c94:	f7fc fc78 	bl	8000588 <__aeabi_f2d>
 8003c98:	a32d      	add	r3, pc, #180	; (adr r3, 8003d50 <Robot_Update+0x108>)
 8003c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c9e:	f7fc fcc7 	bl	8000630 <__aeabi_dmul>
 8003ca2:	f7fc ff9d 	bl	8000be0 <__aeabi_d2f>
      robot.steps_before_return=(int)floorf(hleg_temp->x_amplitude/((NBLEGS-1)*step_dist));
 8003ca6:	ee07 0a10 	vmov	s14, r0
 8003caa:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8003cae:	ed95 0a0d 	vldr	s0, [r5, #52]	; 0x34
 8003cb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cb6:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8003cba:	f002 ff89 	bl	8006bd0 <floorf>
 8003cbe:	eebd 0ac0 	vcvt.s32.f32	s0, s0
      robot.remsteps_before_return=robot.steps_before_return;
      robot.ret_step_x=return_x/robot.steps_before_return;
      robot.ret_step_y=return_y/robot.steps_before_return;

      // step distance for staight line only
      robot.step_x=-robot.speed*SERVO_PULSE_PERIOD; // legs are going backward if speed is > 0
 8003cc2:	f086 4000 	eor.w	r0, r6, #2147483648	; 0x80000000
      robot.steps_before_return=(int)floorf(hleg_temp->x_amplitude/((NBLEGS-1)*step_dist));
 8003cc6:	ed84 0a14 	vstr	s0, [r4, #80]	; 0x50
      robot.remsteps_before_return=robot.steps_before_return;
 8003cca:	ed84 0a15 	vstr	s0, [r4, #84]	; 0x54
      robot.ret_step_x=return_x/robot.steps_before_return;
 8003cce:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8003cd2:	eec8 7a00 	vdiv.f32	s15, s16, s0
 8003cd6:	edc4 7a12 	vstr	s15, [r4, #72]	; 0x48
      robot.ret_step_y=return_y/robot.steps_before_return;
 8003cda:	eec8 7a80 	vdiv.f32	s15, s17, s0
 8003cde:	edc4 7a13 	vstr	s15, [r4, #76]	; 0x4c
      robot.step_x=-robot.speed*SERVO_PULSE_PERIOD; // legs are going backward if speed is > 0
 8003ce2:	f7fc fc51 	bl	8000588 <__aeabi_f2d>
 8003ce6:	a31a      	add	r3, pc, #104	; (adr r3, 8003d50 <Robot_Update+0x108>)
 8003ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cec:	f7fc fca0 	bl	8000630 <__aeabi_dmul>
 8003cf0:	f7fc ff76 	bl	8000be0 <__aeabi_d2f>
      robot.step_y=0;
 8003cf4:	2300      	movs	r3, #0
      robot.step_x=-robot.speed*SERVO_PULSE_PERIOD; // legs are going backward if speed is > 0
 8003cf6:	6420      	str	r0, [r4, #64]	; 0x40
      robot.step_y=0;
 8003cf8:	6463      	str	r3, [r4, #68]	; 0x44
    }
    // Leg steps
    for(i=0;i<NBLEGS-1;i++)
      Leg_Move(robot.hlegs[i], robot.step_x, robot.step_y, 0);
 8003cfa:	ed9f 8a18 	vldr	s16, [pc, #96]	; 8003d5c <Robot_Update+0x114>
{
 8003cfe:	2500      	movs	r5, #0
      Leg_Move(robot.hlegs[i], robot.step_x, robot.step_y, 0);
 8003d00:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 8003d04:	edd4 0a11 	vldr	s1, [r4, #68]	; 0x44
 8003d08:	ed94 0a10 	vldr	s0, [r4, #64]	; 0x40
 8003d0c:	eeb0 1a48 	vmov.f32	s2, s16
    for(i=0;i<NBLEGS-1;i++)
 8003d10:	3501      	adds	r5, #1
      Leg_Move(robot.hlegs[i], robot.step_x, robot.step_y, 0);
 8003d12:	f7ff f9bb 	bl	800308c <Leg_Move>
    for(i=0;i<NBLEGS-1;i++)
 8003d16:	2d03      	cmp	r5, #3
 8003d18:	d1f2      	bne.n	8003d00 <Robot_Update+0xb8>
    Leg_Move(robot.hlegs[NBLEGS-1], robot.ret_step_x, robot.ret_step_y, 0);
 8003d1a:	ed9f 1a10 	vldr	s2, [pc, #64]	; 8003d5c <Robot_Update+0x114>
 8003d1e:	edd4 0a13 	vldr	s1, [r4, #76]	; 0x4c
 8003d22:	ed94 0a12 	vldr	s0, [r4, #72]	; 0x48
 8003d26:	68e0      	ldr	r0, [r4, #12]
 8003d28:	f7ff f9b0 	bl	800308c <Leg_Move>
    robot.remsteps_before_return--;
 8003d2c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003d2e:	3b01      	subs	r3, #1
 8003d30:	6563      	str	r3, [r4, #84]	; 0x54
  }

  // count execution time
  int ctr;
  ctr=__HAL_TIM_GetCounter(&htim13);
 8003d32:	4b0b      	ldr	r3, [pc, #44]	; (8003d60 <Robot_Update+0x118>)
 8003d34:	681b      	ldr	r3, [r3, #0]
  robot.tim13_ctr[robot.tim13_nb]=ctr;
  robot.tim13_nb++;

}
 8003d36:	ecbd 8b02 	vpop	{d8}
  ctr=__HAL_TIM_GetCounter(&htim13);
 8003d3a:	6a59      	ldr	r1, [r3, #36]	; 0x24
  robot.tim13_ctr[robot.tim13_nb]=ctr;
 8003d3c:	f8d4 31f8 	ldr.w	r3, [r4, #504]	; 0x1f8
 8003d40:	f103 021a 	add.w	r2, r3, #26
  robot.tim13_nb++;
 8003d44:	3301      	adds	r3, #1
  robot.tim13_ctr[robot.tim13_nb]=ctr;
 8003d46:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
  robot.tim13_nb++;
 8003d4a:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
}
 8003d4e:	bd70      	pop	{r4, r5, r6, pc}
 8003d50:	47ae147b 	.word	0x47ae147b
 8003d54:	3f947ae1 	.word	0x3f947ae1
 8003d58:	200008d4 	.word	0x200008d4
 8003d5c:	00000000 	.word	0x00000000
 8003d60:	200004ec 	.word	0x200004ec

08003d64 <Robot_ReadCommand>:

/**********************************************************
  * @brief  Read data from Message UART buffer and interpret commands
  */
void Robot_ReadCommand()
{
 8003d64:	b510      	push	{r4, lr}
 8003d66:	b092      	sub	sp, #72	; 0x48
  // check if new data available in UART2 buffer
  if(Message_ReceivedLength() > 0)
 8003d68:	f000 f862 	bl	8003e30 <Message_ReceivedLength>
 8003d6c:	2800      	cmp	r0, #0
 8003d6e:	dd2d      	ble.n	8003dcc <Robot_ReadCommand+0x68>
    char cmd_s[8];
    char buf[64];
    char cmd_i;
    int cmd_v;

    Message_Get((uint8_t*)cmd_s);
 8003d70:	4668      	mov	r0, sp
 8003d72:	f000 f863 	bl	8003e3c <Message_Get>
    Message_Send((uint8_t *)buf, sprintf(buf, "NewData : %d bytes\r\n", uart2_RxBuffer_len));
 8003d76:	4b1e      	ldr	r3, [pc, #120]	; (8003df0 <Robot_ReadCommand+0x8c>)
 8003d78:	491e      	ldr	r1, [pc, #120]	; (8003df4 <Robot_ReadCommand+0x90>)
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	a802      	add	r0, sp, #8
 8003d7e:	f001 f983 	bl	8005088 <siprintf>
 8003d82:	4601      	mov	r1, r0
 8003d84:	a802      	add	r0, sp, #8
 8003d86:	f000 f83f 	bl	8003e08 <Message_Send>
    cmd_s[3]=0;
 8003d8a:	2300      	movs	r3, #0
    cmd_i=(char)cmd_s[0];
    cmd_v=atoi(cmd_s+1);
 8003d8c:	f10d 0001 	add.w	r0, sp, #1
    cmd_i=(char)cmd_s[0];
 8003d90:	f89d 4000 	ldrb.w	r4, [sp]
    cmd_s[3]=0;
 8003d94:	f88d 3003 	strb.w	r3, [sp, #3]
    cmd_v=atoi(cmd_s+1);
 8003d98:	f000 fccd 	bl	8004736 <atoi>

    if(robot.robot_mode == Configuration || 1)
    {
      if(cmd_i=='+')
 8003d9c:	2c2b      	cmp	r4, #43	; 0x2b
    cmd_v=atoi(cmd_s+1);
 8003d9e:	4602      	mov	r2, r0
      if(cmd_i=='+')
 8003da0:	d116      	bne.n	8003dd0 <Robot_ReadCommand+0x6c>
      {
        pulse+=cmd_v;
 8003da2:	4915      	ldr	r1, [pc, #84]	; (8003df8 <Robot_ReadCommand+0x94>)
 8003da4:	680b      	ldr	r3, [r1, #0]
 8003da6:	4403      	add	r3, r0
 8003da8:	600b      	str	r3, [r1, #0]
        sprintf(buf, "OK +%d %d\r\n", cmd_v, pulse);
 8003daa:	4914      	ldr	r1, [pc, #80]	; (8003dfc <Robot_ReadCommand+0x98>)
      }
      else if(cmd_i=='-')
      {
        pulse-=cmd_v;
        sprintf(buf, "OK -%d %d\r\n", cmd_v, pulse);
 8003dac:	a802      	add	r0, sp, #8
 8003dae:	f001 f96b 	bl	8005088 <siprintf>
//        Robot_ReadServoConf(cmd_v);
      }
      else
        sprintf(buf, "Unkwn cmd %s\r\n", cmd_s);
    }
    Message_Send((uint8_t *)buf, strlen(buf));
 8003db2:	a802      	add	r0, sp, #8
 8003db4:	f7fc fa2c 	bl	8000210 <strlen>
 8003db8:	4601      	mov	r1, r0
 8003dba:	a802      	add	r0, sp, #8
 8003dbc:	f000 f824 	bl	8003e08 <Message_Send>

    Message_StartReceive(5);
 8003dc0:	2005      	movs	r0, #5
 8003dc2:	f000 f82b 	bl	8003e1c <Message_StartReceive>
    HAL_Delay(250);
 8003dc6:	20fa      	movs	r0, #250	; 0xfa
 8003dc8:	f7fd f932 	bl	8001030 <HAL_Delay>
  }
}
 8003dcc:	b012      	add	sp, #72	; 0x48
 8003dce:	bd10      	pop	{r4, pc}
      else if(cmd_i=='-')
 8003dd0:	2c2d      	cmp	r4, #45	; 0x2d
 8003dd2:	d105      	bne.n	8003de0 <Robot_ReadCommand+0x7c>
        pulse-=cmd_v;
 8003dd4:	4908      	ldr	r1, [pc, #32]	; (8003df8 <Robot_ReadCommand+0x94>)
 8003dd6:	680b      	ldr	r3, [r1, #0]
 8003dd8:	1a1b      	subs	r3, r3, r0
 8003dda:	600b      	str	r3, [r1, #0]
        sprintf(buf, "OK -%d %d\r\n", cmd_v, pulse);
 8003ddc:	4908      	ldr	r1, [pc, #32]	; (8003e00 <Robot_ReadCommand+0x9c>)
 8003dde:	e7e5      	b.n	8003dac <Robot_ReadCommand+0x48>
      else if(cmd_i=='p')
 8003de0:	2c70      	cmp	r4, #112	; 0x70
 8003de2:	d0e6      	beq.n	8003db2 <Robot_ReadCommand+0x4e>
        sprintf(buf, "Unkwn cmd %s\r\n", cmd_s);
 8003de4:	466a      	mov	r2, sp
 8003de6:	4907      	ldr	r1, [pc, #28]	; (8003e04 <Robot_ReadCommand+0xa0>)
 8003de8:	a802      	add	r0, sp, #8
 8003dea:	f001 f94d 	bl	8005088 <siprintf>
 8003dee:	e7e0      	b.n	8003db2 <Robot_ReadCommand+0x4e>
 8003df0:	200002f0 	.word	0x200002f0
 8003df4:	08007776 	.word	0x08007776
 8003df8:	20000008 	.word	0x20000008
 8003dfc:	0800778b 	.word	0x0800778b
 8003e00:	08007797 	.word	0x08007797
 8003e04:	080077a3 	.word	0x080077a3

08003e08 <Message_Send>:
  * @param  len : buffer length
  * @retval None
  */
void Message_Send(uint8_t * source_buffer, int len)
{
  HAL_UART_Transmit(&HUART_MSG, source_buffer, len, HAL_MAX_DELAY);
 8003e08:	b28a      	uxth	r2, r1
 8003e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e0e:	4601      	mov	r1, r0
 8003e10:	4801      	ldr	r0, [pc, #4]	; (8003e18 <Message_Send+0x10>)
 8003e12:	f7fe bf1d 	b.w	8002c50 <HAL_UART_Transmit>
 8003e16:	bf00      	nop
 8003e18:	2000063c 	.word	0x2000063c

08003e1c <Message_StartReceive>:
  * @param  n : number of bytes to receive
  * @retval None
  */
void Message_StartReceive(int n)
{
  HAL_UART_Receive_IT(&HUART_MSG, UART_MSG_RXBUFFER, n);
 8003e1c:	b282      	uxth	r2, r0
 8003e1e:	4902      	ldr	r1, [pc, #8]	; (8003e28 <Message_StartReceive+0xc>)
 8003e20:	4802      	ldr	r0, [pc, #8]	; (8003e2c <Message_StartReceive+0x10>)
 8003e22:	f7fe bf72 	b.w	8002d0a <HAL_UART_Receive_IT>
 8003e26:	bf00      	nop
 8003e28:	20000c10 	.word	0x20000c10
 8003e2c:	2000063c 	.word	0x2000063c

08003e30 <Message_ReceivedLength>:
  * @retval Number of received bytes
  */
int Message_ReceivedLength()
{
  return UART_MSG_RXBUFFER_LEN;
}
 8003e30:	4b01      	ldr	r3, [pc, #4]	; (8003e38 <Message_ReceivedLength+0x8>)
 8003e32:	6818      	ldr	r0, [r3, #0]
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop
 8003e38:	200002f8 	.word	0x200002f8

08003e3c <Message_Get>:
  * @param  buf : buffer
  * @param  n : number of bytes to receive
  * @retval None
  */
void Message_Get(uint8_t * buffer)
{
 8003e3c:	b510      	push	{r4, lr}
  memcpy(buffer, UART_MSG_RXBUFFER,   UART_MSG_RXBUFFER_LEN);
 8003e3e:	4c06      	ldr	r4, [pc, #24]	; (8003e58 <Message_Get+0x1c>)
 8003e40:	4906      	ldr	r1, [pc, #24]	; (8003e5c <Message_Get+0x20>)
 8003e42:	6822      	ldr	r2, [r4, #0]
 8003e44:	f000 fca0 	bl	8004788 <memcpy>
  UART_MSG_RXBUFFER_LEN=0;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	6023      	str	r3, [r4, #0]
  LedSwitch(3,GPIO_PIN_SET);
 8003e4c:	2101      	movs	r1, #1
 8003e4e:	2003      	movs	r0, #3
}
 8003e50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LedSwitch(3,GPIO_PIN_SET);
 8003e54:	f000 bc30 	b.w	80046b8 <LedSwitch>
 8003e58:	200002f8 	.word	0x200002f8
 8003e5c:	20000c10 	.word	0x20000c10

08003e60 <HAL_UART_RxCpltCallback>:
  * @param  huart: UART handle
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
  if (huart->Instance == USART2)
 8003e60:	6802      	ldr	r2, [r0, #0]
 8003e62:	4b10      	ldr	r3, [pc, #64]	; (8003ea4 <HAL_UART_RxCpltCallback+0x44>)
 8003e64:	429a      	cmp	r2, r3
{
 8003e66:	b510      	push	{r4, lr}
 8003e68:	4604      	mov	r4, r0
  if (huart->Instance == USART2)
 8003e6a:	d109      	bne.n	8003e80 <HAL_UART_RxCpltCallback+0x20>
  {
    uart2_ready = SET;
 8003e6c:	4b0e      	ldr	r3, [pc, #56]	; (8003ea8 <HAL_UART_RxCpltCallback+0x48>)
 8003e6e:	2201      	movs	r2, #1
 8003e70:	701a      	strb	r2, [r3, #0]
    uart2_RxBuffer_len=5;
 8003e72:	4b0e      	ldr	r3, [pc, #56]	; (8003eac <HAL_UART_RxCpltCallback+0x4c>)
 8003e74:	2205      	movs	r2, #5
    LedSwitch(3,GPIO_PIN_RESET);
 8003e76:	2100      	movs	r1, #0
 8003e78:	2003      	movs	r0, #3
    uart2_RxBuffer_len=5;
 8003e7a:	601a      	str	r2, [r3, #0]
    LedSwitch(3,GPIO_PIN_RESET);
 8003e7c:	f000 fc1c 	bl	80046b8 <LedSwitch>
  }
  if (huart->Instance == UART4)
 8003e80:	6822      	ldr	r2, [r4, #0]
 8003e82:	4b0b      	ldr	r3, [pc, #44]	; (8003eb0 <HAL_UART_RxCpltCallback+0x50>)
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d10b      	bne.n	8003ea0 <HAL_UART_RxCpltCallback+0x40>
  {
    uart4_ready = SET;
 8003e88:	4b0a      	ldr	r3, [pc, #40]	; (8003eb4 <HAL_UART_RxCpltCallback+0x54>)
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	701a      	strb	r2, [r3, #0]
    uart4_RxBuffer_len=5;
 8003e8e:	4b0a      	ldr	r3, [pc, #40]	; (8003eb8 <HAL_UART_RxCpltCallback+0x58>)
 8003e90:	2205      	movs	r2, #5
    LedSwitch(3,GPIO_PIN_RESET);
 8003e92:	2100      	movs	r1, #0
 8003e94:	2003      	movs	r0, #3
  }
}
 8003e96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    uart4_RxBuffer_len=5;
 8003e9a:	601a      	str	r2, [r3, #0]
    LedSwitch(3,GPIO_PIN_RESET);
 8003e9c:	f000 bc0c 	b.w	80046b8 <LedSwitch>
 8003ea0:	bd10      	pop	{r4, pc}
 8003ea2:	bf00      	nop
 8003ea4:	40004400 	.word	0x40004400
 8003ea8:	200002f4 	.word	0x200002f4
 8003eac:	200002f0 	.word	0x200002f0
 8003eb0:	40004c00 	.word	0x40004c00
 8003eb4:	200002fc 	.word	0x200002fc
 8003eb8:	200002f8 	.word	0x200002f8

08003ebc <Servo_Init>:
  */
void Servo_Init(t_servo *hservo, TIM_HandleTypeDef *htim, int timer_channel)
{
  hservo->htim=htim;
  hservo->timer_channel=timer_channel;
  hservo->pulse=SERVO_PULSE_MEAN;
 8003ebc:	f240 53dc 	movw	r3, #1500	; 0x5dc
  hservo->timer_channel=timer_channel;
 8003ec0:	e880 0006 	stmia.w	r0, {r1, r2}
  hservo->pulse=SERVO_PULSE_MEAN;
 8003ec4:	6083      	str	r3, [r0, #8]
 8003ec6:	4770      	bx	lr

08003ec8 <Servo_SetLimits>:
  * @param
  * @retval
  */
void Servo_SetLimits(t_servo *hservo, int limits[5])
{
  hservo->bmin_pulse=limits[0];
 8003ec8:	680b      	ldr	r3, [r1, #0]
{
 8003eca:	b510      	push	{r4, lr}
  hservo->bmin_pulse=limits[0];
 8003ecc:	60c3      	str	r3, [r0, #12]
  hservo->amin_pulse=limits[1];
 8003ece:	684b      	ldr	r3, [r1, #4]
 8003ed0:	6103      	str	r3, [r0, #16]
  hservo->zero_pulse=limits[2];
 8003ed2:	688b      	ldr	r3, [r1, #8]
 8003ed4:	6143      	str	r3, [r0, #20]
  hservo->amax_pulse=limits[3];
 8003ed6:	68cb      	ldr	r3, [r1, #12]
 8003ed8:	6183      	str	r3, [r0, #24]
  hservo->bmax_pulse=limits[4];
 8003eda:	690b      	ldr	r3, [r1, #16]
 8003edc:	61c3      	str	r3, [r0, #28]
  hservo->slope=((float)(limits[3]-limits[1]))/(SERVO_ANGLE_MAX-SERVO_ANGLE_MIN);
 8003ede:	684b      	ldr	r3, [r1, #4]
{
 8003ee0:	4604      	mov	r4, r0
  hservo->slope=((float)(limits[3]-limits[1]))/(SERVO_ANGLE_MAX-SERVO_ANGLE_MIN);
 8003ee2:	68c8      	ldr	r0, [r1, #12]
 8003ee4:	1ac0      	subs	r0, r0, r3
 8003ee6:	ee07 0a90 	vmov	s15, r0
 8003eea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003eee:	ee17 0a90 	vmov	r0, s15
 8003ef2:	f7fc fb49 	bl	8000588 <__aeabi_f2d>
 8003ef6:	a304      	add	r3, pc, #16	; (adr r3, 8003f08 <Servo_SetLimits+0x40>)
 8003ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003efc:	f7fc fcc2 	bl	8000884 <__aeabi_ddiv>
 8003f00:	f7fc fe6e 	bl	8000be0 <__aeabi_d2f>
 8003f04:	6220      	str	r0, [r4, #32]
 8003f06:	bd10      	pop	{r4, pc}
 8003f08:	54442d18 	.word	0x54442d18
 8003f0c:	3ff921fb 	.word	0x3ff921fb

08003f10 <Servo_Start>:
  * @param  hservo : servo handle
  * @retval none
  */
void Servo_Start(t_servo *hservo)
{
  HAL_TIM_PWM_Start(hservo->htim, hservo->timer_channel);
 8003f10:	c803      	ldmia	r0, {r0, r1}
 8003f12:	f7fe bc89 	b.w	8002828 <HAL_TIM_PWM_Start>

08003f16 <Servo_Stop>:
  * @param  hservo : servo handle
  * @retval none
  */
void Servo_Stop(t_servo *hservo)
{
  HAL_TIM_PWM_Stop(hservo->htim,hservo->timer_channel);
 8003f16:	c803      	ldmia	r0, {r0, r1}
 8003f18:	f7fe bca0 	b.w	800285c <HAL_TIM_PWM_Stop>
 8003f1c:	0000      	movs	r0, r0
	...

08003f20 <Servo_SetAngle>:
 *  @brief Set servo position from angle
 *  @param hservo : servo handler
 *  @param angle : angle, in radians
 */
void Servo_SetAngle(t_servo * hservo, float angle)
{
 8003f20:	b5d0      	push	{r4, r6, r7, lr}
 8003f22:	4604      	mov	r4, r0
  int pulse;
  pulse=round(hservo->amin_pulse+(angle-SERVO_ANGLE_MIN)*hservo->slope);
 8003f24:	ee10 0a10 	vmov	r0, s0
 8003f28:	f7fc fb2e 	bl	8000588 <__aeabi_f2d>
 8003f2c:	a316      	add	r3, pc, #88	; (adr r3, 8003f88 <Servo_SetAngle+0x68>)
 8003f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f32:	f7fc f9cb 	bl	80002cc <__adddf3>
 8003f36:	4606      	mov	r6, r0
 8003f38:	6a20      	ldr	r0, [r4, #32]
 8003f3a:	460f      	mov	r7, r1
 8003f3c:	f7fc fb24 	bl	8000588 <__aeabi_f2d>
 8003f40:	4602      	mov	r2, r0
 8003f42:	460b      	mov	r3, r1
 8003f44:	4630      	mov	r0, r6
 8003f46:	4639      	mov	r1, r7
 8003f48:	f7fc fb72 	bl	8000630 <__aeabi_dmul>
 8003f4c:	4606      	mov	r6, r0
 8003f4e:	6920      	ldr	r0, [r4, #16]
 8003f50:	460f      	mov	r7, r1
 8003f52:	f7fc fb07 	bl	8000564 <__aeabi_i2d>
 8003f56:	4602      	mov	r2, r0
 8003f58:	460b      	mov	r3, r1
 8003f5a:	4630      	mov	r0, r6
 8003f5c:	4639      	mov	r1, r7
 8003f5e:	f7fc f9b5 	bl	80002cc <__adddf3>
 8003f62:	ec41 0b10 	vmov	d0, r0, r1
 8003f66:	f002 fd13 	bl	8006990 <round>
 8003f6a:	ec51 0b10 	vmov	r0, r1, d0
 8003f6e:	f7fc fe0f 	bl	8000b90 <__aeabi_d2iz>
  hservo->pulse=pulse;
  __HAL_TIM_SET_COMPARE(hservo->htim, hservo->timer_channel, pulse);
 8003f72:	6823      	ldr	r3, [r4, #0]
 8003f74:	6862      	ldr	r2, [r4, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
  hservo->pulse=pulse;
 8003f78:	60a0      	str	r0, [r4, #8]
  __HAL_TIM_SET_COMPARE(hservo->htim, hservo->timer_channel, pulse);
 8003f7a:	3334      	adds	r3, #52	; 0x34
 8003f7c:	1092      	asrs	r2, r2, #2
 8003f7e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8003f82:	bdd0      	pop	{r4, r6, r7, pc}
 8003f84:	f3af 8000 	nop.w
 8003f88:	54442d18 	.word	0x54442d18
 8003f8c:	3fe921fb 	.word	0x3fe921fb

08003f90 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003f90:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f92:	4b0c      	ldr	r3, [pc, #48]	; (8003fc4 <HAL_MspInit+0x34>)
 8003f94:	2100      	movs	r1, #0
 8003f96:	9100      	str	r1, [sp, #0]
 8003f98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f9e:	645a      	str	r2, [r3, #68]	; 0x44
 8003fa0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fa2:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003fa6:	9200      	str	r2, [sp, #0]
 8003fa8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003faa:	9101      	str	r1, [sp, #4]
 8003fac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003fae:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003fb2:	641a      	str	r2, [r3, #64]	; 0x40
 8003fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fba:	9301      	str	r3, [sp, #4]
 8003fbc:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003fbe:	b002      	add	sp, #8
 8003fc0:	4770      	bx	lr
 8003fc2:	bf00      	nop
 8003fc4:	40023800 	.word	0x40023800

08003fc8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003fc8:	b530      	push	{r4, r5, lr}
 8003fca:	4604      	mov	r4, r0
 8003fcc:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fce:	2214      	movs	r2, #20
 8003fd0:	2100      	movs	r1, #0
 8003fd2:	a803      	add	r0, sp, #12
 8003fd4:	f000 fbe3 	bl	800479e <memset>
  if(hi2c->Instance==I2C1)
 8003fd8:	6822      	ldr	r2, [r4, #0]
 8003fda:	4b14      	ldr	r3, [pc, #80]	; (800402c <HAL_I2C_MspInit+0x64>)
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d123      	bne.n	8004028 <HAL_I2C_MspInit+0x60>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fe0:	4c13      	ldr	r4, [pc, #76]	; (8004030 <HAL_I2C_MspInit+0x68>)
    GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fe2:	4814      	ldr	r0, [pc, #80]	; (8004034 <HAL_I2C_MspInit+0x6c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fe4:	2500      	movs	r5, #0
 8003fe6:	9501      	str	r5, [sp, #4]
 8003fe8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003fea:	f043 0302 	orr.w	r3, r3, #2
 8003fee:	6323      	str	r3, [r4, #48]	; 0x30
 8003ff0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003ff2:	f003 0302 	and.w	r3, r3, #2
 8003ff6:	9301      	str	r3, [sp, #4]
 8003ff8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 8003ffa:	23c0      	movs	r3, #192	; 0xc0
 8003ffc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003ffe:	2312      	movs	r3, #18
 8004000:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004002:	2301      	movs	r3, #1
 8004004:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004006:	2303      	movs	r3, #3
 8004008:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800400a:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800400c:	2304      	movs	r3, #4
 800400e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004010:	f7fd f89c 	bl	800114c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004014:	9502      	str	r5, [sp, #8]
 8004016:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004018:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800401c:	6423      	str	r3, [r4, #64]	; 0x40
 800401e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004020:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004024:	9302      	str	r3, [sp, #8]
 8004026:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004028:	b009      	add	sp, #36	; 0x24
 800402a:	bd30      	pop	{r4, r5, pc}
 800402c:	40005400 	.word	0x40005400
 8004030:	40023800 	.word	0x40023800
 8004034:	40020400 	.word	0x40020400

08004038 <HAL_RTC_MspInit>:
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{

  if(hrtc->Instance==RTC)
 8004038:	6802      	ldr	r2, [r0, #0]
 800403a:	4b03      	ldr	r3, [pc, #12]	; (8004048 <HAL_RTC_MspInit+0x10>)
 800403c:	429a      	cmp	r2, r3
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800403e:	bf02      	ittt	eq
 8004040:	4b02      	ldreq	r3, [pc, #8]	; (800404c <HAL_RTC_MspInit+0x14>)
 8004042:	2201      	moveq	r2, #1
 8004044:	601a      	streq	r2, [r3, #0]
 8004046:	4770      	bx	lr
 8004048:	40002800 	.word	0x40002800
 800404c:	42470e3c 	.word	0x42470e3c

08004050 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004050:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004052:	4604      	mov	r4, r0
 8004054:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004056:	2214      	movs	r2, #20
 8004058:	2100      	movs	r1, #0
 800405a:	a803      	add	r0, sp, #12
 800405c:	f000 fb9f 	bl	800479e <memset>
  if(hspi->Instance==SPI2)
 8004060:	6822      	ldr	r2, [r4, #0]
 8004062:	4b23      	ldr	r3, [pc, #140]	; (80040f0 <HAL_SPI_MspInit+0xa0>)
 8004064:	429a      	cmp	r2, r3
 8004066:	d141      	bne.n	80040ec <HAL_SPI_MspInit+0x9c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004068:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800406c:	2400      	movs	r4, #0
 800406e:	9400      	str	r4, [sp, #0]
 8004070:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = SPI2_MOSI_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
    HAL_GPIO_Init(SPI2_MOSI_GPIO_Port, &GPIO_InitStruct);
 8004072:	4820      	ldr	r0, [pc, #128]	; (80040f4 <HAL_SPI_MspInit+0xa4>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004074:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004078:	641a      	str	r2, [r3, #64]	; 0x40
 800407a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800407c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8004080:	9200      	str	r2, [sp, #0]
 8004082:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004084:	9401      	str	r4, [sp, #4]
 8004086:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004088:	f042 0204 	orr.w	r2, r2, #4
 800408c:	631a      	str	r2, [r3, #48]	; 0x30
 800408e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004090:	f002 0204 	and.w	r2, r2, #4
 8004094:	9201      	str	r2, [sp, #4]
 8004096:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004098:	9402      	str	r4, [sp, #8]
 800409a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800409c:	f042 0202 	orr.w	r2, r2, #2
 80040a0:	631a      	str	r2, [r3, #48]	; 0x30
 80040a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a4:	f003 0302 	and.w	r3, r3, #2
 80040a8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = SPI2_MOSI_Pin;
 80040aa:	2502      	movs	r5, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040ac:	2603      	movs	r6, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040ae:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = SPI2_MOSI_Pin;
 80040b0:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 80040b2:	2307      	movs	r3, #7
    HAL_GPIO_Init(SPI2_MOSI_GPIO_Port, &GPIO_InitStruct);
 80040b4:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 80040b6:	9307      	str	r3, [sp, #28]

    GPIO_InitStruct.Pin = SPI2_MISO_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80040b8:	2705      	movs	r7, #5
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040ba:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040bc:	9606      	str	r6, [sp, #24]
    HAL_GPIO_Init(SPI2_MOSI_GPIO_Port, &GPIO_InitStruct);
 80040be:	f7fd f845 	bl	800114c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI2_MISO_Pin;
 80040c2:	2304      	movs	r3, #4
    HAL_GPIO_Init(SPI2_MISO_GPIO_Port, &GPIO_InitStruct);
 80040c4:	a903      	add	r1, sp, #12
 80040c6:	480b      	ldr	r0, [pc, #44]	; (80040f4 <HAL_SPI_MspInit+0xa4>)
    GPIO_InitStruct.Pin = SPI2_MISO_Pin;
 80040c8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040ca:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040cc:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040ce:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80040d0:	9707      	str	r7, [sp, #28]
    HAL_GPIO_Init(SPI2_MISO_GPIO_Port, &GPIO_InitStruct);
 80040d2:	f7fd f83b 	bl	800114c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI2_SCK_Pin;
 80040d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 80040da:	a903      	add	r1, sp, #12
 80040dc:	4806      	ldr	r0, [pc, #24]	; (80040f8 <HAL_SPI_MspInit+0xa8>)
    GPIO_InitStruct.Pin = SPI2_SCK_Pin;
 80040de:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040e0:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040e2:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040e4:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80040e6:	9707      	str	r7, [sp, #28]
    HAL_GPIO_Init(SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 80040e8:	f7fd f830 	bl	800114c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80040ec:	b009      	add	sp, #36	; 0x24
 80040ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040f0:	40003800 	.word	0x40003800
 80040f4:	40020800 	.word	0x40020800
 80040f8:	40020400 	.word	0x40020400

080040fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80040fc:	b510      	push	{r4, lr}
 80040fe:	4604      	mov	r4, r0
 8004100:	b092      	sub	sp, #72	; 0x48

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004102:	2214      	movs	r2, #20
 8004104:	2100      	movs	r1, #0
 8004106:	a80d      	add	r0, sp, #52	; 0x34
 8004108:	f000 fb49 	bl	800479e <memset>
  if(htim_base->Instance==TIM1)
 800410c:	6823      	ldr	r3, [r4, #0]
 800410e:	4a67      	ldr	r2, [pc, #412]	; (80042ac <HAL_TIM_Base_MspInit+0x1b0>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d10d      	bne.n	8004130 <HAL_TIM_Base_MspInit+0x34>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004114:	2300      	movs	r3, #0
 8004116:	9301      	str	r3, [sp, #4]
 8004118:	4b65      	ldr	r3, [pc, #404]	; (80042b0 <HAL_TIM_Base_MspInit+0x1b4>)
 800411a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800411c:	f042 0201 	orr.w	r2, r2, #1
 8004120:	645a      	str	r2, [r3, #68]	; 0x44
 8004122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004124:	f003 0301 	and.w	r3, r3, #1
 8004128:	9301      	str	r3, [sp, #4]
 800412a:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 800412c:	b012      	add	sp, #72	; 0x48
 800412e:	bd10      	pop	{r4, pc}
  else if(htim_base->Instance==TIM2)
 8004130:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004134:	d10c      	bne.n	8004150 <HAL_TIM_Base_MspInit+0x54>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004136:	2300      	movs	r3, #0
 8004138:	9302      	str	r3, [sp, #8]
 800413a:	4b5d      	ldr	r3, [pc, #372]	; (80042b0 <HAL_TIM_Base_MspInit+0x1b4>)
 800413c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800413e:	f042 0201 	orr.w	r2, r2, #1
 8004142:	641a      	str	r2, [r3, #64]	; 0x40
 8004144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004146:	f003 0301 	and.w	r3, r3, #1
 800414a:	9302      	str	r3, [sp, #8]
 800414c:	9b02      	ldr	r3, [sp, #8]
 800414e:	e7ed      	b.n	800412c <HAL_TIM_Base_MspInit+0x30>
  else if(htim_base->Instance==TIM3)
 8004150:	4a58      	ldr	r2, [pc, #352]	; (80042b4 <HAL_TIM_Base_MspInit+0x1b8>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d10c      	bne.n	8004170 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004156:	2300      	movs	r3, #0
 8004158:	9303      	str	r3, [sp, #12]
 800415a:	4b55      	ldr	r3, [pc, #340]	; (80042b0 <HAL_TIM_Base_MspInit+0x1b4>)
 800415c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800415e:	f042 0202 	orr.w	r2, r2, #2
 8004162:	641a      	str	r2, [r3, #64]	; 0x40
 8004164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004166:	f003 0302 	and.w	r3, r3, #2
 800416a:	9303      	str	r3, [sp, #12]
 800416c:	9b03      	ldr	r3, [sp, #12]
 800416e:	e7dd      	b.n	800412c <HAL_TIM_Base_MspInit+0x30>
  else if(htim_base->Instance==TIM5)
 8004170:	4a51      	ldr	r2, [pc, #324]	; (80042b8 <HAL_TIM_Base_MspInit+0x1bc>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d10c      	bne.n	8004190 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004176:	2300      	movs	r3, #0
 8004178:	9304      	str	r3, [sp, #16]
 800417a:	4b4d      	ldr	r3, [pc, #308]	; (80042b0 <HAL_TIM_Base_MspInit+0x1b4>)
 800417c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800417e:	f042 0208 	orr.w	r2, r2, #8
 8004182:	641a      	str	r2, [r3, #64]	; 0x40
 8004184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004186:	f003 0308 	and.w	r3, r3, #8
 800418a:	9304      	str	r3, [sp, #16]
 800418c:	9b04      	ldr	r3, [sp, #16]
 800418e:	e7cd      	b.n	800412c <HAL_TIM_Base_MspInit+0x30>
  else if(htim_base->Instance==TIM7)
 8004190:	4a4a      	ldr	r2, [pc, #296]	; (80042bc <HAL_TIM_Base_MspInit+0x1c0>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d10c      	bne.n	80041b0 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004196:	2300      	movs	r3, #0
 8004198:	9305      	str	r3, [sp, #20]
 800419a:	4b45      	ldr	r3, [pc, #276]	; (80042b0 <HAL_TIM_Base_MspInit+0x1b4>)
 800419c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800419e:	f042 0220 	orr.w	r2, r2, #32
 80041a2:	641a      	str	r2, [r3, #64]	; 0x40
 80041a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a6:	f003 0320 	and.w	r3, r3, #32
 80041aa:	9305      	str	r3, [sp, #20]
 80041ac:	9b05      	ldr	r3, [sp, #20]
 80041ae:	e7bd      	b.n	800412c <HAL_TIM_Base_MspInit+0x30>
  else if(htim_base->Instance==TIM8)
 80041b0:	4a43      	ldr	r2, [pc, #268]	; (80042c0 <HAL_TIM_Base_MspInit+0x1c4>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d113      	bne.n	80041de <HAL_TIM_Base_MspInit+0xe2>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80041b6:	4b3e      	ldr	r3, [pc, #248]	; (80042b0 <HAL_TIM_Base_MspInit+0x1b4>)
 80041b8:	2200      	movs	r2, #0
 80041ba:	9206      	str	r2, [sp, #24]
 80041bc:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80041be:	f041 0102 	orr.w	r1, r1, #2
 80041c2:	6459      	str	r1, [r3, #68]	; 0x44
 80041c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041c6:	f003 0302 	and.w	r3, r3, #2
 80041ca:	9306      	str	r3, [sp, #24]
 80041cc:	9b06      	ldr	r3, [sp, #24]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80041ce:	4611      	mov	r1, r2
 80041d0:	202c      	movs	r0, #44	; 0x2c
 80041d2:	f7fc ff53 	bl	800107c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80041d6:	202c      	movs	r0, #44	; 0x2c
 80041d8:	f7fc ff84 	bl	80010e4 <HAL_NVIC_EnableIRQ>
 80041dc:	e7a6      	b.n	800412c <HAL_TIM_Base_MspInit+0x30>
  else if(htim_base->Instance==TIM10)
 80041de:	4a39      	ldr	r2, [pc, #228]	; (80042c4 <HAL_TIM_Base_MspInit+0x1c8>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d10c      	bne.n	80041fe <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80041e4:	2300      	movs	r3, #0
 80041e6:	9307      	str	r3, [sp, #28]
 80041e8:	4b31      	ldr	r3, [pc, #196]	; (80042b0 <HAL_TIM_Base_MspInit+0x1b4>)
 80041ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041ec:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80041f0:	645a      	str	r2, [r3, #68]	; 0x44
 80041f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041f8:	9307      	str	r3, [sp, #28]
 80041fa:	9b07      	ldr	r3, [sp, #28]
 80041fc:	e796      	b.n	800412c <HAL_TIM_Base_MspInit+0x30>
  else if(htim_base->Instance==TIM11)
 80041fe:	4a32      	ldr	r2, [pc, #200]	; (80042c8 <HAL_TIM_Base_MspInit+0x1cc>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d10c      	bne.n	800421e <HAL_TIM_Base_MspInit+0x122>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8004204:	2300      	movs	r3, #0
 8004206:	9308      	str	r3, [sp, #32]
 8004208:	4b29      	ldr	r3, [pc, #164]	; (80042b0 <HAL_TIM_Base_MspInit+0x1b4>)
 800420a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800420c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004210:	645a      	str	r2, [r3, #68]	; 0x44
 8004212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004214:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004218:	9308      	str	r3, [sp, #32]
 800421a:	9b08      	ldr	r3, [sp, #32]
 800421c:	e786      	b.n	800412c <HAL_TIM_Base_MspInit+0x30>
  else if(htim_base->Instance==TIM12)
 800421e:	4a2b      	ldr	r2, [pc, #172]	; (80042cc <HAL_TIM_Base_MspInit+0x1d0>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d121      	bne.n	8004268 <HAL_TIM_Base_MspInit+0x16c>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8004224:	4b22      	ldr	r3, [pc, #136]	; (80042b0 <HAL_TIM_Base_MspInit+0x1b4>)
    HAL_GPIO_Init(S22i1_GPIO_Port, &GPIO_InitStruct);
 8004226:	482a      	ldr	r0, [pc, #168]	; (80042d0 <HAL_TIM_Base_MspInit+0x1d4>)
    __HAL_RCC_TIM12_CLK_ENABLE();
 8004228:	2100      	movs	r1, #0
 800422a:	9109      	str	r1, [sp, #36]	; 0x24
 800422c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800422e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004232:	641a      	str	r2, [r3, #64]	; 0x40
 8004234:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004236:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800423a:	9209      	str	r2, [sp, #36]	; 0x24
 800423c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800423e:	910a      	str	r1, [sp, #40]	; 0x28
 8004240:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004242:	f042 0202 	orr.w	r2, r2, #2
 8004246:	631a      	str	r2, [r3, #48]	; 0x30
 8004248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800424a:	f003 0302 	and.w	r3, r3, #2
 800424e:	930a      	str	r3, [sp, #40]	; 0x28
 8004250:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = S22i1_Pin;
 8004252:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004256:	930d      	str	r3, [sp, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004258:	2302      	movs	r3, #2
 800425a:	930e      	str	r3, [sp, #56]	; 0x38
    HAL_GPIO_Init(S22i1_GPIO_Port, &GPIO_InitStruct);
 800425c:	a90d      	add	r1, sp, #52	; 0x34
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800425e:	2309      	movs	r3, #9
 8004260:	9311      	str	r3, [sp, #68]	; 0x44
    HAL_GPIO_Init(S22i1_GPIO_Port, &GPIO_InitStruct);
 8004262:	f7fc ff73 	bl	800114c <HAL_GPIO_Init>
 8004266:	e761      	b.n	800412c <HAL_TIM_Base_MspInit+0x30>
  else if(htim_base->Instance==TIM13)
 8004268:	4a1a      	ldr	r2, [pc, #104]	; (80042d4 <HAL_TIM_Base_MspInit+0x1d8>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d10c      	bne.n	8004288 <HAL_TIM_Base_MspInit+0x18c>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800426e:	4b10      	ldr	r3, [pc, #64]	; (80042b0 <HAL_TIM_Base_MspInit+0x1b4>)
 8004270:	2200      	movs	r2, #0
 8004272:	920b      	str	r2, [sp, #44]	; 0x2c
 8004274:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004276:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800427a:	6419      	str	r1, [r3, #64]	; 0x40
 800427c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004282:	930b      	str	r3, [sp, #44]	; 0x2c
 8004284:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004286:	e7a2      	b.n	80041ce <HAL_TIM_Base_MspInit+0xd2>
  else if(htim_base->Instance==TIM14)
 8004288:	4a13      	ldr	r2, [pc, #76]	; (80042d8 <HAL_TIM_Base_MspInit+0x1dc>)
 800428a:	4293      	cmp	r3, r2
 800428c:	f47f af4e 	bne.w	800412c <HAL_TIM_Base_MspInit+0x30>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8004290:	2300      	movs	r3, #0
 8004292:	930c      	str	r3, [sp, #48]	; 0x30
 8004294:	4b06      	ldr	r3, [pc, #24]	; (80042b0 <HAL_TIM_Base_MspInit+0x1b4>)
 8004296:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004298:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800429c:	641a      	str	r2, [r3, #64]	; 0x40
 800429e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042a4:	930c      	str	r3, [sp, #48]	; 0x30
 80042a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
}
 80042a8:	e740      	b.n	800412c <HAL_TIM_Base_MspInit+0x30>
 80042aa:	bf00      	nop
 80042ac:	40010000 	.word	0x40010000
 80042b0:	40023800 	.word	0x40023800
 80042b4:	40000400 	.word	0x40000400
 80042b8:	40000c00 	.word	0x40000c00
 80042bc:	40001400 	.word	0x40001400
 80042c0:	40010400 	.word	0x40010400
 80042c4:	40014400 	.word	0x40014400
 80042c8:	40014800 	.word	0x40014800
 80042cc:	40001800 	.word	0x40001800
 80042d0:	40020400 	.word	0x40020400
 80042d4:	40001c00 	.word	0x40001c00
 80042d8:	40002000 	.word	0x40002000

080042dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80042dc:	b570      	push	{r4, r5, r6, lr}
 80042de:	4604      	mov	r4, r0
 80042e0:	b090      	sub	sp, #64	; 0x40

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042e2:	2214      	movs	r2, #20
 80042e4:	2100      	movs	r1, #0
 80042e6:	a80b      	add	r0, sp, #44	; 0x2c
 80042e8:	f000 fa59 	bl	800479e <memset>
  if(htim->Instance==TIM1)
 80042ec:	6823      	ldr	r3, [r4, #0]
 80042ee:	4a6f      	ldr	r2, [pc, #444]	; (80044ac <HAL_TIM_MspPostInit+0x1d0>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d113      	bne.n	800431c <HAL_TIM_MspPostInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042f4:	2300      	movs	r3, #0
 80042f6:	9301      	str	r3, [sp, #4]
 80042f8:	4b6d      	ldr	r3, [pc, #436]	; (80044b0 <HAL_TIM_MspPostInit+0x1d4>)
 80042fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042fc:	f042 0201 	orr.w	r2, r2, #1
 8004300:	631a      	str	r2, [r3, #48]	; 0x30
 8004302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004304:	f003 0301 	and.w	r3, r3, #1
 8004308:	9301      	str	r3, [sp, #4]
 800430a:	9b01      	ldr	r3, [sp, #4]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = S15i2_Pin|S09x2_Pin|S18_Pin|S17_Pin;
 800430c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8004310:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004312:	2302      	movs	r3, #2
 8004314:	930c      	str	r3, [sp, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004316:	2301      	movs	r3, #1
    */
    GPIO_InitStruct.Pin = S11_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8004318:	930f      	str	r3, [sp, #60]	; 0x3c
 800431a:	e02b      	b.n	8004374 <HAL_TIM_MspPostInit+0x98>
  else if(htim->Instance==TIM2)
 800431c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004320:	d12b      	bne.n	800437a <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004322:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8004326:	2400      	movs	r4, #0
 8004328:	9402      	str	r4, [sp, #8]
 800432a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800432c:	4861      	ldr	r0, [pc, #388]	; (80044b4 <HAL_TIM_MspPostInit+0x1d8>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800432e:	f042 0202 	orr.w	r2, r2, #2
 8004332:	631a      	str	r2, [r3, #48]	; 0x30
 8004334:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004336:	f002 0202 	and.w	r2, r2, #2
 800433a:	9202      	str	r2, [sp, #8]
 800433c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800433e:	9403      	str	r4, [sp, #12]
 8004340:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004342:	f042 0201 	orr.w	r2, r2, #1
 8004346:	631a      	str	r2, [r3, #48]	; 0x30
 8004348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800434a:	f003 0301 	and.w	r3, r3, #1
 800434e:	9303      	str	r3, [sp, #12]
 8004350:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004352:	2602      	movs	r6, #2
    GPIO_InitStruct.Pin = S02_Pin|S03_Pin|S14x3_Pin;
 8004354:	f240 430c 	movw	r3, #1036	; 0x40c
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004358:	2501      	movs	r5, #1
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800435a:	a90b      	add	r1, sp, #44	; 0x2c
    GPIO_InitStruct.Pin = S02_Pin|S03_Pin|S14x3_Pin;
 800435c:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800435e:	960c      	str	r6, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004360:	950f      	str	r5, [sp, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004362:	f7fc fef3 	bl	800114c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = S19i3_Pin;
 8004366:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800436a:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800436c:	960c      	str	r6, [sp, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800436e:	940d      	str	r4, [sp, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004370:	940e      	str	r4, [sp, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004372:	950f      	str	r5, [sp, #60]	; 0x3c
    HAL_GPIO_Init(S11_GPIO_Port, &GPIO_InitStruct);
 8004374:	a90b      	add	r1, sp, #44	; 0x2c
 8004376:	4850      	ldr	r0, [pc, #320]	; (80044b8 <HAL_TIM_MspPostInit+0x1dc>)
 8004378:	e056      	b.n	8004428 <HAL_TIM_MspPostInit+0x14c>
  else if(htim->Instance==TIM3)
 800437a:	4a50      	ldr	r2, [pc, #320]	; (80044bc <HAL_TIM_MspPostInit+0x1e0>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d127      	bne.n	80043d0 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004380:	4b4b      	ldr	r3, [pc, #300]	; (80044b0 <HAL_TIM_MspPostInit+0x1d4>)
    HAL_GPIO_Init(S05i5_GPIO_Port, &GPIO_InitStruct);
 8004382:	484d      	ldr	r0, [pc, #308]	; (80044b8 <HAL_TIM_MspPostInit+0x1dc>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004384:	2500      	movs	r5, #0
 8004386:	9504      	str	r5, [sp, #16]
 8004388:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800438a:	f042 0201 	orr.w	r2, r2, #1
 800438e:	631a      	str	r2, [r3, #48]	; 0x30
 8004390:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004392:	f002 0201 	and.w	r2, r2, #1
 8004396:	9204      	str	r2, [sp, #16]
 8004398:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800439a:	9505      	str	r5, [sp, #20]
 800439c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800439e:	f042 0202 	orr.w	r2, r2, #2
 80043a2:	631a      	str	r2, [r3, #48]	; 0x30
 80043a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a6:	f003 0302 	and.w	r3, r3, #2
 80043aa:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043ac:	2402      	movs	r4, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80043ae:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043b0:	940c      	str	r4, [sp, #48]	; 0x30
    GPIO_InitStruct.Pin = S05i5_Pin;
 80043b2:	2340      	movs	r3, #64	; 0x40
    HAL_GPIO_Init(S05i5_GPIO_Port, &GPIO_InitStruct);
 80043b4:	a90b      	add	r1, sp, #44	; 0x2c
    GPIO_InitStruct.Pin = S05i5_Pin;
 80043b6:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80043b8:	940f      	str	r4, [sp, #60]	; 0x3c
    HAL_GPIO_Init(S05i5_GPIO_Port, &GPIO_InitStruct);
 80043ba:	f7fc fec7 	bl	800114c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = S10_Pin|S01_Pin|S13x5_Pin;
 80043be:	2323      	movs	r3, #35	; 0x23
 80043c0:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043c2:	940c      	str	r4, [sp, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043c4:	950d      	str	r5, [sp, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043c6:	950e      	str	r5, [sp, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80043c8:	940f      	str	r4, [sp, #60]	; 0x3c
    HAL_GPIO_Init(S12_GPIO_Port, &GPIO_InitStruct);
 80043ca:	a90b      	add	r1, sp, #44	; 0x2c
 80043cc:	4839      	ldr	r0, [pc, #228]	; (80044b4 <HAL_TIM_MspPostInit+0x1d8>)
 80043ce:	e02b      	b.n	8004428 <HAL_TIM_MspPostInit+0x14c>
  else if(htim->Instance==TIM5)
 80043d0:	4a3b      	ldr	r2, [pc, #236]	; (80044c0 <HAL_TIM_MspPostInit+0x1e4>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d110      	bne.n	80043f8 <HAL_TIM_MspPostInit+0x11c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043d6:	2300      	movs	r3, #0
 80043d8:	9306      	str	r3, [sp, #24]
 80043da:	4b35      	ldr	r3, [pc, #212]	; (80044b0 <HAL_TIM_MspPostInit+0x1d4>)
 80043dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043de:	f042 0201 	orr.w	r2, r2, #1
 80043e2:	631a      	str	r2, [r3, #48]	; 0x30
 80043e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e6:	f003 0301 	and.w	r3, r3, #1
 80043ea:	9306      	str	r3, [sp, #24]
 80043ec:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = S21i4_Pin|S04x4_Pin;
 80043ee:	2303      	movs	r3, #3
 80043f0:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043f2:	2302      	movs	r3, #2
 80043f4:	930c      	str	r3, [sp, #48]	; 0x30
 80043f6:	e78f      	b.n	8004318 <HAL_TIM_MspPostInit+0x3c>
  else if(htim->Instance==TIM8)
 80043f8:	4a32      	ldr	r2, [pc, #200]	; (80044c4 <HAL_TIM_MspPostInit+0x1e8>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d118      	bne.n	8004430 <HAL_TIM_MspPostInit+0x154>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80043fe:	2300      	movs	r3, #0
 8004400:	9307      	str	r3, [sp, #28]
 8004402:	4b2b      	ldr	r3, [pc, #172]	; (80044b0 <HAL_TIM_MspPostInit+0x1d4>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004404:	4830      	ldr	r0, [pc, #192]	; (80044c8 <HAL_TIM_MspPostInit+0x1ec>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004406:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004408:	f042 0204 	orr.w	r2, r2, #4
 800440c:	631a      	str	r2, [r3, #48]	; 0x30
 800440e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004410:	f003 0304 	and.w	r3, r3, #4
 8004414:	9307      	str	r3, [sp, #28]
 8004416:	9b07      	ldr	r3, [sp, #28]
    GPIO_InitStruct.Pin = S20i6_Pin|S06x6_Pin|S07_Pin|S08_Pin;
 8004418:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800441c:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800441e:	2302      	movs	r3, #2
 8004420:	930c      	str	r3, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004422:	2303      	movs	r3, #3
 8004424:	930f      	str	r3, [sp, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004426:	a90b      	add	r1, sp, #44	; 0x2c
    HAL_GPIO_Init(S11_GPIO_Port, &GPIO_InitStruct);
 8004428:	f7fc fe90 	bl	800114c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 800442c:	b010      	add	sp, #64	; 0x40
 800442e:	bd70      	pop	{r4, r5, r6, pc}
  else if(htim->Instance==TIM10)
 8004430:	4a26      	ldr	r2, [pc, #152]	; (80044cc <HAL_TIM_MspPostInit+0x1f0>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d113      	bne.n	800445e <HAL_TIM_MspPostInit+0x182>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004436:	2300      	movs	r3, #0
 8004438:	9308      	str	r3, [sp, #32]
 800443a:	4b1d      	ldr	r3, [pc, #116]	; (80044b0 <HAL_TIM_MspPostInit+0x1d4>)
 800443c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800443e:	f042 0202 	orr.w	r2, r2, #2
 8004442:	631a      	str	r2, [r3, #48]	; 0x30
 8004444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004446:	f003 0302 	and.w	r3, r3, #2
 800444a:	9308      	str	r3, [sp, #32]
 800444c:	9b08      	ldr	r3, [sp, #32]
    GPIO_InitStruct.Pin = S16_Pin;
 800444e:	f44f 7380 	mov.w	r3, #256	; 0x100
    GPIO_InitStruct.Pin = S12_Pin;
 8004452:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004454:	2302      	movs	r3, #2
 8004456:	930c      	str	r3, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8004458:	2303      	movs	r3, #3
 800445a:	930f      	str	r3, [sp, #60]	; 0x3c
 800445c:	e7b5      	b.n	80043ca <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM11)
 800445e:	4a1c      	ldr	r2, [pc, #112]	; (80044d0 <HAL_TIM_MspPostInit+0x1f4>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d10e      	bne.n	8004482 <HAL_TIM_MspPostInit+0x1a6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004464:	2300      	movs	r3, #0
 8004466:	9309      	str	r3, [sp, #36]	; 0x24
 8004468:	4b11      	ldr	r3, [pc, #68]	; (80044b0 <HAL_TIM_MspPostInit+0x1d4>)
 800446a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800446c:	f042 0202 	orr.w	r2, r2, #2
 8004470:	631a      	str	r2, [r3, #48]	; 0x30
 8004472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004474:	f003 0302 	and.w	r3, r3, #2
 8004478:	9309      	str	r3, [sp, #36]	; 0x24
 800447a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Pin = S12_Pin;
 800447c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004480:	e7e7      	b.n	8004452 <HAL_TIM_MspPostInit+0x176>
  else if(htim->Instance==TIM14)
 8004482:	4a14      	ldr	r2, [pc, #80]	; (80044d4 <HAL_TIM_MspPostInit+0x1f8>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d1d1      	bne.n	800442c <HAL_TIM_MspPostInit+0x150>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004488:	2300      	movs	r3, #0
 800448a:	930a      	str	r3, [sp, #40]	; 0x28
 800448c:	4b08      	ldr	r3, [pc, #32]	; (80044b0 <HAL_TIM_MspPostInit+0x1d4>)
 800448e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004490:	f042 0201 	orr.w	r2, r2, #1
 8004494:	631a      	str	r2, [r3, #48]	; 0x30
 8004496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004498:	f003 0301 	and.w	r3, r3, #1
 800449c:	930a      	str	r3, [sp, #40]	; 0x28
 800449e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = S11_Pin;
 80044a0:	2380      	movs	r3, #128	; 0x80
 80044a2:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044a4:	2302      	movs	r3, #2
 80044a6:	930c      	str	r3, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 80044a8:	2309      	movs	r3, #9
 80044aa:	e735      	b.n	8004318 <HAL_TIM_MspPostInit+0x3c>
 80044ac:	40010000 	.word	0x40010000
 80044b0:	40023800 	.word	0x40023800
 80044b4:	40020400 	.word	0x40020400
 80044b8:	40020000 	.word	0x40020000
 80044bc:	40000400 	.word	0x40000400
 80044c0:	40000c00 	.word	0x40000c00
 80044c4:	40010400 	.word	0x40010400
 80044c8:	40020800 	.word	0x40020800
 80044cc:	40014400 	.word	0x40014400
 80044d0:	40014800 	.word	0x40014800
 80044d4:	40002000 	.word	0x40002000

080044d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80044d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044da:	4604      	mov	r4, r0
 80044dc:	b08d      	sub	sp, #52	; 0x34

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044de:	2214      	movs	r2, #20
 80044e0:	2100      	movs	r1, #0
 80044e2:	a807      	add	r0, sp, #28
 80044e4:	f000 f95b 	bl	800479e <memset>
  if(huart->Instance==UART4)
 80044e8:	6823      	ldr	r3, [r4, #0]
 80044ea:	4a4a      	ldr	r2, [pc, #296]	; (8004614 <HAL_UART_MspInit+0x13c>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d126      	bne.n	800453e <HAL_UART_MspInit+0x66>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80044f0:	4b49      	ldr	r3, [pc, #292]	; (8004618 <HAL_UART_MspInit+0x140>)
    GPIO_InitStruct.Pin = FTDI_TX_Pin|FTDI_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80044f2:	484a      	ldr	r0, [pc, #296]	; (800461c <HAL_UART_MspInit+0x144>)
    __HAL_RCC_UART4_CLK_ENABLE();
 80044f4:	2100      	movs	r1, #0
 80044f6:	9100      	str	r1, [sp, #0]
 80044f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044fa:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80044fe:	641a      	str	r2, [r3, #64]	; 0x40
 8004500:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004502:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8004506:	9200      	str	r2, [sp, #0]
 8004508:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800450a:	9101      	str	r1, [sp, #4]
 800450c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800450e:	f042 0204 	orr.w	r2, r2, #4
 8004512:	631a      	str	r2, [r3, #48]	; 0x30
 8004514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004516:	f003 0304 	and.w	r3, r3, #4
 800451a:	9301      	str	r3, [sp, #4]
 800451c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = FTDI_TX_Pin|FTDI_RX_Pin;
 800451e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004522:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004524:	2302      	movs	r3, #2
 8004526:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004528:	2301      	movs	r3, #1
 800452a:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800452c:	2303      	movs	r3, #3
 800452e:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8004530:	2308      	movs	r3, #8
 8004532:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004534:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Pin = UART5_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
    HAL_GPIO_Init(UART5_RX_GPIO_Port, &GPIO_InitStruct);
 8004536:	f7fc fe09 	bl	800114c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800453a:	b00d      	add	sp, #52	; 0x34
 800453c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if(huart->Instance==UART5)
 800453e:	4a38      	ldr	r2, [pc, #224]	; (8004620 <HAL_UART_MspInit+0x148>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d137      	bne.n	80045b4 <HAL_UART_MspInit+0xdc>
    __HAL_RCC_UART5_CLK_ENABLE();
 8004544:	4b34      	ldr	r3, [pc, #208]	; (8004618 <HAL_UART_MspInit+0x140>)
    HAL_GPIO_Init(UART5_TX_GPIO_Port, &GPIO_InitStruct);
 8004546:	4835      	ldr	r0, [pc, #212]	; (800461c <HAL_UART_MspInit+0x144>)
    __HAL_RCC_UART5_CLK_ENABLE();
 8004548:	2200      	movs	r2, #0
 800454a:	9202      	str	r2, [sp, #8]
 800454c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800454e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004552:	6419      	str	r1, [r3, #64]	; 0x40
 8004554:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004556:	f401 1180 	and.w	r1, r1, #1048576	; 0x100000
 800455a:	9102      	str	r1, [sp, #8]
 800455c:	9902      	ldr	r1, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800455e:	9203      	str	r2, [sp, #12]
 8004560:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004562:	f041 0104 	orr.w	r1, r1, #4
 8004566:	6319      	str	r1, [r3, #48]	; 0x30
 8004568:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800456a:	f001 0104 	and.w	r1, r1, #4
 800456e:	9103      	str	r1, [sp, #12]
 8004570:	9903      	ldr	r1, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004572:	9204      	str	r2, [sp, #16]
 8004574:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004576:	f042 0208 	orr.w	r2, r2, #8
 800457a:	631a      	str	r2, [r3, #48]	; 0x30
 800457c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800457e:	f003 0308 	and.w	r3, r3, #8
 8004582:	9304      	str	r3, [sp, #16]
 8004584:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004586:	2702      	movs	r7, #2
    GPIO_InitStruct.Pin = UART5_TX_Pin;
 8004588:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800458c:	2601      	movs	r6, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800458e:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8004590:	2408      	movs	r4, #8
    HAL_GPIO_Init(UART5_TX_GPIO_Port, &GPIO_InitStruct);
 8004592:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Pin = UART5_TX_Pin;
 8004594:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004596:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004598:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800459a:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800459c:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(UART5_TX_GPIO_Port, &GPIO_InitStruct);
 800459e:	f7fc fdd5 	bl	800114c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = UART5_RX_Pin;
 80045a2:	2304      	movs	r3, #4
 80045a4:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045a6:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80045a8:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045aa:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80045ac:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(UART5_RX_GPIO_Port, &GPIO_InitStruct);
 80045ae:	a907      	add	r1, sp, #28
 80045b0:	481c      	ldr	r0, [pc, #112]	; (8004624 <HAL_UART_MspInit+0x14c>)
 80045b2:	e7c0      	b.n	8004536 <HAL_UART_MspInit+0x5e>
  else if(huart->Instance==USART2)
 80045b4:	4a1c      	ldr	r2, [pc, #112]	; (8004628 <HAL_UART_MspInit+0x150>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d1bf      	bne.n	800453a <HAL_UART_MspInit+0x62>
    __HAL_RCC_USART2_CLK_ENABLE();
 80045ba:	4b17      	ldr	r3, [pc, #92]	; (8004618 <HAL_UART_MspInit+0x140>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045bc:	481b      	ldr	r0, [pc, #108]	; (800462c <HAL_UART_MspInit+0x154>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80045be:	2400      	movs	r4, #0
 80045c0:	9405      	str	r4, [sp, #20]
 80045c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045c4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80045c8:	641a      	str	r2, [r3, #64]	; 0x40
 80045ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045cc:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80045d0:	9205      	str	r2, [sp, #20]
 80045d2:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045d4:	9406      	str	r4, [sp, #24]
 80045d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045d8:	f042 0201 	orr.w	r2, r2, #1
 80045dc:	631a      	str	r2, [r3, #48]	; 0x30
 80045de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e0:	f003 0301 	and.w	r3, r3, #1
 80045e4:	9306      	str	r3, [sp, #24]
 80045e6:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = UART2_TX_Pin|UART2_RX_Pin;
 80045e8:	230c      	movs	r3, #12
 80045ea:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045ec:	2302      	movs	r3, #2
 80045ee:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80045f0:	2301      	movs	r3, #1
 80045f2:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045f4:	2303      	movs	r3, #3
 80045f6:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045f8:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80045fa:	2307      	movs	r3, #7
 80045fc:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045fe:	f7fc fda5 	bl	800114c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004602:	4622      	mov	r2, r4
 8004604:	4621      	mov	r1, r4
 8004606:	2026      	movs	r0, #38	; 0x26
 8004608:	f7fc fd38 	bl	800107c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800460c:	2026      	movs	r0, #38	; 0x26
 800460e:	f7fc fd69 	bl	80010e4 <HAL_NVIC_EnableIRQ>
}
 8004612:	e792      	b.n	800453a <HAL_UART_MspInit+0x62>
 8004614:	40004c00 	.word	0x40004c00
 8004618:	40023800 	.word	0x40023800
 800461c:	40020800 	.word	0x40020800
 8004620:	40005000 	.word	0x40005000
 8004624:	40020c00 	.word	0x40020c00
 8004628:	40004400 	.word	0x40004400
 800462c:	40020000 	.word	0x40020000

08004630 <NMI_Handler>:
 8004630:	4770      	bx	lr

08004632 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004632:	e7fe      	b.n	8004632 <HardFault_Handler>

08004634 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004634:	e7fe      	b.n	8004634 <MemManage_Handler>

08004636 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004636:	e7fe      	b.n	8004636 <BusFault_Handler>

08004638 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004638:	e7fe      	b.n	8004638 <UsageFault_Handler>

0800463a <SVC_Handler>:
 800463a:	4770      	bx	lr

0800463c <DebugMon_Handler>:
 800463c:	4770      	bx	lr

0800463e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800463e:	4770      	bx	lr

08004640 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004640:	f7fc bce4 	b.w	800100c <HAL_IncTick>

08004644 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004644:	4801      	ldr	r0, [pc, #4]	; (800464c <USART2_IRQHandler+0x8>)
 8004646:	f7fe bbbf 	b.w	8002dc8 <HAL_UART_IRQHandler>
 800464a:	bf00      	nop
 800464c:	2000063c 	.word	0x2000063c

08004650 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8004650:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8004652:	4804      	ldr	r0, [pc, #16]	; (8004664 <TIM8_UP_TIM13_IRQHandler+0x14>)
 8004654:	f7fd fe33 	bl	80022be <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 8004658:	4803      	ldr	r0, [pc, #12]	; (8004668 <TIM8_UP_TIM13_IRQHandler+0x18>)
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800465a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim13);
 800465e:	f7fd be2e 	b.w	80022be <HAL_TIM_IRQHandler>
 8004662:	bf00      	nop
 8004664:	20000368 	.word	0x20000368
 8004668:	200004ec 	.word	0x200004ec

0800466c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800466c:	490f      	ldr	r1, [pc, #60]	; (80046ac <SystemInit+0x40>)
 800466e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004672:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004676:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800467a:	4b0d      	ldr	r3, [pc, #52]	; (80046b0 <SystemInit+0x44>)
 800467c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800467e:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8004680:	f042 0201 	orr.w	r2, r2, #1
 8004684:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8004686:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800468e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004692:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004694:	4a07      	ldr	r2, [pc, #28]	; (80046b4 <SystemInit+0x48>)
 8004696:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800469e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80046a0:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80046a2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80046a6:	608b      	str	r3, [r1, #8]
 80046a8:	4770      	bx	lr
 80046aa:	bf00      	nop
 80046ac:	e000ed00 	.word	0xe000ed00
 80046b0:	40023800 	.word	0x40023800
 80046b4:	24003010 	.word	0x24003010

080046b8 <LedSwitch>:
  if(led_num == 2)
  {
    port=LED2_GPIO_Port;
    pin=LED2_Pin;
  }
  if(led_num == 3)
 80046b8:	2803      	cmp	r0, #3
 80046ba:	d00b      	beq.n	80046d4 <LedSwitch+0x1c>
    pin=LED3_Pin;
  }
  if(led_num == 4)
  {
    port=LED4_GPIO_Port;
    pin=LED4_Pin;
 80046bc:	4a07      	ldr	r2, [pc, #28]	; (80046dc <LedSwitch+0x24>)
  if(led_num == 4)
 80046be:	2804      	cmp	r0, #4
    pin=LED4_Pin;
 80046c0:	bf18      	it	ne
 80046c2:	2310      	movne	r3, #16
 80046c4:	4806      	ldr	r0, [pc, #24]	; (80046e0 <LedSwitch+0x28>)
 80046c6:	bf04      	itt	eq
 80046c8:	2301      	moveq	r3, #1
 80046ca:	4610      	moveq	r0, r2
  }

  HAL_GPIO_WritePin(port, pin, state);
 80046cc:	b2ca      	uxtb	r2, r1
 80046ce:	4619      	mov	r1, r3
 80046d0:	f7fc be1c 	b.w	800130c <HAL_GPIO_WritePin>
    pin=LED3_Pin;
 80046d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80046d8:	4801      	ldr	r0, [pc, #4]	; (80046e0 <LedSwitch+0x28>)
 80046da:	e7f7      	b.n	80046cc <LedSwitch+0x14>
 80046dc:	40021c00 	.word	0x40021c00
 80046e0:	40020400 	.word	0x40020400

080046e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80046e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800471c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80046e8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80046ea:	e003      	b.n	80046f4 <LoopCopyDataInit>

080046ec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80046ec:	4b0c      	ldr	r3, [pc, #48]	; (8004720 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80046ee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80046f0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80046f2:	3104      	adds	r1, #4

080046f4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80046f4:	480b      	ldr	r0, [pc, #44]	; (8004724 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80046f6:	4b0c      	ldr	r3, [pc, #48]	; (8004728 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80046f8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80046fa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80046fc:	d3f6      	bcc.n	80046ec <CopyDataInit>
  ldr  r2, =_sbss
 80046fe:	4a0b      	ldr	r2, [pc, #44]	; (800472c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004700:	e002      	b.n	8004708 <LoopFillZerobss>

08004702 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004702:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004704:	f842 3b04 	str.w	r3, [r2], #4

08004708 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004708:	4b09      	ldr	r3, [pc, #36]	; (8004730 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800470a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800470c:	d3f9      	bcc.n	8004702 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800470e:	f7ff ffad 	bl	800466c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004712:	f000 f815 	bl	8004740 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004716:	f7fe fd21 	bl	800315c <main>
  bx  lr    
 800471a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800471c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004720:	08007a6c 	.word	0x08007a6c
  ldr  r0, =_sdata
 8004724:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004728:	200002d4 	.word	0x200002d4
  ldr  r2, =_sbss
 800472c:	200002d4 	.word	0x200002d4
  ldr  r3, = _ebss
 8004730:	20000c38 	.word	0x20000c38

08004734 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004734:	e7fe      	b.n	8004734 <ADC_IRQHandler>

08004736 <atoi>:
 8004736:	220a      	movs	r2, #10
 8004738:	2100      	movs	r1, #0
 800473a:	f000 bd49 	b.w	80051d0 <strtol>
	...

08004740 <__libc_init_array>:
 8004740:	b570      	push	{r4, r5, r6, lr}
 8004742:	4e0d      	ldr	r6, [pc, #52]	; (8004778 <__libc_init_array+0x38>)
 8004744:	4c0d      	ldr	r4, [pc, #52]	; (800477c <__libc_init_array+0x3c>)
 8004746:	1ba4      	subs	r4, r4, r6
 8004748:	10a4      	asrs	r4, r4, #2
 800474a:	2500      	movs	r5, #0
 800474c:	42a5      	cmp	r5, r4
 800474e:	d109      	bne.n	8004764 <__libc_init_array+0x24>
 8004750:	4e0b      	ldr	r6, [pc, #44]	; (8004780 <__libc_init_array+0x40>)
 8004752:	4c0c      	ldr	r4, [pc, #48]	; (8004784 <__libc_init_array+0x44>)
 8004754:	f002 fff4 	bl	8007740 <_init>
 8004758:	1ba4      	subs	r4, r4, r6
 800475a:	10a4      	asrs	r4, r4, #2
 800475c:	2500      	movs	r5, #0
 800475e:	42a5      	cmp	r5, r4
 8004760:	d105      	bne.n	800476e <__libc_init_array+0x2e>
 8004762:	bd70      	pop	{r4, r5, r6, pc}
 8004764:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004768:	4798      	blx	r3
 800476a:	3501      	adds	r5, #1
 800476c:	e7ee      	b.n	800474c <__libc_init_array+0xc>
 800476e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004772:	4798      	blx	r3
 8004774:	3501      	adds	r5, #1
 8004776:	e7f2      	b.n	800475e <__libc_init_array+0x1e>
 8004778:	08007a64 	.word	0x08007a64
 800477c:	08007a64 	.word	0x08007a64
 8004780:	08007a64 	.word	0x08007a64
 8004784:	08007a68 	.word	0x08007a68

08004788 <memcpy>:
 8004788:	b510      	push	{r4, lr}
 800478a:	1e43      	subs	r3, r0, #1
 800478c:	440a      	add	r2, r1
 800478e:	4291      	cmp	r1, r2
 8004790:	d100      	bne.n	8004794 <memcpy+0xc>
 8004792:	bd10      	pop	{r4, pc}
 8004794:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004798:	f803 4f01 	strb.w	r4, [r3, #1]!
 800479c:	e7f7      	b.n	800478e <memcpy+0x6>

0800479e <memset>:
 800479e:	4402      	add	r2, r0
 80047a0:	4603      	mov	r3, r0
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d100      	bne.n	80047a8 <memset+0xa>
 80047a6:	4770      	bx	lr
 80047a8:	f803 1b01 	strb.w	r1, [r3], #1
 80047ac:	e7f9      	b.n	80047a2 <memset+0x4>

080047ae <__cvt>:
 80047ae:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80047b2:	ec55 4b10 	vmov	r4, r5, d0
 80047b6:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80047b8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80047bc:	2d00      	cmp	r5, #0
 80047be:	460e      	mov	r6, r1
 80047c0:	4691      	mov	r9, r2
 80047c2:	4619      	mov	r1, r3
 80047c4:	bfb8      	it	lt
 80047c6:	4622      	movlt	r2, r4
 80047c8:	462b      	mov	r3, r5
 80047ca:	f027 0720 	bic.w	r7, r7, #32
 80047ce:	bfbb      	ittet	lt
 80047d0:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80047d4:	461d      	movlt	r5, r3
 80047d6:	2300      	movge	r3, #0
 80047d8:	232d      	movlt	r3, #45	; 0x2d
 80047da:	bfb8      	it	lt
 80047dc:	4614      	movlt	r4, r2
 80047de:	2f46      	cmp	r7, #70	; 0x46
 80047e0:	700b      	strb	r3, [r1, #0]
 80047e2:	d004      	beq.n	80047ee <__cvt+0x40>
 80047e4:	2f45      	cmp	r7, #69	; 0x45
 80047e6:	d100      	bne.n	80047ea <__cvt+0x3c>
 80047e8:	3601      	adds	r6, #1
 80047ea:	2102      	movs	r1, #2
 80047ec:	e000      	b.n	80047f0 <__cvt+0x42>
 80047ee:	2103      	movs	r1, #3
 80047f0:	ab03      	add	r3, sp, #12
 80047f2:	9301      	str	r3, [sp, #4]
 80047f4:	ab02      	add	r3, sp, #8
 80047f6:	9300      	str	r3, [sp, #0]
 80047f8:	4632      	mov	r2, r6
 80047fa:	4653      	mov	r3, sl
 80047fc:	ec45 4b10 	vmov	d0, r4, r5
 8004800:	f000 fd8a 	bl	8005318 <_dtoa_r>
 8004804:	2f47      	cmp	r7, #71	; 0x47
 8004806:	4680      	mov	r8, r0
 8004808:	d102      	bne.n	8004810 <__cvt+0x62>
 800480a:	f019 0f01 	tst.w	r9, #1
 800480e:	d026      	beq.n	800485e <__cvt+0xb0>
 8004810:	2f46      	cmp	r7, #70	; 0x46
 8004812:	eb08 0906 	add.w	r9, r8, r6
 8004816:	d111      	bne.n	800483c <__cvt+0x8e>
 8004818:	f898 3000 	ldrb.w	r3, [r8]
 800481c:	2b30      	cmp	r3, #48	; 0x30
 800481e:	d10a      	bne.n	8004836 <__cvt+0x88>
 8004820:	2200      	movs	r2, #0
 8004822:	2300      	movs	r3, #0
 8004824:	4620      	mov	r0, r4
 8004826:	4629      	mov	r1, r5
 8004828:	f7fc f96a 	bl	8000b00 <__aeabi_dcmpeq>
 800482c:	b918      	cbnz	r0, 8004836 <__cvt+0x88>
 800482e:	f1c6 0601 	rsb	r6, r6, #1
 8004832:	f8ca 6000 	str.w	r6, [sl]
 8004836:	f8da 3000 	ldr.w	r3, [sl]
 800483a:	4499      	add	r9, r3
 800483c:	2200      	movs	r2, #0
 800483e:	2300      	movs	r3, #0
 8004840:	4620      	mov	r0, r4
 8004842:	4629      	mov	r1, r5
 8004844:	f7fc f95c 	bl	8000b00 <__aeabi_dcmpeq>
 8004848:	b938      	cbnz	r0, 800485a <__cvt+0xac>
 800484a:	2230      	movs	r2, #48	; 0x30
 800484c:	9b03      	ldr	r3, [sp, #12]
 800484e:	4599      	cmp	r9, r3
 8004850:	d905      	bls.n	800485e <__cvt+0xb0>
 8004852:	1c59      	adds	r1, r3, #1
 8004854:	9103      	str	r1, [sp, #12]
 8004856:	701a      	strb	r2, [r3, #0]
 8004858:	e7f8      	b.n	800484c <__cvt+0x9e>
 800485a:	f8cd 900c 	str.w	r9, [sp, #12]
 800485e:	9b03      	ldr	r3, [sp, #12]
 8004860:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004862:	eba3 0308 	sub.w	r3, r3, r8
 8004866:	4640      	mov	r0, r8
 8004868:	6013      	str	r3, [r2, #0]
 800486a:	b004      	add	sp, #16
 800486c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004870 <__exponent>:
 8004870:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004872:	4603      	mov	r3, r0
 8004874:	2900      	cmp	r1, #0
 8004876:	bfb8      	it	lt
 8004878:	4249      	neglt	r1, r1
 800487a:	f803 2b02 	strb.w	r2, [r3], #2
 800487e:	bfb4      	ite	lt
 8004880:	222d      	movlt	r2, #45	; 0x2d
 8004882:	222b      	movge	r2, #43	; 0x2b
 8004884:	2909      	cmp	r1, #9
 8004886:	7042      	strb	r2, [r0, #1]
 8004888:	dd20      	ble.n	80048cc <__exponent+0x5c>
 800488a:	f10d 0207 	add.w	r2, sp, #7
 800488e:	4617      	mov	r7, r2
 8004890:	260a      	movs	r6, #10
 8004892:	fb91 f5f6 	sdiv	r5, r1, r6
 8004896:	fb06 1115 	mls	r1, r6, r5, r1
 800489a:	3130      	adds	r1, #48	; 0x30
 800489c:	2d09      	cmp	r5, #9
 800489e:	f802 1c01 	strb.w	r1, [r2, #-1]
 80048a2:	f102 34ff 	add.w	r4, r2, #4294967295
 80048a6:	4629      	mov	r1, r5
 80048a8:	dc09      	bgt.n	80048be <__exponent+0x4e>
 80048aa:	3130      	adds	r1, #48	; 0x30
 80048ac:	3a02      	subs	r2, #2
 80048ae:	f804 1c01 	strb.w	r1, [r4, #-1]
 80048b2:	42ba      	cmp	r2, r7
 80048b4:	461c      	mov	r4, r3
 80048b6:	d304      	bcc.n	80048c2 <__exponent+0x52>
 80048b8:	1a20      	subs	r0, r4, r0
 80048ba:	b003      	add	sp, #12
 80048bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048be:	4622      	mov	r2, r4
 80048c0:	e7e7      	b.n	8004892 <__exponent+0x22>
 80048c2:	f812 1b01 	ldrb.w	r1, [r2], #1
 80048c6:	f803 1b01 	strb.w	r1, [r3], #1
 80048ca:	e7f2      	b.n	80048b2 <__exponent+0x42>
 80048cc:	2230      	movs	r2, #48	; 0x30
 80048ce:	461c      	mov	r4, r3
 80048d0:	4411      	add	r1, r2
 80048d2:	f804 2b02 	strb.w	r2, [r4], #2
 80048d6:	7059      	strb	r1, [r3, #1]
 80048d8:	e7ee      	b.n	80048b8 <__exponent+0x48>
	...

080048dc <_printf_float>:
 80048dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048e0:	b08d      	sub	sp, #52	; 0x34
 80048e2:	460c      	mov	r4, r1
 80048e4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80048e8:	4616      	mov	r6, r2
 80048ea:	461f      	mov	r7, r3
 80048ec:	4605      	mov	r5, r0
 80048ee:	f001 fae5 	bl	8005ebc <_localeconv_r>
 80048f2:	6803      	ldr	r3, [r0, #0]
 80048f4:	9304      	str	r3, [sp, #16]
 80048f6:	4618      	mov	r0, r3
 80048f8:	f7fb fc8a 	bl	8000210 <strlen>
 80048fc:	2300      	movs	r3, #0
 80048fe:	930a      	str	r3, [sp, #40]	; 0x28
 8004900:	f8d8 3000 	ldr.w	r3, [r8]
 8004904:	9005      	str	r0, [sp, #20]
 8004906:	3307      	adds	r3, #7
 8004908:	f023 0307 	bic.w	r3, r3, #7
 800490c:	f103 0208 	add.w	r2, r3, #8
 8004910:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004914:	f8d4 b000 	ldr.w	fp, [r4]
 8004918:	f8c8 2000 	str.w	r2, [r8]
 800491c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004920:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004924:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004928:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800492c:	9307      	str	r3, [sp, #28]
 800492e:	f8cd 8018 	str.w	r8, [sp, #24]
 8004932:	f04f 32ff 	mov.w	r2, #4294967295
 8004936:	4ba5      	ldr	r3, [pc, #660]	; (8004bcc <_printf_float+0x2f0>)
 8004938:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800493c:	f7fc f912 	bl	8000b64 <__aeabi_dcmpun>
 8004940:	2800      	cmp	r0, #0
 8004942:	f040 81fb 	bne.w	8004d3c <_printf_float+0x460>
 8004946:	f04f 32ff 	mov.w	r2, #4294967295
 800494a:	4ba0      	ldr	r3, [pc, #640]	; (8004bcc <_printf_float+0x2f0>)
 800494c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004950:	f7fc f8ea 	bl	8000b28 <__aeabi_dcmple>
 8004954:	2800      	cmp	r0, #0
 8004956:	f040 81f1 	bne.w	8004d3c <_printf_float+0x460>
 800495a:	2200      	movs	r2, #0
 800495c:	2300      	movs	r3, #0
 800495e:	4640      	mov	r0, r8
 8004960:	4649      	mov	r1, r9
 8004962:	f7fc f8d7 	bl	8000b14 <__aeabi_dcmplt>
 8004966:	b110      	cbz	r0, 800496e <_printf_float+0x92>
 8004968:	232d      	movs	r3, #45	; 0x2d
 800496a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800496e:	4b98      	ldr	r3, [pc, #608]	; (8004bd0 <_printf_float+0x2f4>)
 8004970:	4a98      	ldr	r2, [pc, #608]	; (8004bd4 <_printf_float+0x2f8>)
 8004972:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004976:	bf8c      	ite	hi
 8004978:	4690      	movhi	r8, r2
 800497a:	4698      	movls	r8, r3
 800497c:	2303      	movs	r3, #3
 800497e:	f02b 0204 	bic.w	r2, fp, #4
 8004982:	6123      	str	r3, [r4, #16]
 8004984:	6022      	str	r2, [r4, #0]
 8004986:	f04f 0900 	mov.w	r9, #0
 800498a:	9700      	str	r7, [sp, #0]
 800498c:	4633      	mov	r3, r6
 800498e:	aa0b      	add	r2, sp, #44	; 0x2c
 8004990:	4621      	mov	r1, r4
 8004992:	4628      	mov	r0, r5
 8004994:	f000 f9e2 	bl	8004d5c <_printf_common>
 8004998:	3001      	adds	r0, #1
 800499a:	f040 8093 	bne.w	8004ac4 <_printf_float+0x1e8>
 800499e:	f04f 30ff 	mov.w	r0, #4294967295
 80049a2:	b00d      	add	sp, #52	; 0x34
 80049a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049a8:	6861      	ldr	r1, [r4, #4]
 80049aa:	1c4b      	adds	r3, r1, #1
 80049ac:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80049b0:	d13f      	bne.n	8004a32 <_printf_float+0x156>
 80049b2:	2306      	movs	r3, #6
 80049b4:	6063      	str	r3, [r4, #4]
 80049b6:	2300      	movs	r3, #0
 80049b8:	9303      	str	r3, [sp, #12]
 80049ba:	ab0a      	add	r3, sp, #40	; 0x28
 80049bc:	9302      	str	r3, [sp, #8]
 80049be:	ab09      	add	r3, sp, #36	; 0x24
 80049c0:	9300      	str	r3, [sp, #0]
 80049c2:	ec49 8b10 	vmov	d0, r8, r9
 80049c6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80049ca:	6022      	str	r2, [r4, #0]
 80049cc:	f8cd a004 	str.w	sl, [sp, #4]
 80049d0:	6861      	ldr	r1, [r4, #4]
 80049d2:	4628      	mov	r0, r5
 80049d4:	f7ff feeb 	bl	80047ae <__cvt>
 80049d8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80049dc:	2b47      	cmp	r3, #71	; 0x47
 80049de:	4680      	mov	r8, r0
 80049e0:	d109      	bne.n	80049f6 <_printf_float+0x11a>
 80049e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049e4:	1cd8      	adds	r0, r3, #3
 80049e6:	db02      	blt.n	80049ee <_printf_float+0x112>
 80049e8:	6862      	ldr	r2, [r4, #4]
 80049ea:	4293      	cmp	r3, r2
 80049ec:	dd57      	ble.n	8004a9e <_printf_float+0x1c2>
 80049ee:	f1aa 0a02 	sub.w	sl, sl, #2
 80049f2:	fa5f fa8a 	uxtb.w	sl, sl
 80049f6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80049fa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80049fc:	d834      	bhi.n	8004a68 <_printf_float+0x18c>
 80049fe:	3901      	subs	r1, #1
 8004a00:	4652      	mov	r2, sl
 8004a02:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004a06:	9109      	str	r1, [sp, #36]	; 0x24
 8004a08:	f7ff ff32 	bl	8004870 <__exponent>
 8004a0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004a0e:	1883      	adds	r3, r0, r2
 8004a10:	2a01      	cmp	r2, #1
 8004a12:	4681      	mov	r9, r0
 8004a14:	6123      	str	r3, [r4, #16]
 8004a16:	dc02      	bgt.n	8004a1e <_printf_float+0x142>
 8004a18:	6822      	ldr	r2, [r4, #0]
 8004a1a:	07d1      	lsls	r1, r2, #31
 8004a1c:	d501      	bpl.n	8004a22 <_printf_float+0x146>
 8004a1e:	3301      	adds	r3, #1
 8004a20:	6123      	str	r3, [r4, #16]
 8004a22:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d0af      	beq.n	800498a <_printf_float+0xae>
 8004a2a:	232d      	movs	r3, #45	; 0x2d
 8004a2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a30:	e7ab      	b.n	800498a <_printf_float+0xae>
 8004a32:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8004a36:	d002      	beq.n	8004a3e <_printf_float+0x162>
 8004a38:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004a3c:	d1bb      	bne.n	80049b6 <_printf_float+0xda>
 8004a3e:	b189      	cbz	r1, 8004a64 <_printf_float+0x188>
 8004a40:	2300      	movs	r3, #0
 8004a42:	9303      	str	r3, [sp, #12]
 8004a44:	ab0a      	add	r3, sp, #40	; 0x28
 8004a46:	9302      	str	r3, [sp, #8]
 8004a48:	ab09      	add	r3, sp, #36	; 0x24
 8004a4a:	9300      	str	r3, [sp, #0]
 8004a4c:	ec49 8b10 	vmov	d0, r8, r9
 8004a50:	6022      	str	r2, [r4, #0]
 8004a52:	f8cd a004 	str.w	sl, [sp, #4]
 8004a56:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004a5a:	4628      	mov	r0, r5
 8004a5c:	f7ff fea7 	bl	80047ae <__cvt>
 8004a60:	4680      	mov	r8, r0
 8004a62:	e7be      	b.n	80049e2 <_printf_float+0x106>
 8004a64:	2301      	movs	r3, #1
 8004a66:	e7a5      	b.n	80049b4 <_printf_float+0xd8>
 8004a68:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8004a6c:	d119      	bne.n	8004aa2 <_printf_float+0x1c6>
 8004a6e:	2900      	cmp	r1, #0
 8004a70:	6863      	ldr	r3, [r4, #4]
 8004a72:	dd0c      	ble.n	8004a8e <_printf_float+0x1b2>
 8004a74:	6121      	str	r1, [r4, #16]
 8004a76:	b913      	cbnz	r3, 8004a7e <_printf_float+0x1a2>
 8004a78:	6822      	ldr	r2, [r4, #0]
 8004a7a:	07d2      	lsls	r2, r2, #31
 8004a7c:	d502      	bpl.n	8004a84 <_printf_float+0x1a8>
 8004a7e:	3301      	adds	r3, #1
 8004a80:	440b      	add	r3, r1
 8004a82:	6123      	str	r3, [r4, #16]
 8004a84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a86:	65a3      	str	r3, [r4, #88]	; 0x58
 8004a88:	f04f 0900 	mov.w	r9, #0
 8004a8c:	e7c9      	b.n	8004a22 <_printf_float+0x146>
 8004a8e:	b913      	cbnz	r3, 8004a96 <_printf_float+0x1ba>
 8004a90:	6822      	ldr	r2, [r4, #0]
 8004a92:	07d0      	lsls	r0, r2, #31
 8004a94:	d501      	bpl.n	8004a9a <_printf_float+0x1be>
 8004a96:	3302      	adds	r3, #2
 8004a98:	e7f3      	b.n	8004a82 <_printf_float+0x1a6>
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e7f1      	b.n	8004a82 <_printf_float+0x1a6>
 8004a9e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8004aa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004aa4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	db05      	blt.n	8004ab6 <_printf_float+0x1da>
 8004aaa:	6822      	ldr	r2, [r4, #0]
 8004aac:	6123      	str	r3, [r4, #16]
 8004aae:	07d1      	lsls	r1, r2, #31
 8004ab0:	d5e8      	bpl.n	8004a84 <_printf_float+0x1a8>
 8004ab2:	3301      	adds	r3, #1
 8004ab4:	e7e5      	b.n	8004a82 <_printf_float+0x1a6>
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	bfd4      	ite	le
 8004aba:	f1c3 0302 	rsble	r3, r3, #2
 8004abe:	2301      	movgt	r3, #1
 8004ac0:	4413      	add	r3, r2
 8004ac2:	e7de      	b.n	8004a82 <_printf_float+0x1a6>
 8004ac4:	6823      	ldr	r3, [r4, #0]
 8004ac6:	055a      	lsls	r2, r3, #21
 8004ac8:	d407      	bmi.n	8004ada <_printf_float+0x1fe>
 8004aca:	6923      	ldr	r3, [r4, #16]
 8004acc:	4642      	mov	r2, r8
 8004ace:	4631      	mov	r1, r6
 8004ad0:	4628      	mov	r0, r5
 8004ad2:	47b8      	blx	r7
 8004ad4:	3001      	adds	r0, #1
 8004ad6:	d12b      	bne.n	8004b30 <_printf_float+0x254>
 8004ad8:	e761      	b.n	800499e <_printf_float+0xc2>
 8004ada:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004ade:	f240 80e2 	bls.w	8004ca6 <_printf_float+0x3ca>
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004aea:	f7fc f809 	bl	8000b00 <__aeabi_dcmpeq>
 8004aee:	2800      	cmp	r0, #0
 8004af0:	d03c      	beq.n	8004b6c <_printf_float+0x290>
 8004af2:	2301      	movs	r3, #1
 8004af4:	4a38      	ldr	r2, [pc, #224]	; (8004bd8 <_printf_float+0x2fc>)
 8004af6:	4631      	mov	r1, r6
 8004af8:	4628      	mov	r0, r5
 8004afa:	47b8      	blx	r7
 8004afc:	3001      	adds	r0, #1
 8004afe:	f43f af4e 	beq.w	800499e <_printf_float+0xc2>
 8004b02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004b06:	429a      	cmp	r2, r3
 8004b08:	db02      	blt.n	8004b10 <_printf_float+0x234>
 8004b0a:	6823      	ldr	r3, [r4, #0]
 8004b0c:	07d8      	lsls	r0, r3, #31
 8004b0e:	d50f      	bpl.n	8004b30 <_printf_float+0x254>
 8004b10:	9b05      	ldr	r3, [sp, #20]
 8004b12:	9a04      	ldr	r2, [sp, #16]
 8004b14:	4631      	mov	r1, r6
 8004b16:	4628      	mov	r0, r5
 8004b18:	47b8      	blx	r7
 8004b1a:	3001      	adds	r0, #1
 8004b1c:	f43f af3f 	beq.w	800499e <_printf_float+0xc2>
 8004b20:	f04f 0800 	mov.w	r8, #0
 8004b24:	f104 091a 	add.w	r9, r4, #26
 8004b28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b2a:	3b01      	subs	r3, #1
 8004b2c:	4598      	cmp	r8, r3
 8004b2e:	db12      	blt.n	8004b56 <_printf_float+0x27a>
 8004b30:	6823      	ldr	r3, [r4, #0]
 8004b32:	079b      	lsls	r3, r3, #30
 8004b34:	d509      	bpl.n	8004b4a <_printf_float+0x26e>
 8004b36:	f04f 0800 	mov.w	r8, #0
 8004b3a:	f104 0919 	add.w	r9, r4, #25
 8004b3e:	68e3      	ldr	r3, [r4, #12]
 8004b40:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004b42:	1a9b      	subs	r3, r3, r2
 8004b44:	4598      	cmp	r8, r3
 8004b46:	f2c0 80ee 	blt.w	8004d26 <_printf_float+0x44a>
 8004b4a:	68e0      	ldr	r0, [r4, #12]
 8004b4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004b4e:	4298      	cmp	r0, r3
 8004b50:	bfb8      	it	lt
 8004b52:	4618      	movlt	r0, r3
 8004b54:	e725      	b.n	80049a2 <_printf_float+0xc6>
 8004b56:	2301      	movs	r3, #1
 8004b58:	464a      	mov	r2, r9
 8004b5a:	4631      	mov	r1, r6
 8004b5c:	4628      	mov	r0, r5
 8004b5e:	47b8      	blx	r7
 8004b60:	3001      	adds	r0, #1
 8004b62:	f43f af1c 	beq.w	800499e <_printf_float+0xc2>
 8004b66:	f108 0801 	add.w	r8, r8, #1
 8004b6a:	e7dd      	b.n	8004b28 <_printf_float+0x24c>
 8004b6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	dc34      	bgt.n	8004bdc <_printf_float+0x300>
 8004b72:	2301      	movs	r3, #1
 8004b74:	4a18      	ldr	r2, [pc, #96]	; (8004bd8 <_printf_float+0x2fc>)
 8004b76:	4631      	mov	r1, r6
 8004b78:	4628      	mov	r0, r5
 8004b7a:	47b8      	blx	r7
 8004b7c:	3001      	adds	r0, #1
 8004b7e:	f43f af0e 	beq.w	800499e <_printf_float+0xc2>
 8004b82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b84:	b923      	cbnz	r3, 8004b90 <_printf_float+0x2b4>
 8004b86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b88:	b913      	cbnz	r3, 8004b90 <_printf_float+0x2b4>
 8004b8a:	6823      	ldr	r3, [r4, #0]
 8004b8c:	07d9      	lsls	r1, r3, #31
 8004b8e:	d5cf      	bpl.n	8004b30 <_printf_float+0x254>
 8004b90:	9b05      	ldr	r3, [sp, #20]
 8004b92:	9a04      	ldr	r2, [sp, #16]
 8004b94:	4631      	mov	r1, r6
 8004b96:	4628      	mov	r0, r5
 8004b98:	47b8      	blx	r7
 8004b9a:	3001      	adds	r0, #1
 8004b9c:	f43f aeff 	beq.w	800499e <_printf_float+0xc2>
 8004ba0:	f04f 0900 	mov.w	r9, #0
 8004ba4:	f104 0a1a 	add.w	sl, r4, #26
 8004ba8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004baa:	425b      	negs	r3, r3
 8004bac:	4599      	cmp	r9, r3
 8004bae:	db01      	blt.n	8004bb4 <_printf_float+0x2d8>
 8004bb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004bb2:	e78b      	b.n	8004acc <_printf_float+0x1f0>
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	4652      	mov	r2, sl
 8004bb8:	4631      	mov	r1, r6
 8004bba:	4628      	mov	r0, r5
 8004bbc:	47b8      	blx	r7
 8004bbe:	3001      	adds	r0, #1
 8004bc0:	f43f aeed 	beq.w	800499e <_printf_float+0xc2>
 8004bc4:	f109 0901 	add.w	r9, r9, #1
 8004bc8:	e7ee      	b.n	8004ba8 <_printf_float+0x2cc>
 8004bca:	bf00      	nop
 8004bcc:	7fefffff 	.word	0x7fefffff
 8004bd0:	080077ca 	.word	0x080077ca
 8004bd4:	080077ce 	.word	0x080077ce
 8004bd8:	080077da 	.word	0x080077da
 8004bdc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004bde:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004be0:	429a      	cmp	r2, r3
 8004be2:	bfa8      	it	ge
 8004be4:	461a      	movge	r2, r3
 8004be6:	2a00      	cmp	r2, #0
 8004be8:	4691      	mov	r9, r2
 8004bea:	dc38      	bgt.n	8004c5e <_printf_float+0x382>
 8004bec:	f104 031a 	add.w	r3, r4, #26
 8004bf0:	f04f 0b00 	mov.w	fp, #0
 8004bf4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004bf8:	9306      	str	r3, [sp, #24]
 8004bfa:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004bfe:	ebaa 0309 	sub.w	r3, sl, r9
 8004c02:	459b      	cmp	fp, r3
 8004c04:	db33      	blt.n	8004c6e <_printf_float+0x392>
 8004c06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	db3a      	blt.n	8004c84 <_printf_float+0x3a8>
 8004c0e:	6823      	ldr	r3, [r4, #0]
 8004c10:	07da      	lsls	r2, r3, #31
 8004c12:	d437      	bmi.n	8004c84 <_printf_float+0x3a8>
 8004c14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c16:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004c18:	eba3 020a 	sub.w	r2, r3, sl
 8004c1c:	eba3 0901 	sub.w	r9, r3, r1
 8004c20:	4591      	cmp	r9, r2
 8004c22:	bfa8      	it	ge
 8004c24:	4691      	movge	r9, r2
 8004c26:	f1b9 0f00 	cmp.w	r9, #0
 8004c2a:	dc33      	bgt.n	8004c94 <_printf_float+0x3b8>
 8004c2c:	f04f 0800 	mov.w	r8, #0
 8004c30:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004c34:	f104 0a1a 	add.w	sl, r4, #26
 8004c38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004c3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c3c:	1a9b      	subs	r3, r3, r2
 8004c3e:	eba3 0309 	sub.w	r3, r3, r9
 8004c42:	4598      	cmp	r8, r3
 8004c44:	f6bf af74 	bge.w	8004b30 <_printf_float+0x254>
 8004c48:	2301      	movs	r3, #1
 8004c4a:	4652      	mov	r2, sl
 8004c4c:	4631      	mov	r1, r6
 8004c4e:	4628      	mov	r0, r5
 8004c50:	47b8      	blx	r7
 8004c52:	3001      	adds	r0, #1
 8004c54:	f43f aea3 	beq.w	800499e <_printf_float+0xc2>
 8004c58:	f108 0801 	add.w	r8, r8, #1
 8004c5c:	e7ec      	b.n	8004c38 <_printf_float+0x35c>
 8004c5e:	4613      	mov	r3, r2
 8004c60:	4631      	mov	r1, r6
 8004c62:	4642      	mov	r2, r8
 8004c64:	4628      	mov	r0, r5
 8004c66:	47b8      	blx	r7
 8004c68:	3001      	adds	r0, #1
 8004c6a:	d1bf      	bne.n	8004bec <_printf_float+0x310>
 8004c6c:	e697      	b.n	800499e <_printf_float+0xc2>
 8004c6e:	2301      	movs	r3, #1
 8004c70:	9a06      	ldr	r2, [sp, #24]
 8004c72:	4631      	mov	r1, r6
 8004c74:	4628      	mov	r0, r5
 8004c76:	47b8      	blx	r7
 8004c78:	3001      	adds	r0, #1
 8004c7a:	f43f ae90 	beq.w	800499e <_printf_float+0xc2>
 8004c7e:	f10b 0b01 	add.w	fp, fp, #1
 8004c82:	e7ba      	b.n	8004bfa <_printf_float+0x31e>
 8004c84:	9b05      	ldr	r3, [sp, #20]
 8004c86:	9a04      	ldr	r2, [sp, #16]
 8004c88:	4631      	mov	r1, r6
 8004c8a:	4628      	mov	r0, r5
 8004c8c:	47b8      	blx	r7
 8004c8e:	3001      	adds	r0, #1
 8004c90:	d1c0      	bne.n	8004c14 <_printf_float+0x338>
 8004c92:	e684      	b.n	800499e <_printf_float+0xc2>
 8004c94:	464b      	mov	r3, r9
 8004c96:	eb08 020a 	add.w	r2, r8, sl
 8004c9a:	4631      	mov	r1, r6
 8004c9c:	4628      	mov	r0, r5
 8004c9e:	47b8      	blx	r7
 8004ca0:	3001      	adds	r0, #1
 8004ca2:	d1c3      	bne.n	8004c2c <_printf_float+0x350>
 8004ca4:	e67b      	b.n	800499e <_printf_float+0xc2>
 8004ca6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004ca8:	2a01      	cmp	r2, #1
 8004caa:	dc01      	bgt.n	8004cb0 <_printf_float+0x3d4>
 8004cac:	07db      	lsls	r3, r3, #31
 8004cae:	d537      	bpl.n	8004d20 <_printf_float+0x444>
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	4642      	mov	r2, r8
 8004cb4:	4631      	mov	r1, r6
 8004cb6:	4628      	mov	r0, r5
 8004cb8:	47b8      	blx	r7
 8004cba:	3001      	adds	r0, #1
 8004cbc:	f43f ae6f 	beq.w	800499e <_printf_float+0xc2>
 8004cc0:	9b05      	ldr	r3, [sp, #20]
 8004cc2:	9a04      	ldr	r2, [sp, #16]
 8004cc4:	4631      	mov	r1, r6
 8004cc6:	4628      	mov	r0, r5
 8004cc8:	47b8      	blx	r7
 8004cca:	3001      	adds	r0, #1
 8004ccc:	f43f ae67 	beq.w	800499e <_printf_float+0xc2>
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004cd8:	f7fb ff12 	bl	8000b00 <__aeabi_dcmpeq>
 8004cdc:	b158      	cbz	r0, 8004cf6 <_printf_float+0x41a>
 8004cde:	f04f 0800 	mov.w	r8, #0
 8004ce2:	f104 0a1a 	add.w	sl, r4, #26
 8004ce6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ce8:	3b01      	subs	r3, #1
 8004cea:	4598      	cmp	r8, r3
 8004cec:	db0d      	blt.n	8004d0a <_printf_float+0x42e>
 8004cee:	464b      	mov	r3, r9
 8004cf0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004cf4:	e6eb      	b.n	8004ace <_printf_float+0x1f2>
 8004cf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004cf8:	f108 0201 	add.w	r2, r8, #1
 8004cfc:	3b01      	subs	r3, #1
 8004cfe:	4631      	mov	r1, r6
 8004d00:	4628      	mov	r0, r5
 8004d02:	47b8      	blx	r7
 8004d04:	3001      	adds	r0, #1
 8004d06:	d1f2      	bne.n	8004cee <_printf_float+0x412>
 8004d08:	e649      	b.n	800499e <_printf_float+0xc2>
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	4652      	mov	r2, sl
 8004d0e:	4631      	mov	r1, r6
 8004d10:	4628      	mov	r0, r5
 8004d12:	47b8      	blx	r7
 8004d14:	3001      	adds	r0, #1
 8004d16:	f43f ae42 	beq.w	800499e <_printf_float+0xc2>
 8004d1a:	f108 0801 	add.w	r8, r8, #1
 8004d1e:	e7e2      	b.n	8004ce6 <_printf_float+0x40a>
 8004d20:	2301      	movs	r3, #1
 8004d22:	4642      	mov	r2, r8
 8004d24:	e7eb      	b.n	8004cfe <_printf_float+0x422>
 8004d26:	2301      	movs	r3, #1
 8004d28:	464a      	mov	r2, r9
 8004d2a:	4631      	mov	r1, r6
 8004d2c:	4628      	mov	r0, r5
 8004d2e:	47b8      	blx	r7
 8004d30:	3001      	adds	r0, #1
 8004d32:	f43f ae34 	beq.w	800499e <_printf_float+0xc2>
 8004d36:	f108 0801 	add.w	r8, r8, #1
 8004d3a:	e700      	b.n	8004b3e <_printf_float+0x262>
 8004d3c:	4642      	mov	r2, r8
 8004d3e:	464b      	mov	r3, r9
 8004d40:	4640      	mov	r0, r8
 8004d42:	4649      	mov	r1, r9
 8004d44:	f7fb ff0e 	bl	8000b64 <__aeabi_dcmpun>
 8004d48:	2800      	cmp	r0, #0
 8004d4a:	f43f ae2d 	beq.w	80049a8 <_printf_float+0xcc>
 8004d4e:	4b01      	ldr	r3, [pc, #4]	; (8004d54 <_printf_float+0x478>)
 8004d50:	4a01      	ldr	r2, [pc, #4]	; (8004d58 <_printf_float+0x47c>)
 8004d52:	e60e      	b.n	8004972 <_printf_float+0x96>
 8004d54:	080077d2 	.word	0x080077d2
 8004d58:	080077d6 	.word	0x080077d6

08004d5c <_printf_common>:
 8004d5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d60:	4691      	mov	r9, r2
 8004d62:	461f      	mov	r7, r3
 8004d64:	688a      	ldr	r2, [r1, #8]
 8004d66:	690b      	ldr	r3, [r1, #16]
 8004d68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	bfb8      	it	lt
 8004d70:	4613      	movlt	r3, r2
 8004d72:	f8c9 3000 	str.w	r3, [r9]
 8004d76:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d7a:	4606      	mov	r6, r0
 8004d7c:	460c      	mov	r4, r1
 8004d7e:	b112      	cbz	r2, 8004d86 <_printf_common+0x2a>
 8004d80:	3301      	adds	r3, #1
 8004d82:	f8c9 3000 	str.w	r3, [r9]
 8004d86:	6823      	ldr	r3, [r4, #0]
 8004d88:	0699      	lsls	r1, r3, #26
 8004d8a:	bf42      	ittt	mi
 8004d8c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004d90:	3302      	addmi	r3, #2
 8004d92:	f8c9 3000 	strmi.w	r3, [r9]
 8004d96:	6825      	ldr	r5, [r4, #0]
 8004d98:	f015 0506 	ands.w	r5, r5, #6
 8004d9c:	d107      	bne.n	8004dae <_printf_common+0x52>
 8004d9e:	f104 0a19 	add.w	sl, r4, #25
 8004da2:	68e3      	ldr	r3, [r4, #12]
 8004da4:	f8d9 2000 	ldr.w	r2, [r9]
 8004da8:	1a9b      	subs	r3, r3, r2
 8004daa:	429d      	cmp	r5, r3
 8004dac:	db29      	blt.n	8004e02 <_printf_common+0xa6>
 8004dae:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004db2:	6822      	ldr	r2, [r4, #0]
 8004db4:	3300      	adds	r3, #0
 8004db6:	bf18      	it	ne
 8004db8:	2301      	movne	r3, #1
 8004dba:	0692      	lsls	r2, r2, #26
 8004dbc:	d42e      	bmi.n	8004e1c <_printf_common+0xc0>
 8004dbe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004dc2:	4639      	mov	r1, r7
 8004dc4:	4630      	mov	r0, r6
 8004dc6:	47c0      	blx	r8
 8004dc8:	3001      	adds	r0, #1
 8004dca:	d021      	beq.n	8004e10 <_printf_common+0xb4>
 8004dcc:	6823      	ldr	r3, [r4, #0]
 8004dce:	68e5      	ldr	r5, [r4, #12]
 8004dd0:	f8d9 2000 	ldr.w	r2, [r9]
 8004dd4:	f003 0306 	and.w	r3, r3, #6
 8004dd8:	2b04      	cmp	r3, #4
 8004dda:	bf08      	it	eq
 8004ddc:	1aad      	subeq	r5, r5, r2
 8004dde:	68a3      	ldr	r3, [r4, #8]
 8004de0:	6922      	ldr	r2, [r4, #16]
 8004de2:	bf0c      	ite	eq
 8004de4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004de8:	2500      	movne	r5, #0
 8004dea:	4293      	cmp	r3, r2
 8004dec:	bfc4      	itt	gt
 8004dee:	1a9b      	subgt	r3, r3, r2
 8004df0:	18ed      	addgt	r5, r5, r3
 8004df2:	f04f 0900 	mov.w	r9, #0
 8004df6:	341a      	adds	r4, #26
 8004df8:	454d      	cmp	r5, r9
 8004dfa:	d11b      	bne.n	8004e34 <_printf_common+0xd8>
 8004dfc:	2000      	movs	r0, #0
 8004dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e02:	2301      	movs	r3, #1
 8004e04:	4652      	mov	r2, sl
 8004e06:	4639      	mov	r1, r7
 8004e08:	4630      	mov	r0, r6
 8004e0a:	47c0      	blx	r8
 8004e0c:	3001      	adds	r0, #1
 8004e0e:	d103      	bne.n	8004e18 <_printf_common+0xbc>
 8004e10:	f04f 30ff 	mov.w	r0, #4294967295
 8004e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e18:	3501      	adds	r5, #1
 8004e1a:	e7c2      	b.n	8004da2 <_printf_common+0x46>
 8004e1c:	18e1      	adds	r1, r4, r3
 8004e1e:	1c5a      	adds	r2, r3, #1
 8004e20:	2030      	movs	r0, #48	; 0x30
 8004e22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004e26:	4422      	add	r2, r4
 8004e28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004e2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004e30:	3302      	adds	r3, #2
 8004e32:	e7c4      	b.n	8004dbe <_printf_common+0x62>
 8004e34:	2301      	movs	r3, #1
 8004e36:	4622      	mov	r2, r4
 8004e38:	4639      	mov	r1, r7
 8004e3a:	4630      	mov	r0, r6
 8004e3c:	47c0      	blx	r8
 8004e3e:	3001      	adds	r0, #1
 8004e40:	d0e6      	beq.n	8004e10 <_printf_common+0xb4>
 8004e42:	f109 0901 	add.w	r9, r9, #1
 8004e46:	e7d7      	b.n	8004df8 <_printf_common+0x9c>

08004e48 <_printf_i>:
 8004e48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004e4c:	4617      	mov	r7, r2
 8004e4e:	7e0a      	ldrb	r2, [r1, #24]
 8004e50:	b085      	sub	sp, #20
 8004e52:	2a6e      	cmp	r2, #110	; 0x6e
 8004e54:	4698      	mov	r8, r3
 8004e56:	4606      	mov	r6, r0
 8004e58:	460c      	mov	r4, r1
 8004e5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004e5c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8004e60:	f000 80bc 	beq.w	8004fdc <_printf_i+0x194>
 8004e64:	d81a      	bhi.n	8004e9c <_printf_i+0x54>
 8004e66:	2a63      	cmp	r2, #99	; 0x63
 8004e68:	d02e      	beq.n	8004ec8 <_printf_i+0x80>
 8004e6a:	d80a      	bhi.n	8004e82 <_printf_i+0x3a>
 8004e6c:	2a00      	cmp	r2, #0
 8004e6e:	f000 80c8 	beq.w	8005002 <_printf_i+0x1ba>
 8004e72:	2a58      	cmp	r2, #88	; 0x58
 8004e74:	f000 808a 	beq.w	8004f8c <_printf_i+0x144>
 8004e78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e7c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8004e80:	e02a      	b.n	8004ed8 <_printf_i+0x90>
 8004e82:	2a64      	cmp	r2, #100	; 0x64
 8004e84:	d001      	beq.n	8004e8a <_printf_i+0x42>
 8004e86:	2a69      	cmp	r2, #105	; 0x69
 8004e88:	d1f6      	bne.n	8004e78 <_printf_i+0x30>
 8004e8a:	6821      	ldr	r1, [r4, #0]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8004e92:	d023      	beq.n	8004edc <_printf_i+0x94>
 8004e94:	1d11      	adds	r1, r2, #4
 8004e96:	6019      	str	r1, [r3, #0]
 8004e98:	6813      	ldr	r3, [r2, #0]
 8004e9a:	e027      	b.n	8004eec <_printf_i+0xa4>
 8004e9c:	2a73      	cmp	r2, #115	; 0x73
 8004e9e:	f000 80b4 	beq.w	800500a <_printf_i+0x1c2>
 8004ea2:	d808      	bhi.n	8004eb6 <_printf_i+0x6e>
 8004ea4:	2a6f      	cmp	r2, #111	; 0x6f
 8004ea6:	d02a      	beq.n	8004efe <_printf_i+0xb6>
 8004ea8:	2a70      	cmp	r2, #112	; 0x70
 8004eaa:	d1e5      	bne.n	8004e78 <_printf_i+0x30>
 8004eac:	680a      	ldr	r2, [r1, #0]
 8004eae:	f042 0220 	orr.w	r2, r2, #32
 8004eb2:	600a      	str	r2, [r1, #0]
 8004eb4:	e003      	b.n	8004ebe <_printf_i+0x76>
 8004eb6:	2a75      	cmp	r2, #117	; 0x75
 8004eb8:	d021      	beq.n	8004efe <_printf_i+0xb6>
 8004eba:	2a78      	cmp	r2, #120	; 0x78
 8004ebc:	d1dc      	bne.n	8004e78 <_printf_i+0x30>
 8004ebe:	2278      	movs	r2, #120	; 0x78
 8004ec0:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8004ec4:	496e      	ldr	r1, [pc, #440]	; (8005080 <_printf_i+0x238>)
 8004ec6:	e064      	b.n	8004f92 <_printf_i+0x14a>
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8004ece:	1d11      	adds	r1, r2, #4
 8004ed0:	6019      	str	r1, [r3, #0]
 8004ed2:	6813      	ldr	r3, [r2, #0]
 8004ed4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e0a3      	b.n	8005024 <_printf_i+0x1dc>
 8004edc:	f011 0f40 	tst.w	r1, #64	; 0x40
 8004ee0:	f102 0104 	add.w	r1, r2, #4
 8004ee4:	6019      	str	r1, [r3, #0]
 8004ee6:	d0d7      	beq.n	8004e98 <_printf_i+0x50>
 8004ee8:	f9b2 3000 	ldrsh.w	r3, [r2]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	da03      	bge.n	8004ef8 <_printf_i+0xb0>
 8004ef0:	222d      	movs	r2, #45	; 0x2d
 8004ef2:	425b      	negs	r3, r3
 8004ef4:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004ef8:	4962      	ldr	r1, [pc, #392]	; (8005084 <_printf_i+0x23c>)
 8004efa:	220a      	movs	r2, #10
 8004efc:	e017      	b.n	8004f2e <_printf_i+0xe6>
 8004efe:	6820      	ldr	r0, [r4, #0]
 8004f00:	6819      	ldr	r1, [r3, #0]
 8004f02:	f010 0f80 	tst.w	r0, #128	; 0x80
 8004f06:	d003      	beq.n	8004f10 <_printf_i+0xc8>
 8004f08:	1d08      	adds	r0, r1, #4
 8004f0a:	6018      	str	r0, [r3, #0]
 8004f0c:	680b      	ldr	r3, [r1, #0]
 8004f0e:	e006      	b.n	8004f1e <_printf_i+0xd6>
 8004f10:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004f14:	f101 0004 	add.w	r0, r1, #4
 8004f18:	6018      	str	r0, [r3, #0]
 8004f1a:	d0f7      	beq.n	8004f0c <_printf_i+0xc4>
 8004f1c:	880b      	ldrh	r3, [r1, #0]
 8004f1e:	4959      	ldr	r1, [pc, #356]	; (8005084 <_printf_i+0x23c>)
 8004f20:	2a6f      	cmp	r2, #111	; 0x6f
 8004f22:	bf14      	ite	ne
 8004f24:	220a      	movne	r2, #10
 8004f26:	2208      	moveq	r2, #8
 8004f28:	2000      	movs	r0, #0
 8004f2a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8004f2e:	6865      	ldr	r5, [r4, #4]
 8004f30:	60a5      	str	r5, [r4, #8]
 8004f32:	2d00      	cmp	r5, #0
 8004f34:	f2c0 809c 	blt.w	8005070 <_printf_i+0x228>
 8004f38:	6820      	ldr	r0, [r4, #0]
 8004f3a:	f020 0004 	bic.w	r0, r0, #4
 8004f3e:	6020      	str	r0, [r4, #0]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d13f      	bne.n	8004fc4 <_printf_i+0x17c>
 8004f44:	2d00      	cmp	r5, #0
 8004f46:	f040 8095 	bne.w	8005074 <_printf_i+0x22c>
 8004f4a:	4675      	mov	r5, lr
 8004f4c:	2a08      	cmp	r2, #8
 8004f4e:	d10b      	bne.n	8004f68 <_printf_i+0x120>
 8004f50:	6823      	ldr	r3, [r4, #0]
 8004f52:	07da      	lsls	r2, r3, #31
 8004f54:	d508      	bpl.n	8004f68 <_printf_i+0x120>
 8004f56:	6923      	ldr	r3, [r4, #16]
 8004f58:	6862      	ldr	r2, [r4, #4]
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	bfde      	ittt	le
 8004f5e:	2330      	movle	r3, #48	; 0x30
 8004f60:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004f64:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004f68:	ebae 0305 	sub.w	r3, lr, r5
 8004f6c:	6123      	str	r3, [r4, #16]
 8004f6e:	f8cd 8000 	str.w	r8, [sp]
 8004f72:	463b      	mov	r3, r7
 8004f74:	aa03      	add	r2, sp, #12
 8004f76:	4621      	mov	r1, r4
 8004f78:	4630      	mov	r0, r6
 8004f7a:	f7ff feef 	bl	8004d5c <_printf_common>
 8004f7e:	3001      	adds	r0, #1
 8004f80:	d155      	bne.n	800502e <_printf_i+0x1e6>
 8004f82:	f04f 30ff 	mov.w	r0, #4294967295
 8004f86:	b005      	add	sp, #20
 8004f88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004f8c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8004f90:	493c      	ldr	r1, [pc, #240]	; (8005084 <_printf_i+0x23c>)
 8004f92:	6822      	ldr	r2, [r4, #0]
 8004f94:	6818      	ldr	r0, [r3, #0]
 8004f96:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004f9a:	f100 0504 	add.w	r5, r0, #4
 8004f9e:	601d      	str	r5, [r3, #0]
 8004fa0:	d001      	beq.n	8004fa6 <_printf_i+0x15e>
 8004fa2:	6803      	ldr	r3, [r0, #0]
 8004fa4:	e002      	b.n	8004fac <_printf_i+0x164>
 8004fa6:	0655      	lsls	r5, r2, #25
 8004fa8:	d5fb      	bpl.n	8004fa2 <_printf_i+0x15a>
 8004faa:	8803      	ldrh	r3, [r0, #0]
 8004fac:	07d0      	lsls	r0, r2, #31
 8004fae:	bf44      	itt	mi
 8004fb0:	f042 0220 	orrmi.w	r2, r2, #32
 8004fb4:	6022      	strmi	r2, [r4, #0]
 8004fb6:	b91b      	cbnz	r3, 8004fc0 <_printf_i+0x178>
 8004fb8:	6822      	ldr	r2, [r4, #0]
 8004fba:	f022 0220 	bic.w	r2, r2, #32
 8004fbe:	6022      	str	r2, [r4, #0]
 8004fc0:	2210      	movs	r2, #16
 8004fc2:	e7b1      	b.n	8004f28 <_printf_i+0xe0>
 8004fc4:	4675      	mov	r5, lr
 8004fc6:	fbb3 f0f2 	udiv	r0, r3, r2
 8004fca:	fb02 3310 	mls	r3, r2, r0, r3
 8004fce:	5ccb      	ldrb	r3, [r1, r3]
 8004fd0:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	2800      	cmp	r0, #0
 8004fd8:	d1f5      	bne.n	8004fc6 <_printf_i+0x17e>
 8004fda:	e7b7      	b.n	8004f4c <_printf_i+0x104>
 8004fdc:	6808      	ldr	r0, [r1, #0]
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	6949      	ldr	r1, [r1, #20]
 8004fe2:	f010 0f80 	tst.w	r0, #128	; 0x80
 8004fe6:	d004      	beq.n	8004ff2 <_printf_i+0x1aa>
 8004fe8:	1d10      	adds	r0, r2, #4
 8004fea:	6018      	str	r0, [r3, #0]
 8004fec:	6813      	ldr	r3, [r2, #0]
 8004fee:	6019      	str	r1, [r3, #0]
 8004ff0:	e007      	b.n	8005002 <_printf_i+0x1ba>
 8004ff2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004ff6:	f102 0004 	add.w	r0, r2, #4
 8004ffa:	6018      	str	r0, [r3, #0]
 8004ffc:	6813      	ldr	r3, [r2, #0]
 8004ffe:	d0f6      	beq.n	8004fee <_printf_i+0x1a6>
 8005000:	8019      	strh	r1, [r3, #0]
 8005002:	2300      	movs	r3, #0
 8005004:	6123      	str	r3, [r4, #16]
 8005006:	4675      	mov	r5, lr
 8005008:	e7b1      	b.n	8004f6e <_printf_i+0x126>
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	1d11      	adds	r1, r2, #4
 800500e:	6019      	str	r1, [r3, #0]
 8005010:	6815      	ldr	r5, [r2, #0]
 8005012:	6862      	ldr	r2, [r4, #4]
 8005014:	2100      	movs	r1, #0
 8005016:	4628      	mov	r0, r5
 8005018:	f7fb f902 	bl	8000220 <memchr>
 800501c:	b108      	cbz	r0, 8005022 <_printf_i+0x1da>
 800501e:	1b40      	subs	r0, r0, r5
 8005020:	6060      	str	r0, [r4, #4]
 8005022:	6863      	ldr	r3, [r4, #4]
 8005024:	6123      	str	r3, [r4, #16]
 8005026:	2300      	movs	r3, #0
 8005028:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800502c:	e79f      	b.n	8004f6e <_printf_i+0x126>
 800502e:	6923      	ldr	r3, [r4, #16]
 8005030:	462a      	mov	r2, r5
 8005032:	4639      	mov	r1, r7
 8005034:	4630      	mov	r0, r6
 8005036:	47c0      	blx	r8
 8005038:	3001      	adds	r0, #1
 800503a:	d0a2      	beq.n	8004f82 <_printf_i+0x13a>
 800503c:	6823      	ldr	r3, [r4, #0]
 800503e:	079b      	lsls	r3, r3, #30
 8005040:	d507      	bpl.n	8005052 <_printf_i+0x20a>
 8005042:	2500      	movs	r5, #0
 8005044:	f104 0919 	add.w	r9, r4, #25
 8005048:	68e3      	ldr	r3, [r4, #12]
 800504a:	9a03      	ldr	r2, [sp, #12]
 800504c:	1a9b      	subs	r3, r3, r2
 800504e:	429d      	cmp	r5, r3
 8005050:	db05      	blt.n	800505e <_printf_i+0x216>
 8005052:	68e0      	ldr	r0, [r4, #12]
 8005054:	9b03      	ldr	r3, [sp, #12]
 8005056:	4298      	cmp	r0, r3
 8005058:	bfb8      	it	lt
 800505a:	4618      	movlt	r0, r3
 800505c:	e793      	b.n	8004f86 <_printf_i+0x13e>
 800505e:	2301      	movs	r3, #1
 8005060:	464a      	mov	r2, r9
 8005062:	4639      	mov	r1, r7
 8005064:	4630      	mov	r0, r6
 8005066:	47c0      	blx	r8
 8005068:	3001      	adds	r0, #1
 800506a:	d08a      	beq.n	8004f82 <_printf_i+0x13a>
 800506c:	3501      	adds	r5, #1
 800506e:	e7eb      	b.n	8005048 <_printf_i+0x200>
 8005070:	2b00      	cmp	r3, #0
 8005072:	d1a7      	bne.n	8004fc4 <_printf_i+0x17c>
 8005074:	780b      	ldrb	r3, [r1, #0]
 8005076:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800507a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800507e:	e765      	b.n	8004f4c <_printf_i+0x104>
 8005080:	080077ed 	.word	0x080077ed
 8005084:	080077dc 	.word	0x080077dc

08005088 <siprintf>:
 8005088:	b40e      	push	{r1, r2, r3}
 800508a:	b500      	push	{lr}
 800508c:	b09c      	sub	sp, #112	; 0x70
 800508e:	f44f 7102 	mov.w	r1, #520	; 0x208
 8005092:	ab1d      	add	r3, sp, #116	; 0x74
 8005094:	f8ad 1014 	strh.w	r1, [sp, #20]
 8005098:	9002      	str	r0, [sp, #8]
 800509a:	9006      	str	r0, [sp, #24]
 800509c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80050a0:	480a      	ldr	r0, [pc, #40]	; (80050cc <siprintf+0x44>)
 80050a2:	9104      	str	r1, [sp, #16]
 80050a4:	9107      	str	r1, [sp, #28]
 80050a6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80050aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80050ae:	f8ad 1016 	strh.w	r1, [sp, #22]
 80050b2:	6800      	ldr	r0, [r0, #0]
 80050b4:	9301      	str	r3, [sp, #4]
 80050b6:	a902      	add	r1, sp, #8
 80050b8:	f001 fb0e 	bl	80066d8 <_svfiprintf_r>
 80050bc:	9b02      	ldr	r3, [sp, #8]
 80050be:	2200      	movs	r2, #0
 80050c0:	701a      	strb	r2, [r3, #0]
 80050c2:	b01c      	add	sp, #112	; 0x70
 80050c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80050c8:	b003      	add	sp, #12
 80050ca:	4770      	bx	lr
 80050cc:	20000100 	.word	0x20000100

080050d0 <_strtol_l.isra.0>:
 80050d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050d4:	4680      	mov	r8, r0
 80050d6:	4689      	mov	r9, r1
 80050d8:	4692      	mov	sl, r2
 80050da:	461f      	mov	r7, r3
 80050dc:	468b      	mov	fp, r1
 80050de:	465d      	mov	r5, fp
 80050e0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80050e2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80050e6:	f000 fee5 	bl	8005eb4 <__locale_ctype_ptr_l>
 80050ea:	4420      	add	r0, r4
 80050ec:	7846      	ldrb	r6, [r0, #1]
 80050ee:	f016 0608 	ands.w	r6, r6, #8
 80050f2:	d10b      	bne.n	800510c <_strtol_l.isra.0+0x3c>
 80050f4:	2c2d      	cmp	r4, #45	; 0x2d
 80050f6:	d10b      	bne.n	8005110 <_strtol_l.isra.0+0x40>
 80050f8:	782c      	ldrb	r4, [r5, #0]
 80050fa:	2601      	movs	r6, #1
 80050fc:	f10b 0502 	add.w	r5, fp, #2
 8005100:	b167      	cbz	r7, 800511c <_strtol_l.isra.0+0x4c>
 8005102:	2f10      	cmp	r7, #16
 8005104:	d114      	bne.n	8005130 <_strtol_l.isra.0+0x60>
 8005106:	2c30      	cmp	r4, #48	; 0x30
 8005108:	d00a      	beq.n	8005120 <_strtol_l.isra.0+0x50>
 800510a:	e011      	b.n	8005130 <_strtol_l.isra.0+0x60>
 800510c:	46ab      	mov	fp, r5
 800510e:	e7e6      	b.n	80050de <_strtol_l.isra.0+0xe>
 8005110:	2c2b      	cmp	r4, #43	; 0x2b
 8005112:	bf04      	itt	eq
 8005114:	782c      	ldrbeq	r4, [r5, #0]
 8005116:	f10b 0502 	addeq.w	r5, fp, #2
 800511a:	e7f1      	b.n	8005100 <_strtol_l.isra.0+0x30>
 800511c:	2c30      	cmp	r4, #48	; 0x30
 800511e:	d127      	bne.n	8005170 <_strtol_l.isra.0+0xa0>
 8005120:	782b      	ldrb	r3, [r5, #0]
 8005122:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005126:	2b58      	cmp	r3, #88	; 0x58
 8005128:	d14b      	bne.n	80051c2 <_strtol_l.isra.0+0xf2>
 800512a:	786c      	ldrb	r4, [r5, #1]
 800512c:	2710      	movs	r7, #16
 800512e:	3502      	adds	r5, #2
 8005130:	2e00      	cmp	r6, #0
 8005132:	bf0c      	ite	eq
 8005134:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8005138:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800513c:	2200      	movs	r2, #0
 800513e:	fbb1 fef7 	udiv	lr, r1, r7
 8005142:	4610      	mov	r0, r2
 8005144:	fb07 1c1e 	mls	ip, r7, lr, r1
 8005148:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800514c:	2b09      	cmp	r3, #9
 800514e:	d811      	bhi.n	8005174 <_strtol_l.isra.0+0xa4>
 8005150:	461c      	mov	r4, r3
 8005152:	42a7      	cmp	r7, r4
 8005154:	dd1d      	ble.n	8005192 <_strtol_l.isra.0+0xc2>
 8005156:	1c53      	adds	r3, r2, #1
 8005158:	d007      	beq.n	800516a <_strtol_l.isra.0+0x9a>
 800515a:	4586      	cmp	lr, r0
 800515c:	d316      	bcc.n	800518c <_strtol_l.isra.0+0xbc>
 800515e:	d101      	bne.n	8005164 <_strtol_l.isra.0+0x94>
 8005160:	45a4      	cmp	ip, r4
 8005162:	db13      	blt.n	800518c <_strtol_l.isra.0+0xbc>
 8005164:	fb00 4007 	mla	r0, r0, r7, r4
 8005168:	2201      	movs	r2, #1
 800516a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800516e:	e7eb      	b.n	8005148 <_strtol_l.isra.0+0x78>
 8005170:	270a      	movs	r7, #10
 8005172:	e7dd      	b.n	8005130 <_strtol_l.isra.0+0x60>
 8005174:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8005178:	2b19      	cmp	r3, #25
 800517a:	d801      	bhi.n	8005180 <_strtol_l.isra.0+0xb0>
 800517c:	3c37      	subs	r4, #55	; 0x37
 800517e:	e7e8      	b.n	8005152 <_strtol_l.isra.0+0x82>
 8005180:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8005184:	2b19      	cmp	r3, #25
 8005186:	d804      	bhi.n	8005192 <_strtol_l.isra.0+0xc2>
 8005188:	3c57      	subs	r4, #87	; 0x57
 800518a:	e7e2      	b.n	8005152 <_strtol_l.isra.0+0x82>
 800518c:	f04f 32ff 	mov.w	r2, #4294967295
 8005190:	e7eb      	b.n	800516a <_strtol_l.isra.0+0x9a>
 8005192:	1c53      	adds	r3, r2, #1
 8005194:	d108      	bne.n	80051a8 <_strtol_l.isra.0+0xd8>
 8005196:	2322      	movs	r3, #34	; 0x22
 8005198:	f8c8 3000 	str.w	r3, [r8]
 800519c:	4608      	mov	r0, r1
 800519e:	f1ba 0f00 	cmp.w	sl, #0
 80051a2:	d107      	bne.n	80051b4 <_strtol_l.isra.0+0xe4>
 80051a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051a8:	b106      	cbz	r6, 80051ac <_strtol_l.isra.0+0xdc>
 80051aa:	4240      	negs	r0, r0
 80051ac:	f1ba 0f00 	cmp.w	sl, #0
 80051b0:	d00c      	beq.n	80051cc <_strtol_l.isra.0+0xfc>
 80051b2:	b122      	cbz	r2, 80051be <_strtol_l.isra.0+0xee>
 80051b4:	3d01      	subs	r5, #1
 80051b6:	f8ca 5000 	str.w	r5, [sl]
 80051ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051be:	464d      	mov	r5, r9
 80051c0:	e7f9      	b.n	80051b6 <_strtol_l.isra.0+0xe6>
 80051c2:	2430      	movs	r4, #48	; 0x30
 80051c4:	2f00      	cmp	r7, #0
 80051c6:	d1b3      	bne.n	8005130 <_strtol_l.isra.0+0x60>
 80051c8:	2708      	movs	r7, #8
 80051ca:	e7b1      	b.n	8005130 <_strtol_l.isra.0+0x60>
 80051cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080051d0 <strtol>:
 80051d0:	4b08      	ldr	r3, [pc, #32]	; (80051f4 <strtol+0x24>)
 80051d2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80051d4:	681c      	ldr	r4, [r3, #0]
 80051d6:	4d08      	ldr	r5, [pc, #32]	; (80051f8 <strtol+0x28>)
 80051d8:	6a23      	ldr	r3, [r4, #32]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	bf08      	it	eq
 80051de:	462b      	moveq	r3, r5
 80051e0:	9300      	str	r3, [sp, #0]
 80051e2:	4613      	mov	r3, r2
 80051e4:	460a      	mov	r2, r1
 80051e6:	4601      	mov	r1, r0
 80051e8:	4620      	mov	r0, r4
 80051ea:	f7ff ff71 	bl	80050d0 <_strtol_l.isra.0>
 80051ee:	b003      	add	sp, #12
 80051f0:	bd30      	pop	{r4, r5, pc}
 80051f2:	bf00      	nop
 80051f4:	20000100 	.word	0x20000100
 80051f8:	20000164 	.word	0x20000164

080051fc <quorem>:
 80051fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005200:	6903      	ldr	r3, [r0, #16]
 8005202:	690c      	ldr	r4, [r1, #16]
 8005204:	429c      	cmp	r4, r3
 8005206:	4680      	mov	r8, r0
 8005208:	f300 8082 	bgt.w	8005310 <quorem+0x114>
 800520c:	3c01      	subs	r4, #1
 800520e:	f101 0714 	add.w	r7, r1, #20
 8005212:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8005216:	f100 0614 	add.w	r6, r0, #20
 800521a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800521e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8005222:	eb06 030e 	add.w	r3, r6, lr
 8005226:	3501      	adds	r5, #1
 8005228:	eb07 090e 	add.w	r9, r7, lr
 800522c:	9301      	str	r3, [sp, #4]
 800522e:	fbb0 f5f5 	udiv	r5, r0, r5
 8005232:	b395      	cbz	r5, 800529a <quorem+0x9e>
 8005234:	f04f 0a00 	mov.w	sl, #0
 8005238:	4638      	mov	r0, r7
 800523a:	46b4      	mov	ip, r6
 800523c:	46d3      	mov	fp, sl
 800523e:	f850 2b04 	ldr.w	r2, [r0], #4
 8005242:	b293      	uxth	r3, r2
 8005244:	fb05 a303 	mla	r3, r5, r3, sl
 8005248:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800524c:	b29b      	uxth	r3, r3
 800524e:	ebab 0303 	sub.w	r3, fp, r3
 8005252:	0c12      	lsrs	r2, r2, #16
 8005254:	f8bc b000 	ldrh.w	fp, [ip]
 8005258:	fb05 a202 	mla	r2, r5, r2, sl
 800525c:	fa13 f38b 	uxtah	r3, r3, fp
 8005260:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005264:	fa1f fb82 	uxth.w	fp, r2
 8005268:	f8dc 2000 	ldr.w	r2, [ip]
 800526c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005270:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005274:	b29b      	uxth	r3, r3
 8005276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800527a:	4581      	cmp	r9, r0
 800527c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8005280:	f84c 3b04 	str.w	r3, [ip], #4
 8005284:	d2db      	bcs.n	800523e <quorem+0x42>
 8005286:	f856 300e 	ldr.w	r3, [r6, lr]
 800528a:	b933      	cbnz	r3, 800529a <quorem+0x9e>
 800528c:	9b01      	ldr	r3, [sp, #4]
 800528e:	3b04      	subs	r3, #4
 8005290:	429e      	cmp	r6, r3
 8005292:	461a      	mov	r2, r3
 8005294:	d330      	bcc.n	80052f8 <quorem+0xfc>
 8005296:	f8c8 4010 	str.w	r4, [r8, #16]
 800529a:	4640      	mov	r0, r8
 800529c:	f001 f83f 	bl	800631e <__mcmp>
 80052a0:	2800      	cmp	r0, #0
 80052a2:	db25      	blt.n	80052f0 <quorem+0xf4>
 80052a4:	3501      	adds	r5, #1
 80052a6:	4630      	mov	r0, r6
 80052a8:	f04f 0e00 	mov.w	lr, #0
 80052ac:	f857 2b04 	ldr.w	r2, [r7], #4
 80052b0:	f8d0 c000 	ldr.w	ip, [r0]
 80052b4:	b293      	uxth	r3, r2
 80052b6:	ebae 0303 	sub.w	r3, lr, r3
 80052ba:	0c12      	lsrs	r2, r2, #16
 80052bc:	fa13 f38c 	uxtah	r3, r3, ip
 80052c0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80052c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80052ce:	45b9      	cmp	r9, r7
 80052d0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80052d4:	f840 3b04 	str.w	r3, [r0], #4
 80052d8:	d2e8      	bcs.n	80052ac <quorem+0xb0>
 80052da:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80052de:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80052e2:	b92a      	cbnz	r2, 80052f0 <quorem+0xf4>
 80052e4:	3b04      	subs	r3, #4
 80052e6:	429e      	cmp	r6, r3
 80052e8:	461a      	mov	r2, r3
 80052ea:	d30b      	bcc.n	8005304 <quorem+0x108>
 80052ec:	f8c8 4010 	str.w	r4, [r8, #16]
 80052f0:	4628      	mov	r0, r5
 80052f2:	b003      	add	sp, #12
 80052f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052f8:	6812      	ldr	r2, [r2, #0]
 80052fa:	3b04      	subs	r3, #4
 80052fc:	2a00      	cmp	r2, #0
 80052fe:	d1ca      	bne.n	8005296 <quorem+0x9a>
 8005300:	3c01      	subs	r4, #1
 8005302:	e7c5      	b.n	8005290 <quorem+0x94>
 8005304:	6812      	ldr	r2, [r2, #0]
 8005306:	3b04      	subs	r3, #4
 8005308:	2a00      	cmp	r2, #0
 800530a:	d1ef      	bne.n	80052ec <quorem+0xf0>
 800530c:	3c01      	subs	r4, #1
 800530e:	e7ea      	b.n	80052e6 <quorem+0xea>
 8005310:	2000      	movs	r0, #0
 8005312:	e7ee      	b.n	80052f2 <quorem+0xf6>
 8005314:	0000      	movs	r0, r0
	...

08005318 <_dtoa_r>:
 8005318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800531c:	ec57 6b10 	vmov	r6, r7, d0
 8005320:	b097      	sub	sp, #92	; 0x5c
 8005322:	e9cd 6700 	strd	r6, r7, [sp]
 8005326:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005328:	9107      	str	r1, [sp, #28]
 800532a:	4604      	mov	r4, r0
 800532c:	920a      	str	r2, [sp, #40]	; 0x28
 800532e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005330:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8005332:	b93e      	cbnz	r6, 8005344 <_dtoa_r+0x2c>
 8005334:	2010      	movs	r0, #16
 8005336:	f000 fdcf 	bl	8005ed8 <malloc>
 800533a:	6260      	str	r0, [r4, #36]	; 0x24
 800533c:	6046      	str	r6, [r0, #4]
 800533e:	6086      	str	r6, [r0, #8]
 8005340:	6006      	str	r6, [r0, #0]
 8005342:	60c6      	str	r6, [r0, #12]
 8005344:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005346:	6819      	ldr	r1, [r3, #0]
 8005348:	b151      	cbz	r1, 8005360 <_dtoa_r+0x48>
 800534a:	685a      	ldr	r2, [r3, #4]
 800534c:	604a      	str	r2, [r1, #4]
 800534e:	2301      	movs	r3, #1
 8005350:	4093      	lsls	r3, r2
 8005352:	608b      	str	r3, [r1, #8]
 8005354:	4620      	mov	r0, r4
 8005356:	f000 fe0d 	bl	8005f74 <_Bfree>
 800535a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800535c:	2200      	movs	r2, #0
 800535e:	601a      	str	r2, [r3, #0]
 8005360:	9b01      	ldr	r3, [sp, #4]
 8005362:	2b00      	cmp	r3, #0
 8005364:	bfbf      	itttt	lt
 8005366:	2301      	movlt	r3, #1
 8005368:	602b      	strlt	r3, [r5, #0]
 800536a:	9b01      	ldrlt	r3, [sp, #4]
 800536c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005370:	bfb2      	itee	lt
 8005372:	9301      	strlt	r3, [sp, #4]
 8005374:	2300      	movge	r3, #0
 8005376:	602b      	strge	r3, [r5, #0]
 8005378:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800537c:	4ba8      	ldr	r3, [pc, #672]	; (8005620 <_dtoa_r+0x308>)
 800537e:	ea33 0308 	bics.w	r3, r3, r8
 8005382:	d11b      	bne.n	80053bc <_dtoa_r+0xa4>
 8005384:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005386:	f242 730f 	movw	r3, #9999	; 0x270f
 800538a:	6013      	str	r3, [r2, #0]
 800538c:	9b00      	ldr	r3, [sp, #0]
 800538e:	b923      	cbnz	r3, 800539a <_dtoa_r+0x82>
 8005390:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8005394:	2800      	cmp	r0, #0
 8005396:	f000 8578 	beq.w	8005e8a <_dtoa_r+0xb72>
 800539a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800539c:	b953      	cbnz	r3, 80053b4 <_dtoa_r+0x9c>
 800539e:	4ba1      	ldr	r3, [pc, #644]	; (8005624 <_dtoa_r+0x30c>)
 80053a0:	e021      	b.n	80053e6 <_dtoa_r+0xce>
 80053a2:	4ba1      	ldr	r3, [pc, #644]	; (8005628 <_dtoa_r+0x310>)
 80053a4:	9302      	str	r3, [sp, #8]
 80053a6:	3308      	adds	r3, #8
 80053a8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80053aa:	6013      	str	r3, [r2, #0]
 80053ac:	9802      	ldr	r0, [sp, #8]
 80053ae:	b017      	add	sp, #92	; 0x5c
 80053b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053b4:	4b9b      	ldr	r3, [pc, #620]	; (8005624 <_dtoa_r+0x30c>)
 80053b6:	9302      	str	r3, [sp, #8]
 80053b8:	3303      	adds	r3, #3
 80053ba:	e7f5      	b.n	80053a8 <_dtoa_r+0x90>
 80053bc:	e9dd 6700 	ldrd	r6, r7, [sp]
 80053c0:	2200      	movs	r2, #0
 80053c2:	2300      	movs	r3, #0
 80053c4:	4630      	mov	r0, r6
 80053c6:	4639      	mov	r1, r7
 80053c8:	f7fb fb9a 	bl	8000b00 <__aeabi_dcmpeq>
 80053cc:	4681      	mov	r9, r0
 80053ce:	b160      	cbz	r0, 80053ea <_dtoa_r+0xd2>
 80053d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80053d2:	2301      	movs	r3, #1
 80053d4:	6013      	str	r3, [r2, #0]
 80053d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80053d8:	2b00      	cmp	r3, #0
 80053da:	f000 8553 	beq.w	8005e84 <_dtoa_r+0xb6c>
 80053de:	4b93      	ldr	r3, [pc, #588]	; (800562c <_dtoa_r+0x314>)
 80053e0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80053e2:	6013      	str	r3, [r2, #0]
 80053e4:	3b01      	subs	r3, #1
 80053e6:	9302      	str	r3, [sp, #8]
 80053e8:	e7e0      	b.n	80053ac <_dtoa_r+0x94>
 80053ea:	aa14      	add	r2, sp, #80	; 0x50
 80053ec:	a915      	add	r1, sp, #84	; 0x54
 80053ee:	ec47 6b10 	vmov	d0, r6, r7
 80053f2:	4620      	mov	r0, r4
 80053f4:	f001 f80b 	bl	800640e <__d2b>
 80053f8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80053fc:	4682      	mov	sl, r0
 80053fe:	2d00      	cmp	r5, #0
 8005400:	d07e      	beq.n	8005500 <_dtoa_r+0x1e8>
 8005402:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005406:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800540a:	4630      	mov	r0, r6
 800540c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005410:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005414:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 8005418:	2200      	movs	r2, #0
 800541a:	4b85      	ldr	r3, [pc, #532]	; (8005630 <_dtoa_r+0x318>)
 800541c:	f7fa ff54 	bl	80002c8 <__aeabi_dsub>
 8005420:	a379      	add	r3, pc, #484	; (adr r3, 8005608 <_dtoa_r+0x2f0>)
 8005422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005426:	f7fb f903 	bl	8000630 <__aeabi_dmul>
 800542a:	a379      	add	r3, pc, #484	; (adr r3, 8005610 <_dtoa_r+0x2f8>)
 800542c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005430:	f7fa ff4c 	bl	80002cc <__adddf3>
 8005434:	4606      	mov	r6, r0
 8005436:	4628      	mov	r0, r5
 8005438:	460f      	mov	r7, r1
 800543a:	f7fb f893 	bl	8000564 <__aeabi_i2d>
 800543e:	a376      	add	r3, pc, #472	; (adr r3, 8005618 <_dtoa_r+0x300>)
 8005440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005444:	f7fb f8f4 	bl	8000630 <__aeabi_dmul>
 8005448:	4602      	mov	r2, r0
 800544a:	460b      	mov	r3, r1
 800544c:	4630      	mov	r0, r6
 800544e:	4639      	mov	r1, r7
 8005450:	f7fa ff3c 	bl	80002cc <__adddf3>
 8005454:	4606      	mov	r6, r0
 8005456:	460f      	mov	r7, r1
 8005458:	f7fb fb9a 	bl	8000b90 <__aeabi_d2iz>
 800545c:	2200      	movs	r2, #0
 800545e:	4683      	mov	fp, r0
 8005460:	2300      	movs	r3, #0
 8005462:	4630      	mov	r0, r6
 8005464:	4639      	mov	r1, r7
 8005466:	f7fb fb55 	bl	8000b14 <__aeabi_dcmplt>
 800546a:	b158      	cbz	r0, 8005484 <_dtoa_r+0x16c>
 800546c:	4658      	mov	r0, fp
 800546e:	f7fb f879 	bl	8000564 <__aeabi_i2d>
 8005472:	4602      	mov	r2, r0
 8005474:	460b      	mov	r3, r1
 8005476:	4630      	mov	r0, r6
 8005478:	4639      	mov	r1, r7
 800547a:	f7fb fb41 	bl	8000b00 <__aeabi_dcmpeq>
 800547e:	b908      	cbnz	r0, 8005484 <_dtoa_r+0x16c>
 8005480:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005484:	f1bb 0f16 	cmp.w	fp, #22
 8005488:	d859      	bhi.n	800553e <_dtoa_r+0x226>
 800548a:	496a      	ldr	r1, [pc, #424]	; (8005634 <_dtoa_r+0x31c>)
 800548c:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8005490:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005494:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005498:	f7fb fb5a 	bl	8000b50 <__aeabi_dcmpgt>
 800549c:	2800      	cmp	r0, #0
 800549e:	d050      	beq.n	8005542 <_dtoa_r+0x22a>
 80054a0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80054a4:	2300      	movs	r3, #0
 80054a6:	930e      	str	r3, [sp, #56]	; 0x38
 80054a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80054aa:	1b5d      	subs	r5, r3, r5
 80054ac:	1e6b      	subs	r3, r5, #1
 80054ae:	9306      	str	r3, [sp, #24]
 80054b0:	bf45      	ittet	mi
 80054b2:	f1c5 0301 	rsbmi	r3, r5, #1
 80054b6:	9305      	strmi	r3, [sp, #20]
 80054b8:	2300      	movpl	r3, #0
 80054ba:	2300      	movmi	r3, #0
 80054bc:	bf4c      	ite	mi
 80054be:	9306      	strmi	r3, [sp, #24]
 80054c0:	9305      	strpl	r3, [sp, #20]
 80054c2:	f1bb 0f00 	cmp.w	fp, #0
 80054c6:	db3e      	blt.n	8005546 <_dtoa_r+0x22e>
 80054c8:	9b06      	ldr	r3, [sp, #24]
 80054ca:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80054ce:	445b      	add	r3, fp
 80054d0:	9306      	str	r3, [sp, #24]
 80054d2:	2300      	movs	r3, #0
 80054d4:	9308      	str	r3, [sp, #32]
 80054d6:	9b07      	ldr	r3, [sp, #28]
 80054d8:	2b09      	cmp	r3, #9
 80054da:	f200 80af 	bhi.w	800563c <_dtoa_r+0x324>
 80054de:	2b05      	cmp	r3, #5
 80054e0:	bfc4      	itt	gt
 80054e2:	3b04      	subgt	r3, #4
 80054e4:	9307      	strgt	r3, [sp, #28]
 80054e6:	9b07      	ldr	r3, [sp, #28]
 80054e8:	f1a3 0302 	sub.w	r3, r3, #2
 80054ec:	bfcc      	ite	gt
 80054ee:	2600      	movgt	r6, #0
 80054f0:	2601      	movle	r6, #1
 80054f2:	2b03      	cmp	r3, #3
 80054f4:	f200 80ae 	bhi.w	8005654 <_dtoa_r+0x33c>
 80054f8:	e8df f003 	tbb	[pc, r3]
 80054fc:	772f8482 	.word	0x772f8482
 8005500:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005502:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8005504:	441d      	add	r5, r3
 8005506:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800550a:	2b20      	cmp	r3, #32
 800550c:	dd11      	ble.n	8005532 <_dtoa_r+0x21a>
 800550e:	9a00      	ldr	r2, [sp, #0]
 8005510:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8005514:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8005518:	fa22 f000 	lsr.w	r0, r2, r0
 800551c:	fa08 f303 	lsl.w	r3, r8, r3
 8005520:	4318      	orrs	r0, r3
 8005522:	f7fb f80f 	bl	8000544 <__aeabi_ui2d>
 8005526:	2301      	movs	r3, #1
 8005528:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800552c:	3d01      	subs	r5, #1
 800552e:	9312      	str	r3, [sp, #72]	; 0x48
 8005530:	e772      	b.n	8005418 <_dtoa_r+0x100>
 8005532:	f1c3 0020 	rsb	r0, r3, #32
 8005536:	9b00      	ldr	r3, [sp, #0]
 8005538:	fa03 f000 	lsl.w	r0, r3, r0
 800553c:	e7f1      	b.n	8005522 <_dtoa_r+0x20a>
 800553e:	2301      	movs	r3, #1
 8005540:	e7b1      	b.n	80054a6 <_dtoa_r+0x18e>
 8005542:	900e      	str	r0, [sp, #56]	; 0x38
 8005544:	e7b0      	b.n	80054a8 <_dtoa_r+0x190>
 8005546:	9b05      	ldr	r3, [sp, #20]
 8005548:	eba3 030b 	sub.w	r3, r3, fp
 800554c:	9305      	str	r3, [sp, #20]
 800554e:	f1cb 0300 	rsb	r3, fp, #0
 8005552:	9308      	str	r3, [sp, #32]
 8005554:	2300      	movs	r3, #0
 8005556:	930b      	str	r3, [sp, #44]	; 0x2c
 8005558:	e7bd      	b.n	80054d6 <_dtoa_r+0x1be>
 800555a:	2301      	movs	r3, #1
 800555c:	9309      	str	r3, [sp, #36]	; 0x24
 800555e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005560:	2b00      	cmp	r3, #0
 8005562:	dd7a      	ble.n	800565a <_dtoa_r+0x342>
 8005564:	9304      	str	r3, [sp, #16]
 8005566:	9303      	str	r3, [sp, #12]
 8005568:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800556a:	2200      	movs	r2, #0
 800556c:	606a      	str	r2, [r5, #4]
 800556e:	2104      	movs	r1, #4
 8005570:	f101 0214 	add.w	r2, r1, #20
 8005574:	429a      	cmp	r2, r3
 8005576:	d975      	bls.n	8005664 <_dtoa_r+0x34c>
 8005578:	6869      	ldr	r1, [r5, #4]
 800557a:	4620      	mov	r0, r4
 800557c:	f000 fcc6 	bl	8005f0c <_Balloc>
 8005580:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005582:	6028      	str	r0, [r5, #0]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	9302      	str	r3, [sp, #8]
 8005588:	9b03      	ldr	r3, [sp, #12]
 800558a:	2b0e      	cmp	r3, #14
 800558c:	f200 80e5 	bhi.w	800575a <_dtoa_r+0x442>
 8005590:	2e00      	cmp	r6, #0
 8005592:	f000 80e2 	beq.w	800575a <_dtoa_r+0x442>
 8005596:	ed9d 7b00 	vldr	d7, [sp]
 800559a:	f1bb 0f00 	cmp.w	fp, #0
 800559e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80055a2:	dd74      	ble.n	800568e <_dtoa_r+0x376>
 80055a4:	4a23      	ldr	r2, [pc, #140]	; (8005634 <_dtoa_r+0x31c>)
 80055a6:	f00b 030f 	and.w	r3, fp, #15
 80055aa:	ea4f 162b 	mov.w	r6, fp, asr #4
 80055ae:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80055b2:	06f0      	lsls	r0, r6, #27
 80055b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80055b8:	d559      	bpl.n	800566e <_dtoa_r+0x356>
 80055ba:	4b1f      	ldr	r3, [pc, #124]	; (8005638 <_dtoa_r+0x320>)
 80055bc:	ec51 0b17 	vmov	r0, r1, d7
 80055c0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80055c4:	f7fb f95e 	bl	8000884 <__aeabi_ddiv>
 80055c8:	e9cd 0100 	strd	r0, r1, [sp]
 80055cc:	f006 060f 	and.w	r6, r6, #15
 80055d0:	2503      	movs	r5, #3
 80055d2:	4f19      	ldr	r7, [pc, #100]	; (8005638 <_dtoa_r+0x320>)
 80055d4:	2e00      	cmp	r6, #0
 80055d6:	d14c      	bne.n	8005672 <_dtoa_r+0x35a>
 80055d8:	4642      	mov	r2, r8
 80055da:	464b      	mov	r3, r9
 80055dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80055e0:	f7fb f950 	bl	8000884 <__aeabi_ddiv>
 80055e4:	e9cd 0100 	strd	r0, r1, [sp]
 80055e8:	e06a      	b.n	80056c0 <_dtoa_r+0x3a8>
 80055ea:	2301      	movs	r3, #1
 80055ec:	9309      	str	r3, [sp, #36]	; 0x24
 80055ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055f0:	445b      	add	r3, fp
 80055f2:	9304      	str	r3, [sp, #16]
 80055f4:	3301      	adds	r3, #1
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	9303      	str	r3, [sp, #12]
 80055fa:	bfb8      	it	lt
 80055fc:	2301      	movlt	r3, #1
 80055fe:	e7b3      	b.n	8005568 <_dtoa_r+0x250>
 8005600:	2300      	movs	r3, #0
 8005602:	e7ab      	b.n	800555c <_dtoa_r+0x244>
 8005604:	2300      	movs	r3, #0
 8005606:	e7f1      	b.n	80055ec <_dtoa_r+0x2d4>
 8005608:	636f4361 	.word	0x636f4361
 800560c:	3fd287a7 	.word	0x3fd287a7
 8005610:	8b60c8b3 	.word	0x8b60c8b3
 8005614:	3fc68a28 	.word	0x3fc68a28
 8005618:	509f79fb 	.word	0x509f79fb
 800561c:	3fd34413 	.word	0x3fd34413
 8005620:	7ff00000 	.word	0x7ff00000
 8005624:	08007807 	.word	0x08007807
 8005628:	080077fe 	.word	0x080077fe
 800562c:	080077db 	.word	0x080077db
 8005630:	3ff80000 	.word	0x3ff80000
 8005634:	08007840 	.word	0x08007840
 8005638:	08007818 	.word	0x08007818
 800563c:	2601      	movs	r6, #1
 800563e:	2300      	movs	r3, #0
 8005640:	9307      	str	r3, [sp, #28]
 8005642:	9609      	str	r6, [sp, #36]	; 0x24
 8005644:	f04f 33ff 	mov.w	r3, #4294967295
 8005648:	9304      	str	r3, [sp, #16]
 800564a:	9303      	str	r3, [sp, #12]
 800564c:	2200      	movs	r2, #0
 800564e:	2312      	movs	r3, #18
 8005650:	920a      	str	r2, [sp, #40]	; 0x28
 8005652:	e789      	b.n	8005568 <_dtoa_r+0x250>
 8005654:	2301      	movs	r3, #1
 8005656:	9309      	str	r3, [sp, #36]	; 0x24
 8005658:	e7f4      	b.n	8005644 <_dtoa_r+0x32c>
 800565a:	2301      	movs	r3, #1
 800565c:	9304      	str	r3, [sp, #16]
 800565e:	9303      	str	r3, [sp, #12]
 8005660:	461a      	mov	r2, r3
 8005662:	e7f5      	b.n	8005650 <_dtoa_r+0x338>
 8005664:	686a      	ldr	r2, [r5, #4]
 8005666:	3201      	adds	r2, #1
 8005668:	606a      	str	r2, [r5, #4]
 800566a:	0049      	lsls	r1, r1, #1
 800566c:	e780      	b.n	8005570 <_dtoa_r+0x258>
 800566e:	2502      	movs	r5, #2
 8005670:	e7af      	b.n	80055d2 <_dtoa_r+0x2ba>
 8005672:	07f1      	lsls	r1, r6, #31
 8005674:	d508      	bpl.n	8005688 <_dtoa_r+0x370>
 8005676:	4640      	mov	r0, r8
 8005678:	4649      	mov	r1, r9
 800567a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800567e:	f7fa ffd7 	bl	8000630 <__aeabi_dmul>
 8005682:	3501      	adds	r5, #1
 8005684:	4680      	mov	r8, r0
 8005686:	4689      	mov	r9, r1
 8005688:	1076      	asrs	r6, r6, #1
 800568a:	3708      	adds	r7, #8
 800568c:	e7a2      	b.n	80055d4 <_dtoa_r+0x2bc>
 800568e:	f000 809d 	beq.w	80057cc <_dtoa_r+0x4b4>
 8005692:	f1cb 0600 	rsb	r6, fp, #0
 8005696:	4b9f      	ldr	r3, [pc, #636]	; (8005914 <_dtoa_r+0x5fc>)
 8005698:	4f9f      	ldr	r7, [pc, #636]	; (8005918 <_dtoa_r+0x600>)
 800569a:	f006 020f 	and.w	r2, r6, #15
 800569e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80056a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80056aa:	f7fa ffc1 	bl	8000630 <__aeabi_dmul>
 80056ae:	e9cd 0100 	strd	r0, r1, [sp]
 80056b2:	1136      	asrs	r6, r6, #4
 80056b4:	2300      	movs	r3, #0
 80056b6:	2502      	movs	r5, #2
 80056b8:	2e00      	cmp	r6, #0
 80056ba:	d17c      	bne.n	80057b6 <_dtoa_r+0x49e>
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d191      	bne.n	80055e4 <_dtoa_r+0x2cc>
 80056c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	f000 8084 	beq.w	80057d0 <_dtoa_r+0x4b8>
 80056c8:	e9dd 8900 	ldrd	r8, r9, [sp]
 80056cc:	2200      	movs	r2, #0
 80056ce:	4b93      	ldr	r3, [pc, #588]	; (800591c <_dtoa_r+0x604>)
 80056d0:	4640      	mov	r0, r8
 80056d2:	4649      	mov	r1, r9
 80056d4:	f7fb fa1e 	bl	8000b14 <__aeabi_dcmplt>
 80056d8:	2800      	cmp	r0, #0
 80056da:	d079      	beq.n	80057d0 <_dtoa_r+0x4b8>
 80056dc:	9b03      	ldr	r3, [sp, #12]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d076      	beq.n	80057d0 <_dtoa_r+0x4b8>
 80056e2:	9b04      	ldr	r3, [sp, #16]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	dd34      	ble.n	8005752 <_dtoa_r+0x43a>
 80056e8:	2200      	movs	r2, #0
 80056ea:	4b8d      	ldr	r3, [pc, #564]	; (8005920 <_dtoa_r+0x608>)
 80056ec:	4640      	mov	r0, r8
 80056ee:	4649      	mov	r1, r9
 80056f0:	f7fa ff9e 	bl	8000630 <__aeabi_dmul>
 80056f4:	e9cd 0100 	strd	r0, r1, [sp]
 80056f8:	9e04      	ldr	r6, [sp, #16]
 80056fa:	f10b 37ff 	add.w	r7, fp, #4294967295
 80056fe:	3501      	adds	r5, #1
 8005700:	4628      	mov	r0, r5
 8005702:	f7fa ff2f 	bl	8000564 <__aeabi_i2d>
 8005706:	e9dd 2300 	ldrd	r2, r3, [sp]
 800570a:	f7fa ff91 	bl	8000630 <__aeabi_dmul>
 800570e:	2200      	movs	r2, #0
 8005710:	4b84      	ldr	r3, [pc, #528]	; (8005924 <_dtoa_r+0x60c>)
 8005712:	f7fa fddb 	bl	80002cc <__adddf3>
 8005716:	4680      	mov	r8, r0
 8005718:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 800571c:	2e00      	cmp	r6, #0
 800571e:	d15a      	bne.n	80057d6 <_dtoa_r+0x4be>
 8005720:	2200      	movs	r2, #0
 8005722:	4b81      	ldr	r3, [pc, #516]	; (8005928 <_dtoa_r+0x610>)
 8005724:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005728:	f7fa fdce 	bl	80002c8 <__aeabi_dsub>
 800572c:	4642      	mov	r2, r8
 800572e:	464b      	mov	r3, r9
 8005730:	e9cd 0100 	strd	r0, r1, [sp]
 8005734:	f7fb fa0c 	bl	8000b50 <__aeabi_dcmpgt>
 8005738:	2800      	cmp	r0, #0
 800573a:	f040 829b 	bne.w	8005c74 <_dtoa_r+0x95c>
 800573e:	4642      	mov	r2, r8
 8005740:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005744:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005748:	f7fb f9e4 	bl	8000b14 <__aeabi_dcmplt>
 800574c:	2800      	cmp	r0, #0
 800574e:	f040 828f 	bne.w	8005c70 <_dtoa_r+0x958>
 8005752:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005756:	e9cd 2300 	strd	r2, r3, [sp]
 800575a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800575c:	2b00      	cmp	r3, #0
 800575e:	f2c0 8150 	blt.w	8005a02 <_dtoa_r+0x6ea>
 8005762:	f1bb 0f0e 	cmp.w	fp, #14
 8005766:	f300 814c 	bgt.w	8005a02 <_dtoa_r+0x6ea>
 800576a:	4b6a      	ldr	r3, [pc, #424]	; (8005914 <_dtoa_r+0x5fc>)
 800576c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005770:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005774:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005776:	2b00      	cmp	r3, #0
 8005778:	f280 80da 	bge.w	8005930 <_dtoa_r+0x618>
 800577c:	9b03      	ldr	r3, [sp, #12]
 800577e:	2b00      	cmp	r3, #0
 8005780:	f300 80d6 	bgt.w	8005930 <_dtoa_r+0x618>
 8005784:	f040 8273 	bne.w	8005c6e <_dtoa_r+0x956>
 8005788:	2200      	movs	r2, #0
 800578a:	4b67      	ldr	r3, [pc, #412]	; (8005928 <_dtoa_r+0x610>)
 800578c:	4640      	mov	r0, r8
 800578e:	4649      	mov	r1, r9
 8005790:	f7fa ff4e 	bl	8000630 <__aeabi_dmul>
 8005794:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005798:	f7fb f9d0 	bl	8000b3c <__aeabi_dcmpge>
 800579c:	9e03      	ldr	r6, [sp, #12]
 800579e:	4637      	mov	r7, r6
 80057a0:	2800      	cmp	r0, #0
 80057a2:	f040 824a 	bne.w	8005c3a <_dtoa_r+0x922>
 80057a6:	9b02      	ldr	r3, [sp, #8]
 80057a8:	9a02      	ldr	r2, [sp, #8]
 80057aa:	1c5d      	adds	r5, r3, #1
 80057ac:	2331      	movs	r3, #49	; 0x31
 80057ae:	7013      	strb	r3, [r2, #0]
 80057b0:	f10b 0b01 	add.w	fp, fp, #1
 80057b4:	e245      	b.n	8005c42 <_dtoa_r+0x92a>
 80057b6:	07f2      	lsls	r2, r6, #31
 80057b8:	d505      	bpl.n	80057c6 <_dtoa_r+0x4ae>
 80057ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057be:	f7fa ff37 	bl	8000630 <__aeabi_dmul>
 80057c2:	3501      	adds	r5, #1
 80057c4:	2301      	movs	r3, #1
 80057c6:	1076      	asrs	r6, r6, #1
 80057c8:	3708      	adds	r7, #8
 80057ca:	e775      	b.n	80056b8 <_dtoa_r+0x3a0>
 80057cc:	2502      	movs	r5, #2
 80057ce:	e777      	b.n	80056c0 <_dtoa_r+0x3a8>
 80057d0:	465f      	mov	r7, fp
 80057d2:	9e03      	ldr	r6, [sp, #12]
 80057d4:	e794      	b.n	8005700 <_dtoa_r+0x3e8>
 80057d6:	9a02      	ldr	r2, [sp, #8]
 80057d8:	4b4e      	ldr	r3, [pc, #312]	; (8005914 <_dtoa_r+0x5fc>)
 80057da:	4432      	add	r2, r6
 80057dc:	9213      	str	r2, [sp, #76]	; 0x4c
 80057de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80057e0:	1e71      	subs	r1, r6, #1
 80057e2:	2a00      	cmp	r2, #0
 80057e4:	d048      	beq.n	8005878 <_dtoa_r+0x560>
 80057e6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80057ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ee:	2000      	movs	r0, #0
 80057f0:	494e      	ldr	r1, [pc, #312]	; (800592c <_dtoa_r+0x614>)
 80057f2:	f7fb f847 	bl	8000884 <__aeabi_ddiv>
 80057f6:	4642      	mov	r2, r8
 80057f8:	464b      	mov	r3, r9
 80057fa:	f7fa fd65 	bl	80002c8 <__aeabi_dsub>
 80057fe:	9d02      	ldr	r5, [sp, #8]
 8005800:	4680      	mov	r8, r0
 8005802:	4689      	mov	r9, r1
 8005804:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005808:	f7fb f9c2 	bl	8000b90 <__aeabi_d2iz>
 800580c:	4606      	mov	r6, r0
 800580e:	f7fa fea9 	bl	8000564 <__aeabi_i2d>
 8005812:	4602      	mov	r2, r0
 8005814:	460b      	mov	r3, r1
 8005816:	e9dd 0100 	ldrd	r0, r1, [sp]
 800581a:	f7fa fd55 	bl	80002c8 <__aeabi_dsub>
 800581e:	3630      	adds	r6, #48	; 0x30
 8005820:	f805 6b01 	strb.w	r6, [r5], #1
 8005824:	4642      	mov	r2, r8
 8005826:	464b      	mov	r3, r9
 8005828:	e9cd 0100 	strd	r0, r1, [sp]
 800582c:	f7fb f972 	bl	8000b14 <__aeabi_dcmplt>
 8005830:	2800      	cmp	r0, #0
 8005832:	d165      	bne.n	8005900 <_dtoa_r+0x5e8>
 8005834:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005838:	2000      	movs	r0, #0
 800583a:	4938      	ldr	r1, [pc, #224]	; (800591c <_dtoa_r+0x604>)
 800583c:	f7fa fd44 	bl	80002c8 <__aeabi_dsub>
 8005840:	4642      	mov	r2, r8
 8005842:	464b      	mov	r3, r9
 8005844:	f7fb f966 	bl	8000b14 <__aeabi_dcmplt>
 8005848:	2800      	cmp	r0, #0
 800584a:	f040 80ba 	bne.w	80059c2 <_dtoa_r+0x6aa>
 800584e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005850:	429d      	cmp	r5, r3
 8005852:	f43f af7e 	beq.w	8005752 <_dtoa_r+0x43a>
 8005856:	2200      	movs	r2, #0
 8005858:	4b31      	ldr	r3, [pc, #196]	; (8005920 <_dtoa_r+0x608>)
 800585a:	4640      	mov	r0, r8
 800585c:	4649      	mov	r1, r9
 800585e:	f7fa fee7 	bl	8000630 <__aeabi_dmul>
 8005862:	2200      	movs	r2, #0
 8005864:	4680      	mov	r8, r0
 8005866:	4689      	mov	r9, r1
 8005868:	4b2d      	ldr	r3, [pc, #180]	; (8005920 <_dtoa_r+0x608>)
 800586a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800586e:	f7fa fedf 	bl	8000630 <__aeabi_dmul>
 8005872:	e9cd 0100 	strd	r0, r1, [sp]
 8005876:	e7c5      	b.n	8005804 <_dtoa_r+0x4ec>
 8005878:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800587c:	4642      	mov	r2, r8
 800587e:	464b      	mov	r3, r9
 8005880:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005884:	f7fa fed4 	bl	8000630 <__aeabi_dmul>
 8005888:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800588c:	9d02      	ldr	r5, [sp, #8]
 800588e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005892:	f7fb f97d 	bl	8000b90 <__aeabi_d2iz>
 8005896:	4606      	mov	r6, r0
 8005898:	f7fa fe64 	bl	8000564 <__aeabi_i2d>
 800589c:	3630      	adds	r6, #48	; 0x30
 800589e:	4602      	mov	r2, r0
 80058a0:	460b      	mov	r3, r1
 80058a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80058a6:	f7fa fd0f 	bl	80002c8 <__aeabi_dsub>
 80058aa:	f805 6b01 	strb.w	r6, [r5], #1
 80058ae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80058b0:	42ab      	cmp	r3, r5
 80058b2:	4680      	mov	r8, r0
 80058b4:	4689      	mov	r9, r1
 80058b6:	f04f 0200 	mov.w	r2, #0
 80058ba:	d125      	bne.n	8005908 <_dtoa_r+0x5f0>
 80058bc:	4b1b      	ldr	r3, [pc, #108]	; (800592c <_dtoa_r+0x614>)
 80058be:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80058c2:	f7fa fd03 	bl	80002cc <__adddf3>
 80058c6:	4602      	mov	r2, r0
 80058c8:	460b      	mov	r3, r1
 80058ca:	4640      	mov	r0, r8
 80058cc:	4649      	mov	r1, r9
 80058ce:	f7fb f93f 	bl	8000b50 <__aeabi_dcmpgt>
 80058d2:	2800      	cmp	r0, #0
 80058d4:	d175      	bne.n	80059c2 <_dtoa_r+0x6aa>
 80058d6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80058da:	2000      	movs	r0, #0
 80058dc:	4913      	ldr	r1, [pc, #76]	; (800592c <_dtoa_r+0x614>)
 80058de:	f7fa fcf3 	bl	80002c8 <__aeabi_dsub>
 80058e2:	4602      	mov	r2, r0
 80058e4:	460b      	mov	r3, r1
 80058e6:	4640      	mov	r0, r8
 80058e8:	4649      	mov	r1, r9
 80058ea:	f7fb f913 	bl	8000b14 <__aeabi_dcmplt>
 80058ee:	2800      	cmp	r0, #0
 80058f0:	f43f af2f 	beq.w	8005752 <_dtoa_r+0x43a>
 80058f4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80058f8:	2b30      	cmp	r3, #48	; 0x30
 80058fa:	f105 32ff 	add.w	r2, r5, #4294967295
 80058fe:	d001      	beq.n	8005904 <_dtoa_r+0x5ec>
 8005900:	46bb      	mov	fp, r7
 8005902:	e04d      	b.n	80059a0 <_dtoa_r+0x688>
 8005904:	4615      	mov	r5, r2
 8005906:	e7f5      	b.n	80058f4 <_dtoa_r+0x5dc>
 8005908:	4b05      	ldr	r3, [pc, #20]	; (8005920 <_dtoa_r+0x608>)
 800590a:	f7fa fe91 	bl	8000630 <__aeabi_dmul>
 800590e:	e9cd 0100 	strd	r0, r1, [sp]
 8005912:	e7bc      	b.n	800588e <_dtoa_r+0x576>
 8005914:	08007840 	.word	0x08007840
 8005918:	08007818 	.word	0x08007818
 800591c:	3ff00000 	.word	0x3ff00000
 8005920:	40240000 	.word	0x40240000
 8005924:	401c0000 	.word	0x401c0000
 8005928:	40140000 	.word	0x40140000
 800592c:	3fe00000 	.word	0x3fe00000
 8005930:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005934:	9d02      	ldr	r5, [sp, #8]
 8005936:	4642      	mov	r2, r8
 8005938:	464b      	mov	r3, r9
 800593a:	4630      	mov	r0, r6
 800593c:	4639      	mov	r1, r7
 800593e:	f7fa ffa1 	bl	8000884 <__aeabi_ddiv>
 8005942:	f7fb f925 	bl	8000b90 <__aeabi_d2iz>
 8005946:	9000      	str	r0, [sp, #0]
 8005948:	f7fa fe0c 	bl	8000564 <__aeabi_i2d>
 800594c:	4642      	mov	r2, r8
 800594e:	464b      	mov	r3, r9
 8005950:	f7fa fe6e 	bl	8000630 <__aeabi_dmul>
 8005954:	4602      	mov	r2, r0
 8005956:	460b      	mov	r3, r1
 8005958:	4630      	mov	r0, r6
 800595a:	4639      	mov	r1, r7
 800595c:	f7fa fcb4 	bl	80002c8 <__aeabi_dsub>
 8005960:	9e00      	ldr	r6, [sp, #0]
 8005962:	9f03      	ldr	r7, [sp, #12]
 8005964:	3630      	adds	r6, #48	; 0x30
 8005966:	f805 6b01 	strb.w	r6, [r5], #1
 800596a:	9e02      	ldr	r6, [sp, #8]
 800596c:	1bae      	subs	r6, r5, r6
 800596e:	42b7      	cmp	r7, r6
 8005970:	4602      	mov	r2, r0
 8005972:	460b      	mov	r3, r1
 8005974:	d138      	bne.n	80059e8 <_dtoa_r+0x6d0>
 8005976:	f7fa fca9 	bl	80002cc <__adddf3>
 800597a:	4606      	mov	r6, r0
 800597c:	460f      	mov	r7, r1
 800597e:	4602      	mov	r2, r0
 8005980:	460b      	mov	r3, r1
 8005982:	4640      	mov	r0, r8
 8005984:	4649      	mov	r1, r9
 8005986:	f7fb f8c5 	bl	8000b14 <__aeabi_dcmplt>
 800598a:	b9c8      	cbnz	r0, 80059c0 <_dtoa_r+0x6a8>
 800598c:	4632      	mov	r2, r6
 800598e:	463b      	mov	r3, r7
 8005990:	4640      	mov	r0, r8
 8005992:	4649      	mov	r1, r9
 8005994:	f7fb f8b4 	bl	8000b00 <__aeabi_dcmpeq>
 8005998:	b110      	cbz	r0, 80059a0 <_dtoa_r+0x688>
 800599a:	9b00      	ldr	r3, [sp, #0]
 800599c:	07db      	lsls	r3, r3, #31
 800599e:	d40f      	bmi.n	80059c0 <_dtoa_r+0x6a8>
 80059a0:	4651      	mov	r1, sl
 80059a2:	4620      	mov	r0, r4
 80059a4:	f000 fae6 	bl	8005f74 <_Bfree>
 80059a8:	2300      	movs	r3, #0
 80059aa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80059ac:	702b      	strb	r3, [r5, #0]
 80059ae:	f10b 0301 	add.w	r3, fp, #1
 80059b2:	6013      	str	r3, [r2, #0]
 80059b4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	f43f acf8 	beq.w	80053ac <_dtoa_r+0x94>
 80059bc:	601d      	str	r5, [r3, #0]
 80059be:	e4f5      	b.n	80053ac <_dtoa_r+0x94>
 80059c0:	465f      	mov	r7, fp
 80059c2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80059c6:	2a39      	cmp	r2, #57	; 0x39
 80059c8:	f105 33ff 	add.w	r3, r5, #4294967295
 80059cc:	d106      	bne.n	80059dc <_dtoa_r+0x6c4>
 80059ce:	9a02      	ldr	r2, [sp, #8]
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d107      	bne.n	80059e4 <_dtoa_r+0x6cc>
 80059d4:	2330      	movs	r3, #48	; 0x30
 80059d6:	7013      	strb	r3, [r2, #0]
 80059d8:	3701      	adds	r7, #1
 80059da:	4613      	mov	r3, r2
 80059dc:	781a      	ldrb	r2, [r3, #0]
 80059de:	3201      	adds	r2, #1
 80059e0:	701a      	strb	r2, [r3, #0]
 80059e2:	e78d      	b.n	8005900 <_dtoa_r+0x5e8>
 80059e4:	461d      	mov	r5, r3
 80059e6:	e7ec      	b.n	80059c2 <_dtoa_r+0x6aa>
 80059e8:	2200      	movs	r2, #0
 80059ea:	4ba4      	ldr	r3, [pc, #656]	; (8005c7c <_dtoa_r+0x964>)
 80059ec:	f7fa fe20 	bl	8000630 <__aeabi_dmul>
 80059f0:	2200      	movs	r2, #0
 80059f2:	2300      	movs	r3, #0
 80059f4:	4606      	mov	r6, r0
 80059f6:	460f      	mov	r7, r1
 80059f8:	f7fb f882 	bl	8000b00 <__aeabi_dcmpeq>
 80059fc:	2800      	cmp	r0, #0
 80059fe:	d09a      	beq.n	8005936 <_dtoa_r+0x61e>
 8005a00:	e7ce      	b.n	80059a0 <_dtoa_r+0x688>
 8005a02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a04:	2a00      	cmp	r2, #0
 8005a06:	f000 80cd 	beq.w	8005ba4 <_dtoa_r+0x88c>
 8005a0a:	9a07      	ldr	r2, [sp, #28]
 8005a0c:	2a01      	cmp	r2, #1
 8005a0e:	f300 80af 	bgt.w	8005b70 <_dtoa_r+0x858>
 8005a12:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005a14:	2a00      	cmp	r2, #0
 8005a16:	f000 80a7 	beq.w	8005b68 <_dtoa_r+0x850>
 8005a1a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005a1e:	9e08      	ldr	r6, [sp, #32]
 8005a20:	9d05      	ldr	r5, [sp, #20]
 8005a22:	9a05      	ldr	r2, [sp, #20]
 8005a24:	441a      	add	r2, r3
 8005a26:	9205      	str	r2, [sp, #20]
 8005a28:	9a06      	ldr	r2, [sp, #24]
 8005a2a:	2101      	movs	r1, #1
 8005a2c:	441a      	add	r2, r3
 8005a2e:	4620      	mov	r0, r4
 8005a30:	9206      	str	r2, [sp, #24]
 8005a32:	f000 fb3f 	bl	80060b4 <__i2b>
 8005a36:	4607      	mov	r7, r0
 8005a38:	2d00      	cmp	r5, #0
 8005a3a:	dd0c      	ble.n	8005a56 <_dtoa_r+0x73e>
 8005a3c:	9b06      	ldr	r3, [sp, #24]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	dd09      	ble.n	8005a56 <_dtoa_r+0x73e>
 8005a42:	42ab      	cmp	r3, r5
 8005a44:	9a05      	ldr	r2, [sp, #20]
 8005a46:	bfa8      	it	ge
 8005a48:	462b      	movge	r3, r5
 8005a4a:	1ad2      	subs	r2, r2, r3
 8005a4c:	9205      	str	r2, [sp, #20]
 8005a4e:	9a06      	ldr	r2, [sp, #24]
 8005a50:	1aed      	subs	r5, r5, r3
 8005a52:	1ad3      	subs	r3, r2, r3
 8005a54:	9306      	str	r3, [sp, #24]
 8005a56:	9b08      	ldr	r3, [sp, #32]
 8005a58:	b1f3      	cbz	r3, 8005a98 <_dtoa_r+0x780>
 8005a5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	f000 80a5 	beq.w	8005bac <_dtoa_r+0x894>
 8005a62:	2e00      	cmp	r6, #0
 8005a64:	dd10      	ble.n	8005a88 <_dtoa_r+0x770>
 8005a66:	4639      	mov	r1, r7
 8005a68:	4632      	mov	r2, r6
 8005a6a:	4620      	mov	r0, r4
 8005a6c:	f000 fbb8 	bl	80061e0 <__pow5mult>
 8005a70:	4652      	mov	r2, sl
 8005a72:	4601      	mov	r1, r0
 8005a74:	4607      	mov	r7, r0
 8005a76:	4620      	mov	r0, r4
 8005a78:	f000 fb25 	bl	80060c6 <__multiply>
 8005a7c:	4651      	mov	r1, sl
 8005a7e:	4680      	mov	r8, r0
 8005a80:	4620      	mov	r0, r4
 8005a82:	f000 fa77 	bl	8005f74 <_Bfree>
 8005a86:	46c2      	mov	sl, r8
 8005a88:	9b08      	ldr	r3, [sp, #32]
 8005a8a:	1b9a      	subs	r2, r3, r6
 8005a8c:	d004      	beq.n	8005a98 <_dtoa_r+0x780>
 8005a8e:	4651      	mov	r1, sl
 8005a90:	4620      	mov	r0, r4
 8005a92:	f000 fba5 	bl	80061e0 <__pow5mult>
 8005a96:	4682      	mov	sl, r0
 8005a98:	2101      	movs	r1, #1
 8005a9a:	4620      	mov	r0, r4
 8005a9c:	f000 fb0a 	bl	80060b4 <__i2b>
 8005aa0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	4606      	mov	r6, r0
 8005aa6:	f340 8083 	ble.w	8005bb0 <_dtoa_r+0x898>
 8005aaa:	461a      	mov	r2, r3
 8005aac:	4601      	mov	r1, r0
 8005aae:	4620      	mov	r0, r4
 8005ab0:	f000 fb96 	bl	80061e0 <__pow5mult>
 8005ab4:	9b07      	ldr	r3, [sp, #28]
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	4606      	mov	r6, r0
 8005aba:	dd7c      	ble.n	8005bb6 <_dtoa_r+0x89e>
 8005abc:	f04f 0800 	mov.w	r8, #0
 8005ac0:	6933      	ldr	r3, [r6, #16]
 8005ac2:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005ac6:	6918      	ldr	r0, [r3, #16]
 8005ac8:	f000 faa6 	bl	8006018 <__hi0bits>
 8005acc:	f1c0 0020 	rsb	r0, r0, #32
 8005ad0:	9b06      	ldr	r3, [sp, #24]
 8005ad2:	4418      	add	r0, r3
 8005ad4:	f010 001f 	ands.w	r0, r0, #31
 8005ad8:	f000 8096 	beq.w	8005c08 <_dtoa_r+0x8f0>
 8005adc:	f1c0 0320 	rsb	r3, r0, #32
 8005ae0:	2b04      	cmp	r3, #4
 8005ae2:	f340 8087 	ble.w	8005bf4 <_dtoa_r+0x8dc>
 8005ae6:	9b05      	ldr	r3, [sp, #20]
 8005ae8:	f1c0 001c 	rsb	r0, r0, #28
 8005aec:	4403      	add	r3, r0
 8005aee:	9305      	str	r3, [sp, #20]
 8005af0:	9b06      	ldr	r3, [sp, #24]
 8005af2:	4405      	add	r5, r0
 8005af4:	4403      	add	r3, r0
 8005af6:	9306      	str	r3, [sp, #24]
 8005af8:	9b05      	ldr	r3, [sp, #20]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	dd05      	ble.n	8005b0a <_dtoa_r+0x7f2>
 8005afe:	4651      	mov	r1, sl
 8005b00:	461a      	mov	r2, r3
 8005b02:	4620      	mov	r0, r4
 8005b04:	f000 fbba 	bl	800627c <__lshift>
 8005b08:	4682      	mov	sl, r0
 8005b0a:	9b06      	ldr	r3, [sp, #24]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	dd05      	ble.n	8005b1c <_dtoa_r+0x804>
 8005b10:	4631      	mov	r1, r6
 8005b12:	461a      	mov	r2, r3
 8005b14:	4620      	mov	r0, r4
 8005b16:	f000 fbb1 	bl	800627c <__lshift>
 8005b1a:	4606      	mov	r6, r0
 8005b1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d074      	beq.n	8005c0c <_dtoa_r+0x8f4>
 8005b22:	4631      	mov	r1, r6
 8005b24:	4650      	mov	r0, sl
 8005b26:	f000 fbfa 	bl	800631e <__mcmp>
 8005b2a:	2800      	cmp	r0, #0
 8005b2c:	da6e      	bge.n	8005c0c <_dtoa_r+0x8f4>
 8005b2e:	2300      	movs	r3, #0
 8005b30:	4651      	mov	r1, sl
 8005b32:	220a      	movs	r2, #10
 8005b34:	4620      	mov	r0, r4
 8005b36:	f000 fa34 	bl	8005fa2 <__multadd>
 8005b3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b3c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005b40:	4682      	mov	sl, r0
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	f000 81a8 	beq.w	8005e98 <_dtoa_r+0xb80>
 8005b48:	2300      	movs	r3, #0
 8005b4a:	4639      	mov	r1, r7
 8005b4c:	220a      	movs	r2, #10
 8005b4e:	4620      	mov	r0, r4
 8005b50:	f000 fa27 	bl	8005fa2 <__multadd>
 8005b54:	9b04      	ldr	r3, [sp, #16]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	4607      	mov	r7, r0
 8005b5a:	f300 80c8 	bgt.w	8005cee <_dtoa_r+0x9d6>
 8005b5e:	9b07      	ldr	r3, [sp, #28]
 8005b60:	2b02      	cmp	r3, #2
 8005b62:	f340 80c4 	ble.w	8005cee <_dtoa_r+0x9d6>
 8005b66:	e059      	b.n	8005c1c <_dtoa_r+0x904>
 8005b68:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005b6a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005b6e:	e756      	b.n	8005a1e <_dtoa_r+0x706>
 8005b70:	9b03      	ldr	r3, [sp, #12]
 8005b72:	1e5e      	subs	r6, r3, #1
 8005b74:	9b08      	ldr	r3, [sp, #32]
 8005b76:	42b3      	cmp	r3, r6
 8005b78:	bfbf      	itttt	lt
 8005b7a:	9b08      	ldrlt	r3, [sp, #32]
 8005b7c:	9608      	strlt	r6, [sp, #32]
 8005b7e:	1af2      	sublt	r2, r6, r3
 8005b80:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8005b82:	bfb6      	itet	lt
 8005b84:	189b      	addlt	r3, r3, r2
 8005b86:	1b9e      	subge	r6, r3, r6
 8005b88:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8005b8a:	9b03      	ldr	r3, [sp, #12]
 8005b8c:	bfb8      	it	lt
 8005b8e:	2600      	movlt	r6, #0
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	bfb9      	ittee	lt
 8005b94:	9b05      	ldrlt	r3, [sp, #20]
 8005b96:	9a03      	ldrlt	r2, [sp, #12]
 8005b98:	9d05      	ldrge	r5, [sp, #20]
 8005b9a:	9b03      	ldrge	r3, [sp, #12]
 8005b9c:	bfbc      	itt	lt
 8005b9e:	1a9d      	sublt	r5, r3, r2
 8005ba0:	2300      	movlt	r3, #0
 8005ba2:	e73e      	b.n	8005a22 <_dtoa_r+0x70a>
 8005ba4:	9e08      	ldr	r6, [sp, #32]
 8005ba6:	9d05      	ldr	r5, [sp, #20]
 8005ba8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005baa:	e745      	b.n	8005a38 <_dtoa_r+0x720>
 8005bac:	9a08      	ldr	r2, [sp, #32]
 8005bae:	e76e      	b.n	8005a8e <_dtoa_r+0x776>
 8005bb0:	9b07      	ldr	r3, [sp, #28]
 8005bb2:	2b01      	cmp	r3, #1
 8005bb4:	dc19      	bgt.n	8005bea <_dtoa_r+0x8d2>
 8005bb6:	9b00      	ldr	r3, [sp, #0]
 8005bb8:	b9bb      	cbnz	r3, 8005bea <_dtoa_r+0x8d2>
 8005bba:	9b01      	ldr	r3, [sp, #4]
 8005bbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005bc0:	b99b      	cbnz	r3, 8005bea <_dtoa_r+0x8d2>
 8005bc2:	9b01      	ldr	r3, [sp, #4]
 8005bc4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005bc8:	0d1b      	lsrs	r3, r3, #20
 8005bca:	051b      	lsls	r3, r3, #20
 8005bcc:	b183      	cbz	r3, 8005bf0 <_dtoa_r+0x8d8>
 8005bce:	9b05      	ldr	r3, [sp, #20]
 8005bd0:	3301      	adds	r3, #1
 8005bd2:	9305      	str	r3, [sp, #20]
 8005bd4:	9b06      	ldr	r3, [sp, #24]
 8005bd6:	3301      	adds	r3, #1
 8005bd8:	9306      	str	r3, [sp, #24]
 8005bda:	f04f 0801 	mov.w	r8, #1
 8005bde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	f47f af6d 	bne.w	8005ac0 <_dtoa_r+0x7a8>
 8005be6:	2001      	movs	r0, #1
 8005be8:	e772      	b.n	8005ad0 <_dtoa_r+0x7b8>
 8005bea:	f04f 0800 	mov.w	r8, #0
 8005bee:	e7f6      	b.n	8005bde <_dtoa_r+0x8c6>
 8005bf0:	4698      	mov	r8, r3
 8005bf2:	e7f4      	b.n	8005bde <_dtoa_r+0x8c6>
 8005bf4:	d080      	beq.n	8005af8 <_dtoa_r+0x7e0>
 8005bf6:	9a05      	ldr	r2, [sp, #20]
 8005bf8:	331c      	adds	r3, #28
 8005bfa:	441a      	add	r2, r3
 8005bfc:	9205      	str	r2, [sp, #20]
 8005bfe:	9a06      	ldr	r2, [sp, #24]
 8005c00:	441a      	add	r2, r3
 8005c02:	441d      	add	r5, r3
 8005c04:	4613      	mov	r3, r2
 8005c06:	e776      	b.n	8005af6 <_dtoa_r+0x7de>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	e7f4      	b.n	8005bf6 <_dtoa_r+0x8de>
 8005c0c:	9b03      	ldr	r3, [sp, #12]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	dc36      	bgt.n	8005c80 <_dtoa_r+0x968>
 8005c12:	9b07      	ldr	r3, [sp, #28]
 8005c14:	2b02      	cmp	r3, #2
 8005c16:	dd33      	ble.n	8005c80 <_dtoa_r+0x968>
 8005c18:	9b03      	ldr	r3, [sp, #12]
 8005c1a:	9304      	str	r3, [sp, #16]
 8005c1c:	9b04      	ldr	r3, [sp, #16]
 8005c1e:	b963      	cbnz	r3, 8005c3a <_dtoa_r+0x922>
 8005c20:	4631      	mov	r1, r6
 8005c22:	2205      	movs	r2, #5
 8005c24:	4620      	mov	r0, r4
 8005c26:	f000 f9bc 	bl	8005fa2 <__multadd>
 8005c2a:	4601      	mov	r1, r0
 8005c2c:	4606      	mov	r6, r0
 8005c2e:	4650      	mov	r0, sl
 8005c30:	f000 fb75 	bl	800631e <__mcmp>
 8005c34:	2800      	cmp	r0, #0
 8005c36:	f73f adb6 	bgt.w	80057a6 <_dtoa_r+0x48e>
 8005c3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c3c:	9d02      	ldr	r5, [sp, #8]
 8005c3e:	ea6f 0b03 	mvn.w	fp, r3
 8005c42:	2300      	movs	r3, #0
 8005c44:	9303      	str	r3, [sp, #12]
 8005c46:	4631      	mov	r1, r6
 8005c48:	4620      	mov	r0, r4
 8005c4a:	f000 f993 	bl	8005f74 <_Bfree>
 8005c4e:	2f00      	cmp	r7, #0
 8005c50:	f43f aea6 	beq.w	80059a0 <_dtoa_r+0x688>
 8005c54:	9b03      	ldr	r3, [sp, #12]
 8005c56:	b12b      	cbz	r3, 8005c64 <_dtoa_r+0x94c>
 8005c58:	42bb      	cmp	r3, r7
 8005c5a:	d003      	beq.n	8005c64 <_dtoa_r+0x94c>
 8005c5c:	4619      	mov	r1, r3
 8005c5e:	4620      	mov	r0, r4
 8005c60:	f000 f988 	bl	8005f74 <_Bfree>
 8005c64:	4639      	mov	r1, r7
 8005c66:	4620      	mov	r0, r4
 8005c68:	f000 f984 	bl	8005f74 <_Bfree>
 8005c6c:	e698      	b.n	80059a0 <_dtoa_r+0x688>
 8005c6e:	2600      	movs	r6, #0
 8005c70:	4637      	mov	r7, r6
 8005c72:	e7e2      	b.n	8005c3a <_dtoa_r+0x922>
 8005c74:	46bb      	mov	fp, r7
 8005c76:	4637      	mov	r7, r6
 8005c78:	e595      	b.n	80057a6 <_dtoa_r+0x48e>
 8005c7a:	bf00      	nop
 8005c7c:	40240000 	.word	0x40240000
 8005c80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c82:	bb93      	cbnz	r3, 8005cea <_dtoa_r+0x9d2>
 8005c84:	9b03      	ldr	r3, [sp, #12]
 8005c86:	9304      	str	r3, [sp, #16]
 8005c88:	9d02      	ldr	r5, [sp, #8]
 8005c8a:	4631      	mov	r1, r6
 8005c8c:	4650      	mov	r0, sl
 8005c8e:	f7ff fab5 	bl	80051fc <quorem>
 8005c92:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005c96:	f805 9b01 	strb.w	r9, [r5], #1
 8005c9a:	9b02      	ldr	r3, [sp, #8]
 8005c9c:	9a04      	ldr	r2, [sp, #16]
 8005c9e:	1aeb      	subs	r3, r5, r3
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	f300 80dc 	bgt.w	8005e5e <_dtoa_r+0xb46>
 8005ca6:	9b02      	ldr	r3, [sp, #8]
 8005ca8:	2a01      	cmp	r2, #1
 8005caa:	bfac      	ite	ge
 8005cac:	189b      	addge	r3, r3, r2
 8005cae:	3301      	addlt	r3, #1
 8005cb0:	4698      	mov	r8, r3
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	9303      	str	r3, [sp, #12]
 8005cb6:	4651      	mov	r1, sl
 8005cb8:	2201      	movs	r2, #1
 8005cba:	4620      	mov	r0, r4
 8005cbc:	f000 fade 	bl	800627c <__lshift>
 8005cc0:	4631      	mov	r1, r6
 8005cc2:	4682      	mov	sl, r0
 8005cc4:	f000 fb2b 	bl	800631e <__mcmp>
 8005cc8:	2800      	cmp	r0, #0
 8005cca:	f300 808d 	bgt.w	8005de8 <_dtoa_r+0xad0>
 8005cce:	d103      	bne.n	8005cd8 <_dtoa_r+0x9c0>
 8005cd0:	f019 0f01 	tst.w	r9, #1
 8005cd4:	f040 8088 	bne.w	8005de8 <_dtoa_r+0xad0>
 8005cd8:	4645      	mov	r5, r8
 8005cda:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005cde:	2b30      	cmp	r3, #48	; 0x30
 8005ce0:	f105 32ff 	add.w	r2, r5, #4294967295
 8005ce4:	d1af      	bne.n	8005c46 <_dtoa_r+0x92e>
 8005ce6:	4615      	mov	r5, r2
 8005ce8:	e7f7      	b.n	8005cda <_dtoa_r+0x9c2>
 8005cea:	9b03      	ldr	r3, [sp, #12]
 8005cec:	9304      	str	r3, [sp, #16]
 8005cee:	2d00      	cmp	r5, #0
 8005cf0:	dd05      	ble.n	8005cfe <_dtoa_r+0x9e6>
 8005cf2:	4639      	mov	r1, r7
 8005cf4:	462a      	mov	r2, r5
 8005cf6:	4620      	mov	r0, r4
 8005cf8:	f000 fac0 	bl	800627c <__lshift>
 8005cfc:	4607      	mov	r7, r0
 8005cfe:	f1b8 0f00 	cmp.w	r8, #0
 8005d02:	d04c      	beq.n	8005d9e <_dtoa_r+0xa86>
 8005d04:	6879      	ldr	r1, [r7, #4]
 8005d06:	4620      	mov	r0, r4
 8005d08:	f000 f900 	bl	8005f0c <_Balloc>
 8005d0c:	693a      	ldr	r2, [r7, #16]
 8005d0e:	3202      	adds	r2, #2
 8005d10:	4605      	mov	r5, r0
 8005d12:	0092      	lsls	r2, r2, #2
 8005d14:	f107 010c 	add.w	r1, r7, #12
 8005d18:	300c      	adds	r0, #12
 8005d1a:	f7fe fd35 	bl	8004788 <memcpy>
 8005d1e:	2201      	movs	r2, #1
 8005d20:	4629      	mov	r1, r5
 8005d22:	4620      	mov	r0, r4
 8005d24:	f000 faaa 	bl	800627c <__lshift>
 8005d28:	9b00      	ldr	r3, [sp, #0]
 8005d2a:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8005d2e:	9703      	str	r7, [sp, #12]
 8005d30:	f003 0301 	and.w	r3, r3, #1
 8005d34:	4607      	mov	r7, r0
 8005d36:	9305      	str	r3, [sp, #20]
 8005d38:	4631      	mov	r1, r6
 8005d3a:	4650      	mov	r0, sl
 8005d3c:	f7ff fa5e 	bl	80051fc <quorem>
 8005d40:	9903      	ldr	r1, [sp, #12]
 8005d42:	4605      	mov	r5, r0
 8005d44:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005d48:	4650      	mov	r0, sl
 8005d4a:	f000 fae8 	bl	800631e <__mcmp>
 8005d4e:	463a      	mov	r2, r7
 8005d50:	9000      	str	r0, [sp, #0]
 8005d52:	4631      	mov	r1, r6
 8005d54:	4620      	mov	r0, r4
 8005d56:	f000 fafc 	bl	8006352 <__mdiff>
 8005d5a:	68c3      	ldr	r3, [r0, #12]
 8005d5c:	4602      	mov	r2, r0
 8005d5e:	bb03      	cbnz	r3, 8005da2 <_dtoa_r+0xa8a>
 8005d60:	4601      	mov	r1, r0
 8005d62:	9006      	str	r0, [sp, #24]
 8005d64:	4650      	mov	r0, sl
 8005d66:	f000 fada 	bl	800631e <__mcmp>
 8005d6a:	9a06      	ldr	r2, [sp, #24]
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	4611      	mov	r1, r2
 8005d70:	4620      	mov	r0, r4
 8005d72:	9306      	str	r3, [sp, #24]
 8005d74:	f000 f8fe 	bl	8005f74 <_Bfree>
 8005d78:	9b06      	ldr	r3, [sp, #24]
 8005d7a:	b9a3      	cbnz	r3, 8005da6 <_dtoa_r+0xa8e>
 8005d7c:	9a07      	ldr	r2, [sp, #28]
 8005d7e:	b992      	cbnz	r2, 8005da6 <_dtoa_r+0xa8e>
 8005d80:	9a05      	ldr	r2, [sp, #20]
 8005d82:	b982      	cbnz	r2, 8005da6 <_dtoa_r+0xa8e>
 8005d84:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005d88:	d029      	beq.n	8005dde <_dtoa_r+0xac6>
 8005d8a:	9b00      	ldr	r3, [sp, #0]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	dd01      	ble.n	8005d94 <_dtoa_r+0xa7c>
 8005d90:	f105 0931 	add.w	r9, r5, #49	; 0x31
 8005d94:	f108 0501 	add.w	r5, r8, #1
 8005d98:	f888 9000 	strb.w	r9, [r8]
 8005d9c:	e753      	b.n	8005c46 <_dtoa_r+0x92e>
 8005d9e:	4638      	mov	r0, r7
 8005da0:	e7c2      	b.n	8005d28 <_dtoa_r+0xa10>
 8005da2:	2301      	movs	r3, #1
 8005da4:	e7e3      	b.n	8005d6e <_dtoa_r+0xa56>
 8005da6:	9a00      	ldr	r2, [sp, #0]
 8005da8:	2a00      	cmp	r2, #0
 8005daa:	db04      	blt.n	8005db6 <_dtoa_r+0xa9e>
 8005dac:	d125      	bne.n	8005dfa <_dtoa_r+0xae2>
 8005dae:	9a07      	ldr	r2, [sp, #28]
 8005db0:	bb1a      	cbnz	r2, 8005dfa <_dtoa_r+0xae2>
 8005db2:	9a05      	ldr	r2, [sp, #20]
 8005db4:	bb0a      	cbnz	r2, 8005dfa <_dtoa_r+0xae2>
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	ddec      	ble.n	8005d94 <_dtoa_r+0xa7c>
 8005dba:	4651      	mov	r1, sl
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	4620      	mov	r0, r4
 8005dc0:	f000 fa5c 	bl	800627c <__lshift>
 8005dc4:	4631      	mov	r1, r6
 8005dc6:	4682      	mov	sl, r0
 8005dc8:	f000 faa9 	bl	800631e <__mcmp>
 8005dcc:	2800      	cmp	r0, #0
 8005dce:	dc03      	bgt.n	8005dd8 <_dtoa_r+0xac0>
 8005dd0:	d1e0      	bne.n	8005d94 <_dtoa_r+0xa7c>
 8005dd2:	f019 0f01 	tst.w	r9, #1
 8005dd6:	d0dd      	beq.n	8005d94 <_dtoa_r+0xa7c>
 8005dd8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005ddc:	d1d8      	bne.n	8005d90 <_dtoa_r+0xa78>
 8005dde:	2339      	movs	r3, #57	; 0x39
 8005de0:	f888 3000 	strb.w	r3, [r8]
 8005de4:	f108 0801 	add.w	r8, r8, #1
 8005de8:	4645      	mov	r5, r8
 8005dea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005dee:	2b39      	cmp	r3, #57	; 0x39
 8005df0:	f105 32ff 	add.w	r2, r5, #4294967295
 8005df4:	d03b      	beq.n	8005e6e <_dtoa_r+0xb56>
 8005df6:	3301      	adds	r3, #1
 8005df8:	e040      	b.n	8005e7c <_dtoa_r+0xb64>
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	f108 0501 	add.w	r5, r8, #1
 8005e00:	dd05      	ble.n	8005e0e <_dtoa_r+0xaf6>
 8005e02:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005e06:	d0ea      	beq.n	8005dde <_dtoa_r+0xac6>
 8005e08:	f109 0901 	add.w	r9, r9, #1
 8005e0c:	e7c4      	b.n	8005d98 <_dtoa_r+0xa80>
 8005e0e:	9b02      	ldr	r3, [sp, #8]
 8005e10:	9a04      	ldr	r2, [sp, #16]
 8005e12:	f805 9c01 	strb.w	r9, [r5, #-1]
 8005e16:	1aeb      	subs	r3, r5, r3
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	46a8      	mov	r8, r5
 8005e1c:	f43f af4b 	beq.w	8005cb6 <_dtoa_r+0x99e>
 8005e20:	4651      	mov	r1, sl
 8005e22:	2300      	movs	r3, #0
 8005e24:	220a      	movs	r2, #10
 8005e26:	4620      	mov	r0, r4
 8005e28:	f000 f8bb 	bl	8005fa2 <__multadd>
 8005e2c:	9b03      	ldr	r3, [sp, #12]
 8005e2e:	9903      	ldr	r1, [sp, #12]
 8005e30:	42bb      	cmp	r3, r7
 8005e32:	4682      	mov	sl, r0
 8005e34:	f04f 0300 	mov.w	r3, #0
 8005e38:	f04f 020a 	mov.w	r2, #10
 8005e3c:	4620      	mov	r0, r4
 8005e3e:	d104      	bne.n	8005e4a <_dtoa_r+0xb32>
 8005e40:	f000 f8af 	bl	8005fa2 <__multadd>
 8005e44:	9003      	str	r0, [sp, #12]
 8005e46:	4607      	mov	r7, r0
 8005e48:	e776      	b.n	8005d38 <_dtoa_r+0xa20>
 8005e4a:	f000 f8aa 	bl	8005fa2 <__multadd>
 8005e4e:	2300      	movs	r3, #0
 8005e50:	9003      	str	r0, [sp, #12]
 8005e52:	220a      	movs	r2, #10
 8005e54:	4639      	mov	r1, r7
 8005e56:	4620      	mov	r0, r4
 8005e58:	f000 f8a3 	bl	8005fa2 <__multadd>
 8005e5c:	e7f3      	b.n	8005e46 <_dtoa_r+0xb2e>
 8005e5e:	4651      	mov	r1, sl
 8005e60:	2300      	movs	r3, #0
 8005e62:	220a      	movs	r2, #10
 8005e64:	4620      	mov	r0, r4
 8005e66:	f000 f89c 	bl	8005fa2 <__multadd>
 8005e6a:	4682      	mov	sl, r0
 8005e6c:	e70d      	b.n	8005c8a <_dtoa_r+0x972>
 8005e6e:	9b02      	ldr	r3, [sp, #8]
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d105      	bne.n	8005e80 <_dtoa_r+0xb68>
 8005e74:	9a02      	ldr	r2, [sp, #8]
 8005e76:	f10b 0b01 	add.w	fp, fp, #1
 8005e7a:	2331      	movs	r3, #49	; 0x31
 8005e7c:	7013      	strb	r3, [r2, #0]
 8005e7e:	e6e2      	b.n	8005c46 <_dtoa_r+0x92e>
 8005e80:	4615      	mov	r5, r2
 8005e82:	e7b2      	b.n	8005dea <_dtoa_r+0xad2>
 8005e84:	4b09      	ldr	r3, [pc, #36]	; (8005eac <_dtoa_r+0xb94>)
 8005e86:	f7ff baae 	b.w	80053e6 <_dtoa_r+0xce>
 8005e8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	f47f aa88 	bne.w	80053a2 <_dtoa_r+0x8a>
 8005e92:	4b07      	ldr	r3, [pc, #28]	; (8005eb0 <_dtoa_r+0xb98>)
 8005e94:	f7ff baa7 	b.w	80053e6 <_dtoa_r+0xce>
 8005e98:	9b04      	ldr	r3, [sp, #16]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	f73f aef4 	bgt.w	8005c88 <_dtoa_r+0x970>
 8005ea0:	9b07      	ldr	r3, [sp, #28]
 8005ea2:	2b02      	cmp	r3, #2
 8005ea4:	f77f aef0 	ble.w	8005c88 <_dtoa_r+0x970>
 8005ea8:	e6b8      	b.n	8005c1c <_dtoa_r+0x904>
 8005eaa:	bf00      	nop
 8005eac:	080077da 	.word	0x080077da
 8005eb0:	080077fe 	.word	0x080077fe

08005eb4 <__locale_ctype_ptr_l>:
 8005eb4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8005eb8:	4770      	bx	lr
	...

08005ebc <_localeconv_r>:
 8005ebc:	4b04      	ldr	r3, [pc, #16]	; (8005ed0 <_localeconv_r+0x14>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	6a18      	ldr	r0, [r3, #32]
 8005ec2:	4b04      	ldr	r3, [pc, #16]	; (8005ed4 <_localeconv_r+0x18>)
 8005ec4:	2800      	cmp	r0, #0
 8005ec6:	bf08      	it	eq
 8005ec8:	4618      	moveq	r0, r3
 8005eca:	30f0      	adds	r0, #240	; 0xf0
 8005ecc:	4770      	bx	lr
 8005ece:	bf00      	nop
 8005ed0:	20000100 	.word	0x20000100
 8005ed4:	20000164 	.word	0x20000164

08005ed8 <malloc>:
 8005ed8:	4b02      	ldr	r3, [pc, #8]	; (8005ee4 <malloc+0xc>)
 8005eda:	4601      	mov	r1, r0
 8005edc:	6818      	ldr	r0, [r3, #0]
 8005ede:	f000 bb41 	b.w	8006564 <_malloc_r>
 8005ee2:	bf00      	nop
 8005ee4:	20000100 	.word	0x20000100

08005ee8 <__ascii_mbtowc>:
 8005ee8:	b082      	sub	sp, #8
 8005eea:	b901      	cbnz	r1, 8005eee <__ascii_mbtowc+0x6>
 8005eec:	a901      	add	r1, sp, #4
 8005eee:	b142      	cbz	r2, 8005f02 <__ascii_mbtowc+0x1a>
 8005ef0:	b14b      	cbz	r3, 8005f06 <__ascii_mbtowc+0x1e>
 8005ef2:	7813      	ldrb	r3, [r2, #0]
 8005ef4:	600b      	str	r3, [r1, #0]
 8005ef6:	7812      	ldrb	r2, [r2, #0]
 8005ef8:	1c10      	adds	r0, r2, #0
 8005efa:	bf18      	it	ne
 8005efc:	2001      	movne	r0, #1
 8005efe:	b002      	add	sp, #8
 8005f00:	4770      	bx	lr
 8005f02:	4610      	mov	r0, r2
 8005f04:	e7fb      	b.n	8005efe <__ascii_mbtowc+0x16>
 8005f06:	f06f 0001 	mvn.w	r0, #1
 8005f0a:	e7f8      	b.n	8005efe <__ascii_mbtowc+0x16>

08005f0c <_Balloc>:
 8005f0c:	b570      	push	{r4, r5, r6, lr}
 8005f0e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005f10:	4604      	mov	r4, r0
 8005f12:	460e      	mov	r6, r1
 8005f14:	b93d      	cbnz	r5, 8005f26 <_Balloc+0x1a>
 8005f16:	2010      	movs	r0, #16
 8005f18:	f7ff ffde 	bl	8005ed8 <malloc>
 8005f1c:	6260      	str	r0, [r4, #36]	; 0x24
 8005f1e:	6045      	str	r5, [r0, #4]
 8005f20:	6085      	str	r5, [r0, #8]
 8005f22:	6005      	str	r5, [r0, #0]
 8005f24:	60c5      	str	r5, [r0, #12]
 8005f26:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005f28:	68eb      	ldr	r3, [r5, #12]
 8005f2a:	b183      	cbz	r3, 8005f4e <_Balloc+0x42>
 8005f2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f2e:	68db      	ldr	r3, [r3, #12]
 8005f30:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005f34:	b9b8      	cbnz	r0, 8005f66 <_Balloc+0x5a>
 8005f36:	2101      	movs	r1, #1
 8005f38:	fa01 f506 	lsl.w	r5, r1, r6
 8005f3c:	1d6a      	adds	r2, r5, #5
 8005f3e:	0092      	lsls	r2, r2, #2
 8005f40:	4620      	mov	r0, r4
 8005f42:	f000 fab3 	bl	80064ac <_calloc_r>
 8005f46:	b160      	cbz	r0, 8005f62 <_Balloc+0x56>
 8005f48:	6046      	str	r6, [r0, #4]
 8005f4a:	6085      	str	r5, [r0, #8]
 8005f4c:	e00e      	b.n	8005f6c <_Balloc+0x60>
 8005f4e:	2221      	movs	r2, #33	; 0x21
 8005f50:	2104      	movs	r1, #4
 8005f52:	4620      	mov	r0, r4
 8005f54:	f000 faaa 	bl	80064ac <_calloc_r>
 8005f58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f5a:	60e8      	str	r0, [r5, #12]
 8005f5c:	68db      	ldr	r3, [r3, #12]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d1e4      	bne.n	8005f2c <_Balloc+0x20>
 8005f62:	2000      	movs	r0, #0
 8005f64:	bd70      	pop	{r4, r5, r6, pc}
 8005f66:	6802      	ldr	r2, [r0, #0]
 8005f68:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	6103      	str	r3, [r0, #16]
 8005f70:	60c3      	str	r3, [r0, #12]
 8005f72:	bd70      	pop	{r4, r5, r6, pc}

08005f74 <_Bfree>:
 8005f74:	b570      	push	{r4, r5, r6, lr}
 8005f76:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005f78:	4606      	mov	r6, r0
 8005f7a:	460d      	mov	r5, r1
 8005f7c:	b93c      	cbnz	r4, 8005f8e <_Bfree+0x1a>
 8005f7e:	2010      	movs	r0, #16
 8005f80:	f7ff ffaa 	bl	8005ed8 <malloc>
 8005f84:	6270      	str	r0, [r6, #36]	; 0x24
 8005f86:	6044      	str	r4, [r0, #4]
 8005f88:	6084      	str	r4, [r0, #8]
 8005f8a:	6004      	str	r4, [r0, #0]
 8005f8c:	60c4      	str	r4, [r0, #12]
 8005f8e:	b13d      	cbz	r5, 8005fa0 <_Bfree+0x2c>
 8005f90:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005f92:	686a      	ldr	r2, [r5, #4]
 8005f94:	68db      	ldr	r3, [r3, #12]
 8005f96:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005f9a:	6029      	str	r1, [r5, #0]
 8005f9c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005fa0:	bd70      	pop	{r4, r5, r6, pc}

08005fa2 <__multadd>:
 8005fa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fa6:	690d      	ldr	r5, [r1, #16]
 8005fa8:	461f      	mov	r7, r3
 8005faa:	4606      	mov	r6, r0
 8005fac:	460c      	mov	r4, r1
 8005fae:	f101 0e14 	add.w	lr, r1, #20
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	f8de 0000 	ldr.w	r0, [lr]
 8005fb8:	b281      	uxth	r1, r0
 8005fba:	fb02 7101 	mla	r1, r2, r1, r7
 8005fbe:	0c0f      	lsrs	r7, r1, #16
 8005fc0:	0c00      	lsrs	r0, r0, #16
 8005fc2:	fb02 7000 	mla	r0, r2, r0, r7
 8005fc6:	b289      	uxth	r1, r1
 8005fc8:	3301      	adds	r3, #1
 8005fca:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8005fce:	429d      	cmp	r5, r3
 8005fd0:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005fd4:	f84e 1b04 	str.w	r1, [lr], #4
 8005fd8:	dcec      	bgt.n	8005fb4 <__multadd+0x12>
 8005fda:	b1d7      	cbz	r7, 8006012 <__multadd+0x70>
 8005fdc:	68a3      	ldr	r3, [r4, #8]
 8005fde:	429d      	cmp	r5, r3
 8005fe0:	db12      	blt.n	8006008 <__multadd+0x66>
 8005fe2:	6861      	ldr	r1, [r4, #4]
 8005fe4:	4630      	mov	r0, r6
 8005fe6:	3101      	adds	r1, #1
 8005fe8:	f7ff ff90 	bl	8005f0c <_Balloc>
 8005fec:	6922      	ldr	r2, [r4, #16]
 8005fee:	3202      	adds	r2, #2
 8005ff0:	f104 010c 	add.w	r1, r4, #12
 8005ff4:	4680      	mov	r8, r0
 8005ff6:	0092      	lsls	r2, r2, #2
 8005ff8:	300c      	adds	r0, #12
 8005ffa:	f7fe fbc5 	bl	8004788 <memcpy>
 8005ffe:	4621      	mov	r1, r4
 8006000:	4630      	mov	r0, r6
 8006002:	f7ff ffb7 	bl	8005f74 <_Bfree>
 8006006:	4644      	mov	r4, r8
 8006008:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800600c:	3501      	adds	r5, #1
 800600e:	615f      	str	r7, [r3, #20]
 8006010:	6125      	str	r5, [r4, #16]
 8006012:	4620      	mov	r0, r4
 8006014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006018 <__hi0bits>:
 8006018:	0c02      	lsrs	r2, r0, #16
 800601a:	0412      	lsls	r2, r2, #16
 800601c:	4603      	mov	r3, r0
 800601e:	b9b2      	cbnz	r2, 800604e <__hi0bits+0x36>
 8006020:	0403      	lsls	r3, r0, #16
 8006022:	2010      	movs	r0, #16
 8006024:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006028:	bf04      	itt	eq
 800602a:	021b      	lsleq	r3, r3, #8
 800602c:	3008      	addeq	r0, #8
 800602e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006032:	bf04      	itt	eq
 8006034:	011b      	lsleq	r3, r3, #4
 8006036:	3004      	addeq	r0, #4
 8006038:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800603c:	bf04      	itt	eq
 800603e:	009b      	lsleq	r3, r3, #2
 8006040:	3002      	addeq	r0, #2
 8006042:	2b00      	cmp	r3, #0
 8006044:	db06      	blt.n	8006054 <__hi0bits+0x3c>
 8006046:	005b      	lsls	r3, r3, #1
 8006048:	d503      	bpl.n	8006052 <__hi0bits+0x3a>
 800604a:	3001      	adds	r0, #1
 800604c:	4770      	bx	lr
 800604e:	2000      	movs	r0, #0
 8006050:	e7e8      	b.n	8006024 <__hi0bits+0xc>
 8006052:	2020      	movs	r0, #32
 8006054:	4770      	bx	lr

08006056 <__lo0bits>:
 8006056:	6803      	ldr	r3, [r0, #0]
 8006058:	f013 0207 	ands.w	r2, r3, #7
 800605c:	4601      	mov	r1, r0
 800605e:	d00b      	beq.n	8006078 <__lo0bits+0x22>
 8006060:	07da      	lsls	r2, r3, #31
 8006062:	d423      	bmi.n	80060ac <__lo0bits+0x56>
 8006064:	0798      	lsls	r0, r3, #30
 8006066:	bf49      	itett	mi
 8006068:	085b      	lsrmi	r3, r3, #1
 800606a:	089b      	lsrpl	r3, r3, #2
 800606c:	2001      	movmi	r0, #1
 800606e:	600b      	strmi	r3, [r1, #0]
 8006070:	bf5c      	itt	pl
 8006072:	600b      	strpl	r3, [r1, #0]
 8006074:	2002      	movpl	r0, #2
 8006076:	4770      	bx	lr
 8006078:	b298      	uxth	r0, r3
 800607a:	b9a8      	cbnz	r0, 80060a8 <__lo0bits+0x52>
 800607c:	0c1b      	lsrs	r3, r3, #16
 800607e:	2010      	movs	r0, #16
 8006080:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006084:	bf04      	itt	eq
 8006086:	0a1b      	lsreq	r3, r3, #8
 8006088:	3008      	addeq	r0, #8
 800608a:	071a      	lsls	r2, r3, #28
 800608c:	bf04      	itt	eq
 800608e:	091b      	lsreq	r3, r3, #4
 8006090:	3004      	addeq	r0, #4
 8006092:	079a      	lsls	r2, r3, #30
 8006094:	bf04      	itt	eq
 8006096:	089b      	lsreq	r3, r3, #2
 8006098:	3002      	addeq	r0, #2
 800609a:	07da      	lsls	r2, r3, #31
 800609c:	d402      	bmi.n	80060a4 <__lo0bits+0x4e>
 800609e:	085b      	lsrs	r3, r3, #1
 80060a0:	d006      	beq.n	80060b0 <__lo0bits+0x5a>
 80060a2:	3001      	adds	r0, #1
 80060a4:	600b      	str	r3, [r1, #0]
 80060a6:	4770      	bx	lr
 80060a8:	4610      	mov	r0, r2
 80060aa:	e7e9      	b.n	8006080 <__lo0bits+0x2a>
 80060ac:	2000      	movs	r0, #0
 80060ae:	4770      	bx	lr
 80060b0:	2020      	movs	r0, #32
 80060b2:	4770      	bx	lr

080060b4 <__i2b>:
 80060b4:	b510      	push	{r4, lr}
 80060b6:	460c      	mov	r4, r1
 80060b8:	2101      	movs	r1, #1
 80060ba:	f7ff ff27 	bl	8005f0c <_Balloc>
 80060be:	2201      	movs	r2, #1
 80060c0:	6144      	str	r4, [r0, #20]
 80060c2:	6102      	str	r2, [r0, #16]
 80060c4:	bd10      	pop	{r4, pc}

080060c6 <__multiply>:
 80060c6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060ca:	4614      	mov	r4, r2
 80060cc:	690a      	ldr	r2, [r1, #16]
 80060ce:	6923      	ldr	r3, [r4, #16]
 80060d0:	429a      	cmp	r2, r3
 80060d2:	bfb8      	it	lt
 80060d4:	460b      	movlt	r3, r1
 80060d6:	4689      	mov	r9, r1
 80060d8:	bfbc      	itt	lt
 80060da:	46a1      	movlt	r9, r4
 80060dc:	461c      	movlt	r4, r3
 80060de:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80060e2:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80060e6:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80060ea:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80060ee:	eb07 060a 	add.w	r6, r7, sl
 80060f2:	429e      	cmp	r6, r3
 80060f4:	bfc8      	it	gt
 80060f6:	3101      	addgt	r1, #1
 80060f8:	f7ff ff08 	bl	8005f0c <_Balloc>
 80060fc:	f100 0514 	add.w	r5, r0, #20
 8006100:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006104:	462b      	mov	r3, r5
 8006106:	2200      	movs	r2, #0
 8006108:	4543      	cmp	r3, r8
 800610a:	d316      	bcc.n	800613a <__multiply+0x74>
 800610c:	f104 0214 	add.w	r2, r4, #20
 8006110:	f109 0114 	add.w	r1, r9, #20
 8006114:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 8006118:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800611c:	9301      	str	r3, [sp, #4]
 800611e:	9c01      	ldr	r4, [sp, #4]
 8006120:	4294      	cmp	r4, r2
 8006122:	4613      	mov	r3, r2
 8006124:	d80c      	bhi.n	8006140 <__multiply+0x7a>
 8006126:	2e00      	cmp	r6, #0
 8006128:	dd03      	ble.n	8006132 <__multiply+0x6c>
 800612a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800612e:	2b00      	cmp	r3, #0
 8006130:	d054      	beq.n	80061dc <__multiply+0x116>
 8006132:	6106      	str	r6, [r0, #16]
 8006134:	b003      	add	sp, #12
 8006136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800613a:	f843 2b04 	str.w	r2, [r3], #4
 800613e:	e7e3      	b.n	8006108 <__multiply+0x42>
 8006140:	f8b3 a000 	ldrh.w	sl, [r3]
 8006144:	3204      	adds	r2, #4
 8006146:	f1ba 0f00 	cmp.w	sl, #0
 800614a:	d020      	beq.n	800618e <__multiply+0xc8>
 800614c:	46ae      	mov	lr, r5
 800614e:	4689      	mov	r9, r1
 8006150:	f04f 0c00 	mov.w	ip, #0
 8006154:	f859 4b04 	ldr.w	r4, [r9], #4
 8006158:	f8be b000 	ldrh.w	fp, [lr]
 800615c:	b2a3      	uxth	r3, r4
 800615e:	fb0a b303 	mla	r3, sl, r3, fp
 8006162:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8006166:	f8de 4000 	ldr.w	r4, [lr]
 800616a:	4463      	add	r3, ip
 800616c:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8006170:	fb0a c40b 	mla	r4, sl, fp, ip
 8006174:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006178:	b29b      	uxth	r3, r3
 800617a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800617e:	454f      	cmp	r7, r9
 8006180:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8006184:	f84e 3b04 	str.w	r3, [lr], #4
 8006188:	d8e4      	bhi.n	8006154 <__multiply+0x8e>
 800618a:	f8ce c000 	str.w	ip, [lr]
 800618e:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 8006192:	f1b9 0f00 	cmp.w	r9, #0
 8006196:	d01f      	beq.n	80061d8 <__multiply+0x112>
 8006198:	682b      	ldr	r3, [r5, #0]
 800619a:	46ae      	mov	lr, r5
 800619c:	468c      	mov	ip, r1
 800619e:	f04f 0a00 	mov.w	sl, #0
 80061a2:	f8bc 4000 	ldrh.w	r4, [ip]
 80061a6:	f8be b002 	ldrh.w	fp, [lr, #2]
 80061aa:	fb09 b404 	mla	r4, r9, r4, fp
 80061ae:	44a2      	add	sl, r4
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 80061b6:	f84e 3b04 	str.w	r3, [lr], #4
 80061ba:	f85c 3b04 	ldr.w	r3, [ip], #4
 80061be:	f8be 4000 	ldrh.w	r4, [lr]
 80061c2:	0c1b      	lsrs	r3, r3, #16
 80061c4:	fb09 4303 	mla	r3, r9, r3, r4
 80061c8:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 80061cc:	4567      	cmp	r7, ip
 80061ce:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80061d2:	d8e6      	bhi.n	80061a2 <__multiply+0xdc>
 80061d4:	f8ce 3000 	str.w	r3, [lr]
 80061d8:	3504      	adds	r5, #4
 80061da:	e7a0      	b.n	800611e <__multiply+0x58>
 80061dc:	3e01      	subs	r6, #1
 80061de:	e7a2      	b.n	8006126 <__multiply+0x60>

080061e0 <__pow5mult>:
 80061e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061e4:	4615      	mov	r5, r2
 80061e6:	f012 0203 	ands.w	r2, r2, #3
 80061ea:	4606      	mov	r6, r0
 80061ec:	460f      	mov	r7, r1
 80061ee:	d007      	beq.n	8006200 <__pow5mult+0x20>
 80061f0:	3a01      	subs	r2, #1
 80061f2:	4c21      	ldr	r4, [pc, #132]	; (8006278 <__pow5mult+0x98>)
 80061f4:	2300      	movs	r3, #0
 80061f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80061fa:	f7ff fed2 	bl	8005fa2 <__multadd>
 80061fe:	4607      	mov	r7, r0
 8006200:	10ad      	asrs	r5, r5, #2
 8006202:	d035      	beq.n	8006270 <__pow5mult+0x90>
 8006204:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006206:	b93c      	cbnz	r4, 8006218 <__pow5mult+0x38>
 8006208:	2010      	movs	r0, #16
 800620a:	f7ff fe65 	bl	8005ed8 <malloc>
 800620e:	6270      	str	r0, [r6, #36]	; 0x24
 8006210:	6044      	str	r4, [r0, #4]
 8006212:	6084      	str	r4, [r0, #8]
 8006214:	6004      	str	r4, [r0, #0]
 8006216:	60c4      	str	r4, [r0, #12]
 8006218:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800621c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006220:	b94c      	cbnz	r4, 8006236 <__pow5mult+0x56>
 8006222:	f240 2171 	movw	r1, #625	; 0x271
 8006226:	4630      	mov	r0, r6
 8006228:	f7ff ff44 	bl	80060b4 <__i2b>
 800622c:	2300      	movs	r3, #0
 800622e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006232:	4604      	mov	r4, r0
 8006234:	6003      	str	r3, [r0, #0]
 8006236:	f04f 0800 	mov.w	r8, #0
 800623a:	07eb      	lsls	r3, r5, #31
 800623c:	d50a      	bpl.n	8006254 <__pow5mult+0x74>
 800623e:	4639      	mov	r1, r7
 8006240:	4622      	mov	r2, r4
 8006242:	4630      	mov	r0, r6
 8006244:	f7ff ff3f 	bl	80060c6 <__multiply>
 8006248:	4639      	mov	r1, r7
 800624a:	4681      	mov	r9, r0
 800624c:	4630      	mov	r0, r6
 800624e:	f7ff fe91 	bl	8005f74 <_Bfree>
 8006252:	464f      	mov	r7, r9
 8006254:	106d      	asrs	r5, r5, #1
 8006256:	d00b      	beq.n	8006270 <__pow5mult+0x90>
 8006258:	6820      	ldr	r0, [r4, #0]
 800625a:	b938      	cbnz	r0, 800626c <__pow5mult+0x8c>
 800625c:	4622      	mov	r2, r4
 800625e:	4621      	mov	r1, r4
 8006260:	4630      	mov	r0, r6
 8006262:	f7ff ff30 	bl	80060c6 <__multiply>
 8006266:	6020      	str	r0, [r4, #0]
 8006268:	f8c0 8000 	str.w	r8, [r0]
 800626c:	4604      	mov	r4, r0
 800626e:	e7e4      	b.n	800623a <__pow5mult+0x5a>
 8006270:	4638      	mov	r0, r7
 8006272:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006276:	bf00      	nop
 8006278:	08007908 	.word	0x08007908

0800627c <__lshift>:
 800627c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006280:	460c      	mov	r4, r1
 8006282:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006286:	6923      	ldr	r3, [r4, #16]
 8006288:	6849      	ldr	r1, [r1, #4]
 800628a:	eb0a 0903 	add.w	r9, sl, r3
 800628e:	68a3      	ldr	r3, [r4, #8]
 8006290:	4607      	mov	r7, r0
 8006292:	4616      	mov	r6, r2
 8006294:	f109 0501 	add.w	r5, r9, #1
 8006298:	42ab      	cmp	r3, r5
 800629a:	db31      	blt.n	8006300 <__lshift+0x84>
 800629c:	4638      	mov	r0, r7
 800629e:	f7ff fe35 	bl	8005f0c <_Balloc>
 80062a2:	2200      	movs	r2, #0
 80062a4:	4680      	mov	r8, r0
 80062a6:	f100 0314 	add.w	r3, r0, #20
 80062aa:	4611      	mov	r1, r2
 80062ac:	4552      	cmp	r2, sl
 80062ae:	db2a      	blt.n	8006306 <__lshift+0x8a>
 80062b0:	6920      	ldr	r0, [r4, #16]
 80062b2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80062b6:	f104 0114 	add.w	r1, r4, #20
 80062ba:	f016 021f 	ands.w	r2, r6, #31
 80062be:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 80062c2:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 80062c6:	d022      	beq.n	800630e <__lshift+0x92>
 80062c8:	f1c2 0c20 	rsb	ip, r2, #32
 80062cc:	2000      	movs	r0, #0
 80062ce:	680e      	ldr	r6, [r1, #0]
 80062d0:	4096      	lsls	r6, r2
 80062d2:	4330      	orrs	r0, r6
 80062d4:	f843 0b04 	str.w	r0, [r3], #4
 80062d8:	f851 0b04 	ldr.w	r0, [r1], #4
 80062dc:	458e      	cmp	lr, r1
 80062de:	fa20 f00c 	lsr.w	r0, r0, ip
 80062e2:	d8f4      	bhi.n	80062ce <__lshift+0x52>
 80062e4:	6018      	str	r0, [r3, #0]
 80062e6:	b108      	cbz	r0, 80062ec <__lshift+0x70>
 80062e8:	f109 0502 	add.w	r5, r9, #2
 80062ec:	3d01      	subs	r5, #1
 80062ee:	4638      	mov	r0, r7
 80062f0:	f8c8 5010 	str.w	r5, [r8, #16]
 80062f4:	4621      	mov	r1, r4
 80062f6:	f7ff fe3d 	bl	8005f74 <_Bfree>
 80062fa:	4640      	mov	r0, r8
 80062fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006300:	3101      	adds	r1, #1
 8006302:	005b      	lsls	r3, r3, #1
 8006304:	e7c8      	b.n	8006298 <__lshift+0x1c>
 8006306:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800630a:	3201      	adds	r2, #1
 800630c:	e7ce      	b.n	80062ac <__lshift+0x30>
 800630e:	3b04      	subs	r3, #4
 8006310:	f851 2b04 	ldr.w	r2, [r1], #4
 8006314:	f843 2f04 	str.w	r2, [r3, #4]!
 8006318:	458e      	cmp	lr, r1
 800631a:	d8f9      	bhi.n	8006310 <__lshift+0x94>
 800631c:	e7e6      	b.n	80062ec <__lshift+0x70>

0800631e <__mcmp>:
 800631e:	6903      	ldr	r3, [r0, #16]
 8006320:	690a      	ldr	r2, [r1, #16]
 8006322:	1a9b      	subs	r3, r3, r2
 8006324:	b530      	push	{r4, r5, lr}
 8006326:	d10c      	bne.n	8006342 <__mcmp+0x24>
 8006328:	0092      	lsls	r2, r2, #2
 800632a:	3014      	adds	r0, #20
 800632c:	3114      	adds	r1, #20
 800632e:	1884      	adds	r4, r0, r2
 8006330:	4411      	add	r1, r2
 8006332:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006336:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800633a:	4295      	cmp	r5, r2
 800633c:	d003      	beq.n	8006346 <__mcmp+0x28>
 800633e:	d305      	bcc.n	800634c <__mcmp+0x2e>
 8006340:	2301      	movs	r3, #1
 8006342:	4618      	mov	r0, r3
 8006344:	bd30      	pop	{r4, r5, pc}
 8006346:	42a0      	cmp	r0, r4
 8006348:	d3f3      	bcc.n	8006332 <__mcmp+0x14>
 800634a:	e7fa      	b.n	8006342 <__mcmp+0x24>
 800634c:	f04f 33ff 	mov.w	r3, #4294967295
 8006350:	e7f7      	b.n	8006342 <__mcmp+0x24>

08006352 <__mdiff>:
 8006352:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006356:	460d      	mov	r5, r1
 8006358:	4607      	mov	r7, r0
 800635a:	4611      	mov	r1, r2
 800635c:	4628      	mov	r0, r5
 800635e:	4614      	mov	r4, r2
 8006360:	f7ff ffdd 	bl	800631e <__mcmp>
 8006364:	1e06      	subs	r6, r0, #0
 8006366:	d108      	bne.n	800637a <__mdiff+0x28>
 8006368:	4631      	mov	r1, r6
 800636a:	4638      	mov	r0, r7
 800636c:	f7ff fdce 	bl	8005f0c <_Balloc>
 8006370:	2301      	movs	r3, #1
 8006372:	6103      	str	r3, [r0, #16]
 8006374:	6146      	str	r6, [r0, #20]
 8006376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800637a:	bfa4      	itt	ge
 800637c:	4623      	movge	r3, r4
 800637e:	462c      	movge	r4, r5
 8006380:	4638      	mov	r0, r7
 8006382:	6861      	ldr	r1, [r4, #4]
 8006384:	bfa6      	itte	ge
 8006386:	461d      	movge	r5, r3
 8006388:	2600      	movge	r6, #0
 800638a:	2601      	movlt	r6, #1
 800638c:	f7ff fdbe 	bl	8005f0c <_Balloc>
 8006390:	692b      	ldr	r3, [r5, #16]
 8006392:	60c6      	str	r6, [r0, #12]
 8006394:	6926      	ldr	r6, [r4, #16]
 8006396:	f105 0914 	add.w	r9, r5, #20
 800639a:	f104 0214 	add.w	r2, r4, #20
 800639e:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80063a2:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80063a6:	f100 0514 	add.w	r5, r0, #20
 80063aa:	f04f 0c00 	mov.w	ip, #0
 80063ae:	f852 ab04 	ldr.w	sl, [r2], #4
 80063b2:	f859 4b04 	ldr.w	r4, [r9], #4
 80063b6:	fa1c f18a 	uxtah	r1, ip, sl
 80063ba:	b2a3      	uxth	r3, r4
 80063bc:	1ac9      	subs	r1, r1, r3
 80063be:	0c23      	lsrs	r3, r4, #16
 80063c0:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80063c4:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80063c8:	b289      	uxth	r1, r1
 80063ca:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80063ce:	45c8      	cmp	r8, r9
 80063d0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80063d4:	4696      	mov	lr, r2
 80063d6:	f845 3b04 	str.w	r3, [r5], #4
 80063da:	d8e8      	bhi.n	80063ae <__mdiff+0x5c>
 80063dc:	45be      	cmp	lr, r7
 80063de:	d305      	bcc.n	80063ec <__mdiff+0x9a>
 80063e0:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80063e4:	b18b      	cbz	r3, 800640a <__mdiff+0xb8>
 80063e6:	6106      	str	r6, [r0, #16]
 80063e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063ec:	f85e 1b04 	ldr.w	r1, [lr], #4
 80063f0:	fa1c f381 	uxtah	r3, ip, r1
 80063f4:	141a      	asrs	r2, r3, #16
 80063f6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006400:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006404:	f845 3b04 	str.w	r3, [r5], #4
 8006408:	e7e8      	b.n	80063dc <__mdiff+0x8a>
 800640a:	3e01      	subs	r6, #1
 800640c:	e7e8      	b.n	80063e0 <__mdiff+0x8e>

0800640e <__d2b>:
 800640e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006412:	460e      	mov	r6, r1
 8006414:	2101      	movs	r1, #1
 8006416:	ec59 8b10 	vmov	r8, r9, d0
 800641a:	4615      	mov	r5, r2
 800641c:	f7ff fd76 	bl	8005f0c <_Balloc>
 8006420:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006424:	4607      	mov	r7, r0
 8006426:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800642a:	bb34      	cbnz	r4, 800647a <__d2b+0x6c>
 800642c:	9301      	str	r3, [sp, #4]
 800642e:	f1b8 0f00 	cmp.w	r8, #0
 8006432:	d027      	beq.n	8006484 <__d2b+0x76>
 8006434:	a802      	add	r0, sp, #8
 8006436:	f840 8d08 	str.w	r8, [r0, #-8]!
 800643a:	f7ff fe0c 	bl	8006056 <__lo0bits>
 800643e:	9900      	ldr	r1, [sp, #0]
 8006440:	b1f0      	cbz	r0, 8006480 <__d2b+0x72>
 8006442:	9a01      	ldr	r2, [sp, #4]
 8006444:	f1c0 0320 	rsb	r3, r0, #32
 8006448:	fa02 f303 	lsl.w	r3, r2, r3
 800644c:	430b      	orrs	r3, r1
 800644e:	40c2      	lsrs	r2, r0
 8006450:	617b      	str	r3, [r7, #20]
 8006452:	9201      	str	r2, [sp, #4]
 8006454:	9b01      	ldr	r3, [sp, #4]
 8006456:	61bb      	str	r3, [r7, #24]
 8006458:	2b00      	cmp	r3, #0
 800645a:	bf14      	ite	ne
 800645c:	2102      	movne	r1, #2
 800645e:	2101      	moveq	r1, #1
 8006460:	6139      	str	r1, [r7, #16]
 8006462:	b1c4      	cbz	r4, 8006496 <__d2b+0x88>
 8006464:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006468:	4404      	add	r4, r0
 800646a:	6034      	str	r4, [r6, #0]
 800646c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006470:	6028      	str	r0, [r5, #0]
 8006472:	4638      	mov	r0, r7
 8006474:	b003      	add	sp, #12
 8006476:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800647a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800647e:	e7d5      	b.n	800642c <__d2b+0x1e>
 8006480:	6179      	str	r1, [r7, #20]
 8006482:	e7e7      	b.n	8006454 <__d2b+0x46>
 8006484:	a801      	add	r0, sp, #4
 8006486:	f7ff fde6 	bl	8006056 <__lo0bits>
 800648a:	9b01      	ldr	r3, [sp, #4]
 800648c:	617b      	str	r3, [r7, #20]
 800648e:	2101      	movs	r1, #1
 8006490:	6139      	str	r1, [r7, #16]
 8006492:	3020      	adds	r0, #32
 8006494:	e7e5      	b.n	8006462 <__d2b+0x54>
 8006496:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800649a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800649e:	6030      	str	r0, [r6, #0]
 80064a0:	6918      	ldr	r0, [r3, #16]
 80064a2:	f7ff fdb9 	bl	8006018 <__hi0bits>
 80064a6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80064aa:	e7e1      	b.n	8006470 <__d2b+0x62>

080064ac <_calloc_r>:
 80064ac:	b538      	push	{r3, r4, r5, lr}
 80064ae:	fb02 f401 	mul.w	r4, r2, r1
 80064b2:	4621      	mov	r1, r4
 80064b4:	f000 f856 	bl	8006564 <_malloc_r>
 80064b8:	4605      	mov	r5, r0
 80064ba:	b118      	cbz	r0, 80064c4 <_calloc_r+0x18>
 80064bc:	4622      	mov	r2, r4
 80064be:	2100      	movs	r1, #0
 80064c0:	f7fe f96d 	bl	800479e <memset>
 80064c4:	4628      	mov	r0, r5
 80064c6:	bd38      	pop	{r3, r4, r5, pc}

080064c8 <_free_r>:
 80064c8:	b538      	push	{r3, r4, r5, lr}
 80064ca:	4605      	mov	r5, r0
 80064cc:	2900      	cmp	r1, #0
 80064ce:	d045      	beq.n	800655c <_free_r+0x94>
 80064d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80064d4:	1f0c      	subs	r4, r1, #4
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	bfb8      	it	lt
 80064da:	18e4      	addlt	r4, r4, r3
 80064dc:	f000 fa27 	bl	800692e <__malloc_lock>
 80064e0:	4a1f      	ldr	r2, [pc, #124]	; (8006560 <_free_r+0x98>)
 80064e2:	6813      	ldr	r3, [r2, #0]
 80064e4:	4610      	mov	r0, r2
 80064e6:	b933      	cbnz	r3, 80064f6 <_free_r+0x2e>
 80064e8:	6063      	str	r3, [r4, #4]
 80064ea:	6014      	str	r4, [r2, #0]
 80064ec:	4628      	mov	r0, r5
 80064ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80064f2:	f000 ba1d 	b.w	8006930 <__malloc_unlock>
 80064f6:	42a3      	cmp	r3, r4
 80064f8:	d90c      	bls.n	8006514 <_free_r+0x4c>
 80064fa:	6821      	ldr	r1, [r4, #0]
 80064fc:	1862      	adds	r2, r4, r1
 80064fe:	4293      	cmp	r3, r2
 8006500:	bf04      	itt	eq
 8006502:	681a      	ldreq	r2, [r3, #0]
 8006504:	685b      	ldreq	r3, [r3, #4]
 8006506:	6063      	str	r3, [r4, #4]
 8006508:	bf04      	itt	eq
 800650a:	1852      	addeq	r2, r2, r1
 800650c:	6022      	streq	r2, [r4, #0]
 800650e:	6004      	str	r4, [r0, #0]
 8006510:	e7ec      	b.n	80064ec <_free_r+0x24>
 8006512:	4613      	mov	r3, r2
 8006514:	685a      	ldr	r2, [r3, #4]
 8006516:	b10a      	cbz	r2, 800651c <_free_r+0x54>
 8006518:	42a2      	cmp	r2, r4
 800651a:	d9fa      	bls.n	8006512 <_free_r+0x4a>
 800651c:	6819      	ldr	r1, [r3, #0]
 800651e:	1858      	adds	r0, r3, r1
 8006520:	42a0      	cmp	r0, r4
 8006522:	d10b      	bne.n	800653c <_free_r+0x74>
 8006524:	6820      	ldr	r0, [r4, #0]
 8006526:	4401      	add	r1, r0
 8006528:	1858      	adds	r0, r3, r1
 800652a:	4282      	cmp	r2, r0
 800652c:	6019      	str	r1, [r3, #0]
 800652e:	d1dd      	bne.n	80064ec <_free_r+0x24>
 8006530:	6810      	ldr	r0, [r2, #0]
 8006532:	6852      	ldr	r2, [r2, #4]
 8006534:	605a      	str	r2, [r3, #4]
 8006536:	4401      	add	r1, r0
 8006538:	6019      	str	r1, [r3, #0]
 800653a:	e7d7      	b.n	80064ec <_free_r+0x24>
 800653c:	d902      	bls.n	8006544 <_free_r+0x7c>
 800653e:	230c      	movs	r3, #12
 8006540:	602b      	str	r3, [r5, #0]
 8006542:	e7d3      	b.n	80064ec <_free_r+0x24>
 8006544:	6820      	ldr	r0, [r4, #0]
 8006546:	1821      	adds	r1, r4, r0
 8006548:	428a      	cmp	r2, r1
 800654a:	bf04      	itt	eq
 800654c:	6811      	ldreq	r1, [r2, #0]
 800654e:	6852      	ldreq	r2, [r2, #4]
 8006550:	6062      	str	r2, [r4, #4]
 8006552:	bf04      	itt	eq
 8006554:	1809      	addeq	r1, r1, r0
 8006556:	6021      	streq	r1, [r4, #0]
 8006558:	605c      	str	r4, [r3, #4]
 800655a:	e7c7      	b.n	80064ec <_free_r+0x24>
 800655c:	bd38      	pop	{r3, r4, r5, pc}
 800655e:	bf00      	nop
 8006560:	20000300 	.word	0x20000300

08006564 <_malloc_r>:
 8006564:	b570      	push	{r4, r5, r6, lr}
 8006566:	1ccd      	adds	r5, r1, #3
 8006568:	f025 0503 	bic.w	r5, r5, #3
 800656c:	3508      	adds	r5, #8
 800656e:	2d0c      	cmp	r5, #12
 8006570:	bf38      	it	cc
 8006572:	250c      	movcc	r5, #12
 8006574:	2d00      	cmp	r5, #0
 8006576:	4606      	mov	r6, r0
 8006578:	db01      	blt.n	800657e <_malloc_r+0x1a>
 800657a:	42a9      	cmp	r1, r5
 800657c:	d903      	bls.n	8006586 <_malloc_r+0x22>
 800657e:	230c      	movs	r3, #12
 8006580:	6033      	str	r3, [r6, #0]
 8006582:	2000      	movs	r0, #0
 8006584:	bd70      	pop	{r4, r5, r6, pc}
 8006586:	f000 f9d2 	bl	800692e <__malloc_lock>
 800658a:	4a23      	ldr	r2, [pc, #140]	; (8006618 <_malloc_r+0xb4>)
 800658c:	6814      	ldr	r4, [r2, #0]
 800658e:	4621      	mov	r1, r4
 8006590:	b991      	cbnz	r1, 80065b8 <_malloc_r+0x54>
 8006592:	4c22      	ldr	r4, [pc, #136]	; (800661c <_malloc_r+0xb8>)
 8006594:	6823      	ldr	r3, [r4, #0]
 8006596:	b91b      	cbnz	r3, 80065a0 <_malloc_r+0x3c>
 8006598:	4630      	mov	r0, r6
 800659a:	f000 f991 	bl	80068c0 <_sbrk_r>
 800659e:	6020      	str	r0, [r4, #0]
 80065a0:	4629      	mov	r1, r5
 80065a2:	4630      	mov	r0, r6
 80065a4:	f000 f98c 	bl	80068c0 <_sbrk_r>
 80065a8:	1c43      	adds	r3, r0, #1
 80065aa:	d126      	bne.n	80065fa <_malloc_r+0x96>
 80065ac:	230c      	movs	r3, #12
 80065ae:	6033      	str	r3, [r6, #0]
 80065b0:	4630      	mov	r0, r6
 80065b2:	f000 f9bd 	bl	8006930 <__malloc_unlock>
 80065b6:	e7e4      	b.n	8006582 <_malloc_r+0x1e>
 80065b8:	680b      	ldr	r3, [r1, #0]
 80065ba:	1b5b      	subs	r3, r3, r5
 80065bc:	d41a      	bmi.n	80065f4 <_malloc_r+0x90>
 80065be:	2b0b      	cmp	r3, #11
 80065c0:	d90f      	bls.n	80065e2 <_malloc_r+0x7e>
 80065c2:	600b      	str	r3, [r1, #0]
 80065c4:	50cd      	str	r5, [r1, r3]
 80065c6:	18cc      	adds	r4, r1, r3
 80065c8:	4630      	mov	r0, r6
 80065ca:	f000 f9b1 	bl	8006930 <__malloc_unlock>
 80065ce:	f104 000b 	add.w	r0, r4, #11
 80065d2:	1d23      	adds	r3, r4, #4
 80065d4:	f020 0007 	bic.w	r0, r0, #7
 80065d8:	1ac3      	subs	r3, r0, r3
 80065da:	d01b      	beq.n	8006614 <_malloc_r+0xb0>
 80065dc:	425a      	negs	r2, r3
 80065de:	50e2      	str	r2, [r4, r3]
 80065e0:	bd70      	pop	{r4, r5, r6, pc}
 80065e2:	428c      	cmp	r4, r1
 80065e4:	bf0d      	iteet	eq
 80065e6:	6863      	ldreq	r3, [r4, #4]
 80065e8:	684b      	ldrne	r3, [r1, #4]
 80065ea:	6063      	strne	r3, [r4, #4]
 80065ec:	6013      	streq	r3, [r2, #0]
 80065ee:	bf18      	it	ne
 80065f0:	460c      	movne	r4, r1
 80065f2:	e7e9      	b.n	80065c8 <_malloc_r+0x64>
 80065f4:	460c      	mov	r4, r1
 80065f6:	6849      	ldr	r1, [r1, #4]
 80065f8:	e7ca      	b.n	8006590 <_malloc_r+0x2c>
 80065fa:	1cc4      	adds	r4, r0, #3
 80065fc:	f024 0403 	bic.w	r4, r4, #3
 8006600:	42a0      	cmp	r0, r4
 8006602:	d005      	beq.n	8006610 <_malloc_r+0xac>
 8006604:	1a21      	subs	r1, r4, r0
 8006606:	4630      	mov	r0, r6
 8006608:	f000 f95a 	bl	80068c0 <_sbrk_r>
 800660c:	3001      	adds	r0, #1
 800660e:	d0cd      	beq.n	80065ac <_malloc_r+0x48>
 8006610:	6025      	str	r5, [r4, #0]
 8006612:	e7d9      	b.n	80065c8 <_malloc_r+0x64>
 8006614:	bd70      	pop	{r4, r5, r6, pc}
 8006616:	bf00      	nop
 8006618:	20000300 	.word	0x20000300
 800661c:	20000304 	.word	0x20000304

08006620 <__ssputs_r>:
 8006620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006624:	688e      	ldr	r6, [r1, #8]
 8006626:	429e      	cmp	r6, r3
 8006628:	4682      	mov	sl, r0
 800662a:	460c      	mov	r4, r1
 800662c:	4691      	mov	r9, r2
 800662e:	4698      	mov	r8, r3
 8006630:	d835      	bhi.n	800669e <__ssputs_r+0x7e>
 8006632:	898a      	ldrh	r2, [r1, #12]
 8006634:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006638:	d031      	beq.n	800669e <__ssputs_r+0x7e>
 800663a:	6825      	ldr	r5, [r4, #0]
 800663c:	6909      	ldr	r1, [r1, #16]
 800663e:	1a6f      	subs	r7, r5, r1
 8006640:	6965      	ldr	r5, [r4, #20]
 8006642:	2302      	movs	r3, #2
 8006644:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006648:	fb95 f5f3 	sdiv	r5, r5, r3
 800664c:	f108 0301 	add.w	r3, r8, #1
 8006650:	443b      	add	r3, r7
 8006652:	429d      	cmp	r5, r3
 8006654:	bf38      	it	cc
 8006656:	461d      	movcc	r5, r3
 8006658:	0553      	lsls	r3, r2, #21
 800665a:	d531      	bpl.n	80066c0 <__ssputs_r+0xa0>
 800665c:	4629      	mov	r1, r5
 800665e:	f7ff ff81 	bl	8006564 <_malloc_r>
 8006662:	4606      	mov	r6, r0
 8006664:	b950      	cbnz	r0, 800667c <__ssputs_r+0x5c>
 8006666:	230c      	movs	r3, #12
 8006668:	f8ca 3000 	str.w	r3, [sl]
 800666c:	89a3      	ldrh	r3, [r4, #12]
 800666e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006672:	81a3      	strh	r3, [r4, #12]
 8006674:	f04f 30ff 	mov.w	r0, #4294967295
 8006678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800667c:	463a      	mov	r2, r7
 800667e:	6921      	ldr	r1, [r4, #16]
 8006680:	f7fe f882 	bl	8004788 <memcpy>
 8006684:	89a3      	ldrh	r3, [r4, #12]
 8006686:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800668a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800668e:	81a3      	strh	r3, [r4, #12]
 8006690:	6126      	str	r6, [r4, #16]
 8006692:	6165      	str	r5, [r4, #20]
 8006694:	443e      	add	r6, r7
 8006696:	1bed      	subs	r5, r5, r7
 8006698:	6026      	str	r6, [r4, #0]
 800669a:	60a5      	str	r5, [r4, #8]
 800669c:	4646      	mov	r6, r8
 800669e:	4546      	cmp	r6, r8
 80066a0:	bf28      	it	cs
 80066a2:	4646      	movcs	r6, r8
 80066a4:	4632      	mov	r2, r6
 80066a6:	4649      	mov	r1, r9
 80066a8:	6820      	ldr	r0, [r4, #0]
 80066aa:	f000 f926 	bl	80068fa <memmove>
 80066ae:	68a3      	ldr	r3, [r4, #8]
 80066b0:	1b9b      	subs	r3, r3, r6
 80066b2:	60a3      	str	r3, [r4, #8]
 80066b4:	6823      	ldr	r3, [r4, #0]
 80066b6:	441e      	add	r6, r3
 80066b8:	6026      	str	r6, [r4, #0]
 80066ba:	2000      	movs	r0, #0
 80066bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066c0:	462a      	mov	r2, r5
 80066c2:	f000 f936 	bl	8006932 <_realloc_r>
 80066c6:	4606      	mov	r6, r0
 80066c8:	2800      	cmp	r0, #0
 80066ca:	d1e1      	bne.n	8006690 <__ssputs_r+0x70>
 80066cc:	6921      	ldr	r1, [r4, #16]
 80066ce:	4650      	mov	r0, sl
 80066d0:	f7ff fefa 	bl	80064c8 <_free_r>
 80066d4:	e7c7      	b.n	8006666 <__ssputs_r+0x46>
	...

080066d8 <_svfiprintf_r>:
 80066d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066dc:	b09d      	sub	sp, #116	; 0x74
 80066de:	4680      	mov	r8, r0
 80066e0:	9303      	str	r3, [sp, #12]
 80066e2:	898b      	ldrh	r3, [r1, #12]
 80066e4:	061c      	lsls	r4, r3, #24
 80066e6:	460d      	mov	r5, r1
 80066e8:	4616      	mov	r6, r2
 80066ea:	d50f      	bpl.n	800670c <_svfiprintf_r+0x34>
 80066ec:	690b      	ldr	r3, [r1, #16]
 80066ee:	b96b      	cbnz	r3, 800670c <_svfiprintf_r+0x34>
 80066f0:	2140      	movs	r1, #64	; 0x40
 80066f2:	f7ff ff37 	bl	8006564 <_malloc_r>
 80066f6:	6028      	str	r0, [r5, #0]
 80066f8:	6128      	str	r0, [r5, #16]
 80066fa:	b928      	cbnz	r0, 8006708 <_svfiprintf_r+0x30>
 80066fc:	230c      	movs	r3, #12
 80066fe:	f8c8 3000 	str.w	r3, [r8]
 8006702:	f04f 30ff 	mov.w	r0, #4294967295
 8006706:	e0c5      	b.n	8006894 <_svfiprintf_r+0x1bc>
 8006708:	2340      	movs	r3, #64	; 0x40
 800670a:	616b      	str	r3, [r5, #20]
 800670c:	2300      	movs	r3, #0
 800670e:	9309      	str	r3, [sp, #36]	; 0x24
 8006710:	2320      	movs	r3, #32
 8006712:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006716:	2330      	movs	r3, #48	; 0x30
 8006718:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800671c:	f04f 0b01 	mov.w	fp, #1
 8006720:	4637      	mov	r7, r6
 8006722:	463c      	mov	r4, r7
 8006724:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006728:	2b00      	cmp	r3, #0
 800672a:	d13c      	bne.n	80067a6 <_svfiprintf_r+0xce>
 800672c:	ebb7 0a06 	subs.w	sl, r7, r6
 8006730:	d00b      	beq.n	800674a <_svfiprintf_r+0x72>
 8006732:	4653      	mov	r3, sl
 8006734:	4632      	mov	r2, r6
 8006736:	4629      	mov	r1, r5
 8006738:	4640      	mov	r0, r8
 800673a:	f7ff ff71 	bl	8006620 <__ssputs_r>
 800673e:	3001      	adds	r0, #1
 8006740:	f000 80a3 	beq.w	800688a <_svfiprintf_r+0x1b2>
 8006744:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006746:	4453      	add	r3, sl
 8006748:	9309      	str	r3, [sp, #36]	; 0x24
 800674a:	783b      	ldrb	r3, [r7, #0]
 800674c:	2b00      	cmp	r3, #0
 800674e:	f000 809c 	beq.w	800688a <_svfiprintf_r+0x1b2>
 8006752:	2300      	movs	r3, #0
 8006754:	f04f 32ff 	mov.w	r2, #4294967295
 8006758:	9304      	str	r3, [sp, #16]
 800675a:	9307      	str	r3, [sp, #28]
 800675c:	9205      	str	r2, [sp, #20]
 800675e:	9306      	str	r3, [sp, #24]
 8006760:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006764:	931a      	str	r3, [sp, #104]	; 0x68
 8006766:	2205      	movs	r2, #5
 8006768:	7821      	ldrb	r1, [r4, #0]
 800676a:	4850      	ldr	r0, [pc, #320]	; (80068ac <_svfiprintf_r+0x1d4>)
 800676c:	f7f9 fd58 	bl	8000220 <memchr>
 8006770:	1c67      	adds	r7, r4, #1
 8006772:	9b04      	ldr	r3, [sp, #16]
 8006774:	b9d8      	cbnz	r0, 80067ae <_svfiprintf_r+0xd6>
 8006776:	06d9      	lsls	r1, r3, #27
 8006778:	bf44      	itt	mi
 800677a:	2220      	movmi	r2, #32
 800677c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006780:	071a      	lsls	r2, r3, #28
 8006782:	bf44      	itt	mi
 8006784:	222b      	movmi	r2, #43	; 0x2b
 8006786:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800678a:	7822      	ldrb	r2, [r4, #0]
 800678c:	2a2a      	cmp	r2, #42	; 0x2a
 800678e:	d016      	beq.n	80067be <_svfiprintf_r+0xe6>
 8006790:	9a07      	ldr	r2, [sp, #28]
 8006792:	2100      	movs	r1, #0
 8006794:	200a      	movs	r0, #10
 8006796:	4627      	mov	r7, r4
 8006798:	3401      	adds	r4, #1
 800679a:	783b      	ldrb	r3, [r7, #0]
 800679c:	3b30      	subs	r3, #48	; 0x30
 800679e:	2b09      	cmp	r3, #9
 80067a0:	d951      	bls.n	8006846 <_svfiprintf_r+0x16e>
 80067a2:	b1c9      	cbz	r1, 80067d8 <_svfiprintf_r+0x100>
 80067a4:	e011      	b.n	80067ca <_svfiprintf_r+0xf2>
 80067a6:	2b25      	cmp	r3, #37	; 0x25
 80067a8:	d0c0      	beq.n	800672c <_svfiprintf_r+0x54>
 80067aa:	4627      	mov	r7, r4
 80067ac:	e7b9      	b.n	8006722 <_svfiprintf_r+0x4a>
 80067ae:	4a3f      	ldr	r2, [pc, #252]	; (80068ac <_svfiprintf_r+0x1d4>)
 80067b0:	1a80      	subs	r0, r0, r2
 80067b2:	fa0b f000 	lsl.w	r0, fp, r0
 80067b6:	4318      	orrs	r0, r3
 80067b8:	9004      	str	r0, [sp, #16]
 80067ba:	463c      	mov	r4, r7
 80067bc:	e7d3      	b.n	8006766 <_svfiprintf_r+0x8e>
 80067be:	9a03      	ldr	r2, [sp, #12]
 80067c0:	1d11      	adds	r1, r2, #4
 80067c2:	6812      	ldr	r2, [r2, #0]
 80067c4:	9103      	str	r1, [sp, #12]
 80067c6:	2a00      	cmp	r2, #0
 80067c8:	db01      	blt.n	80067ce <_svfiprintf_r+0xf6>
 80067ca:	9207      	str	r2, [sp, #28]
 80067cc:	e004      	b.n	80067d8 <_svfiprintf_r+0x100>
 80067ce:	4252      	negs	r2, r2
 80067d0:	f043 0302 	orr.w	r3, r3, #2
 80067d4:	9207      	str	r2, [sp, #28]
 80067d6:	9304      	str	r3, [sp, #16]
 80067d8:	783b      	ldrb	r3, [r7, #0]
 80067da:	2b2e      	cmp	r3, #46	; 0x2e
 80067dc:	d10e      	bne.n	80067fc <_svfiprintf_r+0x124>
 80067de:	787b      	ldrb	r3, [r7, #1]
 80067e0:	2b2a      	cmp	r3, #42	; 0x2a
 80067e2:	f107 0101 	add.w	r1, r7, #1
 80067e6:	d132      	bne.n	800684e <_svfiprintf_r+0x176>
 80067e8:	9b03      	ldr	r3, [sp, #12]
 80067ea:	1d1a      	adds	r2, r3, #4
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	9203      	str	r2, [sp, #12]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	bfb8      	it	lt
 80067f4:	f04f 33ff 	movlt.w	r3, #4294967295
 80067f8:	3702      	adds	r7, #2
 80067fa:	9305      	str	r3, [sp, #20]
 80067fc:	4c2c      	ldr	r4, [pc, #176]	; (80068b0 <_svfiprintf_r+0x1d8>)
 80067fe:	7839      	ldrb	r1, [r7, #0]
 8006800:	2203      	movs	r2, #3
 8006802:	4620      	mov	r0, r4
 8006804:	f7f9 fd0c 	bl	8000220 <memchr>
 8006808:	b138      	cbz	r0, 800681a <_svfiprintf_r+0x142>
 800680a:	2340      	movs	r3, #64	; 0x40
 800680c:	1b00      	subs	r0, r0, r4
 800680e:	fa03 f000 	lsl.w	r0, r3, r0
 8006812:	9b04      	ldr	r3, [sp, #16]
 8006814:	4303      	orrs	r3, r0
 8006816:	9304      	str	r3, [sp, #16]
 8006818:	3701      	adds	r7, #1
 800681a:	7839      	ldrb	r1, [r7, #0]
 800681c:	4825      	ldr	r0, [pc, #148]	; (80068b4 <_svfiprintf_r+0x1dc>)
 800681e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006822:	2206      	movs	r2, #6
 8006824:	1c7e      	adds	r6, r7, #1
 8006826:	f7f9 fcfb 	bl	8000220 <memchr>
 800682a:	2800      	cmp	r0, #0
 800682c:	d035      	beq.n	800689a <_svfiprintf_r+0x1c2>
 800682e:	4b22      	ldr	r3, [pc, #136]	; (80068b8 <_svfiprintf_r+0x1e0>)
 8006830:	b9fb      	cbnz	r3, 8006872 <_svfiprintf_r+0x19a>
 8006832:	9b03      	ldr	r3, [sp, #12]
 8006834:	3307      	adds	r3, #7
 8006836:	f023 0307 	bic.w	r3, r3, #7
 800683a:	3308      	adds	r3, #8
 800683c:	9303      	str	r3, [sp, #12]
 800683e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006840:	444b      	add	r3, r9
 8006842:	9309      	str	r3, [sp, #36]	; 0x24
 8006844:	e76c      	b.n	8006720 <_svfiprintf_r+0x48>
 8006846:	fb00 3202 	mla	r2, r0, r2, r3
 800684a:	2101      	movs	r1, #1
 800684c:	e7a3      	b.n	8006796 <_svfiprintf_r+0xbe>
 800684e:	2300      	movs	r3, #0
 8006850:	9305      	str	r3, [sp, #20]
 8006852:	4618      	mov	r0, r3
 8006854:	240a      	movs	r4, #10
 8006856:	460f      	mov	r7, r1
 8006858:	3101      	adds	r1, #1
 800685a:	783a      	ldrb	r2, [r7, #0]
 800685c:	3a30      	subs	r2, #48	; 0x30
 800685e:	2a09      	cmp	r2, #9
 8006860:	d903      	bls.n	800686a <_svfiprintf_r+0x192>
 8006862:	2b00      	cmp	r3, #0
 8006864:	d0ca      	beq.n	80067fc <_svfiprintf_r+0x124>
 8006866:	9005      	str	r0, [sp, #20]
 8006868:	e7c8      	b.n	80067fc <_svfiprintf_r+0x124>
 800686a:	fb04 2000 	mla	r0, r4, r0, r2
 800686e:	2301      	movs	r3, #1
 8006870:	e7f1      	b.n	8006856 <_svfiprintf_r+0x17e>
 8006872:	ab03      	add	r3, sp, #12
 8006874:	9300      	str	r3, [sp, #0]
 8006876:	462a      	mov	r2, r5
 8006878:	4b10      	ldr	r3, [pc, #64]	; (80068bc <_svfiprintf_r+0x1e4>)
 800687a:	a904      	add	r1, sp, #16
 800687c:	4640      	mov	r0, r8
 800687e:	f7fe f82d 	bl	80048dc <_printf_float>
 8006882:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006886:	4681      	mov	r9, r0
 8006888:	d1d9      	bne.n	800683e <_svfiprintf_r+0x166>
 800688a:	89ab      	ldrh	r3, [r5, #12]
 800688c:	065b      	lsls	r3, r3, #25
 800688e:	f53f af38 	bmi.w	8006702 <_svfiprintf_r+0x2a>
 8006892:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006894:	b01d      	add	sp, #116	; 0x74
 8006896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800689a:	ab03      	add	r3, sp, #12
 800689c:	9300      	str	r3, [sp, #0]
 800689e:	462a      	mov	r2, r5
 80068a0:	4b06      	ldr	r3, [pc, #24]	; (80068bc <_svfiprintf_r+0x1e4>)
 80068a2:	a904      	add	r1, sp, #16
 80068a4:	4640      	mov	r0, r8
 80068a6:	f7fe facf 	bl	8004e48 <_printf_i>
 80068aa:	e7ea      	b.n	8006882 <_svfiprintf_r+0x1aa>
 80068ac:	08007914 	.word	0x08007914
 80068b0:	0800791a 	.word	0x0800791a
 80068b4:	0800791e 	.word	0x0800791e
 80068b8:	080048dd 	.word	0x080048dd
 80068bc:	08006621 	.word	0x08006621

080068c0 <_sbrk_r>:
 80068c0:	b538      	push	{r3, r4, r5, lr}
 80068c2:	4c06      	ldr	r4, [pc, #24]	; (80068dc <_sbrk_r+0x1c>)
 80068c4:	2300      	movs	r3, #0
 80068c6:	4605      	mov	r5, r0
 80068c8:	4608      	mov	r0, r1
 80068ca:	6023      	str	r3, [r4, #0]
 80068cc:	f000 ff2a 	bl	8007724 <_sbrk>
 80068d0:	1c43      	adds	r3, r0, #1
 80068d2:	d102      	bne.n	80068da <_sbrk_r+0x1a>
 80068d4:	6823      	ldr	r3, [r4, #0]
 80068d6:	b103      	cbz	r3, 80068da <_sbrk_r+0x1a>
 80068d8:	602b      	str	r3, [r5, #0]
 80068da:	bd38      	pop	{r3, r4, r5, pc}
 80068dc:	20000c34 	.word	0x20000c34

080068e0 <__ascii_wctomb>:
 80068e0:	b149      	cbz	r1, 80068f6 <__ascii_wctomb+0x16>
 80068e2:	2aff      	cmp	r2, #255	; 0xff
 80068e4:	bf85      	ittet	hi
 80068e6:	238a      	movhi	r3, #138	; 0x8a
 80068e8:	6003      	strhi	r3, [r0, #0]
 80068ea:	700a      	strbls	r2, [r1, #0]
 80068ec:	f04f 30ff 	movhi.w	r0, #4294967295
 80068f0:	bf98      	it	ls
 80068f2:	2001      	movls	r0, #1
 80068f4:	4770      	bx	lr
 80068f6:	4608      	mov	r0, r1
 80068f8:	4770      	bx	lr

080068fa <memmove>:
 80068fa:	4288      	cmp	r0, r1
 80068fc:	b510      	push	{r4, lr}
 80068fe:	eb01 0302 	add.w	r3, r1, r2
 8006902:	d803      	bhi.n	800690c <memmove+0x12>
 8006904:	1e42      	subs	r2, r0, #1
 8006906:	4299      	cmp	r1, r3
 8006908:	d10c      	bne.n	8006924 <memmove+0x2a>
 800690a:	bd10      	pop	{r4, pc}
 800690c:	4298      	cmp	r0, r3
 800690e:	d2f9      	bcs.n	8006904 <memmove+0xa>
 8006910:	1881      	adds	r1, r0, r2
 8006912:	1ad2      	subs	r2, r2, r3
 8006914:	42d3      	cmn	r3, r2
 8006916:	d100      	bne.n	800691a <memmove+0x20>
 8006918:	bd10      	pop	{r4, pc}
 800691a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800691e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006922:	e7f7      	b.n	8006914 <memmove+0x1a>
 8006924:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006928:	f802 4f01 	strb.w	r4, [r2, #1]!
 800692c:	e7eb      	b.n	8006906 <memmove+0xc>

0800692e <__malloc_lock>:
 800692e:	4770      	bx	lr

08006930 <__malloc_unlock>:
 8006930:	4770      	bx	lr

08006932 <_realloc_r>:
 8006932:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006934:	4607      	mov	r7, r0
 8006936:	4614      	mov	r4, r2
 8006938:	460e      	mov	r6, r1
 800693a:	b921      	cbnz	r1, 8006946 <_realloc_r+0x14>
 800693c:	4611      	mov	r1, r2
 800693e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006942:	f7ff be0f 	b.w	8006564 <_malloc_r>
 8006946:	b922      	cbnz	r2, 8006952 <_realloc_r+0x20>
 8006948:	f7ff fdbe 	bl	80064c8 <_free_r>
 800694c:	4625      	mov	r5, r4
 800694e:	4628      	mov	r0, r5
 8006950:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006952:	f000 f814 	bl	800697e <_malloc_usable_size_r>
 8006956:	4284      	cmp	r4, r0
 8006958:	d90f      	bls.n	800697a <_realloc_r+0x48>
 800695a:	4621      	mov	r1, r4
 800695c:	4638      	mov	r0, r7
 800695e:	f7ff fe01 	bl	8006564 <_malloc_r>
 8006962:	4605      	mov	r5, r0
 8006964:	2800      	cmp	r0, #0
 8006966:	d0f2      	beq.n	800694e <_realloc_r+0x1c>
 8006968:	4631      	mov	r1, r6
 800696a:	4622      	mov	r2, r4
 800696c:	f7fd ff0c 	bl	8004788 <memcpy>
 8006970:	4631      	mov	r1, r6
 8006972:	4638      	mov	r0, r7
 8006974:	f7ff fda8 	bl	80064c8 <_free_r>
 8006978:	e7e9      	b.n	800694e <_realloc_r+0x1c>
 800697a:	4635      	mov	r5, r6
 800697c:	e7e7      	b.n	800694e <_realloc_r+0x1c>

0800697e <_malloc_usable_size_r>:
 800697e:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8006982:	2800      	cmp	r0, #0
 8006984:	f1a0 0004 	sub.w	r0, r0, #4
 8006988:	bfbc      	itt	lt
 800698a:	580b      	ldrlt	r3, [r1, r0]
 800698c:	18c0      	addlt	r0, r0, r3
 800698e:	4770      	bx	lr

08006990 <round>:
 8006990:	ec51 0b10 	vmov	r0, r1, d0
 8006994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006996:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800699a:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800699e:	2c13      	cmp	r4, #19
 80069a0:	460b      	mov	r3, r1
 80069a2:	460f      	mov	r7, r1
 80069a4:	dc17      	bgt.n	80069d6 <round+0x46>
 80069a6:	2c00      	cmp	r4, #0
 80069a8:	da09      	bge.n	80069be <round+0x2e>
 80069aa:	3401      	adds	r4, #1
 80069ac:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 80069b0:	d103      	bne.n	80069ba <round+0x2a>
 80069b2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80069b6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80069ba:	2100      	movs	r1, #0
 80069bc:	e028      	b.n	8006a10 <round+0x80>
 80069be:	4a16      	ldr	r2, [pc, #88]	; (8006a18 <round+0x88>)
 80069c0:	4122      	asrs	r2, r4
 80069c2:	4211      	tst	r1, r2
 80069c4:	d100      	bne.n	80069c8 <round+0x38>
 80069c6:	b180      	cbz	r0, 80069ea <round+0x5a>
 80069c8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80069cc:	4123      	asrs	r3, r4
 80069ce:	443b      	add	r3, r7
 80069d0:	ea23 0302 	bic.w	r3, r3, r2
 80069d4:	e7f1      	b.n	80069ba <round+0x2a>
 80069d6:	2c33      	cmp	r4, #51	; 0x33
 80069d8:	dd0a      	ble.n	80069f0 <round+0x60>
 80069da:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80069de:	d104      	bne.n	80069ea <round+0x5a>
 80069e0:	ee10 2a10 	vmov	r2, s0
 80069e4:	460b      	mov	r3, r1
 80069e6:	f7f9 fc71 	bl	80002cc <__adddf3>
 80069ea:	ec41 0b10 	vmov	d0, r0, r1
 80069ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069f0:	f2a5 4213 	subw	r2, r5, #1043	; 0x413
 80069f4:	f04f 35ff 	mov.w	r5, #4294967295
 80069f8:	40d5      	lsrs	r5, r2
 80069fa:	4228      	tst	r0, r5
 80069fc:	d0f5      	beq.n	80069ea <round+0x5a>
 80069fe:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8006a02:	2201      	movs	r2, #1
 8006a04:	40a2      	lsls	r2, r4
 8006a06:	1812      	adds	r2, r2, r0
 8006a08:	bf28      	it	cs
 8006a0a:	3301      	addcs	r3, #1
 8006a0c:	ea22 0105 	bic.w	r1, r2, r5
 8006a10:	4608      	mov	r0, r1
 8006a12:	4619      	mov	r1, r3
 8006a14:	e7e9      	b.n	80069ea <round+0x5a>
 8006a16:	bf00      	nop
 8006a18:	000fffff 	.word	0x000fffff

08006a1c <atanf>:
 8006a1c:	b538      	push	{r3, r4, r5, lr}
 8006a1e:	ee10 5a10 	vmov	r5, s0
 8006a22:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8006a26:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8006a2a:	eef0 7a40 	vmov.f32	s15, s0
 8006a2e:	db10      	blt.n	8006a52 <atanf+0x36>
 8006a30:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8006a34:	dd04      	ble.n	8006a40 <atanf+0x24>
 8006a36:	ee70 7a00 	vadd.f32	s15, s0, s0
 8006a3a:	eeb0 0a67 	vmov.f32	s0, s15
 8006a3e:	bd38      	pop	{r3, r4, r5, pc}
 8006a40:	eddf 7a4c 	vldr	s15, [pc, #304]	; 8006b74 <atanf+0x158>
 8006a44:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8006b78 <atanf+0x15c>
 8006a48:	2d00      	cmp	r5, #0
 8006a4a:	bfc8      	it	gt
 8006a4c:	eef0 7a47 	vmovgt.f32	s15, s14
 8006a50:	e7f3      	b.n	8006a3a <atanf+0x1e>
 8006a52:	4b4a      	ldr	r3, [pc, #296]	; (8006b7c <atanf+0x160>)
 8006a54:	429c      	cmp	r4, r3
 8006a56:	dc10      	bgt.n	8006a7a <atanf+0x5e>
 8006a58:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8006a5c:	da0a      	bge.n	8006a74 <atanf+0x58>
 8006a5e:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8006b80 <atanf+0x164>
 8006a62:	ee30 7a07 	vadd.f32	s14, s0, s14
 8006a66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a6a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8006a6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a72:	dce2      	bgt.n	8006a3a <atanf+0x1e>
 8006a74:	f04f 33ff 	mov.w	r3, #4294967295
 8006a78:	e013      	b.n	8006aa2 <atanf+0x86>
 8006a7a:	f000 f8a1 	bl	8006bc0 <fabsf>
 8006a7e:	4b41      	ldr	r3, [pc, #260]	; (8006b84 <atanf+0x168>)
 8006a80:	429c      	cmp	r4, r3
 8006a82:	dc4d      	bgt.n	8006b20 <atanf+0x104>
 8006a84:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8006a88:	429c      	cmp	r4, r3
 8006a8a:	dc3f      	bgt.n	8006b0c <atanf+0xf0>
 8006a8c:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8006a90:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8006a94:	eea0 7a27 	vfma.f32	s14, s0, s15
 8006a98:	2300      	movs	r3, #0
 8006a9a:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006a9e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8006aa2:	1c5a      	adds	r2, r3, #1
 8006aa4:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8006aa8:	eddf 6a37 	vldr	s13, [pc, #220]	; 8006b88 <atanf+0x16c>
 8006aac:	eddf 5a37 	vldr	s11, [pc, #220]	; 8006b8c <atanf+0x170>
 8006ab0:	ed9f 5a37 	vldr	s10, [pc, #220]	; 8006b90 <atanf+0x174>
 8006ab4:	ee26 7a06 	vmul.f32	s14, s12, s12
 8006ab8:	eee7 5a26 	vfma.f32	s11, s14, s13
 8006abc:	eddf 6a35 	vldr	s13, [pc, #212]	; 8006b94 <atanf+0x178>
 8006ac0:	eee7 6a25 	vfma.f32	s13, s14, s11
 8006ac4:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006b98 <atanf+0x17c>
 8006ac8:	eee7 5a26 	vfma.f32	s11, s14, s13
 8006acc:	eddf 6a33 	vldr	s13, [pc, #204]	; 8006b9c <atanf+0x180>
 8006ad0:	eee7 6a25 	vfma.f32	s13, s14, s11
 8006ad4:	eddf 5a32 	vldr	s11, [pc, #200]	; 8006ba0 <atanf+0x184>
 8006ad8:	eee7 5a26 	vfma.f32	s11, s14, s13
 8006adc:	eddf 6a31 	vldr	s13, [pc, #196]	; 8006ba4 <atanf+0x188>
 8006ae0:	eea7 5a26 	vfma.f32	s10, s14, s13
 8006ae4:	eddf 6a30 	vldr	s13, [pc, #192]	; 8006ba8 <atanf+0x18c>
 8006ae8:	eee7 6a05 	vfma.f32	s13, s14, s10
 8006aec:	ed9f 5a2f 	vldr	s10, [pc, #188]	; 8006bac <atanf+0x190>
 8006af0:	eea7 5a26 	vfma.f32	s10, s14, s13
 8006af4:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8006bb0 <atanf+0x194>
 8006af8:	eee7 6a05 	vfma.f32	s13, s14, s10
 8006afc:	ee26 7a87 	vmul.f32	s14, s13, s14
 8006b00:	ee05 7a86 	vmla.f32	s14, s11, s12
 8006b04:	d121      	bne.n	8006b4a <atanf+0x12e>
 8006b06:	eee7 7ac7 	vfms.f32	s15, s15, s14
 8006b0a:	e796      	b.n	8006a3a <atanf+0x1e>
 8006b0c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8006b10:	ee30 7a67 	vsub.f32	s14, s0, s15
 8006b14:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006b18:	2301      	movs	r3, #1
 8006b1a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8006b1e:	e7c0      	b.n	8006aa2 <atanf+0x86>
 8006b20:	4b24      	ldr	r3, [pc, #144]	; (8006bb4 <atanf+0x198>)
 8006b22:	429c      	cmp	r4, r3
 8006b24:	dc0b      	bgt.n	8006b3e <atanf+0x122>
 8006b26:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8006b2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006b2e:	eea0 7a27 	vfma.f32	s14, s0, s15
 8006b32:	2302      	movs	r3, #2
 8006b34:	ee70 6a67 	vsub.f32	s13, s0, s15
 8006b38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b3c:	e7b1      	b.n	8006aa2 <atanf+0x86>
 8006b3e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8006b42:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8006b46:	2303      	movs	r3, #3
 8006b48:	e7ab      	b.n	8006aa2 <atanf+0x86>
 8006b4a:	4a1b      	ldr	r2, [pc, #108]	; (8006bb8 <atanf+0x19c>)
 8006b4c:	491b      	ldr	r1, [pc, #108]	; (8006bbc <atanf+0x1a0>)
 8006b4e:	009b      	lsls	r3, r3, #2
 8006b50:	441a      	add	r2, r3
 8006b52:	440b      	add	r3, r1
 8006b54:	edd3 6a00 	vldr	s13, [r3]
 8006b58:	eed7 6a87 	vfnms.f32	s13, s15, s14
 8006b5c:	2d00      	cmp	r5, #0
 8006b5e:	ed92 7a00 	vldr	s14, [r2]
 8006b62:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006b66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006b6a:	bfb8      	it	lt
 8006b6c:	eef1 7a67 	vneglt.f32	s15, s15
 8006b70:	e763      	b.n	8006a3a <atanf+0x1e>
 8006b72:	bf00      	nop
 8006b74:	bfc90fdb 	.word	0xbfc90fdb
 8006b78:	3fc90fdb 	.word	0x3fc90fdb
 8006b7c:	3edfffff 	.word	0x3edfffff
 8006b80:	7149f2ca 	.word	0x7149f2ca
 8006b84:	3f97ffff 	.word	0x3f97ffff
 8006b88:	3c8569d7 	.word	0x3c8569d7
 8006b8c:	3d4bda59 	.word	0x3d4bda59
 8006b90:	bd6ef16b 	.word	0xbd6ef16b
 8006b94:	3d886b35 	.word	0x3d886b35
 8006b98:	3dba2e6e 	.word	0x3dba2e6e
 8006b9c:	3e124925 	.word	0x3e124925
 8006ba0:	3eaaaaab 	.word	0x3eaaaaab
 8006ba4:	bd15a221 	.word	0xbd15a221
 8006ba8:	bd9d8795 	.word	0xbd9d8795
 8006bac:	bde38e38 	.word	0xbde38e38
 8006bb0:	be4ccccd 	.word	0xbe4ccccd
 8006bb4:	401bffff 	.word	0x401bffff
 8006bb8:	08007a28 	.word	0x08007a28
 8006bbc:	08007a38 	.word	0x08007a38

08006bc0 <fabsf>:
 8006bc0:	ee10 3a10 	vmov	r3, s0
 8006bc4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006bc8:	ee00 3a10 	vmov	s0, r3
 8006bcc:	4770      	bx	lr
	...

08006bd0 <floorf>:
 8006bd0:	ee10 3a10 	vmov	r3, s0
 8006bd4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006bd8:	0dca      	lsrs	r2, r1, #23
 8006bda:	3a7f      	subs	r2, #127	; 0x7f
 8006bdc:	2a16      	cmp	r2, #22
 8006bde:	dc2a      	bgt.n	8006c36 <floorf+0x66>
 8006be0:	2a00      	cmp	r2, #0
 8006be2:	da11      	bge.n	8006c08 <floorf+0x38>
 8006be4:	eddf 7a18 	vldr	s15, [pc, #96]	; 8006c48 <floorf+0x78>
 8006be8:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006bec:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bf4:	dd05      	ble.n	8006c02 <floorf+0x32>
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	da23      	bge.n	8006c42 <floorf+0x72>
 8006bfa:	4a14      	ldr	r2, [pc, #80]	; (8006c4c <floorf+0x7c>)
 8006bfc:	2900      	cmp	r1, #0
 8006bfe:	bf18      	it	ne
 8006c00:	4613      	movne	r3, r2
 8006c02:	ee00 3a10 	vmov	s0, r3
 8006c06:	4770      	bx	lr
 8006c08:	4911      	ldr	r1, [pc, #68]	; (8006c50 <floorf+0x80>)
 8006c0a:	4111      	asrs	r1, r2
 8006c0c:	420b      	tst	r3, r1
 8006c0e:	d0fa      	beq.n	8006c06 <floorf+0x36>
 8006c10:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8006c48 <floorf+0x78>
 8006c14:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006c18:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006c1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c20:	ddef      	ble.n	8006c02 <floorf+0x32>
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	bfbe      	ittt	lt
 8006c26:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8006c2a:	fa40 f202 	asrlt.w	r2, r0, r2
 8006c2e:	189b      	addlt	r3, r3, r2
 8006c30:	ea23 0301 	bic.w	r3, r3, r1
 8006c34:	e7e5      	b.n	8006c02 <floorf+0x32>
 8006c36:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8006c3a:	d3e4      	bcc.n	8006c06 <floorf+0x36>
 8006c3c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8006c40:	4770      	bx	lr
 8006c42:	2300      	movs	r3, #0
 8006c44:	e7dd      	b.n	8006c02 <floorf+0x32>
 8006c46:	bf00      	nop
 8006c48:	7149f2ca 	.word	0x7149f2ca
 8006c4c:	bf800000 	.word	0xbf800000
 8006c50:	007fffff 	.word	0x007fffff

08006c54 <acos>:
 8006c54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c56:	ed2d 8b02 	vpush	{d8}
 8006c5a:	4e26      	ldr	r6, [pc, #152]	; (8006cf4 <acos+0xa0>)
 8006c5c:	b08b      	sub	sp, #44	; 0x2c
 8006c5e:	ec55 4b10 	vmov	r4, r5, d0
 8006c62:	f000 f8f9 	bl	8006e58 <__ieee754_acos>
 8006c66:	f996 3000 	ldrsb.w	r3, [r6]
 8006c6a:	eeb0 8a40 	vmov.f32	s16, s0
 8006c6e:	eef0 8a60 	vmov.f32	s17, s1
 8006c72:	3301      	adds	r3, #1
 8006c74:	d036      	beq.n	8006ce4 <acos+0x90>
 8006c76:	4622      	mov	r2, r4
 8006c78:	462b      	mov	r3, r5
 8006c7a:	4620      	mov	r0, r4
 8006c7c:	4629      	mov	r1, r5
 8006c7e:	f7f9 ff71 	bl	8000b64 <__aeabi_dcmpun>
 8006c82:	4607      	mov	r7, r0
 8006c84:	bb70      	cbnz	r0, 8006ce4 <acos+0x90>
 8006c86:	ec45 4b10 	vmov	d0, r4, r5
 8006c8a:	f000 fd34 	bl	80076f6 <fabs>
 8006c8e:	2200      	movs	r2, #0
 8006c90:	4b19      	ldr	r3, [pc, #100]	; (8006cf8 <acos+0xa4>)
 8006c92:	ec51 0b10 	vmov	r0, r1, d0
 8006c96:	f7f9 ff5b 	bl	8000b50 <__aeabi_dcmpgt>
 8006c9a:	b318      	cbz	r0, 8006ce4 <acos+0x90>
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	9300      	str	r3, [sp, #0]
 8006ca0:	4816      	ldr	r0, [pc, #88]	; (8006cfc <acos+0xa8>)
 8006ca2:	4b17      	ldr	r3, [pc, #92]	; (8006d00 <acos+0xac>)
 8006ca4:	9301      	str	r3, [sp, #4]
 8006ca6:	9708      	str	r7, [sp, #32]
 8006ca8:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8006cac:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006cb0:	f000 fd2a 	bl	8007708 <nan>
 8006cb4:	f996 3000 	ldrsb.w	r3, [r6]
 8006cb8:	2b02      	cmp	r3, #2
 8006cba:	ed8d 0b06 	vstr	d0, [sp, #24]
 8006cbe:	d104      	bne.n	8006cca <acos+0x76>
 8006cc0:	f000 fd2a 	bl	8007718 <__errno>
 8006cc4:	2321      	movs	r3, #33	; 0x21
 8006cc6:	6003      	str	r3, [r0, #0]
 8006cc8:	e004      	b.n	8006cd4 <acos+0x80>
 8006cca:	4668      	mov	r0, sp
 8006ccc:	f000 fd1a 	bl	8007704 <matherr>
 8006cd0:	2800      	cmp	r0, #0
 8006cd2:	d0f5      	beq.n	8006cc0 <acos+0x6c>
 8006cd4:	9b08      	ldr	r3, [sp, #32]
 8006cd6:	b11b      	cbz	r3, 8006ce0 <acos+0x8c>
 8006cd8:	f000 fd1e 	bl	8007718 <__errno>
 8006cdc:	9b08      	ldr	r3, [sp, #32]
 8006cde:	6003      	str	r3, [r0, #0]
 8006ce0:	ed9d 8b06 	vldr	d8, [sp, #24]
 8006ce4:	eeb0 0a48 	vmov.f32	s0, s16
 8006ce8:	eef0 0a68 	vmov.f32	s1, s17
 8006cec:	b00b      	add	sp, #44	; 0x2c
 8006cee:	ecbd 8b02 	vpop	{d8}
 8006cf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cf4:	200002d0 	.word	0x200002d0
 8006cf8:	3ff00000 	.word	0x3ff00000
 8006cfc:	08007796 	.word	0x08007796
 8006d00:	08007a48 	.word	0x08007a48

08006d04 <acosf>:
 8006d04:	b510      	push	{r4, lr}
 8006d06:	ed2d 8b02 	vpush	{d8}
 8006d0a:	4c27      	ldr	r4, [pc, #156]	; (8006da8 <acosf+0xa4>)
 8006d0c:	b08a      	sub	sp, #40	; 0x28
 8006d0e:	eeb0 8a40 	vmov.f32	s16, s0
 8006d12:	f000 fbad 	bl	8007470 <__ieee754_acosf>
 8006d16:	f994 3000 	ldrsb.w	r3, [r4]
 8006d1a:	3301      	adds	r3, #1
 8006d1c:	eef0 8a40 	vmov.f32	s17, s0
 8006d20:	d03c      	beq.n	8006d9c <acosf+0x98>
 8006d22:	eeb4 8a48 	vcmp.f32	s16, s16
 8006d26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d2a:	d637      	bvs.n	8006d9c <acosf+0x98>
 8006d2c:	eeb0 0a48 	vmov.f32	s0, s16
 8006d30:	f7ff ff46 	bl	8006bc0 <fabsf>
 8006d34:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8006d38:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8006d3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d40:	dd2c      	ble.n	8006d9c <acosf+0x98>
 8006d42:	2301      	movs	r3, #1
 8006d44:	9300      	str	r3, [sp, #0]
 8006d46:	4b19      	ldr	r3, [pc, #100]	; (8006dac <acosf+0xa8>)
 8006d48:	9301      	str	r3, [sp, #4]
 8006d4a:	ee18 0a10 	vmov	r0, s16
 8006d4e:	2300      	movs	r3, #0
 8006d50:	9308      	str	r3, [sp, #32]
 8006d52:	f7f9 fc19 	bl	8000588 <__aeabi_f2d>
 8006d56:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006d5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d5e:	4814      	ldr	r0, [pc, #80]	; (8006db0 <acosf+0xac>)
 8006d60:	f000 fcd2 	bl	8007708 <nan>
 8006d64:	f994 3000 	ldrsb.w	r3, [r4]
 8006d68:	2b02      	cmp	r3, #2
 8006d6a:	ed8d 0b06 	vstr	d0, [sp, #24]
 8006d6e:	d104      	bne.n	8006d7a <acosf+0x76>
 8006d70:	f000 fcd2 	bl	8007718 <__errno>
 8006d74:	2321      	movs	r3, #33	; 0x21
 8006d76:	6003      	str	r3, [r0, #0]
 8006d78:	e004      	b.n	8006d84 <acosf+0x80>
 8006d7a:	4668      	mov	r0, sp
 8006d7c:	f000 fcc2 	bl	8007704 <matherr>
 8006d80:	2800      	cmp	r0, #0
 8006d82:	d0f5      	beq.n	8006d70 <acosf+0x6c>
 8006d84:	9b08      	ldr	r3, [sp, #32]
 8006d86:	b11b      	cbz	r3, 8006d90 <acosf+0x8c>
 8006d88:	f000 fcc6 	bl	8007718 <__errno>
 8006d8c:	9b08      	ldr	r3, [sp, #32]
 8006d8e:	6003      	str	r3, [r0, #0]
 8006d90:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d94:	f7f9 ff24 	bl	8000be0 <__aeabi_d2f>
 8006d98:	ee08 0a90 	vmov	s17, r0
 8006d9c:	eeb0 0a68 	vmov.f32	s0, s17
 8006da0:	b00a      	add	sp, #40	; 0x28
 8006da2:	ecbd 8b02 	vpop	{d8}
 8006da6:	bd10      	pop	{r4, pc}
 8006da8:	200002d0 	.word	0x200002d0
 8006dac:	08007a4d 	.word	0x08007a4d
 8006db0:	08007796 	.word	0x08007796

08006db4 <sqrtf>:
 8006db4:	b510      	push	{r4, lr}
 8006db6:	ed2d 8b02 	vpush	{d8}
 8006dba:	b08a      	sub	sp, #40	; 0x28
 8006dbc:	eeb0 8a40 	vmov.f32	s16, s0
 8006dc0:	f000 fc52 	bl	8007668 <__ieee754_sqrtf>
 8006dc4:	4b21      	ldr	r3, [pc, #132]	; (8006e4c <sqrtf+0x98>)
 8006dc6:	f993 4000 	ldrsb.w	r4, [r3]
 8006dca:	1c63      	adds	r3, r4, #1
 8006dcc:	d02c      	beq.n	8006e28 <sqrtf+0x74>
 8006dce:	eeb4 8a48 	vcmp.f32	s16, s16
 8006dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006dd6:	d627      	bvs.n	8006e28 <sqrtf+0x74>
 8006dd8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8006ddc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006de0:	d522      	bpl.n	8006e28 <sqrtf+0x74>
 8006de2:	2301      	movs	r3, #1
 8006de4:	9300      	str	r3, [sp, #0]
 8006de6:	4b1a      	ldr	r3, [pc, #104]	; (8006e50 <sqrtf+0x9c>)
 8006de8:	9301      	str	r3, [sp, #4]
 8006dea:	ee18 0a10 	vmov	r0, s16
 8006dee:	2300      	movs	r3, #0
 8006df0:	9308      	str	r3, [sp, #32]
 8006df2:	f7f9 fbc9 	bl	8000588 <__aeabi_f2d>
 8006df6:	2200      	movs	r2, #0
 8006df8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006dfc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e00:	2300      	movs	r3, #0
 8006e02:	b9ac      	cbnz	r4, 8006e30 <sqrtf+0x7c>
 8006e04:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006e08:	4668      	mov	r0, sp
 8006e0a:	f000 fc7b 	bl	8007704 <matherr>
 8006e0e:	b1b8      	cbz	r0, 8006e40 <sqrtf+0x8c>
 8006e10:	9b08      	ldr	r3, [sp, #32]
 8006e12:	b11b      	cbz	r3, 8006e1c <sqrtf+0x68>
 8006e14:	f000 fc80 	bl	8007718 <__errno>
 8006e18:	9b08      	ldr	r3, [sp, #32]
 8006e1a:	6003      	str	r3, [r0, #0]
 8006e1c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006e20:	f7f9 fede 	bl	8000be0 <__aeabi_d2f>
 8006e24:	ee00 0a10 	vmov	s0, r0
 8006e28:	b00a      	add	sp, #40	; 0x28
 8006e2a:	ecbd 8b02 	vpop	{d8}
 8006e2e:	bd10      	pop	{r4, pc}
 8006e30:	4610      	mov	r0, r2
 8006e32:	4619      	mov	r1, r3
 8006e34:	f7f9 fd26 	bl	8000884 <__aeabi_ddiv>
 8006e38:	2c02      	cmp	r4, #2
 8006e3a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006e3e:	d1e3      	bne.n	8006e08 <sqrtf+0x54>
 8006e40:	f000 fc6a 	bl	8007718 <__errno>
 8006e44:	2321      	movs	r3, #33	; 0x21
 8006e46:	6003      	str	r3, [r0, #0]
 8006e48:	e7e2      	b.n	8006e10 <sqrtf+0x5c>
 8006e4a:	bf00      	nop
 8006e4c:	200002d0 	.word	0x200002d0
 8006e50:	08007a53 	.word	0x08007a53
 8006e54:	00000000 	.word	0x00000000

08006e58 <__ieee754_acos>:
 8006e58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e5c:	ec55 4b10 	vmov	r4, r5, d0
 8006e60:	49b7      	ldr	r1, [pc, #732]	; (8007140 <__ieee754_acos+0x2e8>)
 8006e62:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006e66:	428b      	cmp	r3, r1
 8006e68:	dd1b      	ble.n	8006ea2 <__ieee754_acos+0x4a>
 8006e6a:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 8006e6e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8006e72:	4323      	orrs	r3, r4
 8006e74:	d109      	bne.n	8006e8a <__ieee754_acos+0x32>
 8006e76:	2d00      	cmp	r5, #0
 8006e78:	f300 8211 	bgt.w	800729e <__ieee754_acos+0x446>
 8006e7c:	a196      	add	r1, pc, #600	; (adr r1, 80070d8 <__ieee754_acos+0x280>)
 8006e7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e82:	ec41 0b10 	vmov	d0, r0, r1
 8006e86:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e8a:	ee10 2a10 	vmov	r2, s0
 8006e8e:	462b      	mov	r3, r5
 8006e90:	4620      	mov	r0, r4
 8006e92:	4629      	mov	r1, r5
 8006e94:	f7f9 fa18 	bl	80002c8 <__aeabi_dsub>
 8006e98:	4602      	mov	r2, r0
 8006e9a:	460b      	mov	r3, r1
 8006e9c:	f7f9 fcf2 	bl	8000884 <__aeabi_ddiv>
 8006ea0:	e7ef      	b.n	8006e82 <__ieee754_acos+0x2a>
 8006ea2:	49a8      	ldr	r1, [pc, #672]	; (8007144 <__ieee754_acos+0x2ec>)
 8006ea4:	428b      	cmp	r3, r1
 8006ea6:	f300 8087 	bgt.w	8006fb8 <__ieee754_acos+0x160>
 8006eaa:	4aa7      	ldr	r2, [pc, #668]	; (8007148 <__ieee754_acos+0x2f0>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	f340 81f9 	ble.w	80072a4 <__ieee754_acos+0x44c>
 8006eb2:	ee10 2a10 	vmov	r2, s0
 8006eb6:	ee10 0a10 	vmov	r0, s0
 8006eba:	462b      	mov	r3, r5
 8006ebc:	4629      	mov	r1, r5
 8006ebe:	f7f9 fbb7 	bl	8000630 <__aeabi_dmul>
 8006ec2:	a387      	add	r3, pc, #540	; (adr r3, 80070e0 <__ieee754_acos+0x288>)
 8006ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ec8:	4606      	mov	r6, r0
 8006eca:	460f      	mov	r7, r1
 8006ecc:	f7f9 fbb0 	bl	8000630 <__aeabi_dmul>
 8006ed0:	a385      	add	r3, pc, #532	; (adr r3, 80070e8 <__ieee754_acos+0x290>)
 8006ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ed6:	f7f9 f9f9 	bl	80002cc <__adddf3>
 8006eda:	4632      	mov	r2, r6
 8006edc:	463b      	mov	r3, r7
 8006ede:	f7f9 fba7 	bl	8000630 <__aeabi_dmul>
 8006ee2:	a383      	add	r3, pc, #524	; (adr r3, 80070f0 <__ieee754_acos+0x298>)
 8006ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ee8:	f7f9 f9ee 	bl	80002c8 <__aeabi_dsub>
 8006eec:	4632      	mov	r2, r6
 8006eee:	463b      	mov	r3, r7
 8006ef0:	f7f9 fb9e 	bl	8000630 <__aeabi_dmul>
 8006ef4:	a380      	add	r3, pc, #512	; (adr r3, 80070f8 <__ieee754_acos+0x2a0>)
 8006ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006efa:	f7f9 f9e7 	bl	80002cc <__adddf3>
 8006efe:	4632      	mov	r2, r6
 8006f00:	463b      	mov	r3, r7
 8006f02:	f7f9 fb95 	bl	8000630 <__aeabi_dmul>
 8006f06:	a37e      	add	r3, pc, #504	; (adr r3, 8007100 <__ieee754_acos+0x2a8>)
 8006f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f0c:	f7f9 f9dc 	bl	80002c8 <__aeabi_dsub>
 8006f10:	4632      	mov	r2, r6
 8006f12:	463b      	mov	r3, r7
 8006f14:	f7f9 fb8c 	bl	8000630 <__aeabi_dmul>
 8006f18:	a37b      	add	r3, pc, #492	; (adr r3, 8007108 <__ieee754_acos+0x2b0>)
 8006f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f1e:	f7f9 f9d5 	bl	80002cc <__adddf3>
 8006f22:	4632      	mov	r2, r6
 8006f24:	463b      	mov	r3, r7
 8006f26:	f7f9 fb83 	bl	8000630 <__aeabi_dmul>
 8006f2a:	a379      	add	r3, pc, #484	; (adr r3, 8007110 <__ieee754_acos+0x2b8>)
 8006f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f30:	4680      	mov	r8, r0
 8006f32:	4689      	mov	r9, r1
 8006f34:	4630      	mov	r0, r6
 8006f36:	4639      	mov	r1, r7
 8006f38:	f7f9 fb7a 	bl	8000630 <__aeabi_dmul>
 8006f3c:	a376      	add	r3, pc, #472	; (adr r3, 8007118 <__ieee754_acos+0x2c0>)
 8006f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f42:	f7f9 f9c1 	bl	80002c8 <__aeabi_dsub>
 8006f46:	4632      	mov	r2, r6
 8006f48:	463b      	mov	r3, r7
 8006f4a:	f7f9 fb71 	bl	8000630 <__aeabi_dmul>
 8006f4e:	a374      	add	r3, pc, #464	; (adr r3, 8007120 <__ieee754_acos+0x2c8>)
 8006f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f54:	f7f9 f9ba 	bl	80002cc <__adddf3>
 8006f58:	4632      	mov	r2, r6
 8006f5a:	463b      	mov	r3, r7
 8006f5c:	f7f9 fb68 	bl	8000630 <__aeabi_dmul>
 8006f60:	a371      	add	r3, pc, #452	; (adr r3, 8007128 <__ieee754_acos+0x2d0>)
 8006f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f66:	f7f9 f9af 	bl	80002c8 <__aeabi_dsub>
 8006f6a:	4632      	mov	r2, r6
 8006f6c:	463b      	mov	r3, r7
 8006f6e:	f7f9 fb5f 	bl	8000630 <__aeabi_dmul>
 8006f72:	2200      	movs	r2, #0
 8006f74:	4b75      	ldr	r3, [pc, #468]	; (800714c <__ieee754_acos+0x2f4>)
 8006f76:	f7f9 f9a9 	bl	80002cc <__adddf3>
 8006f7a:	4602      	mov	r2, r0
 8006f7c:	460b      	mov	r3, r1
 8006f7e:	4640      	mov	r0, r8
 8006f80:	4649      	mov	r1, r9
 8006f82:	f7f9 fc7f 	bl	8000884 <__aeabi_ddiv>
 8006f86:	4622      	mov	r2, r4
 8006f88:	462b      	mov	r3, r5
 8006f8a:	f7f9 fb51 	bl	8000630 <__aeabi_dmul>
 8006f8e:	4602      	mov	r2, r0
 8006f90:	460b      	mov	r3, r1
 8006f92:	a167      	add	r1, pc, #412	; (adr r1, 8007130 <__ieee754_acos+0x2d8>)
 8006f94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f98:	f7f9 f996 	bl	80002c8 <__aeabi_dsub>
 8006f9c:	4602      	mov	r2, r0
 8006f9e:	460b      	mov	r3, r1
 8006fa0:	4620      	mov	r0, r4
 8006fa2:	4629      	mov	r1, r5
 8006fa4:	f7f9 f990 	bl	80002c8 <__aeabi_dsub>
 8006fa8:	4602      	mov	r2, r0
 8006faa:	460b      	mov	r3, r1
 8006fac:	a162      	add	r1, pc, #392	; (adr r1, 8007138 <__ieee754_acos+0x2e0>)
 8006fae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006fb2:	f7f9 f989 	bl	80002c8 <__aeabi_dsub>
 8006fb6:	e764      	b.n	8006e82 <__ieee754_acos+0x2a>
 8006fb8:	2d00      	cmp	r5, #0
 8006fba:	f280 80cb 	bge.w	8007154 <__ieee754_acos+0x2fc>
 8006fbe:	ee10 0a10 	vmov	r0, s0
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	4b61      	ldr	r3, [pc, #388]	; (800714c <__ieee754_acos+0x2f4>)
 8006fc6:	4629      	mov	r1, r5
 8006fc8:	f7f9 f980 	bl	80002cc <__adddf3>
 8006fcc:	2200      	movs	r2, #0
 8006fce:	4b60      	ldr	r3, [pc, #384]	; (8007150 <__ieee754_acos+0x2f8>)
 8006fd0:	f7f9 fb2e 	bl	8000630 <__aeabi_dmul>
 8006fd4:	a342      	add	r3, pc, #264	; (adr r3, 80070e0 <__ieee754_acos+0x288>)
 8006fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fda:	4604      	mov	r4, r0
 8006fdc:	460d      	mov	r5, r1
 8006fde:	f7f9 fb27 	bl	8000630 <__aeabi_dmul>
 8006fe2:	a341      	add	r3, pc, #260	; (adr r3, 80070e8 <__ieee754_acos+0x290>)
 8006fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fe8:	f7f9 f970 	bl	80002cc <__adddf3>
 8006fec:	4622      	mov	r2, r4
 8006fee:	462b      	mov	r3, r5
 8006ff0:	f7f9 fb1e 	bl	8000630 <__aeabi_dmul>
 8006ff4:	a33e      	add	r3, pc, #248	; (adr r3, 80070f0 <__ieee754_acos+0x298>)
 8006ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ffa:	f7f9 f965 	bl	80002c8 <__aeabi_dsub>
 8006ffe:	4622      	mov	r2, r4
 8007000:	462b      	mov	r3, r5
 8007002:	f7f9 fb15 	bl	8000630 <__aeabi_dmul>
 8007006:	a33c      	add	r3, pc, #240	; (adr r3, 80070f8 <__ieee754_acos+0x2a0>)
 8007008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800700c:	f7f9 f95e 	bl	80002cc <__adddf3>
 8007010:	4622      	mov	r2, r4
 8007012:	462b      	mov	r3, r5
 8007014:	f7f9 fb0c 	bl	8000630 <__aeabi_dmul>
 8007018:	a339      	add	r3, pc, #228	; (adr r3, 8007100 <__ieee754_acos+0x2a8>)
 800701a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800701e:	f7f9 f953 	bl	80002c8 <__aeabi_dsub>
 8007022:	4622      	mov	r2, r4
 8007024:	462b      	mov	r3, r5
 8007026:	f7f9 fb03 	bl	8000630 <__aeabi_dmul>
 800702a:	a337      	add	r3, pc, #220	; (adr r3, 8007108 <__ieee754_acos+0x2b0>)
 800702c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007030:	f7f9 f94c 	bl	80002cc <__adddf3>
 8007034:	4622      	mov	r2, r4
 8007036:	462b      	mov	r3, r5
 8007038:	f7f9 fafa 	bl	8000630 <__aeabi_dmul>
 800703c:	ec45 4b10 	vmov	d0, r4, r5
 8007040:	4680      	mov	r8, r0
 8007042:	4689      	mov	r9, r1
 8007044:	f000 f964 	bl	8007310 <__ieee754_sqrt>
 8007048:	a331      	add	r3, pc, #196	; (adr r3, 8007110 <__ieee754_acos+0x2b8>)
 800704a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800704e:	4620      	mov	r0, r4
 8007050:	4629      	mov	r1, r5
 8007052:	ec57 6b10 	vmov	r6, r7, d0
 8007056:	f7f9 faeb 	bl	8000630 <__aeabi_dmul>
 800705a:	a32f      	add	r3, pc, #188	; (adr r3, 8007118 <__ieee754_acos+0x2c0>)
 800705c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007060:	f7f9 f932 	bl	80002c8 <__aeabi_dsub>
 8007064:	4622      	mov	r2, r4
 8007066:	462b      	mov	r3, r5
 8007068:	f7f9 fae2 	bl	8000630 <__aeabi_dmul>
 800706c:	a32c      	add	r3, pc, #176	; (adr r3, 8007120 <__ieee754_acos+0x2c8>)
 800706e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007072:	f7f9 f92b 	bl	80002cc <__adddf3>
 8007076:	4622      	mov	r2, r4
 8007078:	462b      	mov	r3, r5
 800707a:	f7f9 fad9 	bl	8000630 <__aeabi_dmul>
 800707e:	a32a      	add	r3, pc, #168	; (adr r3, 8007128 <__ieee754_acos+0x2d0>)
 8007080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007084:	f7f9 f920 	bl	80002c8 <__aeabi_dsub>
 8007088:	4622      	mov	r2, r4
 800708a:	462b      	mov	r3, r5
 800708c:	f7f9 fad0 	bl	8000630 <__aeabi_dmul>
 8007090:	2200      	movs	r2, #0
 8007092:	4b2e      	ldr	r3, [pc, #184]	; (800714c <__ieee754_acos+0x2f4>)
 8007094:	f7f9 f91a 	bl	80002cc <__adddf3>
 8007098:	4602      	mov	r2, r0
 800709a:	460b      	mov	r3, r1
 800709c:	4640      	mov	r0, r8
 800709e:	4649      	mov	r1, r9
 80070a0:	f7f9 fbf0 	bl	8000884 <__aeabi_ddiv>
 80070a4:	4632      	mov	r2, r6
 80070a6:	463b      	mov	r3, r7
 80070a8:	f7f9 fac2 	bl	8000630 <__aeabi_dmul>
 80070ac:	a320      	add	r3, pc, #128	; (adr r3, 8007130 <__ieee754_acos+0x2d8>)
 80070ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070b2:	f7f9 f909 	bl	80002c8 <__aeabi_dsub>
 80070b6:	4632      	mov	r2, r6
 80070b8:	463b      	mov	r3, r7
 80070ba:	f7f9 f907 	bl	80002cc <__adddf3>
 80070be:	4602      	mov	r2, r0
 80070c0:	460b      	mov	r3, r1
 80070c2:	f7f9 f903 	bl	80002cc <__adddf3>
 80070c6:	4602      	mov	r2, r0
 80070c8:	460b      	mov	r3, r1
 80070ca:	a103      	add	r1, pc, #12	; (adr r1, 80070d8 <__ieee754_acos+0x280>)
 80070cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80070d0:	e76f      	b.n	8006fb2 <__ieee754_acos+0x15a>
 80070d2:	bf00      	nop
 80070d4:	f3af 8000 	nop.w
 80070d8:	54442d18 	.word	0x54442d18
 80070dc:	400921fb 	.word	0x400921fb
 80070e0:	0dfdf709 	.word	0x0dfdf709
 80070e4:	3f023de1 	.word	0x3f023de1
 80070e8:	7501b288 	.word	0x7501b288
 80070ec:	3f49efe0 	.word	0x3f49efe0
 80070f0:	b5688f3b 	.word	0xb5688f3b
 80070f4:	3fa48228 	.word	0x3fa48228
 80070f8:	0e884455 	.word	0x0e884455
 80070fc:	3fc9c155 	.word	0x3fc9c155
 8007100:	03eb6f7d 	.word	0x03eb6f7d
 8007104:	3fd4d612 	.word	0x3fd4d612
 8007108:	55555555 	.word	0x55555555
 800710c:	3fc55555 	.word	0x3fc55555
 8007110:	b12e9282 	.word	0xb12e9282
 8007114:	3fb3b8c5 	.word	0x3fb3b8c5
 8007118:	1b8d0159 	.word	0x1b8d0159
 800711c:	3fe6066c 	.word	0x3fe6066c
 8007120:	9c598ac8 	.word	0x9c598ac8
 8007124:	40002ae5 	.word	0x40002ae5
 8007128:	1c8a2d4b 	.word	0x1c8a2d4b
 800712c:	40033a27 	.word	0x40033a27
 8007130:	33145c07 	.word	0x33145c07
 8007134:	3c91a626 	.word	0x3c91a626
 8007138:	54442d18 	.word	0x54442d18
 800713c:	3ff921fb 	.word	0x3ff921fb
 8007140:	3fefffff 	.word	0x3fefffff
 8007144:	3fdfffff 	.word	0x3fdfffff
 8007148:	3c600000 	.word	0x3c600000
 800714c:	3ff00000 	.word	0x3ff00000
 8007150:	3fe00000 	.word	0x3fe00000
 8007154:	ee10 2a10 	vmov	r2, s0
 8007158:	462b      	mov	r3, r5
 800715a:	2000      	movs	r0, #0
 800715c:	496a      	ldr	r1, [pc, #424]	; (8007308 <__ieee754_acos+0x4b0>)
 800715e:	f7f9 f8b3 	bl	80002c8 <__aeabi_dsub>
 8007162:	2200      	movs	r2, #0
 8007164:	4b69      	ldr	r3, [pc, #420]	; (800730c <__ieee754_acos+0x4b4>)
 8007166:	f7f9 fa63 	bl	8000630 <__aeabi_dmul>
 800716a:	4604      	mov	r4, r0
 800716c:	460d      	mov	r5, r1
 800716e:	ec45 4b10 	vmov	d0, r4, r5
 8007172:	f000 f8cd 	bl	8007310 <__ieee754_sqrt>
 8007176:	a34e      	add	r3, pc, #312	; (adr r3, 80072b0 <__ieee754_acos+0x458>)
 8007178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800717c:	4620      	mov	r0, r4
 800717e:	4629      	mov	r1, r5
 8007180:	ec59 8b10 	vmov	r8, r9, d0
 8007184:	f7f9 fa54 	bl	8000630 <__aeabi_dmul>
 8007188:	a34b      	add	r3, pc, #300	; (adr r3, 80072b8 <__ieee754_acos+0x460>)
 800718a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800718e:	f7f9 f89d 	bl	80002cc <__adddf3>
 8007192:	4622      	mov	r2, r4
 8007194:	462b      	mov	r3, r5
 8007196:	f7f9 fa4b 	bl	8000630 <__aeabi_dmul>
 800719a:	a349      	add	r3, pc, #292	; (adr r3, 80072c0 <__ieee754_acos+0x468>)
 800719c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071a0:	f7f9 f892 	bl	80002c8 <__aeabi_dsub>
 80071a4:	4622      	mov	r2, r4
 80071a6:	462b      	mov	r3, r5
 80071a8:	f7f9 fa42 	bl	8000630 <__aeabi_dmul>
 80071ac:	a346      	add	r3, pc, #280	; (adr r3, 80072c8 <__ieee754_acos+0x470>)
 80071ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071b2:	f7f9 f88b 	bl	80002cc <__adddf3>
 80071b6:	4622      	mov	r2, r4
 80071b8:	462b      	mov	r3, r5
 80071ba:	f7f9 fa39 	bl	8000630 <__aeabi_dmul>
 80071be:	a344      	add	r3, pc, #272	; (adr r3, 80072d0 <__ieee754_acos+0x478>)
 80071c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071c4:	f7f9 f880 	bl	80002c8 <__aeabi_dsub>
 80071c8:	4622      	mov	r2, r4
 80071ca:	462b      	mov	r3, r5
 80071cc:	f7f9 fa30 	bl	8000630 <__aeabi_dmul>
 80071d0:	a341      	add	r3, pc, #260	; (adr r3, 80072d8 <__ieee754_acos+0x480>)
 80071d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071d6:	f7f9 f879 	bl	80002cc <__adddf3>
 80071da:	4622      	mov	r2, r4
 80071dc:	462b      	mov	r3, r5
 80071de:	f7f9 fa27 	bl	8000630 <__aeabi_dmul>
 80071e2:	a33f      	add	r3, pc, #252	; (adr r3, 80072e0 <__ieee754_acos+0x488>)
 80071e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071e8:	4682      	mov	sl, r0
 80071ea:	468b      	mov	fp, r1
 80071ec:	4620      	mov	r0, r4
 80071ee:	4629      	mov	r1, r5
 80071f0:	f7f9 fa1e 	bl	8000630 <__aeabi_dmul>
 80071f4:	a33c      	add	r3, pc, #240	; (adr r3, 80072e8 <__ieee754_acos+0x490>)
 80071f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071fa:	f7f9 f865 	bl	80002c8 <__aeabi_dsub>
 80071fe:	4622      	mov	r2, r4
 8007200:	462b      	mov	r3, r5
 8007202:	f7f9 fa15 	bl	8000630 <__aeabi_dmul>
 8007206:	a33a      	add	r3, pc, #232	; (adr r3, 80072f0 <__ieee754_acos+0x498>)
 8007208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800720c:	f7f9 f85e 	bl	80002cc <__adddf3>
 8007210:	4622      	mov	r2, r4
 8007212:	462b      	mov	r3, r5
 8007214:	f7f9 fa0c 	bl	8000630 <__aeabi_dmul>
 8007218:	a337      	add	r3, pc, #220	; (adr r3, 80072f8 <__ieee754_acos+0x4a0>)
 800721a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800721e:	f7f9 f853 	bl	80002c8 <__aeabi_dsub>
 8007222:	4622      	mov	r2, r4
 8007224:	462b      	mov	r3, r5
 8007226:	f7f9 fa03 	bl	8000630 <__aeabi_dmul>
 800722a:	2200      	movs	r2, #0
 800722c:	4b36      	ldr	r3, [pc, #216]	; (8007308 <__ieee754_acos+0x4b0>)
 800722e:	f7f9 f84d 	bl	80002cc <__adddf3>
 8007232:	4602      	mov	r2, r0
 8007234:	460b      	mov	r3, r1
 8007236:	4650      	mov	r0, sl
 8007238:	4659      	mov	r1, fp
 800723a:	f7f9 fb23 	bl	8000884 <__aeabi_ddiv>
 800723e:	4642      	mov	r2, r8
 8007240:	464b      	mov	r3, r9
 8007242:	f7f9 f9f5 	bl	8000630 <__aeabi_dmul>
 8007246:	2600      	movs	r6, #0
 8007248:	4682      	mov	sl, r0
 800724a:	468b      	mov	fp, r1
 800724c:	4632      	mov	r2, r6
 800724e:	464b      	mov	r3, r9
 8007250:	4630      	mov	r0, r6
 8007252:	4649      	mov	r1, r9
 8007254:	f7f9 f9ec 	bl	8000630 <__aeabi_dmul>
 8007258:	4602      	mov	r2, r0
 800725a:	460b      	mov	r3, r1
 800725c:	4620      	mov	r0, r4
 800725e:	4629      	mov	r1, r5
 8007260:	f7f9 f832 	bl	80002c8 <__aeabi_dsub>
 8007264:	4632      	mov	r2, r6
 8007266:	4604      	mov	r4, r0
 8007268:	460d      	mov	r5, r1
 800726a:	464b      	mov	r3, r9
 800726c:	4640      	mov	r0, r8
 800726e:	4649      	mov	r1, r9
 8007270:	f7f9 f82c 	bl	80002cc <__adddf3>
 8007274:	4602      	mov	r2, r0
 8007276:	460b      	mov	r3, r1
 8007278:	4620      	mov	r0, r4
 800727a:	4629      	mov	r1, r5
 800727c:	f7f9 fb02 	bl	8000884 <__aeabi_ddiv>
 8007280:	4602      	mov	r2, r0
 8007282:	460b      	mov	r3, r1
 8007284:	4650      	mov	r0, sl
 8007286:	4659      	mov	r1, fp
 8007288:	f7f9 f820 	bl	80002cc <__adddf3>
 800728c:	4632      	mov	r2, r6
 800728e:	464b      	mov	r3, r9
 8007290:	f7f9 f81c 	bl	80002cc <__adddf3>
 8007294:	4602      	mov	r2, r0
 8007296:	460b      	mov	r3, r1
 8007298:	f7f9 f818 	bl	80002cc <__adddf3>
 800729c:	e5f1      	b.n	8006e82 <__ieee754_acos+0x2a>
 800729e:	2000      	movs	r0, #0
 80072a0:	2100      	movs	r1, #0
 80072a2:	e5ee      	b.n	8006e82 <__ieee754_acos+0x2a>
 80072a4:	a116      	add	r1, pc, #88	; (adr r1, 8007300 <__ieee754_acos+0x4a8>)
 80072a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80072aa:	e5ea      	b.n	8006e82 <__ieee754_acos+0x2a>
 80072ac:	f3af 8000 	nop.w
 80072b0:	0dfdf709 	.word	0x0dfdf709
 80072b4:	3f023de1 	.word	0x3f023de1
 80072b8:	7501b288 	.word	0x7501b288
 80072bc:	3f49efe0 	.word	0x3f49efe0
 80072c0:	b5688f3b 	.word	0xb5688f3b
 80072c4:	3fa48228 	.word	0x3fa48228
 80072c8:	0e884455 	.word	0x0e884455
 80072cc:	3fc9c155 	.word	0x3fc9c155
 80072d0:	03eb6f7d 	.word	0x03eb6f7d
 80072d4:	3fd4d612 	.word	0x3fd4d612
 80072d8:	55555555 	.word	0x55555555
 80072dc:	3fc55555 	.word	0x3fc55555
 80072e0:	b12e9282 	.word	0xb12e9282
 80072e4:	3fb3b8c5 	.word	0x3fb3b8c5
 80072e8:	1b8d0159 	.word	0x1b8d0159
 80072ec:	3fe6066c 	.word	0x3fe6066c
 80072f0:	9c598ac8 	.word	0x9c598ac8
 80072f4:	40002ae5 	.word	0x40002ae5
 80072f8:	1c8a2d4b 	.word	0x1c8a2d4b
 80072fc:	40033a27 	.word	0x40033a27
 8007300:	54442d18 	.word	0x54442d18
 8007304:	3ff921fb 	.word	0x3ff921fb
 8007308:	3ff00000 	.word	0x3ff00000
 800730c:	3fe00000 	.word	0x3fe00000

08007310 <__ieee754_sqrt>:
 8007310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007314:	ec55 4b10 	vmov	r4, r5, d0
 8007318:	4e54      	ldr	r6, [pc, #336]	; (800746c <__ieee754_sqrt+0x15c>)
 800731a:	43ae      	bics	r6, r5
 800731c:	ee10 0a10 	vmov	r0, s0
 8007320:	462b      	mov	r3, r5
 8007322:	462a      	mov	r2, r5
 8007324:	4621      	mov	r1, r4
 8007326:	d113      	bne.n	8007350 <__ieee754_sqrt+0x40>
 8007328:	ee10 2a10 	vmov	r2, s0
 800732c:	462b      	mov	r3, r5
 800732e:	ee10 0a10 	vmov	r0, s0
 8007332:	4629      	mov	r1, r5
 8007334:	f7f9 f97c 	bl	8000630 <__aeabi_dmul>
 8007338:	4602      	mov	r2, r0
 800733a:	460b      	mov	r3, r1
 800733c:	4620      	mov	r0, r4
 800733e:	4629      	mov	r1, r5
 8007340:	f7f8 ffc4 	bl	80002cc <__adddf3>
 8007344:	4604      	mov	r4, r0
 8007346:	460d      	mov	r5, r1
 8007348:	ec45 4b10 	vmov	d0, r4, r5
 800734c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007350:	2d00      	cmp	r5, #0
 8007352:	dc10      	bgt.n	8007376 <__ieee754_sqrt+0x66>
 8007354:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007358:	4330      	orrs	r0, r6
 800735a:	d0f5      	beq.n	8007348 <__ieee754_sqrt+0x38>
 800735c:	b15d      	cbz	r5, 8007376 <__ieee754_sqrt+0x66>
 800735e:	ee10 2a10 	vmov	r2, s0
 8007362:	462b      	mov	r3, r5
 8007364:	4620      	mov	r0, r4
 8007366:	4629      	mov	r1, r5
 8007368:	f7f8 ffae 	bl	80002c8 <__aeabi_dsub>
 800736c:	4602      	mov	r2, r0
 800736e:	460b      	mov	r3, r1
 8007370:	f7f9 fa88 	bl	8000884 <__aeabi_ddiv>
 8007374:	e7e6      	b.n	8007344 <__ieee754_sqrt+0x34>
 8007376:	151b      	asrs	r3, r3, #20
 8007378:	d10c      	bne.n	8007394 <__ieee754_sqrt+0x84>
 800737a:	2a00      	cmp	r2, #0
 800737c:	d06d      	beq.n	800745a <__ieee754_sqrt+0x14a>
 800737e:	2000      	movs	r0, #0
 8007380:	02d6      	lsls	r6, r2, #11
 8007382:	d56e      	bpl.n	8007462 <__ieee754_sqrt+0x152>
 8007384:	1e44      	subs	r4, r0, #1
 8007386:	1b1b      	subs	r3, r3, r4
 8007388:	f1c0 0420 	rsb	r4, r0, #32
 800738c:	fa21 f404 	lsr.w	r4, r1, r4
 8007390:	4322      	orrs	r2, r4
 8007392:	4081      	lsls	r1, r0
 8007394:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007398:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800739c:	07dd      	lsls	r5, r3, #31
 800739e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80073a2:	bf42      	ittt	mi
 80073a4:	0052      	lslmi	r2, r2, #1
 80073a6:	eb02 72d1 	addmi.w	r2, r2, r1, lsr #31
 80073aa:	0049      	lslmi	r1, r1, #1
 80073ac:	1058      	asrs	r0, r3, #1
 80073ae:	2500      	movs	r5, #0
 80073b0:	eb02 73d1 	add.w	r3, r2, r1, lsr #31
 80073b4:	441a      	add	r2, r3
 80073b6:	0049      	lsls	r1, r1, #1
 80073b8:	2316      	movs	r3, #22
 80073ba:	462c      	mov	r4, r5
 80073bc:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80073c0:	19a7      	adds	r7, r4, r6
 80073c2:	4297      	cmp	r7, r2
 80073c4:	bfde      	ittt	le
 80073c6:	1bd2      	suble	r2, r2, r7
 80073c8:	19bc      	addle	r4, r7, r6
 80073ca:	19ad      	addle	r5, r5, r6
 80073cc:	0052      	lsls	r2, r2, #1
 80073ce:	3b01      	subs	r3, #1
 80073d0:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 80073d4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80073d8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80073dc:	d1f0      	bne.n	80073c0 <__ieee754_sqrt+0xb0>
 80073de:	f04f 0e20 	mov.w	lr, #32
 80073e2:	469c      	mov	ip, r3
 80073e4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80073e8:	42a2      	cmp	r2, r4
 80073ea:	eb06 070c 	add.w	r7, r6, ip
 80073ee:	dc02      	bgt.n	80073f6 <__ieee754_sqrt+0xe6>
 80073f0:	d112      	bne.n	8007418 <__ieee754_sqrt+0x108>
 80073f2:	428f      	cmp	r7, r1
 80073f4:	d810      	bhi.n	8007418 <__ieee754_sqrt+0x108>
 80073f6:	2f00      	cmp	r7, #0
 80073f8:	eb07 0c06 	add.w	ip, r7, r6
 80073fc:	da34      	bge.n	8007468 <__ieee754_sqrt+0x158>
 80073fe:	f1bc 0f00 	cmp.w	ip, #0
 8007402:	db31      	blt.n	8007468 <__ieee754_sqrt+0x158>
 8007404:	f104 0801 	add.w	r8, r4, #1
 8007408:	1b12      	subs	r2, r2, r4
 800740a:	428f      	cmp	r7, r1
 800740c:	bf88      	it	hi
 800740e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8007412:	1bc9      	subs	r1, r1, r7
 8007414:	4433      	add	r3, r6
 8007416:	4644      	mov	r4, r8
 8007418:	eb02 77d1 	add.w	r7, r2, r1, lsr #31
 800741c:	f1be 0e01 	subs.w	lr, lr, #1
 8007420:	443a      	add	r2, r7
 8007422:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007426:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800742a:	d1dd      	bne.n	80073e8 <__ieee754_sqrt+0xd8>
 800742c:	430a      	orrs	r2, r1
 800742e:	d006      	beq.n	800743e <__ieee754_sqrt+0x12e>
 8007430:	1c5c      	adds	r4, r3, #1
 8007432:	bf13      	iteet	ne
 8007434:	3301      	addne	r3, #1
 8007436:	3501      	addeq	r5, #1
 8007438:	4673      	moveq	r3, lr
 800743a:	f023 0301 	bicne.w	r3, r3, #1
 800743e:	106a      	asrs	r2, r5, #1
 8007440:	085b      	lsrs	r3, r3, #1
 8007442:	07e9      	lsls	r1, r5, #31
 8007444:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8007448:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800744c:	bf48      	it	mi
 800744e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8007452:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8007456:	461c      	mov	r4, r3
 8007458:	e776      	b.n	8007348 <__ieee754_sqrt+0x38>
 800745a:	0aca      	lsrs	r2, r1, #11
 800745c:	3b15      	subs	r3, #21
 800745e:	0549      	lsls	r1, r1, #21
 8007460:	e78b      	b.n	800737a <__ieee754_sqrt+0x6a>
 8007462:	0052      	lsls	r2, r2, #1
 8007464:	3001      	adds	r0, #1
 8007466:	e78b      	b.n	8007380 <__ieee754_sqrt+0x70>
 8007468:	46a0      	mov	r8, r4
 800746a:	e7cd      	b.n	8007408 <__ieee754_sqrt+0xf8>
 800746c:	7ff00000 	.word	0x7ff00000

08007470 <__ieee754_acosf>:
 8007470:	b508      	push	{r3, lr}
 8007472:	ee10 3a10 	vmov	r3, s0
 8007476:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800747a:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800747e:	ed2d 8b0c 	vpush	{d8-d13}
 8007482:	d10a      	bne.n	800749a <__ieee754_acosf+0x2a>
 8007484:	ed9f 8a67 	vldr	s16, [pc, #412]	; 8007624 <__ieee754_acosf+0x1b4>
 8007488:	ed9f 0a67 	vldr	s0, [pc, #412]	; 8007628 <__ieee754_acosf+0x1b8>
 800748c:	2b00      	cmp	r3, #0
 800748e:	bfd8      	it	le
 8007490:	eeb0 0a48 	vmovle.f32	s0, s16
 8007494:	ecbd 8b0c 	vpop	{d8-d13}
 8007498:	bd08      	pop	{r3, pc}
 800749a:	dd04      	ble.n	80074a6 <__ieee754_acosf+0x36>
 800749c:	ee30 8a40 	vsub.f32	s16, s0, s0
 80074a0:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80074a4:	e7f6      	b.n	8007494 <__ieee754_acosf+0x24>
 80074a6:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 80074aa:	da3e      	bge.n	800752a <__ieee754_acosf+0xba>
 80074ac:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 80074b0:	f340 80b5 	ble.w	800761e <__ieee754_acosf+0x1ae>
 80074b4:	ee60 7a00 	vmul.f32	s15, s0, s0
 80074b8:	eddf 6a5c 	vldr	s13, [pc, #368]	; 800762c <__ieee754_acosf+0x1bc>
 80074bc:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8007630 <__ieee754_acosf+0x1c0>
 80074c0:	ed9f 6a5c 	vldr	s12, [pc, #368]	; 8007634 <__ieee754_acosf+0x1c4>
 80074c4:	ed9f 8a5c 	vldr	s16, [pc, #368]	; 8007638 <__ieee754_acosf+0x1c8>
 80074c8:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80074cc:	eddf 6a5b 	vldr	s13, [pc, #364]	; 800763c <__ieee754_acosf+0x1cc>
 80074d0:	eee7 6a87 	vfma.f32	s13, s15, s14
 80074d4:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8007640 <__ieee754_acosf+0x1d0>
 80074d8:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80074dc:	eddf 6a59 	vldr	s13, [pc, #356]	; 8007644 <__ieee754_acosf+0x1d4>
 80074e0:	eee7 6a87 	vfma.f32	s13, s15, s14
 80074e4:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8007648 <__ieee754_acosf+0x1d8>
 80074e8:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80074ec:	eddf 6a57 	vldr	s13, [pc, #348]	; 800764c <__ieee754_acosf+0x1dc>
 80074f0:	eea7 6aa6 	vfma.f32	s12, s15, s13
 80074f4:	eddf 6a56 	vldr	s13, [pc, #344]	; 8007650 <__ieee754_acosf+0x1e0>
 80074f8:	eee7 6a86 	vfma.f32	s13, s15, s12
 80074fc:	ed9f 6a55 	vldr	s12, [pc, #340]	; 8007654 <__ieee754_acosf+0x1e4>
 8007500:	eea7 6aa6 	vfma.f32	s12, s15, s13
 8007504:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007508:	eee7 6a86 	vfma.f32	s13, s15, s12
 800750c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007510:	eef0 7a66 	vmov.f32	s15, s13
 8007514:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8007518:	eea0 8a66 	vfms.f32	s16, s0, s13
 800751c:	ee30 8a48 	vsub.f32	s16, s0, s16
 8007520:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8007658 <__ieee754_acosf+0x1e8>
 8007524:	ee30 0a48 	vsub.f32	s0, s0, s16
 8007528:	e7b4      	b.n	8007494 <__ieee754_acosf+0x24>
 800752a:	2b00      	cmp	r3, #0
 800752c:	eddf da3f 	vldr	s27, [pc, #252]	; 800762c <__ieee754_acosf+0x1bc>
 8007530:	eddf ca3f 	vldr	s25, [pc, #252]	; 8007630 <__ieee754_acosf+0x1c0>
 8007534:	ed9f ca41 	vldr	s24, [pc, #260]	; 800763c <__ieee754_acosf+0x1cc>
 8007538:	eddf ba41 	vldr	s23, [pc, #260]	; 8007640 <__ieee754_acosf+0x1d0>
 800753c:	ed9f ba41 	vldr	s22, [pc, #260]	; 8007644 <__ieee754_acosf+0x1d4>
 8007540:	eddf 8a41 	vldr	s17, [pc, #260]	; 8007648 <__ieee754_acosf+0x1d8>
 8007544:	ed9f da41 	vldr	s26, [pc, #260]	; 800764c <__ieee754_acosf+0x1dc>
 8007548:	eddf aa3a 	vldr	s21, [pc, #232]	; 8007634 <__ieee754_acosf+0x1c4>
 800754c:	ed9f aa40 	vldr	s20, [pc, #256]	; 8007650 <__ieee754_acosf+0x1e0>
 8007550:	eddf 9a40 	vldr	s19, [pc, #256]	; 8007654 <__ieee754_acosf+0x1e4>
 8007554:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8007558:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800755c:	da28      	bge.n	80075b0 <__ieee754_acosf+0x140>
 800755e:	ee30 0a09 	vadd.f32	s0, s0, s18
 8007562:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007566:	eee0 ca2d 	vfma.f32	s25, s0, s27
 800756a:	eee0 aa0d 	vfma.f32	s21, s0, s26
 800756e:	eea0 ca2c 	vfma.f32	s24, s0, s25
 8007572:	eea0 aa2a 	vfma.f32	s20, s0, s21
 8007576:	eee0 ba0c 	vfma.f32	s23, s0, s24
 800757a:	eee0 9a0a 	vfma.f32	s19, s0, s20
 800757e:	eea0 ba2b 	vfma.f32	s22, s0, s23
 8007582:	eea0 9a29 	vfma.f32	s18, s0, s19
 8007586:	eee0 8a0b 	vfma.f32	s17, s0, s22
 800758a:	ee68 8a80 	vmul.f32	s17, s17, s0
 800758e:	f000 f86b 	bl	8007668 <__ieee754_sqrtf>
 8007592:	ee88 7a89 	vdiv.f32	s14, s17, s18
 8007596:	eddf 7a31 	vldr	s15, [pc, #196]	; 800765c <__ieee754_acosf+0x1ec>
 800759a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800759e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80075a2:	ee77 7a80 	vadd.f32	s15, s15, s0
 80075a6:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 8007660 <__ieee754_acosf+0x1f0>
 80075aa:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80075ae:	e771      	b.n	8007494 <__ieee754_acosf+0x24>
 80075b0:	ee39 8a40 	vsub.f32	s16, s18, s0
 80075b4:	ee28 8a27 	vmul.f32	s16, s16, s15
 80075b8:	eeb0 0a48 	vmov.f32	s0, s16
 80075bc:	f000 f854 	bl	8007668 <__ieee754_sqrtf>
 80075c0:	eee8 ca2d 	vfma.f32	s25, s16, s27
 80075c4:	eee8 aa0d 	vfma.f32	s21, s16, s26
 80075c8:	eea8 ca2c 	vfma.f32	s24, s16, s25
 80075cc:	eea8 aa2a 	vfma.f32	s20, s16, s21
 80075d0:	eee8 ba0c 	vfma.f32	s23, s16, s24
 80075d4:	ee10 3a10 	vmov	r3, s0
 80075d8:	eea8 ba2b 	vfma.f32	s22, s16, s23
 80075dc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80075e0:	f023 030f 	bic.w	r3, r3, #15
 80075e4:	eee8 9a0a 	vfma.f32	s19, s16, s20
 80075e8:	ee07 3a90 	vmov	s15, r3
 80075ec:	eee8 8a0b 	vfma.f32	s17, s16, s22
 80075f0:	eeb0 6a48 	vmov.f32	s12, s16
 80075f4:	eea7 6ae7 	vfms.f32	s12, s15, s15
 80075f8:	eea8 9a29 	vfma.f32	s18, s16, s19
 80075fc:	ee77 6a80 	vadd.f32	s13, s15, s0
 8007600:	ee68 8a88 	vmul.f32	s17, s17, s16
 8007604:	eeb0 7a40 	vmov.f32	s14, s0
 8007608:	ee86 0a26 	vdiv.f32	s0, s12, s13
 800760c:	eec8 6a89 	vdiv.f32	s13, s17, s18
 8007610:	eea7 0a26 	vfma.f32	s0, s14, s13
 8007614:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007618:	ee30 0a00 	vadd.f32	s0, s0, s0
 800761c:	e73a      	b.n	8007494 <__ieee754_acosf+0x24>
 800761e:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8007664 <__ieee754_acosf+0x1f4>
 8007622:	e737      	b.n	8007494 <__ieee754_acosf+0x24>
 8007624:	40490fdb 	.word	0x40490fdb
 8007628:	00000000 	.word	0x00000000
 800762c:	3811ef08 	.word	0x3811ef08
 8007630:	3a4f7f04 	.word	0x3a4f7f04
 8007634:	bf303361 	.word	0xbf303361
 8007638:	33a22168 	.word	0x33a22168
 800763c:	bd241146 	.word	0xbd241146
 8007640:	3e4e0aa8 	.word	0x3e4e0aa8
 8007644:	bea6b090 	.word	0xbea6b090
 8007648:	3e2aaaab 	.word	0x3e2aaaab
 800764c:	3d9dc62e 	.word	0x3d9dc62e
 8007650:	4001572d 	.word	0x4001572d
 8007654:	c019d139 	.word	0xc019d139
 8007658:	3fc90fda 	.word	0x3fc90fda
 800765c:	b3a22168 	.word	0xb3a22168
 8007660:	40490fda 	.word	0x40490fda
 8007664:	3fc90fdb 	.word	0x3fc90fdb

08007668 <__ieee754_sqrtf>:
 8007668:	ee10 2a10 	vmov	r2, s0
 800766c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8007670:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8007674:	b570      	push	{r4, r5, r6, lr}
 8007676:	d302      	bcc.n	800767e <__ieee754_sqrtf+0x16>
 8007678:	eea0 0a00 	vfma.f32	s0, s0, s0
 800767c:	bd70      	pop	{r4, r5, r6, pc}
 800767e:	b3b1      	cbz	r1, 80076ee <__ieee754_sqrtf+0x86>
 8007680:	2a00      	cmp	r2, #0
 8007682:	da04      	bge.n	800768e <__ieee754_sqrtf+0x26>
 8007684:	ee70 7a40 	vsub.f32	s15, s0, s0
 8007688:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800768c:	bd70      	pop	{r4, r5, r6, pc}
 800768e:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8007692:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8007696:	d204      	bcs.n	80076a2 <__ieee754_sqrtf+0x3a>
 8007698:	2100      	movs	r1, #0
 800769a:	0210      	lsls	r0, r2, #8
 800769c:	d528      	bpl.n	80076f0 <__ieee754_sqrtf+0x88>
 800769e:	3901      	subs	r1, #1
 80076a0:	1a5b      	subs	r3, r3, r1
 80076a2:	3b7f      	subs	r3, #127	; 0x7f
 80076a4:	f3c2 0216 	ubfx	r2, r2, #0, #23
 80076a8:	07d9      	lsls	r1, r3, #31
 80076aa:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80076ae:	bf48      	it	mi
 80076b0:	0052      	lslmi	r2, r2, #1
 80076b2:	1059      	asrs	r1, r3, #1
 80076b4:	2300      	movs	r3, #0
 80076b6:	0052      	lsls	r2, r2, #1
 80076b8:	2419      	movs	r4, #25
 80076ba:	461e      	mov	r6, r3
 80076bc:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 80076c0:	1835      	adds	r5, r6, r0
 80076c2:	4295      	cmp	r5, r2
 80076c4:	bfde      	ittt	le
 80076c6:	182e      	addle	r6, r5, r0
 80076c8:	1b52      	suble	r2, r2, r5
 80076ca:	181b      	addle	r3, r3, r0
 80076cc:	3c01      	subs	r4, #1
 80076ce:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80076d2:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80076d6:	d1f3      	bne.n	80076c0 <__ieee754_sqrtf+0x58>
 80076d8:	b112      	cbz	r2, 80076e0 <__ieee754_sqrtf+0x78>
 80076da:	3301      	adds	r3, #1
 80076dc:	f023 0301 	bic.w	r3, r3, #1
 80076e0:	105b      	asrs	r3, r3, #1
 80076e2:	f103 537c 	add.w	r3, r3, #1056964608	; 0x3f000000
 80076e6:	eb03 53c1 	add.w	r3, r3, r1, lsl #23
 80076ea:	ee00 3a10 	vmov	s0, r3
 80076ee:	bd70      	pop	{r4, r5, r6, pc}
 80076f0:	0052      	lsls	r2, r2, #1
 80076f2:	3101      	adds	r1, #1
 80076f4:	e7d1      	b.n	800769a <__ieee754_sqrtf+0x32>

080076f6 <fabs>:
 80076f6:	ec53 2b10 	vmov	r2, r3, d0
 80076fa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80076fe:	ec43 2b10 	vmov	d0, r2, r3
 8007702:	4770      	bx	lr

08007704 <matherr>:
 8007704:	2000      	movs	r0, #0
 8007706:	4770      	bx	lr

08007708 <nan>:
 8007708:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007710 <nan+0x8>
 800770c:	4770      	bx	lr
 800770e:	bf00      	nop
 8007710:	00000000 	.word	0x00000000
 8007714:	7ff80000 	.word	0x7ff80000

08007718 <__errno>:
 8007718:	4b01      	ldr	r3, [pc, #4]	; (8007720 <__errno+0x8>)
 800771a:	6818      	ldr	r0, [r3, #0]
 800771c:	4770      	bx	lr
 800771e:	bf00      	nop
 8007720:	20000100 	.word	0x20000100

08007724 <_sbrk>:
 8007724:	4b04      	ldr	r3, [pc, #16]	; (8007738 <_sbrk+0x14>)
 8007726:	6819      	ldr	r1, [r3, #0]
 8007728:	4602      	mov	r2, r0
 800772a:	b909      	cbnz	r1, 8007730 <_sbrk+0xc>
 800772c:	4903      	ldr	r1, [pc, #12]	; (800773c <_sbrk+0x18>)
 800772e:	6019      	str	r1, [r3, #0]
 8007730:	6818      	ldr	r0, [r3, #0]
 8007732:	4402      	add	r2, r0
 8007734:	601a      	str	r2, [r3, #0]
 8007736:	4770      	bx	lr
 8007738:	20000308 	.word	0x20000308
 800773c:	20000c38 	.word	0x20000c38

08007740 <_init>:
 8007740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007742:	bf00      	nop
 8007744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007746:	bc08      	pop	{r3}
 8007748:	469e      	mov	lr, r3
 800774a:	4770      	bx	lr

0800774c <_fini>:
 800774c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800774e:	bf00      	nop
 8007750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007752:	bc08      	pop	{r3}
 8007754:	469e      	mov	lr, r3
 8007756:	4770      	bx	lr
