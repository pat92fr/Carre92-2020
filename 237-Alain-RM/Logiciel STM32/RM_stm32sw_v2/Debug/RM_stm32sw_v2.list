
RM_stm32sw_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040f8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  080042c8  080042c8  000142c8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800433c  0800433c  0001433c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08004344  08004344  00014344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08004348  08004348  00014348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  0800434c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00005868  20000070  080043bc  00020070  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200058d8  080043bc  000258d8  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001a6b9  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000035b5  00000000  00000000  0003a759  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000d586  00000000  00000000  0003dd0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001038  00000000  00000000  0004b298  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000016d8  00000000  00000000  0004c2d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000965f  00000000  00000000  0004d9a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000061b9  00000000  00000000  00057007  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0005d1c0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000035f8  00000000  00000000  0005d23c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080042b0 	.word	0x080042b0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	080042b0 	.word	0x080042b0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b97a 	b.w	80005bc <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	468c      	mov	ip, r1
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	9e08      	ldr	r6, [sp, #32]
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d151      	bne.n	8000394 <__udivmoddi4+0xb4>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d96d      	bls.n	80003d2 <__udivmoddi4+0xf2>
 80002f6:	fab2 fe82 	clz	lr, r2
 80002fa:	f1be 0f00 	cmp.w	lr, #0
 80002fe:	d00b      	beq.n	8000318 <__udivmoddi4+0x38>
 8000300:	f1ce 0c20 	rsb	ip, lr, #32
 8000304:	fa01 f50e 	lsl.w	r5, r1, lr
 8000308:	fa20 fc0c 	lsr.w	ip, r0, ip
 800030c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000310:	ea4c 0c05 	orr.w	ip, ip, r5
 8000314:	fa00 f40e 	lsl.w	r4, r0, lr
 8000318:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800031c:	0c25      	lsrs	r5, r4, #16
 800031e:	fbbc f8fa 	udiv	r8, ip, sl
 8000322:	fa1f f987 	uxth.w	r9, r7
 8000326:	fb0a cc18 	mls	ip, sl, r8, ip
 800032a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800032e:	fb08 f309 	mul.w	r3, r8, r9
 8000332:	42ab      	cmp	r3, r5
 8000334:	d90a      	bls.n	800034c <__udivmoddi4+0x6c>
 8000336:	19ed      	adds	r5, r5, r7
 8000338:	f108 32ff 	add.w	r2, r8, #4294967295
 800033c:	f080 8123 	bcs.w	8000586 <__udivmoddi4+0x2a6>
 8000340:	42ab      	cmp	r3, r5
 8000342:	f240 8120 	bls.w	8000586 <__udivmoddi4+0x2a6>
 8000346:	f1a8 0802 	sub.w	r8, r8, #2
 800034a:	443d      	add	r5, r7
 800034c:	1aed      	subs	r5, r5, r3
 800034e:	b2a4      	uxth	r4, r4
 8000350:	fbb5 f0fa 	udiv	r0, r5, sl
 8000354:	fb0a 5510 	mls	r5, sl, r0, r5
 8000358:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800035c:	fb00 f909 	mul.w	r9, r0, r9
 8000360:	45a1      	cmp	r9, r4
 8000362:	d909      	bls.n	8000378 <__udivmoddi4+0x98>
 8000364:	19e4      	adds	r4, r4, r7
 8000366:	f100 33ff 	add.w	r3, r0, #4294967295
 800036a:	f080 810a 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800036e:	45a1      	cmp	r9, r4
 8000370:	f240 8107 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000374:	3802      	subs	r0, #2
 8000376:	443c      	add	r4, r7
 8000378:	eba4 0409 	sub.w	r4, r4, r9
 800037c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000380:	2100      	movs	r1, #0
 8000382:	2e00      	cmp	r6, #0
 8000384:	d061      	beq.n	800044a <__udivmoddi4+0x16a>
 8000386:	fa24 f40e 	lsr.w	r4, r4, lr
 800038a:	2300      	movs	r3, #0
 800038c:	6034      	str	r4, [r6, #0]
 800038e:	6073      	str	r3, [r6, #4]
 8000390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000394:	428b      	cmp	r3, r1
 8000396:	d907      	bls.n	80003a8 <__udivmoddi4+0xc8>
 8000398:	2e00      	cmp	r6, #0
 800039a:	d054      	beq.n	8000446 <__udivmoddi4+0x166>
 800039c:	2100      	movs	r1, #0
 800039e:	e886 0021 	stmia.w	r6, {r0, r5}
 80003a2:	4608      	mov	r0, r1
 80003a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a8:	fab3 f183 	clz	r1, r3
 80003ac:	2900      	cmp	r1, #0
 80003ae:	f040 808e 	bne.w	80004ce <__udivmoddi4+0x1ee>
 80003b2:	42ab      	cmp	r3, r5
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xdc>
 80003b6:	4282      	cmp	r2, r0
 80003b8:	f200 80fa 	bhi.w	80005b0 <__udivmoddi4+0x2d0>
 80003bc:	1a84      	subs	r4, r0, r2
 80003be:	eb65 0503 	sbc.w	r5, r5, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	46ac      	mov	ip, r5
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d03f      	beq.n	800044a <__udivmoddi4+0x16a>
 80003ca:	e886 1010 	stmia.w	r6, {r4, ip}
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	b912      	cbnz	r2, 80003da <__udivmoddi4+0xfa>
 80003d4:	2701      	movs	r7, #1
 80003d6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003da:	fab7 fe87 	clz	lr, r7
 80003de:	f1be 0f00 	cmp.w	lr, #0
 80003e2:	d134      	bne.n	800044e <__udivmoddi4+0x16e>
 80003e4:	1beb      	subs	r3, r5, r7
 80003e6:	0c3a      	lsrs	r2, r7, #16
 80003e8:	fa1f fc87 	uxth.w	ip, r7
 80003ec:	2101      	movs	r1, #1
 80003ee:	fbb3 f8f2 	udiv	r8, r3, r2
 80003f2:	0c25      	lsrs	r5, r4, #16
 80003f4:	fb02 3318 	mls	r3, r2, r8, r3
 80003f8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003fc:	fb0c f308 	mul.w	r3, ip, r8
 8000400:	42ab      	cmp	r3, r5
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x134>
 8000404:	19ed      	adds	r5, r5, r7
 8000406:	f108 30ff 	add.w	r0, r8, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x132>
 800040c:	42ab      	cmp	r3, r5
 800040e:	f200 80d1 	bhi.w	80005b4 <__udivmoddi4+0x2d4>
 8000412:	4680      	mov	r8, r0
 8000414:	1aed      	subs	r5, r5, r3
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb5 f0f2 	udiv	r0, r5, r2
 800041c:	fb02 5510 	mls	r5, r2, r0, r5
 8000420:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000424:	fb0c fc00 	mul.w	ip, ip, r0
 8000428:	45a4      	cmp	ip, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x15c>
 800042c:	19e4      	adds	r4, r4, r7
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x15a>
 8000434:	45a4      	cmp	ip, r4
 8000436:	f200 80b8 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 040c 	sub.w	r4, r4, ip
 8000440:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000444:	e79d      	b.n	8000382 <__udivmoddi4+0xa2>
 8000446:	4631      	mov	r1, r6
 8000448:	4630      	mov	r0, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1ce 0420 	rsb	r4, lr, #32
 8000452:	fa05 f30e 	lsl.w	r3, r5, lr
 8000456:	fa07 f70e 	lsl.w	r7, r7, lr
 800045a:	fa20 f804 	lsr.w	r8, r0, r4
 800045e:	0c3a      	lsrs	r2, r7, #16
 8000460:	fa25 f404 	lsr.w	r4, r5, r4
 8000464:	ea48 0803 	orr.w	r8, r8, r3
 8000468:	fbb4 f1f2 	udiv	r1, r4, r2
 800046c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000470:	fb02 4411 	mls	r4, r2, r1, r4
 8000474:	fa1f fc87 	uxth.w	ip, r7
 8000478:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800047c:	fb01 f30c 	mul.w	r3, r1, ip
 8000480:	42ab      	cmp	r3, r5
 8000482:	fa00 f40e 	lsl.w	r4, r0, lr
 8000486:	d909      	bls.n	800049c <__udivmoddi4+0x1bc>
 8000488:	19ed      	adds	r5, r5, r7
 800048a:	f101 30ff 	add.w	r0, r1, #4294967295
 800048e:	f080 808a 	bcs.w	80005a6 <__udivmoddi4+0x2c6>
 8000492:	42ab      	cmp	r3, r5
 8000494:	f240 8087 	bls.w	80005a6 <__udivmoddi4+0x2c6>
 8000498:	3902      	subs	r1, #2
 800049a:	443d      	add	r5, r7
 800049c:	1aeb      	subs	r3, r5, r3
 800049e:	fa1f f588 	uxth.w	r5, r8
 80004a2:	fbb3 f0f2 	udiv	r0, r3, r2
 80004a6:	fb02 3310 	mls	r3, r2, r0, r3
 80004aa:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004ae:	fb00 f30c 	mul.w	r3, r0, ip
 80004b2:	42ab      	cmp	r3, r5
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x1e6>
 80004b6:	19ed      	adds	r5, r5, r7
 80004b8:	f100 38ff 	add.w	r8, r0, #4294967295
 80004bc:	d26f      	bcs.n	800059e <__udivmoddi4+0x2be>
 80004be:	42ab      	cmp	r3, r5
 80004c0:	d96d      	bls.n	800059e <__udivmoddi4+0x2be>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443d      	add	r5, r7
 80004c6:	1aeb      	subs	r3, r5, r3
 80004c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004cc:	e78f      	b.n	80003ee <__udivmoddi4+0x10e>
 80004ce:	f1c1 0720 	rsb	r7, r1, #32
 80004d2:	fa22 f807 	lsr.w	r8, r2, r7
 80004d6:	408b      	lsls	r3, r1
 80004d8:	fa05 f401 	lsl.w	r4, r5, r1
 80004dc:	ea48 0303 	orr.w	r3, r8, r3
 80004e0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004e4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004e8:	40fd      	lsrs	r5, r7
 80004ea:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ee:	fbb5 f9fc 	udiv	r9, r5, ip
 80004f2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004f6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004fa:	fa1f f883 	uxth.w	r8, r3
 80004fe:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000502:	fb09 f408 	mul.w	r4, r9, r8
 8000506:	42ac      	cmp	r4, r5
 8000508:	fa02 f201 	lsl.w	r2, r2, r1
 800050c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000510:	d908      	bls.n	8000524 <__udivmoddi4+0x244>
 8000512:	18ed      	adds	r5, r5, r3
 8000514:	f109 30ff 	add.w	r0, r9, #4294967295
 8000518:	d243      	bcs.n	80005a2 <__udivmoddi4+0x2c2>
 800051a:	42ac      	cmp	r4, r5
 800051c:	d941      	bls.n	80005a2 <__udivmoddi4+0x2c2>
 800051e:	f1a9 0902 	sub.w	r9, r9, #2
 8000522:	441d      	add	r5, r3
 8000524:	1b2d      	subs	r5, r5, r4
 8000526:	fa1f fe8e 	uxth.w	lr, lr
 800052a:	fbb5 f0fc 	udiv	r0, r5, ip
 800052e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000532:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000536:	fb00 f808 	mul.w	r8, r0, r8
 800053a:	45a0      	cmp	r8, r4
 800053c:	d907      	bls.n	800054e <__udivmoddi4+0x26e>
 800053e:	18e4      	adds	r4, r4, r3
 8000540:	f100 35ff 	add.w	r5, r0, #4294967295
 8000544:	d229      	bcs.n	800059a <__udivmoddi4+0x2ba>
 8000546:	45a0      	cmp	r8, r4
 8000548:	d927      	bls.n	800059a <__udivmoddi4+0x2ba>
 800054a:	3802      	subs	r0, #2
 800054c:	441c      	add	r4, r3
 800054e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000552:	eba4 0408 	sub.w	r4, r4, r8
 8000556:	fba0 8902 	umull	r8, r9, r0, r2
 800055a:	454c      	cmp	r4, r9
 800055c:	46c6      	mov	lr, r8
 800055e:	464d      	mov	r5, r9
 8000560:	d315      	bcc.n	800058e <__udivmoddi4+0x2ae>
 8000562:	d012      	beq.n	800058a <__udivmoddi4+0x2aa>
 8000564:	b156      	cbz	r6, 800057c <__udivmoddi4+0x29c>
 8000566:	ebba 030e 	subs.w	r3, sl, lr
 800056a:	eb64 0405 	sbc.w	r4, r4, r5
 800056e:	fa04 f707 	lsl.w	r7, r4, r7
 8000572:	40cb      	lsrs	r3, r1
 8000574:	431f      	orrs	r7, r3
 8000576:	40cc      	lsrs	r4, r1
 8000578:	6037      	str	r7, [r6, #0]
 800057a:	6074      	str	r4, [r6, #4]
 800057c:	2100      	movs	r1, #0
 800057e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000582:	4618      	mov	r0, r3
 8000584:	e6f8      	b.n	8000378 <__udivmoddi4+0x98>
 8000586:	4690      	mov	r8, r2
 8000588:	e6e0      	b.n	800034c <__udivmoddi4+0x6c>
 800058a:	45c2      	cmp	sl, r8
 800058c:	d2ea      	bcs.n	8000564 <__udivmoddi4+0x284>
 800058e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000592:	eb69 0503 	sbc.w	r5, r9, r3
 8000596:	3801      	subs	r0, #1
 8000598:	e7e4      	b.n	8000564 <__udivmoddi4+0x284>
 800059a:	4628      	mov	r0, r5
 800059c:	e7d7      	b.n	800054e <__udivmoddi4+0x26e>
 800059e:	4640      	mov	r0, r8
 80005a0:	e791      	b.n	80004c6 <__udivmoddi4+0x1e6>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e7be      	b.n	8000524 <__udivmoddi4+0x244>
 80005a6:	4601      	mov	r1, r0
 80005a8:	e778      	b.n	800049c <__udivmoddi4+0x1bc>
 80005aa:	3802      	subs	r0, #2
 80005ac:	443c      	add	r4, r7
 80005ae:	e745      	b.n	800043c <__udivmoddi4+0x15c>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e708      	b.n	80003c6 <__udivmoddi4+0xe6>
 80005b4:	f1a8 0802 	sub.w	r8, r8, #2
 80005b8:	443d      	add	r5, r7
 80005ba:	e72b      	b.n	8000414 <__udivmoddi4+0x134>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005c0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005c2:	4a0e      	ldr	r2, [pc, #56]	; (80005fc <HAL_InitTick+0x3c>)
 80005c4:	4b0e      	ldr	r3, [pc, #56]	; (8000600 <HAL_InitTick+0x40>)
{
 80005c6:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005c8:	7818      	ldrb	r0, [r3, #0]
 80005ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ce:	fbb3 f3f0 	udiv	r3, r3, r0
 80005d2:	6810      	ldr	r0, [r2, #0]
 80005d4:	fbb0 f0f3 	udiv	r0, r0, r3
 80005d8:	f000 f9f2 	bl	80009c0 <HAL_SYSTICK_Config>
 80005dc:	4604      	mov	r4, r0
 80005de:	b958      	cbnz	r0, 80005f8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005e0:	2d0f      	cmp	r5, #15
 80005e2:	d809      	bhi.n	80005f8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005e4:	4602      	mov	r2, r0
 80005e6:	4629      	mov	r1, r5
 80005e8:	f04f 30ff 	mov.w	r0, #4294967295
 80005ec:	f000 f9a6 	bl	800093c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005f0:	4b04      	ldr	r3, [pc, #16]	; (8000604 <HAL_InitTick+0x44>)
 80005f2:	4620      	mov	r0, r4
 80005f4:	601d      	str	r5, [r3, #0]
 80005f6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80005f8:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80005fa:	bd38      	pop	{r3, r4, r5, pc}
 80005fc:	20000008 	.word	0x20000008
 8000600:	20000000 	.word	0x20000000
 8000604:	20000004 	.word	0x20000004

08000608 <HAL_Init>:
{
 8000608:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800060a:	4b0b      	ldr	r3, [pc, #44]	; (8000638 <HAL_Init+0x30>)
 800060c:	681a      	ldr	r2, [r3, #0]
 800060e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000612:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000614:	681a      	ldr	r2, [r3, #0]
 8000616:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800061a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800061c:	681a      	ldr	r2, [r3, #0]
 800061e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000622:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000624:	2003      	movs	r0, #3
 8000626:	f000 f977 	bl	8000918 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800062a:	2000      	movs	r0, #0
 800062c:	f7ff ffc8 	bl	80005c0 <HAL_InitTick>
  HAL_MspInit();
 8000630:	f002 fd38 	bl	80030a4 <HAL_MspInit>
}
 8000634:	2000      	movs	r0, #0
 8000636:	bd08      	pop	{r3, pc}
 8000638:	40023c00 	.word	0x40023c00

0800063c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800063c:	4a03      	ldr	r2, [pc, #12]	; (800064c <HAL_IncTick+0x10>)
 800063e:	4b04      	ldr	r3, [pc, #16]	; (8000650 <HAL_IncTick+0x14>)
 8000640:	6811      	ldr	r1, [r2, #0]
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	440b      	add	r3, r1
 8000646:	6013      	str	r3, [r2, #0]
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	200000ac 	.word	0x200000ac
 8000650:	20000000 	.word	0x20000000

08000654 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000654:	4b01      	ldr	r3, [pc, #4]	; (800065c <HAL_GetTick+0x8>)
 8000656:	6818      	ldr	r0, [r3, #0]
}
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	200000ac 	.word	0x200000ac

08000660 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000660:	b538      	push	{r3, r4, r5, lr}
 8000662:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000664:	f7ff fff6 	bl	8000654 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000668:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800066a:	bf1c      	itt	ne
 800066c:	4b05      	ldrne	r3, [pc, #20]	; (8000684 <HAL_Delay+0x24>)
 800066e:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000670:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000672:	bf18      	it	ne
 8000674:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000676:	f7ff ffed 	bl	8000654 <HAL_GetTick>
 800067a:	1b40      	subs	r0, r0, r5
 800067c:	4284      	cmp	r4, r0
 800067e:	d8fa      	bhi.n	8000676 <HAL_Delay+0x16>
  {
  }
}
 8000680:	bd38      	pop	{r3, r4, r5, pc}
 8000682:	bf00      	nop
 8000684:	20000000 	.word	0x20000000

08000688 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000688:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 800068a:	4604      	mov	r4, r0
 800068c:	2800      	cmp	r0, #0
 800068e:	f000 809b 	beq.w	80007c8 <HAL_ADC_Init+0x140>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000692:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8000694:	b925      	cbnz	r5, 80006a0 <HAL_ADC_Init+0x18>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000696:	f002 fd21 	bl	80030dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800069a:	6465      	str	r5, [r4, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800069c:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80006a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80006a2:	06db      	lsls	r3, r3, #27
 80006a4:	f100 808e 	bmi.w	80007c4 <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80006a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80006aa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80006ae:	f023 0302 	bic.w	r3, r3, #2
 80006b2:	f043 0302 	orr.w	r3, r3, #2
 80006b6:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80006b8:	4b44      	ldr	r3, [pc, #272]	; (80007cc <HAL_ADC_Init+0x144>)
 80006ba:	685a      	ldr	r2, [r3, #4]
 80006bc:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80006c0:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80006c2:	685a      	ldr	r2, [r3, #4]
 80006c4:	6861      	ldr	r1, [r4, #4]
 80006c6:	430a      	orrs	r2, r1
 80006c8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80006ca:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80006cc:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80006ce:	685a      	ldr	r2, [r3, #4]
 80006d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80006d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80006d6:	685a      	ldr	r2, [r3, #4]
 80006d8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80006dc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80006de:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80006e0:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80006e2:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80006e6:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80006e8:	685a      	ldr	r2, [r3, #4]
 80006ea:	430a      	orrs	r2, r1
 80006ec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80006ee:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80006f0:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80006f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80006f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80006f8:	689a      	ldr	r2, [r3, #8]
 80006fa:	430a      	orrs	r2, r1
 80006fc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80006fe:	4934      	ldr	r1, [pc, #208]	; (80007d0 <HAL_ADC_Init+0x148>)
 8000700:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000702:	428a      	cmp	r2, r1
 8000704:	d052      	beq.n	80007ac <HAL_ADC_Init+0x124>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000706:	6899      	ldr	r1, [r3, #8]
 8000708:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 800070c:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800070e:	6899      	ldr	r1, [r3, #8]
 8000710:	430a      	orrs	r2, r1
 8000712:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000714:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000716:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000718:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800071c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800071e:	689a      	ldr	r2, [r3, #8]
 8000720:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000722:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000724:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000726:	7e21      	ldrb	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000728:	f022 0202 	bic.w	r2, r2, #2
 800072c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800072e:	689a      	ldr	r2, [r3, #8]
 8000730:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8000734:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000736:	f894 2020 	ldrb.w	r2, [r4, #32]
 800073a:	2a00      	cmp	r2, #0
 800073c:	d03e      	beq.n	80007bc <HAL_ADC_Init+0x134>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800073e:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000740:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000742:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000746:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000748:	685a      	ldr	r2, [r3, #4]
 800074a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800074e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000750:	685a      	ldr	r2, [r3, #4]
 8000752:	3901      	subs	r1, #1
 8000754:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000758:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800075a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800075c:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800075e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000762:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000764:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000766:	3901      	subs	r1, #1
 8000768:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800076c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800076e:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000770:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000774:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000778:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800077a:	689a      	ldr	r2, [r3, #8]
 800077c:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8000780:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000782:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000784:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000786:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800078a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800078c:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800078e:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000790:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8000794:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8000796:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8000798:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800079a:	f023 0303 	bic.w	r3, r3, #3
 800079e:	f043 0301 	orr.w	r3, r3, #1
 80007a2:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 80007a4:	2300      	movs	r3, #0
 80007a6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 80007aa:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80007ac:	689a      	ldr	r2, [r3, #8]
 80007ae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80007b2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80007b4:	689a      	ldr	r2, [r3, #8]
 80007b6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80007ba:	e7b2      	b.n	8000722 <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80007bc:	685a      	ldr	r2, [r3, #4]
 80007be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80007c2:	e7c9      	b.n	8000758 <HAL_ADC_Init+0xd0>
    tmp_hal_status = HAL_ERROR;
 80007c4:	2001      	movs	r0, #1
 80007c6:	e7ed      	b.n	80007a4 <HAL_ADC_Init+0x11c>
    return HAL_ERROR;
 80007c8:	2001      	movs	r0, #1
}
 80007ca:	bd38      	pop	{r3, r4, r5, pc}
 80007cc:	40012300 	.word	0x40012300
 80007d0:	0f000001 	.word	0x0f000001

080007d4 <HAL_ADC_ConfigChannel>:
{
 80007d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 80007d6:	2300      	movs	r3, #0
 80007d8:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80007da:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80007de:	2b01      	cmp	r3, #1
 80007e0:	d06e      	beq.n	80008c0 <HAL_ADC_ConfigChannel+0xec>
  if (sConfig->Channel > ADC_CHANNEL_9)
 80007e2:	680d      	ldr	r5, [r1, #0]
 80007e4:	6804      	ldr	r4, [r0, #0]
 80007e6:	688a      	ldr	r2, [r1, #8]
  __HAL_LOCK(hadc);
 80007e8:	2301      	movs	r3, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 80007ea:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 80007ec:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 80007f0:	b2ae      	uxth	r6, r5
  if (sConfig->Channel > ADC_CHANNEL_9)
 80007f2:	d92a      	bls.n	800084a <HAL_ADC_ConfigChannel+0x76>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80007f4:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 80007f8:	68e7      	ldr	r7, [r4, #12]
 80007fa:	3b1e      	subs	r3, #30
 80007fc:	f04f 0e07 	mov.w	lr, #7
 8000800:	fa0e fe03 	lsl.w	lr, lr, r3
 8000804:	ea27 070e 	bic.w	r7, r7, lr
 8000808:	60e7      	str	r7, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800080a:	68e7      	ldr	r7, [r4, #12]
 800080c:	fa02 f303 	lsl.w	r3, r2, r3
 8000810:	433b      	orrs	r3, r7
 8000812:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 8000814:	684a      	ldr	r2, [r1, #4]
 8000816:	2a06      	cmp	r2, #6
 8000818:	ea4f 0382 	mov.w	r3, r2, lsl #2
 800081c:	d825      	bhi.n	800086a <HAL_ADC_ConfigChannel+0x96>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800081e:	4413      	add	r3, r2
 8000820:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8000822:	1f59      	subs	r1, r3, #5
 8000824:	231f      	movs	r3, #31
 8000826:	408b      	lsls	r3, r1
 8000828:	ea27 0303 	bic.w	r3, r7, r3
 800082c:	6363      	str	r3, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800082e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000830:	fa06 f101 	lsl.w	r1, r6, r1
 8000834:	4311      	orrs	r1, r2
 8000836:	6361      	str	r1, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000838:	4b32      	ldr	r3, [pc, #200]	; (8000904 <HAL_ADC_ConfigChannel+0x130>)
 800083a:	429c      	cmp	r4, r3
 800083c:	d034      	beq.n	80008a8 <HAL_ADC_ConfigChannel+0xd4>
  __HAL_UNLOCK(hadc);
 800083e:	2300      	movs	r3, #0
 8000840:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8000844:	4618      	mov	r0, r3
}
 8000846:	b003      	add	sp, #12
 8000848:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800084a:	6927      	ldr	r7, [r4, #16]
 800084c:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8000850:	f04f 0e07 	mov.w	lr, #7
 8000854:	fa0e fe03 	lsl.w	lr, lr, r3
 8000858:	ea27 070e 	bic.w	r7, r7, lr
 800085c:	6127      	str	r7, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800085e:	6927      	ldr	r7, [r4, #16]
 8000860:	fa02 f303 	lsl.w	r3, r2, r3
 8000864:	433b      	orrs	r3, r7
 8000866:	6123      	str	r3, [r4, #16]
 8000868:	e7d4      	b.n	8000814 <HAL_ADC_ConfigChannel+0x40>
  else if (sConfig->Rank < 13U)
 800086a:	2a0c      	cmp	r2, #12
 800086c:	d80e      	bhi.n	800088c <HAL_ADC_ConfigChannel+0xb8>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800086e:	4413      	add	r3, r2
 8000870:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000872:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 8000876:	231f      	movs	r3, #31
 8000878:	4093      	lsls	r3, r2
 800087a:	ea21 0303 	bic.w	r3, r1, r3
 800087e:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000880:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000882:	fa06 f202 	lsl.w	r2, r6, r2
 8000886:	431a      	orrs	r2, r3
 8000888:	6322      	str	r2, [r4, #48]	; 0x30
 800088a:	e7d5      	b.n	8000838 <HAL_ADC_ConfigChannel+0x64>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800088c:	4413      	add	r3, r2
 800088e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000890:	3b41      	subs	r3, #65	; 0x41
 8000892:	221f      	movs	r2, #31
 8000894:	409a      	lsls	r2, r3
 8000896:	ea21 0202 	bic.w	r2, r1, r2
 800089a:	62e2      	str	r2, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800089c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800089e:	fa06 f103 	lsl.w	r1, r6, r3
 80008a2:	4311      	orrs	r1, r2
 80008a4:	62e1      	str	r1, [r4, #44]	; 0x2c
 80008a6:	e7c7      	b.n	8000838 <HAL_ADC_ConfigChannel+0x64>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80008a8:	2d12      	cmp	r5, #18
 80008aa:	d10b      	bne.n	80008c4 <HAL_ADC_ConfigChannel+0xf0>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80008ac:	4b16      	ldr	r3, [pc, #88]	; (8000908 <HAL_ADC_ConfigChannel+0x134>)
 80008ae:	685a      	ldr	r2, [r3, #4]
 80008b0:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80008b4:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80008b6:	685a      	ldr	r2, [r3, #4]
 80008b8:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80008bc:	605a      	str	r2, [r3, #4]
 80008be:	e7be      	b.n	800083e <HAL_ADC_ConfigChannel+0x6a>
  __HAL_LOCK(hadc);
 80008c0:	2002      	movs	r0, #2
 80008c2:	e7c0      	b.n	8000846 <HAL_ADC_ConfigChannel+0x72>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80008c4:	4b11      	ldr	r3, [pc, #68]	; (800090c <HAL_ADC_ConfigChannel+0x138>)
 80008c6:	429d      	cmp	r5, r3
 80008c8:	d001      	beq.n	80008ce <HAL_ADC_ConfigChannel+0xfa>
 80008ca:	2d11      	cmp	r5, #17
 80008cc:	d1b7      	bne.n	800083e <HAL_ADC_ConfigChannel+0x6a>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80008ce:	4b0e      	ldr	r3, [pc, #56]	; (8000908 <HAL_ADC_ConfigChannel+0x134>)
 80008d0:	685a      	ldr	r2, [r3, #4]
 80008d2:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 80008d6:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80008d8:	685a      	ldr	r2, [r3, #4]
 80008da:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80008de:	605a      	str	r2, [r3, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80008e0:	4b0a      	ldr	r3, [pc, #40]	; (800090c <HAL_ADC_ConfigChannel+0x138>)
 80008e2:	429d      	cmp	r5, r3
 80008e4:	d1ab      	bne.n	800083e <HAL_ADC_ConfigChannel+0x6a>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80008e6:	4b0a      	ldr	r3, [pc, #40]	; (8000910 <HAL_ADC_ConfigChannel+0x13c>)
 80008e8:	4a0a      	ldr	r2, [pc, #40]	; (8000914 <HAL_ADC_ConfigChannel+0x140>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	fbb3 f2f2 	udiv	r2, r3, r2
 80008f0:	230a      	movs	r3, #10
 80008f2:	4353      	muls	r3, r2
        counter--;
 80008f4:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 80008f6:	9b01      	ldr	r3, [sp, #4]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d0a0      	beq.n	800083e <HAL_ADC_ConfigChannel+0x6a>
        counter--;
 80008fc:	9b01      	ldr	r3, [sp, #4]
 80008fe:	3b01      	subs	r3, #1
 8000900:	e7f8      	b.n	80008f4 <HAL_ADC_ConfigChannel+0x120>
 8000902:	bf00      	nop
 8000904:	40012000 	.word	0x40012000
 8000908:	40012300 	.word	0x40012300
 800090c:	10000012 	.word	0x10000012
 8000910:	20000008 	.word	0x20000008
 8000914:	000f4240 	.word	0x000f4240

08000918 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000918:	4a07      	ldr	r2, [pc, #28]	; (8000938 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800091a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800091c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000920:	041b      	lsls	r3, r3, #16
 8000922:	0c1b      	lsrs	r3, r3, #16
 8000924:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000928:	0200      	lsls	r0, r0, #8
 800092a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800092e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000932:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000934:	60d3      	str	r3, [r2, #12]
 8000936:	4770      	bx	lr
 8000938:	e000ed00 	.word	0xe000ed00

0800093c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800093c:	4b17      	ldr	r3, [pc, #92]	; (800099c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800093e:	b530      	push	{r4, r5, lr}
 8000940:	68dc      	ldr	r4, [r3, #12]
 8000942:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000946:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800094a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800094c:	2b04      	cmp	r3, #4
 800094e:	bf28      	it	cs
 8000950:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000952:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000954:	f04f 0501 	mov.w	r5, #1
 8000958:	fa05 f303 	lsl.w	r3, r5, r3
 800095c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000960:	bf8c      	ite	hi
 8000962:	3c03      	subhi	r4, #3
 8000964:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000966:	4019      	ands	r1, r3
 8000968:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800096a:	fa05 f404 	lsl.w	r4, r5, r4
 800096e:	3c01      	subs	r4, #1
 8000970:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000972:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000974:	ea42 0201 	orr.w	r2, r2, r1
 8000978:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800097c:	bfad      	iteet	ge
 800097e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000982:	f000 000f 	andlt.w	r0, r0, #15
 8000986:	4b06      	ldrlt	r3, [pc, #24]	; (80009a0 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000988:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800098c:	bfb5      	itete	lt
 800098e:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000990:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000992:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000994:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000998:	bd30      	pop	{r4, r5, pc}
 800099a:	bf00      	nop
 800099c:	e000ed00 	.word	0xe000ed00
 80009a0:	e000ed14 	.word	0xe000ed14

080009a4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80009a4:	2800      	cmp	r0, #0
 80009a6:	db08      	blt.n	80009ba <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009a8:	0942      	lsrs	r2, r0, #5
 80009aa:	2301      	movs	r3, #1
 80009ac:	f000 001f 	and.w	r0, r0, #31
 80009b0:	fa03 f000 	lsl.w	r0, r3, r0
 80009b4:	4b01      	ldr	r3, [pc, #4]	; (80009bc <HAL_NVIC_EnableIRQ+0x18>)
 80009b6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80009ba:	4770      	bx	lr
 80009bc:	e000e100 	.word	0xe000e100

080009c0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009c0:	3801      	subs	r0, #1
 80009c2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80009c6:	d20a      	bcs.n	80009de <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009c8:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ca:	4a07      	ldr	r2, [pc, #28]	; (80009e8 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009cc:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ce:	21f0      	movs	r1, #240	; 0xf0
 80009d0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009d4:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009d6:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009d8:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80009de:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	e000e010 	.word	0xe000e010
 80009e8:	e000ed00 	.word	0xe000ed00

080009ec <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80009ec:	6803      	ldr	r3, [r0, #0]
 80009ee:	b2da      	uxtb	r2, r3
 80009f0:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80009f4:	f023 0303 	bic.w	r3, r3, #3
 80009f8:	2118      	movs	r1, #24
 80009fa:	3a10      	subs	r2, #16
 80009fc:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000a00:	4904      	ldr	r1, [pc, #16]	; (8000a14 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8000a02:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000a04:	bf88      	it	hi
 8000a06:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000a08:	5c89      	ldrb	r1, [r1, r2]
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000a0a:	6583      	str	r3, [r0, #88]	; 0x58
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000a0c:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  
  return hdma->StreamBaseAddress;
}
 8000a0e:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	080042c8 	.word	0x080042c8

08000a18 <HAL_DMA_Init>:
{
 8000a18:	b570      	push	{r4, r5, r6, lr}
 8000a1a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000a1c:	f7ff fe1a 	bl	8000654 <HAL_GetTick>
 8000a20:	4605      	mov	r5, r0
  if(hdma == NULL)
 8000a22:	2c00      	cmp	r4, #0
 8000a24:	d071      	beq.n	8000b0a <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 8000a26:	2300      	movs	r3, #0
 8000a28:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8000a2c:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8000a2e:	2302      	movs	r3, #2
 8000a30:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8000a34:	6813      	ldr	r3, [r2, #0]
 8000a36:	f023 0301 	bic.w	r3, r3, #1
 8000a3a:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000a3c:	6821      	ldr	r1, [r4, #0]
 8000a3e:	680b      	ldr	r3, [r1, #0]
 8000a40:	07d8      	lsls	r0, r3, #31
 8000a42:	d43c      	bmi.n	8000abe <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 8000a44:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000a46:	4d32      	ldr	r5, [pc, #200]	; (8000b10 <HAL_DMA_Init+0xf8>)
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000a48:	6862      	ldr	r2, [r4, #4]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a4a:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000a4c:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000a4e:	68a3      	ldr	r3, [r4, #8]
 8000a50:	4313      	orrs	r3, r2
 8000a52:	68e2      	ldr	r2, [r4, #12]
 8000a54:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a56:	6922      	ldr	r2, [r4, #16]
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	6962      	ldr	r2, [r4, #20]
 8000a5c:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a5e:	69e2      	ldr	r2, [r4, #28]
 8000a60:	4303      	orrs	r3, r0
 8000a62:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8000a64:	6a22      	ldr	r2, [r4, #32]
 8000a66:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000a68:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000a6a:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000a6c:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000a70:	bf01      	itttt	eq
 8000a72:	6b26      	ldreq	r6, [r4, #48]	; 0x30
 8000a74:	6ae5      	ldreq	r5, [r4, #44]	; 0x2c
 8000a76:	4335      	orreq	r5, r6
 8000a78:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 8000a7a:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8000a7c:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000a7e:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000a80:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8000a84:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000a88:	d10b      	bne.n	8000aa2 <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 8000a8a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000a8c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8000a8e:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000a90:	b13d      	cbz	r5, 8000aa2 <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000a92:	b9f8      	cbnz	r0, 8000ad4 <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 8000a94:	2a01      	cmp	r2, #1
 8000a96:	d02d      	beq.n	8000af4 <HAL_DMA_Init+0xdc>
 8000a98:	d301      	bcc.n	8000a9e <HAL_DMA_Init+0x86>
 8000a9a:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000a9c:	d101      	bne.n	8000aa2 <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000a9e:	01ea      	lsls	r2, r5, #7
 8000aa0:	d42b      	bmi.n	8000afa <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 8000aa2:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000aa4:	4620      	mov	r0, r4
 8000aa6:	f7ff ffa1 	bl	80009ec <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000aaa:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000aac:	233f      	movs	r3, #63	; 0x3f
 8000aae:	4093      	lsls	r3, r2
 8000ab0:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ab2:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8000ab4:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ab6:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8000ab8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8000abc:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000abe:	f7ff fdc9 	bl	8000654 <HAL_GetTick>
 8000ac2:	1b40      	subs	r0, r0, r5
 8000ac4:	2805      	cmp	r0, #5
 8000ac6:	d9b9      	bls.n	8000a3c <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000ac8:	2320      	movs	r3, #32
 8000aca:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000acc:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 8000ace:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8000ad2:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000ad4:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8000ad8:	d113      	bne.n	8000b02 <HAL_DMA_Init+0xea>
    switch (tmp)
 8000ada:	2a03      	cmp	r2, #3
 8000adc:	d8e1      	bhi.n	8000aa2 <HAL_DMA_Init+0x8a>
 8000ade:	a001      	add	r0, pc, #4	; (adr r0, 8000ae4 <HAL_DMA_Init+0xcc>)
 8000ae0:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8000ae4:	08000afb 	.word	0x08000afb
 8000ae8:	08000a9f 	.word	0x08000a9f
 8000aec:	08000afb 	.word	0x08000afb
 8000af0:	08000af5 	.word	0x08000af5
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000af4:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8000af8:	d1d3      	bne.n	8000aa2 <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000afa:	2340      	movs	r3, #64	; 0x40
 8000afc:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8000afe:	2001      	movs	r0, #1
 8000b00:	e7e5      	b.n	8000ace <HAL_DMA_Init+0xb6>
    switch (tmp)
 8000b02:	2a02      	cmp	r2, #2
 8000b04:	d9f9      	bls.n	8000afa <HAL_DMA_Init+0xe2>
 8000b06:	2a03      	cmp	r2, #3
 8000b08:	e7c8      	b.n	8000a9c <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 8000b0a:	2001      	movs	r0, #1
 8000b0c:	bd70      	pop	{r4, r5, r6, pc}
 8000b0e:	bf00      	nop
 8000b10:	f010803f 	.word	0xf010803f

08000b14 <HAL_DMA_Start_IT>:
{
 8000b14:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8000b16:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8000b1a:	2c01      	cmp	r4, #1
 8000b1c:	d032      	beq.n	8000b84 <HAL_DMA_Start_IT+0x70>
 8000b1e:	2401      	movs	r4, #1
 8000b20:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8000b24:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000b28:	6d86      	ldr	r6, [r0, #88]	; 0x58
  if(HAL_DMA_STATE_READY == hdma->State)
 8000b2a:	2c01      	cmp	r4, #1
 8000b2c:	f04f 0500 	mov.w	r5, #0
 8000b30:	f04f 0402 	mov.w	r4, #2
 8000b34:	d124      	bne.n	8000b80 <HAL_DMA_Start_IT+0x6c>
    hdma->State = HAL_DMA_STATE_BUSY;
 8000b36:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000b3a:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b3c:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000b3e:	6825      	ldr	r5, [r4, #0]
 8000b40:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8000b44:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8000b46:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000b48:	6883      	ldr	r3, [r0, #8]
 8000b4a:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 8000b4c:	bf0e      	itee	eq
 8000b4e:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 8000b50:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8000b52:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000b54:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 8000b56:	bf08      	it	eq
 8000b58:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000b5a:	233f      	movs	r3, #63	; 0x3f
 8000b5c:	4093      	lsls	r3, r2
 8000b5e:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000b60:	6823      	ldr	r3, [r4, #0]
 8000b62:	f043 0316 	orr.w	r3, r3, #22
 8000b66:	6023      	str	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8000b68:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000b6a:	b11b      	cbz	r3, 8000b74 <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 8000b6c:	6823      	ldr	r3, [r4, #0]
 8000b6e:	f043 0308 	orr.w	r3, r3, #8
 8000b72:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8000b74:	6823      	ldr	r3, [r4, #0]
 8000b76:	f043 0301 	orr.w	r3, r3, #1
 8000b7a:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000b7c:	2000      	movs	r0, #0
 8000b7e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hdma);	  
 8000b80:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 8000b84:	2002      	movs	r0, #2
}
 8000b86:	bd70      	pop	{r4, r5, r6, pc}

08000b88 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000b88:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000b8c:	2b02      	cmp	r3, #2
 8000b8e:	d003      	beq.n	8000b98 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b90:	2380      	movs	r3, #128	; 0x80
 8000b92:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8000b94:	2001      	movs	r0, #1
 8000b96:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8000b98:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8000b9a:	2305      	movs	r3, #5
 8000b9c:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8000ba0:	6813      	ldr	r3, [r2, #0]
 8000ba2:	f023 0301 	bic.w	r3, r3, #1
 8000ba6:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8000ba8:	2000      	movs	r0, #0
}
 8000baa:	4770      	bx	lr

08000bac <HAL_DMA_IRQHandler>:
{
 8000bac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000bb2:	4b5a      	ldr	r3, [pc, #360]	; (8000d1c <HAL_DMA_IRQHandler+0x170>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000bb4:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 8000bb6:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000bb8:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8000bba:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000bbc:	2208      	movs	r2, #8
 8000bbe:	409a      	lsls	r2, r3
 8000bc0:	4216      	tst	r6, r2
{
 8000bc2:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000bc4:	d00c      	beq.n	8000be0 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000bc6:	6801      	ldr	r1, [r0, #0]
 8000bc8:	6808      	ldr	r0, [r1, #0]
 8000bca:	0740      	lsls	r0, r0, #29
 8000bcc:	d508      	bpl.n	8000be0 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000bce:	6808      	ldr	r0, [r1, #0]
 8000bd0:	f020 0004 	bic.w	r0, r0, #4
 8000bd4:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000bd6:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000bd8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000bda:	f042 0201 	orr.w	r2, r2, #1
 8000bde:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000be0:	2201      	movs	r2, #1
 8000be2:	409a      	lsls	r2, r3
 8000be4:	4216      	tst	r6, r2
 8000be6:	d008      	beq.n	8000bfa <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000be8:	6821      	ldr	r1, [r4, #0]
 8000bea:	6949      	ldr	r1, [r1, #20]
 8000bec:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000bee:	bf41      	itttt	mi
 8000bf0:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000bf2:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8000bf4:	f042 0202 	orrmi.w	r2, r2, #2
 8000bf8:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000bfa:	2204      	movs	r2, #4
 8000bfc:	409a      	lsls	r2, r3
 8000bfe:	4216      	tst	r6, r2
 8000c00:	d008      	beq.n	8000c14 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000c02:	6821      	ldr	r1, [r4, #0]
 8000c04:	6809      	ldr	r1, [r1, #0]
 8000c06:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000c08:	bf41      	itttt	mi
 8000c0a:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000c0c:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8000c0e:	f042 0204 	orrmi.w	r2, r2, #4
 8000c12:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000c14:	2210      	movs	r2, #16
 8000c16:	409a      	lsls	r2, r3
 8000c18:	4216      	tst	r6, r2
 8000c1a:	d010      	beq.n	8000c3e <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000c1c:	6823      	ldr	r3, [r4, #0]
 8000c1e:	6819      	ldr	r1, [r3, #0]
 8000c20:	0709      	lsls	r1, r1, #28
 8000c22:	d50c      	bpl.n	8000c3e <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000c24:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000c26:	681a      	ldr	r2, [r3, #0]
 8000c28:	0350      	lsls	r0, r2, #13
 8000c2a:	d535      	bpl.n	8000c98 <HAL_DMA_IRQHandler+0xec>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	0319      	lsls	r1, r3, #12
 8000c30:	d401      	bmi.n	8000c36 <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 8000c32:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000c34:	e000      	b.n	8000c38 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000c36:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8000c38:	b10b      	cbz	r3, 8000c3e <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 8000c3a:	4620      	mov	r0, r4
 8000c3c:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000c3e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8000c40:	2220      	movs	r2, #32
 8000c42:	408a      	lsls	r2, r1
 8000c44:	4216      	tst	r6, r2
 8000c46:	d038      	beq.n	8000cba <HAL_DMA_IRQHandler+0x10e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000c48:	6823      	ldr	r3, [r4, #0]
 8000c4a:	6818      	ldr	r0, [r3, #0]
 8000c4c:	06c6      	lsls	r6, r0, #27
 8000c4e:	d534      	bpl.n	8000cba <HAL_DMA_IRQHandler+0x10e>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000c50:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000c52:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8000c56:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000c58:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000c5a:	d125      	bne.n	8000ca8 <HAL_DMA_IRQHandler+0xfc>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000c5c:	f022 0216 	bic.w	r2, r2, #22
 8000c60:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000c62:	695a      	ldr	r2, [r3, #20]
 8000c64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000c68:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000c6a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000c6c:	b90a      	cbnz	r2, 8000c72 <HAL_DMA_IRQHandler+0xc6>
 8000c6e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8000c70:	b11a      	cbz	r2, 8000c7a <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	f022 0208 	bic.w	r2, r2, #8
 8000c78:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000c7a:	233f      	movs	r3, #63	; 0x3f
 8000c7c:	408b      	lsls	r3, r1
 8000c7e:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 8000c80:	2300      	movs	r3, #0
 8000c82:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8000c86:	2301      	movs	r3, #1
 8000c88:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8000c8c:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 8000c8e:	b10b      	cbz	r3, 8000c94 <HAL_DMA_IRQHandler+0xe8>
      hdma->XferErrorCallback(hdma);
 8000c90:	4620      	mov	r0, r4
 8000c92:	4798      	blx	r3
}
 8000c94:	b003      	add	sp, #12
 8000c96:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000c9c:	bf5e      	ittt	pl
 8000c9e:	681a      	ldrpl	r2, [r3, #0]
 8000ca0:	f022 0208 	bicpl.w	r2, r2, #8
 8000ca4:	601a      	strpl	r2, [r3, #0]
 8000ca6:	e7c4      	b.n	8000c32 <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000ca8:	0350      	lsls	r0, r2, #13
 8000caa:	d528      	bpl.n	8000cfe <HAL_DMA_IRQHandler+0x152>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	0319      	lsls	r1, r3, #12
 8000cb0:	d432      	bmi.n	8000d18 <HAL_DMA_IRQHandler+0x16c>
          if(hdma->XferM1CpltCallback != NULL)
 8000cb2:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8000cb4:	b10b      	cbz	r3, 8000cba <HAL_DMA_IRQHandler+0x10e>
          hdma->XferCpltCallback(hdma);
 8000cb6:	4620      	mov	r0, r4
 8000cb8:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000cba:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d0e9      	beq.n	8000c94 <HAL_DMA_IRQHandler+0xe8>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000cc0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000cc2:	07da      	lsls	r2, r3, #31
 8000cc4:	d519      	bpl.n	8000cfa <HAL_DMA_IRQHandler+0x14e>
      hdma->State = HAL_DMA_STATE_ABORT;
 8000cc6:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 8000cc8:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 8000cca:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8000cce:	6813      	ldr	r3, [r2, #0]
 8000cd0:	f023 0301 	bic.w	r3, r3, #1
 8000cd4:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000cd6:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000cda:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 8000cde:	9b01      	ldr	r3, [sp, #4]
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	429f      	cmp	r7, r3
 8000ce4:	9301      	str	r3, [sp, #4]
 8000ce6:	d302      	bcc.n	8000cee <HAL_DMA_IRQHandler+0x142>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000ce8:	6813      	ldr	r3, [r2, #0]
 8000cea:	07db      	lsls	r3, r3, #31
 8000cec:	d4f7      	bmi.n	8000cde <HAL_DMA_IRQHandler+0x132>
      __HAL_UNLOCK(hdma);
 8000cee:	2300      	movs	r3, #0
 8000cf0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8000cfa:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000cfc:	e7c7      	b.n	8000c8e <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8000d04:	d108      	bne.n	8000d18 <HAL_DMA_IRQHandler+0x16c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000d06:	6819      	ldr	r1, [r3, #0]
 8000d08:	f021 0110 	bic.w	r1, r1, #16
 8000d0c:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8000d0e:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8000d10:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8000d14:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8000d18:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000d1a:	e7cb      	b.n	8000cb4 <HAL_DMA_IRQHandler+0x108>
 8000d1c:	20000008 	.word	0x20000008

08000d20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d24:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d26:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d28:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8000ecc <HAL_GPIO_Init+0x1ac>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d2c:	4a65      	ldr	r2, [pc, #404]	; (8000ec4 <HAL_GPIO_Init+0x1a4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d2e:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 8000ed0 <HAL_GPIO_Init+0x1b0>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d32:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d34:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000d36:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d38:	9d01      	ldr	r5, [sp, #4]
    ioposition = 0x01U << position;
 8000d3a:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d3c:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 8000d3e:	42ac      	cmp	r4, r5
 8000d40:	f040 80ac 	bne.w	8000e9c <HAL_GPIO_Init+0x17c>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d44:	684c      	ldr	r4, [r1, #4]
 8000d46:	f024 0c10 	bic.w	ip, r4, #16
 8000d4a:	f10c 36ff 	add.w	r6, ip, #4294967295
 8000d4e:	2e01      	cmp	r6, #1
 8000d50:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000d54:	d812      	bhi.n	8000d7c <HAL_GPIO_Init+0x5c>
        temp = GPIOx->OSPEEDR; 
 8000d56:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d58:	2603      	movs	r6, #3
 8000d5a:	fa06 f60e 	lsl.w	r6, r6, lr
 8000d5e:	ea27 0706 	bic.w	r7, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d62:	68ce      	ldr	r6, [r1, #12]
 8000d64:	fa06 f60e 	lsl.w	r6, r6, lr
 8000d68:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 8000d6a:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000d6c:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000d6e:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d72:	ea27 0705 	bic.w	r7, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000d76:	409e      	lsls	r6, r3
 8000d78:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 8000d7a:	6046      	str	r6, [r0, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d7c:	2603      	movs	r6, #3
      temp = GPIOx->PUPDR;
 8000d7e:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d80:	fa06 f60e 	lsl.w	r6, r6, lr
 8000d84:	43f6      	mvns	r6, r6
 8000d86:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d8a:	688f      	ldr	r7, [r1, #8]
 8000d8c:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d90:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d94:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 8000d98:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d9a:	d116      	bne.n	8000dca <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3U];
 8000d9c:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000da0:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000da4:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000da8:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000dac:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000db0:	f04f 0c0f 	mov.w	ip, #15
 8000db4:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000db8:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000dbc:	690f      	ldr	r7, [r1, #16]
 8000dbe:	fa07 f70b 	lsl.w	r7, r7, fp
 8000dc2:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000dc6:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 8000dca:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000dcc:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000dce:	f004 0703 	and.w	r7, r4, #3
 8000dd2:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000dd6:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 8000dda:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ddc:	00e6      	lsls	r6, r4, #3
 8000dde:	d55d      	bpl.n	8000e9c <HAL_GPIO_Init+0x17c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000de0:	f04f 0b00 	mov.w	fp, #0
 8000de4:	f8cd b00c 	str.w	fp, [sp, #12]
 8000de8:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000dec:	4e36      	ldr	r6, [pc, #216]	; (8000ec8 <HAL_GPIO_Init+0x1a8>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dee:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000df2:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000df6:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000dfa:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000dfe:	9703      	str	r7, [sp, #12]
 8000e00:	9f03      	ldr	r7, [sp, #12]
 8000e02:	f023 0703 	bic.w	r7, r3, #3
 8000e06:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000e0a:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e0e:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000e12:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e16:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000e1a:	f04f 0e0f 	mov.w	lr, #15
 8000e1e:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e22:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e24:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e28:	d03f      	beq.n	8000eaa <HAL_GPIO_Init+0x18a>
 8000e2a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000e2e:	42b0      	cmp	r0, r6
 8000e30:	d03d      	beq.n	8000eae <HAL_GPIO_Init+0x18e>
 8000e32:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000e36:	42b0      	cmp	r0, r6
 8000e38:	d03b      	beq.n	8000eb2 <HAL_GPIO_Init+0x192>
 8000e3a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000e3e:	42b0      	cmp	r0, r6
 8000e40:	d039      	beq.n	8000eb6 <HAL_GPIO_Init+0x196>
 8000e42:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000e46:	42b0      	cmp	r0, r6
 8000e48:	d037      	beq.n	8000eba <HAL_GPIO_Init+0x19a>
 8000e4a:	4548      	cmp	r0, r9
 8000e4c:	d037      	beq.n	8000ebe <HAL_GPIO_Init+0x19e>
 8000e4e:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8000e52:	42b0      	cmp	r0, r6
 8000e54:	bf14      	ite	ne
 8000e56:	2607      	movne	r6, #7
 8000e58:	2606      	moveq	r6, #6
 8000e5a:	fa06 f60c 	lsl.w	r6, r6, ip
 8000e5e:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e62:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8000e64:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000e66:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e68:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000e6c:	bf0c      	ite	eq
 8000e6e:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000e70:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 8000e72:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 8000e74:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e76:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000e7a:	bf0c      	ite	eq
 8000e7c:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000e7e:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 8000e80:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e82:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e84:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000e88:	bf0c      	ite	eq
 8000e8a:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000e8c:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 8000e8e:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8000e90:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e92:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000e94:	bf54      	ite	pl
 8000e96:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8000e98:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 8000e9a:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	2b10      	cmp	r3, #16
 8000ea0:	f47f af49 	bne.w	8000d36 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000ea4:	b005      	add	sp, #20
 8000ea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000eaa:	465e      	mov	r6, fp
 8000eac:	e7d5      	b.n	8000e5a <HAL_GPIO_Init+0x13a>
 8000eae:	2601      	movs	r6, #1
 8000eb0:	e7d3      	b.n	8000e5a <HAL_GPIO_Init+0x13a>
 8000eb2:	2602      	movs	r6, #2
 8000eb4:	e7d1      	b.n	8000e5a <HAL_GPIO_Init+0x13a>
 8000eb6:	2603      	movs	r6, #3
 8000eb8:	e7cf      	b.n	8000e5a <HAL_GPIO_Init+0x13a>
 8000eba:	2604      	movs	r6, #4
 8000ebc:	e7cd      	b.n	8000e5a <HAL_GPIO_Init+0x13a>
 8000ebe:	2605      	movs	r6, #5
 8000ec0:	e7cb      	b.n	8000e5a <HAL_GPIO_Init+0x13a>
 8000ec2:	bf00      	nop
 8000ec4:	40013c00 	.word	0x40013c00
 8000ec8:	40020000 	.word	0x40020000
 8000ecc:	40023800 	.word	0x40023800
 8000ed0:	40021400 	.word	0x40021400

08000ed4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ed4:	b10a      	cbz	r2, 8000eda <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000ed6:	6181      	str	r1, [r0, #24]
 8000ed8:	4770      	bx	lr
 8000eda:	0409      	lsls	r1, r1, #16
 8000edc:	e7fb      	b.n	8000ed6 <HAL_GPIO_WritePin+0x2>
	...

08000ee0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000ee0:	b570      	push	{r4, r5, r6, lr}
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000ee2:	4604      	mov	r4, r0
 8000ee4:	b908      	cbnz	r0, 8000eea <HAL_I2C_Init+0xa>
  {
    return HAL_ERROR;
 8000ee6:	2001      	movs	r0, #1
 8000ee8:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000eea:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000eee:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000ef2:	b91b      	cbnz	r3, 8000efc <HAL_I2C_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000ef4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000ef8:	f002 f922 	bl	8003140 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000efc:	2324      	movs	r3, #36	; 0x24
 8000efe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000f02:	6823      	ldr	r3, [r4, #0]
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	f022 0201 	bic.w	r2, r2, #1
 8000f0a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000f12:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000f1a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000f1c:	f000 f964 	bl	80011e8 <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000f20:	6865      	ldr	r5, [r4, #4]
 8000f22:	4b41      	ldr	r3, [pc, #260]	; (8001028 <HAL_I2C_Init+0x148>)
 8000f24:	429d      	cmp	r5, r3
 8000f26:	d84d      	bhi.n	8000fc4 <HAL_I2C_Init+0xe4>
 8000f28:	4b40      	ldr	r3, [pc, #256]	; (800102c <HAL_I2C_Init+0x14c>)
 8000f2a:	4298      	cmp	r0, r3
 8000f2c:	d9db      	bls.n	8000ee6 <HAL_I2C_Init+0x6>
  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000f2e:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8000f30:	493f      	ldr	r1, [pc, #252]	; (8001030 <HAL_I2C_Init+0x150>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000f32:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8000f34:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000f38:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f3c:	430b      	orrs	r3, r1
 8000f3e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000f40:	6a13      	ldr	r3, [r2, #32]
 8000f42:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f46:	3101      	adds	r1, #1
 8000f48:	4319      	orrs	r1, r3
 8000f4a:	6211      	str	r1, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000f4c:	69d1      	ldr	r1, [r2, #28]
 8000f4e:	4b36      	ldr	r3, [pc, #216]	; (8001028 <HAL_I2C_Init+0x148>)
 8000f50:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8000f54:	429d      	cmp	r5, r3
 8000f56:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8000f5a:	f100 30ff 	add.w	r0, r0, #4294967295
 8000f5e:	d848      	bhi.n	8000ff2 <HAL_I2C_Init+0x112>
 8000f60:	006d      	lsls	r5, r5, #1
 8000f62:	fbb0 f0f5 	udiv	r0, r0, r5
 8000f66:	3001      	adds	r0, #1
 8000f68:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8000f6c:	2b04      	cmp	r3, #4
 8000f6e:	bf38      	it	cc
 8000f70:	2304      	movcc	r3, #4
 8000f72:	430b      	orrs	r3, r1
 8000f74:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000f76:	6811      	ldr	r1, [r2, #0]
 8000f78:	6a20      	ldr	r0, [r4, #32]
 8000f7a:	69e3      	ldr	r3, [r4, #28]
 8000f7c:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8000f80:	4303      	orrs	r3, r0
 8000f82:	430b      	orrs	r3, r1
 8000f84:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000f86:	6891      	ldr	r1, [r2, #8]
 8000f88:	68e0      	ldr	r0, [r4, #12]
 8000f8a:	6923      	ldr	r3, [r4, #16]
 8000f8c:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8000f90:	4303      	orrs	r3, r0
 8000f92:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8000f96:	430b      	orrs	r3, r1
 8000f98:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000f9a:	68d1      	ldr	r1, [r2, #12]
 8000f9c:	69a0      	ldr	r0, [r4, #24]
 8000f9e:	6963      	ldr	r3, [r4, #20]
 8000fa0:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8000fa4:	4303      	orrs	r3, r0
 8000fa6:	430b      	orrs	r3, r1
 8000fa8:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000faa:	6813      	ldr	r3, [r2, #0]
 8000fac:	f043 0301 	orr.w	r3, r3, #1
 8000fb0:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000fb2:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8000fb4:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000fb6:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000fb8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000fbc:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000fbe:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e

  return HAL_OK;
 8000fc2:	bd70      	pop	{r4, r5, r6, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000fc4:	4b1b      	ldr	r3, [pc, #108]	; (8001034 <HAL_I2C_Init+0x154>)
 8000fc6:	4298      	cmp	r0, r3
 8000fc8:	d98d      	bls.n	8000ee6 <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000fca:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8000fcc:	4e18      	ldr	r6, [pc, #96]	; (8001030 <HAL_I2C_Init+0x150>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000fce:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8000fd0:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000fd4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000fd8:	4333      	orrs	r3, r6
 8000fda:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000fdc:	6a13      	ldr	r3, [r2, #32]
 8000fde:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000fe2:	4371      	muls	r1, r6
 8000fe4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000fe8:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8000fec:	fbb1 f1f6 	udiv	r1, r1, r6
 8000ff0:	e7a9      	b.n	8000f46 <HAL_I2C_Init+0x66>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000ff2:	68a3      	ldr	r3, [r4, #8]
 8000ff4:	b953      	cbnz	r3, 800100c <HAL_I2C_Init+0x12c>
 8000ff6:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8000ffa:	fbb0 f0f3 	udiv	r0, r0, r3
 8000ffe:	1c43      	adds	r3, r0, #1
 8001000:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001004:	b16b      	cbz	r3, 8001022 <HAL_I2C_Init+0x142>
 8001006:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800100a:	e7b2      	b.n	8000f72 <HAL_I2C_Init+0x92>
 800100c:	2319      	movs	r3, #25
 800100e:	436b      	muls	r3, r5
 8001010:	fbb0 f0f3 	udiv	r0, r0, r3
 8001014:	1c43      	adds	r3, r0, #1
 8001016:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800101a:	b113      	cbz	r3, 8001022 <HAL_I2C_Init+0x142>
 800101c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001020:	e7a7      	b.n	8000f72 <HAL_I2C_Init+0x92>
 8001022:	2301      	movs	r3, #1
 8001024:	e7a5      	b.n	8000f72 <HAL_I2C_Init+0x92>
 8001026:	bf00      	nop
 8001028:	000186a0 	.word	0x000186a0
 800102c:	001e847f 	.word	0x001e847f
 8001030:	000f4240 	.word	0x000f4240
 8001034:	003d08ff 	.word	0x003d08ff

08001038 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001038:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	9301      	str	r3, [sp, #4]
 800103e:	4b18      	ldr	r3, [pc, #96]	; (80010a0 <HAL_PWREx_EnableOverDrive+0x68>)
  __HAL_PWR_OVERDRIVE_ENABLE();

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001040:	4c18      	ldr	r4, [pc, #96]	; (80010a4 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001042:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001044:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001048:	641a      	str	r2, [r3, #64]	; 0x40
 800104a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001050:	9301      	str	r3, [sp, #4]
 8001052:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001054:	4b14      	ldr	r3, [pc, #80]	; (80010a8 <HAL_PWREx_EnableOverDrive+0x70>)
 8001056:	2201      	movs	r2, #1
 8001058:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 800105a:	f7ff fafb 	bl	8000654 <HAL_GetTick>
 800105e:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001060:	6863      	ldr	r3, [r4, #4]
 8001062:	03da      	lsls	r2, r3, #15
 8001064:	d50b      	bpl.n	800107e <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001066:	4b11      	ldr	r3, [pc, #68]	; (80010ac <HAL_PWREx_EnableOverDrive+0x74>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001068:	4c0e      	ldr	r4, [pc, #56]	; (80010a4 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800106a:	2201      	movs	r2, #1
 800106c:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 800106e:	f7ff faf1 	bl	8000654 <HAL_GetTick>
 8001072:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001074:	6863      	ldr	r3, [r4, #4]
 8001076:	039b      	lsls	r3, r3, #14
 8001078:	d50a      	bpl.n	8001090 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 800107a:	2000      	movs	r0, #0
 800107c:	e006      	b.n	800108c <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800107e:	f7ff fae9 	bl	8000654 <HAL_GetTick>
 8001082:	1b40      	subs	r0, r0, r5
 8001084:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001088:	d9ea      	bls.n	8001060 <HAL_PWREx_EnableOverDrive+0x28>
      return HAL_TIMEOUT;
 800108a:	2003      	movs	r0, #3
}
 800108c:	b003      	add	sp, #12
 800108e:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001090:	f7ff fae0 	bl	8000654 <HAL_GetTick>
 8001094:	1b40      	subs	r0, r0, r5
 8001096:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800109a:	d9eb      	bls.n	8001074 <HAL_PWREx_EnableOverDrive+0x3c>
 800109c:	e7f5      	b.n	800108a <HAL_PWREx_EnableOverDrive+0x52>
 800109e:	bf00      	nop
 80010a0:	40023800 	.word	0x40023800
 80010a4:	40007000 	.word	0x40007000
 80010a8:	420e0040 	.word	0x420e0040
 80010ac:	420e0044 	.word	0x420e0044

080010b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010b4:	460d      	mov	r5, r1
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80010b6:	4604      	mov	r4, r0
 80010b8:	b910      	cbnz	r0, 80010c0 <HAL_RCC_ClockConfig+0x10>
  {
    return HAL_ERROR;
 80010ba:	2001      	movs	r0, #1
 80010bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80010c0:	4b44      	ldr	r3, [pc, #272]	; (80011d4 <HAL_RCC_ClockConfig+0x124>)
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	f002 020f 	and.w	r2, r2, #15
 80010c8:	428a      	cmp	r2, r1
 80010ca:	d329      	bcc.n	8001120 <HAL_RCC_ClockConfig+0x70>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010cc:	6821      	ldr	r1, [r4, #0]
 80010ce:	078f      	lsls	r7, r1, #30
 80010d0:	d42e      	bmi.n	8001130 <HAL_RCC_ClockConfig+0x80>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010d2:	07c8      	lsls	r0, r1, #31
 80010d4:	d441      	bmi.n	800115a <HAL_RCC_ClockConfig+0xaa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80010d6:	4b3f      	ldr	r3, [pc, #252]	; (80011d4 <HAL_RCC_ClockConfig+0x124>)
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	f002 020f 	and.w	r2, r2, #15
 80010de:	4295      	cmp	r5, r2
 80010e0:	d367      	bcc.n	80011b2 <HAL_RCC_ClockConfig+0x102>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010e2:	6822      	ldr	r2, [r4, #0]
 80010e4:	0751      	lsls	r1, r2, #29
 80010e6:	d46d      	bmi.n	80011c4 <HAL_RCC_ClockConfig+0x114>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010e8:	0713      	lsls	r3, r2, #28
 80010ea:	d507      	bpl.n	80010fc <HAL_RCC_ClockConfig+0x4c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80010ec:	4a3a      	ldr	r2, [pc, #232]	; (80011d8 <HAL_RCC_ClockConfig+0x128>)
 80010ee:	6921      	ldr	r1, [r4, #16]
 80010f0:	6893      	ldr	r3, [r2, #8]
 80010f2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80010f6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80010fa:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80010fc:	f000 fa9c 	bl	8001638 <HAL_RCC_GetSysClockFreq>
 8001100:	4b35      	ldr	r3, [pc, #212]	; (80011d8 <HAL_RCC_ClockConfig+0x128>)
 8001102:	4a36      	ldr	r2, [pc, #216]	; (80011dc <HAL_RCC_ClockConfig+0x12c>)
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800110a:	5cd3      	ldrb	r3, [r2, r3]
 800110c:	40d8      	lsrs	r0, r3
 800110e:	4b34      	ldr	r3, [pc, #208]	; (80011e0 <HAL_RCC_ClockConfig+0x130>)
 8001110:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001112:	4b34      	ldr	r3, [pc, #208]	; (80011e4 <HAL_RCC_ClockConfig+0x134>)
 8001114:	6818      	ldr	r0, [r3, #0]
 8001116:	f7ff fa53 	bl	80005c0 <HAL_InitTick>

  return HAL_OK;
 800111a:	2000      	movs	r0, #0
 800111c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001120:	b2ca      	uxtb	r2, r1
 8001122:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f003 030f 	and.w	r3, r3, #15
 800112a:	4299      	cmp	r1, r3
 800112c:	d1c5      	bne.n	80010ba <HAL_RCC_ClockConfig+0xa>
 800112e:	e7cd      	b.n	80010cc <HAL_RCC_ClockConfig+0x1c>
 8001130:	4b29      	ldr	r3, [pc, #164]	; (80011d8 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001132:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001136:	bf1e      	ittt	ne
 8001138:	689a      	ldrne	r2, [r3, #8]
 800113a:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 800113e:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001140:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001142:	bf42      	ittt	mi
 8001144:	689a      	ldrmi	r2, [r3, #8]
 8001146:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 800114a:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800114c:	689a      	ldr	r2, [r3, #8]
 800114e:	68a0      	ldr	r0, [r4, #8]
 8001150:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001154:	4302      	orrs	r2, r0
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	e7bb      	b.n	80010d2 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800115a:	6862      	ldr	r2, [r4, #4]
 800115c:	4b1e      	ldr	r3, [pc, #120]	; (80011d8 <HAL_RCC_ClockConfig+0x128>)
 800115e:	2a01      	cmp	r2, #1
 8001160:	d11d      	bne.n	800119e <HAL_RCC_ClockConfig+0xee>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001168:	d0a7      	beq.n	80010ba <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800116a:	4e1b      	ldr	r6, [pc, #108]	; (80011d8 <HAL_RCC_ClockConfig+0x128>)
 800116c:	68b3      	ldr	r3, [r6, #8]
 800116e:	f023 0303 	bic.w	r3, r3, #3
 8001172:	4313      	orrs	r3, r2
 8001174:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001176:	f7ff fa6d 	bl	8000654 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800117a:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800117e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001180:	68b3      	ldr	r3, [r6, #8]
 8001182:	6862      	ldr	r2, [r4, #4]
 8001184:	f003 030c 	and.w	r3, r3, #12
 8001188:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800118c:	d0a3      	beq.n	80010d6 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800118e:	f7ff fa61 	bl	8000654 <HAL_GetTick>
 8001192:	1bc0      	subs	r0, r0, r7
 8001194:	4540      	cmp	r0, r8
 8001196:	d9f3      	bls.n	8001180 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8001198:	2003      	movs	r0, #3
}
 800119a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800119e:	1e91      	subs	r1, r2, #2
 80011a0:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011a2:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011a4:	d802      	bhi.n	80011ac <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011a6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80011aa:	e7dd      	b.n	8001168 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011ac:	f013 0f02 	tst.w	r3, #2
 80011b0:	e7da      	b.n	8001168 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011b2:	b2ea      	uxtb	r2, r5
 80011b4:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f003 030f 	and.w	r3, r3, #15
 80011bc:	429d      	cmp	r5, r3
 80011be:	f47f af7c 	bne.w	80010ba <HAL_RCC_ClockConfig+0xa>
 80011c2:	e78e      	b.n	80010e2 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011c4:	4904      	ldr	r1, [pc, #16]	; (80011d8 <HAL_RCC_ClockConfig+0x128>)
 80011c6:	68e0      	ldr	r0, [r4, #12]
 80011c8:	688b      	ldr	r3, [r1, #8]
 80011ca:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80011ce:	4303      	orrs	r3, r0
 80011d0:	608b      	str	r3, [r1, #8]
 80011d2:	e789      	b.n	80010e8 <HAL_RCC_ClockConfig+0x38>
 80011d4:	40023c00 	.word	0x40023c00
 80011d8:	40023800 	.word	0x40023800
 80011dc:	080042ee 	.word	0x080042ee
 80011e0:	20000008 	.word	0x20000008
 80011e4:	20000004 	.word	0x20000004

080011e8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80011e8:	4b04      	ldr	r3, [pc, #16]	; (80011fc <HAL_RCC_GetPCLK1Freq+0x14>)
 80011ea:	4a05      	ldr	r2, [pc, #20]	; (8001200 <HAL_RCC_GetPCLK1Freq+0x18>)
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80011f2:	5cd3      	ldrb	r3, [r2, r3]
 80011f4:	4a03      	ldr	r2, [pc, #12]	; (8001204 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80011f6:	6810      	ldr	r0, [r2, #0]
}
 80011f8:	40d8      	lsrs	r0, r3
 80011fa:	4770      	bx	lr
 80011fc:	40023800 	.word	0x40023800
 8001200:	080042fe 	.word	0x080042fe
 8001204:	20000008 	.word	0x20000008

08001208 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001208:	4b04      	ldr	r3, [pc, #16]	; (800121c <HAL_RCC_GetPCLK2Freq+0x14>)
 800120a:	4a05      	ldr	r2, [pc, #20]	; (8001220 <HAL_RCC_GetPCLK2Freq+0x18>)
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001212:	5cd3      	ldrb	r3, [r2, r3]
 8001214:	4a03      	ldr	r2, [pc, #12]	; (8001224 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001216:	6810      	ldr	r0, [r2, #0]
}
 8001218:	40d8      	lsrs	r0, r3
 800121a:	4770      	bx	lr
 800121c:	40023800 	.word	0x40023800
 8001220:	080042fe 	.word	0x080042fe
 8001224:	20000008 	.word	0x20000008

08001228 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001228:	6803      	ldr	r3, [r0, #0]
{
 800122a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800122e:	f013 0601 	ands.w	r6, r3, #1
{
 8001232:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001234:	d00b      	beq.n	800124e <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001236:	49aa      	ldr	r1, [pc, #680]	; (80014e0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8001238:	6b86      	ldr	r6, [r0, #56]	; 0x38
 800123a:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 800123e:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8001242:	4332      	orrs	r2, r6
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8001244:	fab6 f686 	clz	r6, r6
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001248:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800124c:	0976      	lsrs	r6, r6, #5
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800124e:	079d      	lsls	r5, r3, #30
 8001250:	d50b      	bpl.n	800126a <HAL_RCCEx_PeriphCLKConfig+0x42>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8001252:	48a3      	ldr	r0, [pc, #652]	; (80014e0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8001254:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001256:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 800125a:	f022 52c0 	bic.w	r2, r2, #402653184	; 0x18000000
 800125e:	430a      	orrs	r2, r1
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
    {
      plli2sused = 1U;
 8001260:	2900      	cmp	r1, #0
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8001262:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
      plli2sused = 1U;
 8001266:	bf08      	it	eq
 8001268:	2601      	moveq	r6, #1
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800126a:	f013 0504 	ands.w	r5, r3, #4
 800126e:	d012      	beq.n	8001296 <HAL_RCCEx_PeriphCLKConfig+0x6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001270:	499b      	ldr	r1, [pc, #620]	; (80014e0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8001272:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8001274:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001278:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800127c:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001280:	ea42 0205 	orr.w	r2, r2, r5
    {
      plli2sused = 1U;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001284:	bf18      	it	ne
 8001286:	fab5 f585 	clzne	r5, r5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800128a:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800128e:	bf12      	itee	ne
 8001290:	096d      	lsrne	r5, r5, #5
  uint32_t pllsaiused = 0U;
 8001292:	2500      	moveq	r5, #0
      plli2sused = 1U;
 8001294:	2601      	moveq	r6, #1
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001296:	0718      	lsls	r0, r3, #28
 8001298:	d50f      	bpl.n	80012ba <HAL_RCCEx_PeriphCLKConfig+0x92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800129a:	4891      	ldr	r0, [pc, #580]	; (80014e0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800129c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800129e:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 80012a2:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80012a6:	430a      	orrs	r2, r1

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80012a8:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80012ac:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80012b0:	f000 8109 	beq.w	80014c6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
      plli2sused = 1U;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1U;
 80012b4:	2900      	cmp	r1, #0
 80012b6:	bf08      	it	eq
 80012b8:	2501      	moveq	r5, #1
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80012ba:	0699      	lsls	r1, r3, #26
 80012bc:	d533      	bpl.n	8001326 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	9301      	str	r3, [sp, #4]
 80012c2:	4b87      	ldr	r3, [pc, #540]	; (80014e0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80012c4:	4f87      	ldr	r7, [pc, #540]	; (80014e4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80012c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012c8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80012cc:	641a      	str	r2, [r3, #64]	; 0x40
 80012ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d4:	9301      	str	r3, [sp, #4]
 80012d6:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012de:	603b      	str	r3, [r7, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80012e0:	f7ff f9b8 	bl	8000654 <HAL_GetTick>
 80012e4:	4680      	mov	r8, r0

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	05da      	lsls	r2, r3, #23
 80012ea:	f140 80ee 	bpl.w	80014ca <HAL_RCCEx_PeriphCLKConfig+0x2a2>
      {
        return HAL_TIMEOUT;
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80012ee:	4f7c      	ldr	r7, [pc, #496]	; (80014e0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80012f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80012f2:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80012f6:	f040 80fb 	bne.w	80014f0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80012fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80012fc:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8001300:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8001304:	4a76      	ldr	r2, [pc, #472]	; (80014e0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8001306:	f040 8116 	bne.w	8001536 <HAL_RCCEx_PeriphCLKConfig+0x30e>
 800130a:	6891      	ldr	r1, [r2, #8]
 800130c:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8001310:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001314:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8001318:	4301      	orrs	r1, r0
 800131a:	6091      	str	r1, [r2, #8]
 800131c:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800131e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001322:	430b      	orrs	r3, r1
 8001324:	6713      	str	r3, [r2, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001326:	6823      	ldr	r3, [r4, #0]
 8001328:	06d9      	lsls	r1, r3, #27
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800132a:	bf42      	ittt	mi
 800132c:	4b6e      	ldrmi	r3, [pc, #440]	; (80014e8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800132e:	f894 2058 	ldrbmi.w	r2, [r4, #88]	; 0x58
 8001332:	601a      	strmi	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8001334:	6823      	ldr	r3, [r4, #0]
 8001336:	061a      	lsls	r2, r3, #24
 8001338:	d508      	bpl.n	800134c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800133a:	4969      	ldr	r1, [pc, #420]	; (80014e0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800133c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800133e:	f8d1 2094 	ldr.w	r2, [r1, #148]	; 0x94
 8001342:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8001346:	4302      	orrs	r2, r0
 8001348:	f8c1 2094 	str.w	r2, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800134c:	065f      	lsls	r7, r3, #25
 800134e:	d508      	bpl.n	8001362 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001350:	4963      	ldr	r1, [pc, #396]	; (80014e0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8001352:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8001354:	f8d1 2094 	ldr.w	r2, [r1, #148]	; 0x94
 8001358:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800135c:	4302      	orrs	r2, r0
 800135e:	f8c1 2094 	str.w	r2, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001362:	05d8      	lsls	r0, r3, #23
 8001364:	d50c      	bpl.n	8001380 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001366:	485e      	ldr	r0, [pc, #376]	; (80014e0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8001368:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800136a:	f8d0 2094 	ldr.w	r2, [r0, #148]	; 0x94
 800136e:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
 8001372:	430a      	orrs	r2, r1

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
    {
      pllsaiused = 1U;
 8001374:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001378:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
      pllsaiused = 1U;
 800137c:	bf08      	it	eq
 800137e:	2501      	moveq	r5, #1
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8001380:	0599      	lsls	r1, r3, #22
 8001382:	d508      	bpl.n	8001396 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8001384:	4956      	ldr	r1, [pc, #344]	; (80014e0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8001386:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8001388:	f8d1 2094 	ldr.w	r2, [r1, #148]	; 0x94
 800138c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001390:	4302      	orrs	r2, r0
 8001392:	f8c1 2094 	str.w	r2, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001396:	055a      	lsls	r2, r3, #21
 8001398:	f100 80d1 	bmi.w	800153e <HAL_RCCEx_PeriphCLKConfig+0x316>
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800139c:	2e01      	cmp	r6, #1
 800139e:	f040 80dc 	bne.w	800155a <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80013a2:	4e52      	ldr	r6, [pc, #328]	; (80014ec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
    /* Get tick */
    tickstart = HAL_GetTick();
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80013a4:	4f4e      	ldr	r7, [pc, #312]	; (80014e0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
    __HAL_RCC_PLLI2S_DISABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80013aa:	f7ff f953 	bl	8000654 <HAL_GetTick>
 80013ae:	4680      	mov	r8, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	011b      	lsls	r3, r3, #4
 80013b4:	f100 8125 	bmi.w	8001602 <HAL_RCCEx_PeriphCLKConfig+0x3da>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80013b8:	6822      	ldr	r2, [r4, #0]
 80013ba:	07d0      	lsls	r0, r2, #31
 80013bc:	d501      	bpl.n	80013c2 <HAL_RCCEx_PeriphCLKConfig+0x19a>
 80013be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80013c0:	b11b      	cbz	r3, 80013ca <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 80013c2:	0791      	lsls	r1, r2, #30
 80013c4:	d515      	bpl.n	80013f2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80013c6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80013c8:	b99b      	cbnz	r3, 80013f2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80013ca:	4945      	ldr	r1, [pc, #276]	; (80014e0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80013cc:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80013d0:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80013d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013d8:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 80013dc:	4303      	orrs	r3, r0
 80013de:	6860      	ldr	r0, [r4, #4]
 80013e0:	4303      	orrs	r3, r0
 80013e2:	68a0      	ldr	r0, [r4, #8]
 80013e4:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80013e8:	6960      	ldr	r0, [r4, #20]
 80013ea:	ea43 7300 	orr.w	r3, r3, r0, lsl #28
 80013ee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80013f2:	0753      	lsls	r3, r2, #29
 80013f4:	d503      	bpl.n	80013fe <HAL_RCCEx_PeriphCLKConfig+0x1d6>
 80013f6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80013f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80013fc:	d005      	beq.n	800140a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80013fe:	0717      	lsls	r7, r2, #28
 8001400:	d520      	bpl.n	8001444 <HAL_RCCEx_PeriphCLKConfig+0x21c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001402:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001404:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001408:	d11c      	bne.n	8001444 <HAL_RCCEx_PeriphCLKConfig+0x21c>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800140a:	4935      	ldr	r1, [pc, #212]	; (80014e0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800140c:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001410:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8001414:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001418:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800141c:	4303      	orrs	r3, r0
 800141e:	6860      	ldr	r0, [r4, #4]
 8001420:	4303      	orrs	r3, r0
 8001422:	68a0      	ldr	r0, [r4, #8]
 8001424:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001428:	6920      	ldr	r0, [r4, #16]
 800142a:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800142e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001432:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 8001436:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001438:	f020 001f 	bic.w	r0, r0, #31
 800143c:	3b01      	subs	r3, #1
 800143e:	4303      	orrs	r3, r0
 8001440:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8001444:	0550      	lsls	r0, r2, #21
 8001446:	d51b      	bpl.n	8001480 <HAL_RCCEx_PeriphCLKConfig+0x258>
 8001448:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800144a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800144e:	d117      	bne.n	8001480 <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001450:	4823      	ldr	r0, [pc, #140]	; (80014e0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8001452:	6867      	ldr	r7, [r4, #4]
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001454:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001458:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800145c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8001460:	433b      	orrs	r3, r7
 8001462:	68a7      	ldr	r7, [r4, #8]
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001464:	f3c1 4101 	ubfx	r1, r1, #16, #2
 8001468:	3101      	adds	r1, #1
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800146a:	ea43 1387 	orr.w	r3, r3, r7, lsl #6
 800146e:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 8001472:	68e1      	ldr	r1, [r4, #12]
 8001474:	0849      	lsrs	r1, r1, #1
 8001476:	3901      	subs	r1, #1
 8001478:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800147c:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001480:	0511      	lsls	r1, r2, #20
 8001482:	d511      	bpl.n	80014a8 <HAL_RCCEx_PeriphCLKConfig+0x280>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001484:	6923      	ldr	r3, [r4, #16]
 8001486:	68a2      	ldr	r2, [r4, #8]
 8001488:	061b      	lsls	r3, r3, #24
 800148a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800148e:	6862      	ldr	r2, [r4, #4]
 8001490:	4313      	orrs	r3, r2
 8001492:	6962      	ldr	r2, [r4, #20]
 8001494:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001498:	68e2      	ldr	r2, [r4, #12]
 800149a:	0852      	lsrs	r2, r2, #1
 800149c:	3a01      	subs	r2, #1
 800149e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80014a2:	4a0f      	ldr	r2, [pc, #60]	; (80014e0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80014a4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80014a8:	2301      	movs	r3, #1
 80014aa:	6033      	str	r3, [r6, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80014ac:	f7ff f8d2 	bl	8000654 <HAL_GetTick>
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80014b0:	4e0b      	ldr	r6, [pc, #44]	; (80014e0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
    tickstart = HAL_GetTick();
 80014b2:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80014b4:	6833      	ldr	r3, [r6, #0]
 80014b6:	011a      	lsls	r2, r3, #4
 80014b8:	d453      	bmi.n	8001562 <HAL_RCCEx_PeriphCLKConfig+0x33a>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80014ba:	f7ff f8cb 	bl	8000654 <HAL_GetTick>
 80014be:	1bc0      	subs	r0, r0, r7
 80014c0:	2802      	cmp	r0, #2
 80014c2:	d9f7      	bls.n	80014b4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 80014c4:	e008      	b.n	80014d8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
      plli2sused = 1U;
 80014c6:	2601      	movs	r6, #1
 80014c8:	e6f7      	b.n	80012ba <HAL_RCCEx_PeriphCLKConfig+0x92>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80014ca:	f7ff f8c3 	bl	8000654 <HAL_GetTick>
 80014ce:	eba0 0008 	sub.w	r0, r0, r8
 80014d2:	2802      	cmp	r0, #2
 80014d4:	f67f af07 	bls.w	80012e6 <HAL_RCCEx_PeriphCLKConfig+0xbe>
        return HAL_TIMEOUT;
 80014d8:	2003      	movs	r0, #3
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
}
 80014da:	b003      	add	sp, #12
 80014dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80014e0:	40023800 	.word	0x40023800
 80014e4:	40007000 	.word	0x40007000
 80014e8:	424711e0 	.word	0x424711e0
 80014ec:	42470068 	.word	0x42470068
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80014f0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80014f2:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80014f6:	4293      	cmp	r3, r2
 80014f8:	f43f aeff 	beq.w	80012fa <HAL_RCCEx_PeriphCLKConfig+0xd2>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80014fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 80014fe:	4a4b      	ldr	r2, [pc, #300]	; (800162c <HAL_RCCEx_PeriphCLKConfig+0x404>)
 8001500:	2101      	movs	r1, #1
 8001502:	6011      	str	r1, [r2, #0]
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001504:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001508:	2100      	movs	r1, #0
 800150a:	6011      	str	r1, [r2, #0]
      RCC->BDCR = tmpreg1;
 800150c:	673b      	str	r3, [r7, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800150e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001510:	07db      	lsls	r3, r3, #31
 8001512:	f57f aef2 	bpl.w	80012fa <HAL_RCCEx_PeriphCLKConfig+0xd2>
        tickstart = HAL_GetTick();
 8001516:	f7ff f89d 	bl	8000654 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800151a:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800151e:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001520:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001522:	0798      	lsls	r0, r3, #30
 8001524:	f53f aee9 	bmi.w	80012fa <HAL_RCCEx_PeriphCLKConfig+0xd2>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001528:	f7ff f894 	bl	8000654 <HAL_GetTick>
 800152c:	eba0 0008 	sub.w	r0, r0, r8
 8001530:	4548      	cmp	r0, r9
 8001532:	d9f5      	bls.n	8001520 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 8001534:	e7d0      	b.n	80014d8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001536:	6891      	ldr	r1, [r2, #8]
 8001538:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 800153c:	e6ed      	b.n	800131a <HAL_RCCEx_PeriphCLKConfig+0xf2>
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800153e:	483c      	ldr	r0, [pc, #240]	; (8001630 <HAL_RCCEx_PeriphCLKConfig+0x408>)
 8001540:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8001542:	f8d0 2094 	ldr.w	r2, [r0, #148]	; 0x94
 8001546:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800154a:	430a      	orrs	r2, r1
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 800154c:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8001550:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8001554:	f47f af22 	bne.w	800139c <HAL_RCCEx_PeriphCLKConfig+0x174>
 8001558:	e723      	b.n	80013a2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800155a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800155e:	f43f af20 	beq.w	80013a2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  if(pllsaiused == 1U)
 8001562:	2d01      	cmp	r5, #1
 8001564:	d14b      	bne.n	80015fe <HAL_RCCEx_PeriphCLKConfig+0x3d6>
    __HAL_RCC_PLLSAI_DISABLE();
 8001566:	4d33      	ldr	r5, [pc, #204]	; (8001634 <HAL_RCCEx_PeriphCLKConfig+0x40c>)
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001568:	4e31      	ldr	r6, [pc, #196]	; (8001630 <HAL_RCCEx_PeriphCLKConfig+0x408>)
    __HAL_RCC_PLLSAI_DISABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 800156e:	f7ff f871 	bl	8000654 <HAL_GetTick>
 8001572:	4607      	mov	r7, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001574:	6833      	ldr	r3, [r6, #0]
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	d44b      	bmi.n	8001612 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800157a:	6821      	ldr	r1, [r4, #0]
 800157c:	074e      	lsls	r6, r1, #29
 800157e:	d501      	bpl.n	8001584 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8001580:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001582:	b11b      	cbz	r3, 800158c <HAL_RCCEx_PeriphCLKConfig+0x364>
 8001584:	0708      	lsls	r0, r1, #28
 8001586:	d51a      	bpl.n	80015be <HAL_RCCEx_PeriphCLKConfig+0x396>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001588:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800158a:	b9c3      	cbnz	r3, 80015be <HAL_RCCEx_PeriphCLKConfig+0x396>
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800158c:	4a28      	ldr	r2, [pc, #160]	; (8001630 <HAL_RCCEx_PeriphCLKConfig+0x408>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 800158e:	69a0      	ldr	r0, [r4, #24]
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8001590:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8001594:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001598:	4303      	orrs	r3, r0
 800159a:	69e0      	ldr	r0, [r4, #28]
 800159c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80015a0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80015a2:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80015a6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80015aa:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80015ae:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80015b0:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80015b4:	3801      	subs	r0, #1
 80015b6:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80015ba:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80015be:	05ca      	lsls	r2, r1, #23
 80015c0:	d514      	bpl.n	80015ec <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 80015c2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80015c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80015c8:	d110      	bne.n	80015ec <HAL_RCCEx_PeriphCLKConfig+0x3c4>
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80015ca:	4919      	ldr	r1, [pc, #100]	; (8001630 <HAL_RCCEx_PeriphCLKConfig+0x408>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80015cc:	69a2      	ldr	r2, [r4, #24]
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80015ce:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80015d2:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80015d6:	4313      	orrs	r3, r2
 80015d8:	69e2      	ldr	r2, [r4, #28]
 80015da:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80015de:	6a22      	ldr	r2, [r4, #32]
 80015e0:	0852      	lsrs	r2, r2, #1
 80015e2:	3a01      	subs	r2, #1
 80015e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80015e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    __HAL_RCC_PLLSAI_ENABLE();
 80015ec:	2301      	movs	r3, #1
 80015ee:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80015f0:	f7ff f830 	bl	8000654 <HAL_GetTick>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80015f4:	4c0e      	ldr	r4, [pc, #56]	; (8001630 <HAL_RCCEx_PeriphCLKConfig+0x408>)
    tickstart = HAL_GetTick();
 80015f6:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80015f8:	6823      	ldr	r3, [r4, #0]
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	d50f      	bpl.n	800161e <HAL_RCCEx_PeriphCLKConfig+0x3f6>
  return HAL_OK;
 80015fe:	2000      	movs	r0, #0
 8001600:	e76b      	b.n	80014da <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001602:	f7ff f827 	bl	8000654 <HAL_GetTick>
 8001606:	eba0 0008 	sub.w	r0, r0, r8
 800160a:	2802      	cmp	r0, #2
 800160c:	f67f aed0 	bls.w	80013b0 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8001610:	e762      	b.n	80014d8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001612:	f7ff f81f 	bl	8000654 <HAL_GetTick>
 8001616:	1bc0      	subs	r0, r0, r7
 8001618:	2802      	cmp	r0, #2
 800161a:	d9ab      	bls.n	8001574 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800161c:	e75c      	b.n	80014d8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800161e:	f7ff f819 	bl	8000654 <HAL_GetTick>
 8001622:	1b40      	subs	r0, r0, r5
 8001624:	2802      	cmp	r0, #2
 8001626:	d9e7      	bls.n	80015f8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8001628:	e756      	b.n	80014d8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800162a:	bf00      	nop
 800162c:	42470e40 	.word	0x42470e40
 8001630:	40023800 	.word	0x40023800
 8001634:	42470070 	.word	0x42470070

08001638 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001638:	4920      	ldr	r1, [pc, #128]	; (80016bc <HAL_RCC_GetSysClockFreq+0x84>)
{
 800163a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800163c:	688b      	ldr	r3, [r1, #8]
 800163e:	f003 030c 	and.w	r3, r3, #12
 8001642:	2b08      	cmp	r3, #8
 8001644:	d007      	beq.n	8001656 <HAL_RCC_GetSysClockFreq+0x1e>
 8001646:	2b0c      	cmp	r3, #12
 8001648:	d020      	beq.n	800168c <HAL_RCC_GetSysClockFreq+0x54>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800164a:	4a1d      	ldr	r2, [pc, #116]	; (80016c0 <HAL_RCC_GetSysClockFreq+0x88>)
 800164c:	481d      	ldr	r0, [pc, #116]	; (80016c4 <HAL_RCC_GetSysClockFreq+0x8c>)
 800164e:	2b04      	cmp	r3, #4
 8001650:	bf18      	it	ne
 8001652:	4610      	movne	r0, r2
 8001654:	bd08      	pop	{r3, pc}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001656:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001658:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800165a:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800165c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001660:	bf14      	ite	ne
 8001662:	4818      	ldrne	r0, [pc, #96]	; (80016c4 <HAL_RCC_GetSysClockFreq+0x8c>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001664:	4816      	ldreq	r0, [pc, #88]	; (80016c0 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001666:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800166a:	bf18      	it	ne
 800166c:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800166e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001672:	fba1 0100 	umull	r0, r1, r1, r0
 8001676:	f7fe fe1b 	bl	80002b0 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800167a:	4b10      	ldr	r3, [pc, #64]	; (80016bc <HAL_RCC_GetSysClockFreq+0x84>)
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001682:	3301      	adds	r3, #1
 8001684:	005b      	lsls	r3, r3, #1
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);

      sysclockfreq = pllvco/pllr;
 8001686:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800168a:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800168c:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800168e:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001690:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001692:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001696:	bf14      	ite	ne
 8001698:	480a      	ldrne	r0, [pc, #40]	; (80016c4 <HAL_RCC_GetSysClockFreq+0x8c>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800169a:	4809      	ldreq	r0, [pc, #36]	; (80016c0 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800169c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80016a0:	bf18      	it	ne
 80016a2:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016a4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016a8:	fba1 0100 	umull	r0, r1, r1, r0
 80016ac:	f7fe fe00 	bl	80002b0 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80016b0:	4b02      	ldr	r3, [pc, #8]	; (80016bc <HAL_RCC_GetSysClockFreq+0x84>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f3c3 7302 	ubfx	r3, r3, #28, #3
 80016b8:	e7e5      	b.n	8001686 <HAL_RCC_GetSysClockFreq+0x4e>
 80016ba:	bf00      	nop
 80016bc:	40023800 	.word	0x40023800
 80016c0:	00f42400 	.word	0x00f42400
 80016c4:	017d7840 	.word	0x017d7840

080016c8 <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016c8:	6803      	ldr	r3, [r0, #0]
{
 80016ca:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016ce:	07df      	lsls	r7, r3, #31
{
 80016d0:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016d2:	d410      	bmi.n	80016f6 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016d4:	6823      	ldr	r3, [r4, #0]
 80016d6:	079e      	lsls	r6, r3, #30
 80016d8:	d467      	bmi.n	80017aa <HAL_RCC_OscConfig+0xe2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016da:	6823      	ldr	r3, [r4, #0]
 80016dc:	071a      	lsls	r2, r3, #28
 80016de:	f100 80b2 	bmi.w	8001846 <HAL_RCC_OscConfig+0x17e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016e2:	6823      	ldr	r3, [r4, #0]
 80016e4:	075b      	lsls	r3, r3, #29
 80016e6:	f100 80d0 	bmi.w	800188a <HAL_RCC_OscConfig+0x1c2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016ea:	69a2      	ldr	r2, [r4, #24]
 80016ec:	2a00      	cmp	r2, #0
 80016ee:	f040 8139 	bne.w	8001964 <HAL_RCC_OscConfig+0x29c>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 80016f2:	2000      	movs	r0, #0
 80016f4:	e01e      	b.n	8001734 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80016f6:	4b97      	ldr	r3, [pc, #604]	; (8001954 <HAL_RCC_OscConfig+0x28c>)
 80016f8:	689a      	ldr	r2, [r3, #8]
 80016fa:	f002 020c 	and.w	r2, r2, #12
 80016fe:	2a04      	cmp	r2, #4
 8001700:	d010      	beq.n	8001724 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001702:	689a      	ldr	r2, [r3, #8]
 8001704:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001708:	2a08      	cmp	r2, #8
 800170a:	d102      	bne.n	8001712 <HAL_RCC_OscConfig+0x4a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	025d      	lsls	r5, r3, #9
 8001710:	d408      	bmi.n	8001724 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001712:	4b90      	ldr	r3, [pc, #576]	; (8001954 <HAL_RCC_OscConfig+0x28c>)
 8001714:	689a      	ldr	r2, [r3, #8]
 8001716:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800171a:	2a0c      	cmp	r2, #12
 800171c:	d10d      	bne.n	800173a <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800171e:	685a      	ldr	r2, [r3, #4]
 8001720:	0250      	lsls	r0, r2, #9
 8001722:	d50a      	bpl.n	800173a <HAL_RCC_OscConfig+0x72>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001724:	4b8b      	ldr	r3, [pc, #556]	; (8001954 <HAL_RCC_OscConfig+0x28c>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	0399      	lsls	r1, r3, #14
 800172a:	d5d3      	bpl.n	80016d4 <HAL_RCC_OscConfig+0xc>
 800172c:	6863      	ldr	r3, [r4, #4]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d1d0      	bne.n	80016d4 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8001732:	2001      	movs	r0, #1
}
 8001734:	b002      	add	sp, #8
 8001736:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800173a:	6862      	ldr	r2, [r4, #4]
 800173c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8001740:	d111      	bne.n	8001766 <HAL_RCC_OscConfig+0x9e>
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001748:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800174a:	f7fe ff83 	bl	8000654 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800174e:	4d81      	ldr	r5, [pc, #516]	; (8001954 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8001750:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001752:	682b      	ldr	r3, [r5, #0]
 8001754:	039a      	lsls	r2, r3, #14
 8001756:	d4bd      	bmi.n	80016d4 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001758:	f7fe ff7c 	bl	8000654 <HAL_GetTick>
 800175c:	1b80      	subs	r0, r0, r6
 800175e:	2864      	cmp	r0, #100	; 0x64
 8001760:	d9f7      	bls.n	8001752 <HAL_RCC_OscConfig+0x8a>
            return HAL_TIMEOUT;
 8001762:	2003      	movs	r0, #3
 8001764:	e7e6      	b.n	8001734 <HAL_RCC_OscConfig+0x6c>
 8001766:	4d7b      	ldr	r5, [pc, #492]	; (8001954 <HAL_RCC_OscConfig+0x28c>)
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001768:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 800176c:	682b      	ldr	r3, [r5, #0]
 800176e:	d107      	bne.n	8001780 <HAL_RCC_OscConfig+0xb8>
 8001770:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001774:	602b      	str	r3, [r5, #0]
 8001776:	682b      	ldr	r3, [r5, #0]
 8001778:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800177c:	602b      	str	r3, [r5, #0]
 800177e:	e7e4      	b.n	800174a <HAL_RCC_OscConfig+0x82>
 8001780:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001784:	602b      	str	r3, [r5, #0]
 8001786:	682b      	ldr	r3, [r5, #0]
 8001788:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800178c:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800178e:	2a00      	cmp	r2, #0
 8001790:	d1db      	bne.n	800174a <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8001792:	f7fe ff5f 	bl	8000654 <HAL_GetTick>
 8001796:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001798:	682b      	ldr	r3, [r5, #0]
 800179a:	039b      	lsls	r3, r3, #14
 800179c:	d59a      	bpl.n	80016d4 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800179e:	f7fe ff59 	bl	8000654 <HAL_GetTick>
 80017a2:	1b80      	subs	r0, r0, r6
 80017a4:	2864      	cmp	r0, #100	; 0x64
 80017a6:	d9f7      	bls.n	8001798 <HAL_RCC_OscConfig+0xd0>
 80017a8:	e7db      	b.n	8001762 <HAL_RCC_OscConfig+0x9a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80017aa:	4b6a      	ldr	r3, [pc, #424]	; (8001954 <HAL_RCC_OscConfig+0x28c>)
 80017ac:	689a      	ldr	r2, [r3, #8]
 80017ae:	f012 0f0c 	tst.w	r2, #12
 80017b2:	d010      	beq.n	80017d6 <HAL_RCC_OscConfig+0x10e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80017b4:	689a      	ldr	r2, [r3, #8]
 80017b6:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80017ba:	2a08      	cmp	r2, #8
 80017bc:	d102      	bne.n	80017c4 <HAL_RCC_OscConfig+0xfc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	025f      	lsls	r7, r3, #9
 80017c2:	d508      	bpl.n	80017d6 <HAL_RCC_OscConfig+0x10e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017c4:	4a63      	ldr	r2, [pc, #396]	; (8001954 <HAL_RCC_OscConfig+0x28c>)
 80017c6:	6893      	ldr	r3, [r2, #8]
 80017c8:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80017cc:	2b0c      	cmp	r3, #12
 80017ce:	d111      	bne.n	80017f4 <HAL_RCC_OscConfig+0x12c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017d0:	6853      	ldr	r3, [r2, #4]
 80017d2:	025e      	lsls	r6, r3, #9
 80017d4:	d40e      	bmi.n	80017f4 <HAL_RCC_OscConfig+0x12c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017d6:	4b5f      	ldr	r3, [pc, #380]	; (8001954 <HAL_RCC_OscConfig+0x28c>)
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	0795      	lsls	r5, r2, #30
 80017dc:	d502      	bpl.n	80017e4 <HAL_RCC_OscConfig+0x11c>
 80017de:	68e2      	ldr	r2, [r4, #12]
 80017e0:	2a01      	cmp	r2, #1
 80017e2:	d1a6      	bne.n	8001732 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	6921      	ldr	r1, [r4, #16]
 80017e8:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80017ec:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80017f0:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017f2:	e772      	b.n	80016da <HAL_RCC_OscConfig+0x12>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80017f4:	68e2      	ldr	r2, [r4, #12]
 80017f6:	4b58      	ldr	r3, [pc, #352]	; (8001958 <HAL_RCC_OscConfig+0x290>)
 80017f8:	b1b2      	cbz	r2, 8001828 <HAL_RCC_OscConfig+0x160>
        __HAL_RCC_HSI_ENABLE();
 80017fa:	2201      	movs	r2, #1
 80017fc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80017fe:	f7fe ff29 	bl	8000654 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001802:	4d54      	ldr	r5, [pc, #336]	; (8001954 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8001804:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001806:	682b      	ldr	r3, [r5, #0]
 8001808:	0798      	lsls	r0, r3, #30
 800180a:	d507      	bpl.n	800181c <HAL_RCC_OscConfig+0x154>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800180c:	682b      	ldr	r3, [r5, #0]
 800180e:	6922      	ldr	r2, [r4, #16]
 8001810:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001814:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001818:	602b      	str	r3, [r5, #0]
 800181a:	e75e      	b.n	80016da <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800181c:	f7fe ff1a 	bl	8000654 <HAL_GetTick>
 8001820:	1b80      	subs	r0, r0, r6
 8001822:	2802      	cmp	r0, #2
 8001824:	d9ef      	bls.n	8001806 <HAL_RCC_OscConfig+0x13e>
 8001826:	e79c      	b.n	8001762 <HAL_RCC_OscConfig+0x9a>
        __HAL_RCC_HSI_DISABLE();
 8001828:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800182a:	f7fe ff13 	bl	8000654 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800182e:	4d49      	ldr	r5, [pc, #292]	; (8001954 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8001830:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001832:	682b      	ldr	r3, [r5, #0]
 8001834:	0799      	lsls	r1, r3, #30
 8001836:	f57f af50 	bpl.w	80016da <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800183a:	f7fe ff0b 	bl	8000654 <HAL_GetTick>
 800183e:	1b80      	subs	r0, r0, r6
 8001840:	2802      	cmp	r0, #2
 8001842:	d9f6      	bls.n	8001832 <HAL_RCC_OscConfig+0x16a>
 8001844:	e78d      	b.n	8001762 <HAL_RCC_OscConfig+0x9a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001846:	6962      	ldr	r2, [r4, #20]
 8001848:	4b44      	ldr	r3, [pc, #272]	; (800195c <HAL_RCC_OscConfig+0x294>)
 800184a:	b17a      	cbz	r2, 800186c <HAL_RCC_OscConfig+0x1a4>
      __HAL_RCC_LSI_ENABLE();
 800184c:	2201      	movs	r2, #1
 800184e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001850:	f7fe ff00 	bl	8000654 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001854:	4d3f      	ldr	r5, [pc, #252]	; (8001954 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8001856:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001858:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800185a:	079f      	lsls	r7, r3, #30
 800185c:	f53f af41 	bmi.w	80016e2 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001860:	f7fe fef8 	bl	8000654 <HAL_GetTick>
 8001864:	1b80      	subs	r0, r0, r6
 8001866:	2802      	cmp	r0, #2
 8001868:	d9f6      	bls.n	8001858 <HAL_RCC_OscConfig+0x190>
 800186a:	e77a      	b.n	8001762 <HAL_RCC_OscConfig+0x9a>
      __HAL_RCC_LSI_DISABLE();
 800186c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800186e:	f7fe fef1 	bl	8000654 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001872:	4d38      	ldr	r5, [pc, #224]	; (8001954 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8001874:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001876:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001878:	0798      	lsls	r0, r3, #30
 800187a:	f57f af32 	bpl.w	80016e2 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800187e:	f7fe fee9 	bl	8000654 <HAL_GetTick>
 8001882:	1b80      	subs	r0, r0, r6
 8001884:	2802      	cmp	r0, #2
 8001886:	d9f6      	bls.n	8001876 <HAL_RCC_OscConfig+0x1ae>
 8001888:	e76b      	b.n	8001762 <HAL_RCC_OscConfig+0x9a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800188a:	4b32      	ldr	r3, [pc, #200]	; (8001954 <HAL_RCC_OscConfig+0x28c>)
 800188c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800188e:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8001892:	d128      	bne.n	80018e6 <HAL_RCC_OscConfig+0x21e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001894:	9201      	str	r2, [sp, #4]
 8001896:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001898:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800189c:	641a      	str	r2, [r3, #64]	; 0x40
 800189e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018a4:	9301      	str	r3, [sp, #4]
 80018a6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80018a8:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018aa:	4d2d      	ldr	r5, [pc, #180]	; (8001960 <HAL_RCC_OscConfig+0x298>)
 80018ac:	682b      	ldr	r3, [r5, #0]
 80018ae:	05d9      	lsls	r1, r3, #23
 80018b0:	d51b      	bpl.n	80018ea <HAL_RCC_OscConfig+0x222>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018b2:	68a3      	ldr	r3, [r4, #8]
 80018b4:	4d27      	ldr	r5, [pc, #156]	; (8001954 <HAL_RCC_OscConfig+0x28c>)
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d127      	bne.n	800190a <HAL_RCC_OscConfig+0x242>
 80018ba:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80018bc:	f043 0301 	orr.w	r3, r3, #1
 80018c0:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80018c2:	f7fe fec7 	bl	8000654 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018c6:	4d23      	ldr	r5, [pc, #140]	; (8001954 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 80018c8:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018ca:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018ce:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80018d0:	079b      	lsls	r3, r3, #30
 80018d2:	d539      	bpl.n	8001948 <HAL_RCC_OscConfig+0x280>
    if(pwrclkchanged == SET)
 80018d4:	2e00      	cmp	r6, #0
 80018d6:	f43f af08 	beq.w	80016ea <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 80018da:	4a1e      	ldr	r2, [pc, #120]	; (8001954 <HAL_RCC_OscConfig+0x28c>)
 80018dc:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80018de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018e2:	6413      	str	r3, [r2, #64]	; 0x40
 80018e4:	e701      	b.n	80016ea <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 80018e6:	2600      	movs	r6, #0
 80018e8:	e7df      	b.n	80018aa <HAL_RCC_OscConfig+0x1e2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018ea:	682b      	ldr	r3, [r5, #0]
 80018ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018f0:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80018f2:	f7fe feaf 	bl	8000654 <HAL_GetTick>
 80018f6:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018f8:	682b      	ldr	r3, [r5, #0]
 80018fa:	05da      	lsls	r2, r3, #23
 80018fc:	d4d9      	bmi.n	80018b2 <HAL_RCC_OscConfig+0x1ea>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018fe:	f7fe fea9 	bl	8000654 <HAL_GetTick>
 8001902:	1bc0      	subs	r0, r0, r7
 8001904:	2802      	cmp	r0, #2
 8001906:	d9f7      	bls.n	80018f8 <HAL_RCC_OscConfig+0x230>
 8001908:	e72b      	b.n	8001762 <HAL_RCC_OscConfig+0x9a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800190a:	2b05      	cmp	r3, #5
 800190c:	d104      	bne.n	8001918 <HAL_RCC_OscConfig+0x250>
 800190e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001910:	f043 0304 	orr.w	r3, r3, #4
 8001914:	672b      	str	r3, [r5, #112]	; 0x70
 8001916:	e7d0      	b.n	80018ba <HAL_RCC_OscConfig+0x1f2>
 8001918:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800191a:	f022 0201 	bic.w	r2, r2, #1
 800191e:	672a      	str	r2, [r5, #112]	; 0x70
 8001920:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001922:	f022 0204 	bic.w	r2, r2, #4
 8001926:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001928:	2b00      	cmp	r3, #0
 800192a:	d1ca      	bne.n	80018c2 <HAL_RCC_OscConfig+0x1fa>
      tickstart = HAL_GetTick();
 800192c:	f7fe fe92 	bl	8000654 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001930:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001934:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001936:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001938:	0798      	lsls	r0, r3, #30
 800193a:	d5cb      	bpl.n	80018d4 <HAL_RCC_OscConfig+0x20c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800193c:	f7fe fe8a 	bl	8000654 <HAL_GetTick>
 8001940:	1bc0      	subs	r0, r0, r7
 8001942:	4540      	cmp	r0, r8
 8001944:	d9f7      	bls.n	8001936 <HAL_RCC_OscConfig+0x26e>
 8001946:	e70c      	b.n	8001762 <HAL_RCC_OscConfig+0x9a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001948:	f7fe fe84 	bl	8000654 <HAL_GetTick>
 800194c:	1bc0      	subs	r0, r0, r7
 800194e:	4540      	cmp	r0, r8
 8001950:	d9bd      	bls.n	80018ce <HAL_RCC_OscConfig+0x206>
 8001952:	e706      	b.n	8001762 <HAL_RCC_OscConfig+0x9a>
 8001954:	40023800 	.word	0x40023800
 8001958:	42470000 	.word	0x42470000
 800195c:	42470e80 	.word	0x42470e80
 8001960:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001964:	4d23      	ldr	r5, [pc, #140]	; (80019f4 <HAL_RCC_OscConfig+0x32c>)
 8001966:	68ab      	ldr	r3, [r5, #8]
 8001968:	f003 030c 	and.w	r3, r3, #12
 800196c:	2b08      	cmp	r3, #8
 800196e:	f43f aee0 	beq.w	8001732 <HAL_RCC_OscConfig+0x6a>
 8001972:	4e21      	ldr	r6, [pc, #132]	; (80019f8 <HAL_RCC_OscConfig+0x330>)
 8001974:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001976:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001978:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800197a:	d12d      	bne.n	80019d8 <HAL_RCC_OscConfig+0x310>
        tickstart = HAL_GetTick();
 800197c:	f7fe fe6a 	bl	8000654 <HAL_GetTick>
 8001980:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001982:	682b      	ldr	r3, [r5, #0]
 8001984:	0199      	lsls	r1, r3, #6
 8001986:	d421      	bmi.n	80019cc <HAL_RCC_OscConfig+0x304>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001988:	6a22      	ldr	r2, [r4, #32]
 800198a:	69e3      	ldr	r3, [r4, #28]
 800198c:	4313      	orrs	r3, r2
 800198e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001990:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001994:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001996:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800199a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800199c:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80019a0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019a2:	4c14      	ldr	r4, [pc, #80]	; (80019f4 <HAL_RCC_OscConfig+0x32c>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019a4:	0852      	lsrs	r2, r2, #1
 80019a6:	3a01      	subs	r2, #1
 80019a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80019ac:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80019ae:	2301      	movs	r3, #1
 80019b0:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80019b2:	f7fe fe4f 	bl	8000654 <HAL_GetTick>
 80019b6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019b8:	6823      	ldr	r3, [r4, #0]
 80019ba:	019a      	lsls	r2, r3, #6
 80019bc:	f53f ae99 	bmi.w	80016f2 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019c0:	f7fe fe48 	bl	8000654 <HAL_GetTick>
 80019c4:	1b40      	subs	r0, r0, r5
 80019c6:	2802      	cmp	r0, #2
 80019c8:	d9f6      	bls.n	80019b8 <HAL_RCC_OscConfig+0x2f0>
 80019ca:	e6ca      	b.n	8001762 <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019cc:	f7fe fe42 	bl	8000654 <HAL_GetTick>
 80019d0:	1bc0      	subs	r0, r0, r7
 80019d2:	2802      	cmp	r0, #2
 80019d4:	d9d5      	bls.n	8001982 <HAL_RCC_OscConfig+0x2ba>
 80019d6:	e6c4      	b.n	8001762 <HAL_RCC_OscConfig+0x9a>
        tickstart = HAL_GetTick();
 80019d8:	f7fe fe3c 	bl	8000654 <HAL_GetTick>
 80019dc:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019de:	682b      	ldr	r3, [r5, #0]
 80019e0:	019b      	lsls	r3, r3, #6
 80019e2:	f57f ae86 	bpl.w	80016f2 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019e6:	f7fe fe35 	bl	8000654 <HAL_GetTick>
 80019ea:	1b00      	subs	r0, r0, r4
 80019ec:	2802      	cmp	r0, #2
 80019ee:	d9f6      	bls.n	80019de <HAL_RCC_OscConfig+0x316>
 80019f0:	e6b7      	b.n	8001762 <HAL_RCC_OscConfig+0x9a>
 80019f2:	bf00      	nop
 80019f4:	40023800 	.word	0x40023800
 80019f8:	42470060 	.word	0x42470060

080019fc <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80019fc:	6802      	ldr	r2, [r0, #0]
{
 80019fe:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8001a00:	68d3      	ldr	r3, [r2, #12]
 8001a02:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001a06:	60d3      	str	r3, [r2, #12]
{
 8001a08:	4604      	mov	r4, r0

    /* Get tick */
    tickstart = HAL_GetTick();
 8001a0a:	f7fe fe23 	bl	8000654 <HAL_GetTick>
 8001a0e:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8001a10:	6823      	ldr	r3, [r4, #0]
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	069b      	lsls	r3, r3, #26
 8001a16:	d501      	bpl.n	8001a1c <HAL_RTC_WaitForSynchro+0x20>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8001a18:	2000      	movs	r0, #0
 8001a1a:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8001a1c:	f7fe fe1a 	bl	8000654 <HAL_GetTick>
 8001a20:	1b40      	subs	r0, r0, r5
 8001a22:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001a26:	d9f3      	bls.n	8001a10 <HAL_RTC_WaitForSynchro+0x14>
      return HAL_TIMEOUT;
 8001a28:	2003      	movs	r0, #3
}
 8001a2a:	bd38      	pop	{r3, r4, r5, pc}

08001a2c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8001a2c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001a2e:	6803      	ldr	r3, [r0, #0]
 8001a30:	68da      	ldr	r2, [r3, #12]
 8001a32:	0652      	lsls	r2, r2, #25
{
 8001a34:	4604      	mov	r4, r0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001a36:	d501      	bpl.n	8001a3c <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8001a38:	2000      	movs	r0, #0
 8001a3a:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8001a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a40:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8001a42:	f7fe fe07 	bl	8000654 <HAL_GetTick>
 8001a46:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001a48:	6823      	ldr	r3, [r4, #0]
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	065b      	lsls	r3, r3, #25
 8001a4e:	d4f3      	bmi.n	8001a38 <RTC_EnterInitMode+0xc>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8001a50:	f7fe fe00 	bl	8000654 <HAL_GetTick>
 8001a54:	1b40      	subs	r0, r0, r5
 8001a56:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001a5a:	d9f5      	bls.n	8001a48 <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 8001a5c:	2003      	movs	r0, #3
}
 8001a5e:	bd38      	pop	{r3, r4, r5, pc}

08001a60 <HAL_RTC_Init>:
{
 8001a60:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 8001a62:	4604      	mov	r4, r0
 8001a64:	b1b8      	cbz	r0, 8001a96 <HAL_RTC_Init+0x36>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8001a66:	7f43      	ldrb	r3, [r0, #29]
 8001a68:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001a6c:	b913      	cbnz	r3, 8001a74 <HAL_RTC_Init+0x14>
    hrtc->Lock = HAL_UNLOCKED;
 8001a6e:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8001a70:	f001 fb9e 	bl	80031b0 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001a74:	2302      	movs	r3, #2
 8001a76:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001a78:	6823      	ldr	r3, [r4, #0]
 8001a7a:	22ca      	movs	r2, #202	; 0xca
 8001a7c:	625a      	str	r2, [r3, #36]	; 0x24
 8001a7e:	2253      	movs	r2, #83	; 0x53
 8001a80:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001a82:	4620      	mov	r0, r4
 8001a84:	f7ff ffd2 	bl	8001a2c <RTC_EnterInitMode>
 8001a88:	6823      	ldr	r3, [r4, #0]
 8001a8a:	4605      	mov	r5, r0
 8001a8c:	b128      	cbz	r0, 8001a9a <HAL_RTC_Init+0x3a>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001a8e:	22ff      	movs	r2, #255	; 0xff
 8001a90:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001a92:	2304      	movs	r3, #4
 8001a94:	7763      	strb	r3, [r4, #29]
     return HAL_ERROR;
 8001a96:	2501      	movs	r5, #1
 8001a98:	e02e      	b.n	8001af8 <HAL_RTC_Init+0x98>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001a9a:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001a9c:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001a9e:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 8001aa2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001aa6:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001aa8:	6862      	ldr	r2, [r4, #4]
 8001aaa:	6899      	ldr	r1, [r3, #8]
 8001aac:	4302      	orrs	r2, r0
 8001aae:	6960      	ldr	r0, [r4, #20]
 8001ab0:	4302      	orrs	r2, r0
 8001ab2:	430a      	orrs	r2, r1
 8001ab4:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001ab6:	68e2      	ldr	r2, [r4, #12]
 8001ab8:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8001aba:	691a      	ldr	r2, [r3, #16]
 8001abc:	68a1      	ldr	r1, [r4, #8]
 8001abe:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001ac2:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8001ac4:	68da      	ldr	r2, [r3, #12]
 8001ac6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001aca:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	069b      	lsls	r3, r3, #26
 8001ad0:	d405      	bmi.n	8001ade <HAL_RTC_Init+0x7e>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001ad2:	4620      	mov	r0, r4
 8001ad4:	f7ff ff92 	bl	80019fc <HAL_RTC_WaitForSynchro>
 8001ad8:	b108      	cbz	r0, 8001ade <HAL_RTC_Init+0x7e>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001ada:	6823      	ldr	r3, [r4, #0]
 8001adc:	e7d7      	b.n	8001a8e <HAL_RTC_Init+0x2e>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8001ade:	6823      	ldr	r3, [r4, #0]
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8001ae0:	69a1      	ldr	r1, [r4, #24]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8001ae2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ae4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001ae8:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8001aea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001aec:	430a      	orrs	r2, r1
 8001aee:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001af0:	22ff      	movs	r2, #255	; 0xff
 8001af2:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8001af4:	2301      	movs	r3, #1
 8001af6:	7763      	strb	r3, [r4, #29]
}
 8001af8:	4628      	mov	r0, r5
 8001afa:	bd38      	pop	{r3, r4, r5, pc}

08001afc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001afc:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001afe:	4604      	mov	r4, r0
 8001b00:	2800      	cmp	r0, #0
 8001b02:	d036      	beq.n	8001b72 <HAL_SPI_Init+0x76>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b04:	2300      	movs	r3, #0
 8001b06:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001b08:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8001b0c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001b10:	b91b      	cbnz	r3, 8001b1a <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001b12:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001b16:	f001 fb57 	bl	80031c8 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001b1a:	6821      	ldr	r1, [r4, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001b1c:	68a0      	ldr	r0, [r4, #8]
 8001b1e:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001b20:	2302      	movs	r3, #2
 8001b22:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8001b26:	680b      	ldr	r3, [r1, #0]
 8001b28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001b2c:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001b2e:	6863      	ldr	r3, [r4, #4]
 8001b30:	4303      	orrs	r3, r0
 8001b32:	68e0      	ldr	r0, [r4, #12]
 8001b34:	4303      	orrs	r3, r0
 8001b36:	6920      	ldr	r0, [r4, #16]
 8001b38:	4303      	orrs	r3, r0
 8001b3a:	6960      	ldr	r0, [r4, #20]
 8001b3c:	4303      	orrs	r3, r0
 8001b3e:	69e0      	ldr	r0, [r4, #28]
 8001b40:	4303      	orrs	r3, r0
 8001b42:	6a20      	ldr	r0, [r4, #32]
 8001b44:	4303      	orrs	r3, r0
 8001b46:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001b48:	4303      	orrs	r3, r0
 8001b4a:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8001b4e:	4303      	orrs	r3, r0
 8001b50:	600b      	str	r3, [r1, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001b52:	0c12      	lsrs	r2, r2, #16
 8001b54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001b56:	f002 0204 	and.w	r2, r2, #4
 8001b5a:	431a      	orrs	r2, r3
 8001b5c:	604a      	str	r2, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001b5e:	69cb      	ldr	r3, [r1, #28]
 8001b60:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001b64:	61cb      	str	r3, [r1, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001b66:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8001b68:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001b6a:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001b6c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
 8001b70:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001b72:	2001      	movs	r0, #1
}
 8001b74:	bd10      	pop	{r4, pc}
	...

08001b78 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001b78:	6a03      	ldr	r3, [r0, #32]
 8001b7a:	f023 0301 	bic.w	r3, r3, #1
 8001b7e:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001b80:	6a03      	ldr	r3, [r0, #32]
{
 8001b82:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001b84:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001b86:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001b88:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001b8a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001b8e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001b90:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8001b92:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8001b96:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001b98:	4d0e      	ldr	r5, [pc, #56]	; (8001bd4 <TIM_OC1_SetConfig+0x5c>)
 8001b9a:	42a8      	cmp	r0, r5
 8001b9c:	d002      	beq.n	8001ba4 <TIM_OC1_SetConfig+0x2c>
 8001b9e:	4e0e      	ldr	r6, [pc, #56]	; (8001bd8 <TIM_OC1_SetConfig+0x60>)
 8001ba0:	42b0      	cmp	r0, r6
 8001ba2:	d110      	bne.n	8001bc6 <TIM_OC1_SetConfig+0x4e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001ba4:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8001ba6:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8001baa:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001bac:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8001bae:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001bb2:	d002      	beq.n	8001bba <TIM_OC1_SetConfig+0x42>
 8001bb4:	4d08      	ldr	r5, [pc, #32]	; (8001bd8 <TIM_OC1_SetConfig+0x60>)
 8001bb6:	42a8      	cmp	r0, r5
 8001bb8:	d105      	bne.n	8001bc6 <TIM_OC1_SetConfig+0x4e>
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001bba:	694d      	ldr	r5, [r1, #20]
 8001bbc:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001bbe:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8001bc2:	4335      	orrs	r5, r6
 8001bc4:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001bc6:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001bc8:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001bca:	684a      	ldr	r2, [r1, #4]
 8001bcc:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001bce:	6203      	str	r3, [r0, #32]
 8001bd0:	bd70      	pop	{r4, r5, r6, pc}
 8001bd2:	bf00      	nop
 8001bd4:	40010000 	.word	0x40010000
 8001bd8:	40010400 	.word	0x40010400

08001bdc <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001bdc:	6a03      	ldr	r3, [r0, #32]
 8001bde:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001be2:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001be4:	6a03      	ldr	r3, [r0, #32]
{
 8001be6:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001be8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001bea:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001bec:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001bee:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001bf2:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001bf4:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8001bf6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001bfa:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001bfe:	4d11      	ldr	r5, [pc, #68]	; (8001c44 <TIM_OC3_SetConfig+0x68>)
 8001c00:	42a8      	cmp	r0, r5
 8001c02:	d003      	beq.n	8001c0c <TIM_OC3_SetConfig+0x30>
 8001c04:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001c08:	42a8      	cmp	r0, r5
 8001c0a:	d114      	bne.n	8001c36 <TIM_OC3_SetConfig+0x5a>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001c0c:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8001c0e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001c12:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001c16:	4d0b      	ldr	r5, [pc, #44]	; (8001c44 <TIM_OC3_SetConfig+0x68>)
 8001c18:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 8001c1a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001c1e:	d003      	beq.n	8001c28 <TIM_OC3_SetConfig+0x4c>
 8001c20:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001c24:	42a8      	cmp	r0, r5
 8001c26:	d106      	bne.n	8001c36 <TIM_OC3_SetConfig+0x5a>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001c28:	694d      	ldr	r5, [r1, #20]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001c2a:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001c2c:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001c30:	4335      	orrs	r5, r6
 8001c32:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001c36:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001c38:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001c3a:	684a      	ldr	r2, [r1, #4]
 8001c3c:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001c3e:	6203      	str	r3, [r0, #32]
 8001c40:	bd70      	pop	{r4, r5, r6, pc}
 8001c42:	bf00      	nop
 8001c44:	40010000 	.word	0x40010000

08001c48 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001c48:	6a03      	ldr	r3, [r0, #32]
 8001c4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001c4e:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001c50:	6a03      	ldr	r3, [r0, #32]
{
 8001c52:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001c54:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001c56:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001c58:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001c5a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001c5e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001c62:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8001c64:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001c68:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001c6c:	4d08      	ldr	r5, [pc, #32]	; (8001c90 <TIM_OC4_SetConfig+0x48>)
 8001c6e:	42a8      	cmp	r0, r5
 8001c70:	d003      	beq.n	8001c7a <TIM_OC4_SetConfig+0x32>
 8001c72:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001c76:	42a8      	cmp	r0, r5
 8001c78:	d104      	bne.n	8001c84 <TIM_OC4_SetConfig+0x3c>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001c7a:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001c7c:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001c80:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001c84:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001c86:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001c88:	684a      	ldr	r2, [r1, #4]
 8001c8a:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001c8c:	6203      	str	r3, [r0, #32]
 8001c8e:	bd30      	pop	{r4, r5, pc}
 8001c90:	40010000 	.word	0x40010000

08001c94 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c94:	4a30      	ldr	r2, [pc, #192]	; (8001d58 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8001c96:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c98:	4290      	cmp	r0, r2
 8001c9a:	d012      	beq.n	8001cc2 <TIM_Base_SetConfig+0x2e>
 8001c9c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001ca0:	d00f      	beq.n	8001cc2 <TIM_Base_SetConfig+0x2e>
 8001ca2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001ca6:	4290      	cmp	r0, r2
 8001ca8:	d00b      	beq.n	8001cc2 <TIM_Base_SetConfig+0x2e>
 8001caa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001cae:	4290      	cmp	r0, r2
 8001cb0:	d007      	beq.n	8001cc2 <TIM_Base_SetConfig+0x2e>
 8001cb2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001cb6:	4290      	cmp	r0, r2
 8001cb8:	d003      	beq.n	8001cc2 <TIM_Base_SetConfig+0x2e>
 8001cba:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001cbe:	4290      	cmp	r0, r2
 8001cc0:	d119      	bne.n	8001cf6 <TIM_Base_SetConfig+0x62>
    tmpcr1 |= Structure->CounterMode;
 8001cc2:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001cc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001cc8:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001cca:	4a23      	ldr	r2, [pc, #140]	; (8001d58 <TIM_Base_SetConfig+0xc4>)
 8001ccc:	4290      	cmp	r0, r2
 8001cce:	d029      	beq.n	8001d24 <TIM_Base_SetConfig+0x90>
 8001cd0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001cd4:	d026      	beq.n	8001d24 <TIM_Base_SetConfig+0x90>
 8001cd6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001cda:	4290      	cmp	r0, r2
 8001cdc:	d022      	beq.n	8001d24 <TIM_Base_SetConfig+0x90>
 8001cde:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001ce2:	4290      	cmp	r0, r2
 8001ce4:	d01e      	beq.n	8001d24 <TIM_Base_SetConfig+0x90>
 8001ce6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001cea:	4290      	cmp	r0, r2
 8001cec:	d01a      	beq.n	8001d24 <TIM_Base_SetConfig+0x90>
 8001cee:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001cf2:	4290      	cmp	r0, r2
 8001cf4:	d016      	beq.n	8001d24 <TIM_Base_SetConfig+0x90>
 8001cf6:	4a19      	ldr	r2, [pc, #100]	; (8001d5c <TIM_Base_SetConfig+0xc8>)
 8001cf8:	4290      	cmp	r0, r2
 8001cfa:	d013      	beq.n	8001d24 <TIM_Base_SetConfig+0x90>
 8001cfc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d00:	4290      	cmp	r0, r2
 8001d02:	d00f      	beq.n	8001d24 <TIM_Base_SetConfig+0x90>
 8001d04:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d08:	4290      	cmp	r0, r2
 8001d0a:	d00b      	beq.n	8001d24 <TIM_Base_SetConfig+0x90>
 8001d0c:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001d10:	4290      	cmp	r0, r2
 8001d12:	d007      	beq.n	8001d24 <TIM_Base_SetConfig+0x90>
 8001d14:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d18:	4290      	cmp	r0, r2
 8001d1a:	d003      	beq.n	8001d24 <TIM_Base_SetConfig+0x90>
 8001d1c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d20:	4290      	cmp	r0, r2
 8001d22:	d103      	bne.n	8001d2c <TIM_Base_SetConfig+0x98>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d24:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d2a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d2c:	694a      	ldr	r2, [r1, #20]
 8001d2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001d32:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001d34:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d36:	688b      	ldr	r3, [r1, #8]
 8001d38:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001d3a:	680b      	ldr	r3, [r1, #0]
 8001d3c:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d3e:	4b06      	ldr	r3, [pc, #24]	; (8001d58 <TIM_Base_SetConfig+0xc4>)
 8001d40:	4298      	cmp	r0, r3
 8001d42:	d003      	beq.n	8001d4c <TIM_Base_SetConfig+0xb8>
 8001d44:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d48:	4298      	cmp	r0, r3
 8001d4a:	d101      	bne.n	8001d50 <TIM_Base_SetConfig+0xbc>
    TIMx->RCR = Structure->RepetitionCounter;
 8001d4c:	690b      	ldr	r3, [r1, #16]
 8001d4e:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8001d50:	2301      	movs	r3, #1
 8001d52:	6143      	str	r3, [r0, #20]
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	40010000 	.word	0x40010000
 8001d5c:	40014000 	.word	0x40014000

08001d60 <HAL_TIM_Base_Init>:
{
 8001d60:	b510      	push	{r4, lr}
  if (htim == NULL)
 8001d62:	4604      	mov	r4, r0
 8001d64:	b1a0      	cbz	r0, 8001d90 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001d66:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001d6a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001d6e:	b91b      	cbnz	r3, 8001d78 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001d70:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001d74:	f001 fa9e 	bl	80032b4 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001d78:	2302      	movs	r3, #2
 8001d7a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d7e:	6820      	ldr	r0, [r4, #0]
 8001d80:	1d21      	adds	r1, r4, #4
 8001d82:	f7ff ff87 	bl	8001c94 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8001d86:	2301      	movs	r3, #1
 8001d88:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001d8c:	2000      	movs	r0, #0
 8001d8e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001d90:	2001      	movs	r0, #1
}
 8001d92:	bd10      	pop	{r4, pc}

08001d94 <HAL_TIM_PWM_Init>:
{
 8001d94:	b510      	push	{r4, lr}
  if (htim == NULL)
 8001d96:	4604      	mov	r4, r0
 8001d98:	b1a0      	cbz	r0, 8001dc4 <HAL_TIM_PWM_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001d9a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001d9e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001da2:	b91b      	cbnz	r3, 8001dac <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001da4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8001da8:	f001 fb18 	bl	80033dc <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001dac:	2302      	movs	r3, #2
 8001dae:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001db2:	6820      	ldr	r0, [r4, #0]
 8001db4:	1d21      	adds	r1, r4, #4
 8001db6:	f7ff ff6d 	bl	8001c94 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001dc0:	2000      	movs	r0, #0
 8001dc2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001dc4:	2001      	movs	r0, #1
}
 8001dc6:	bd10      	pop	{r4, pc}

08001dc8 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001dc8:	6a03      	ldr	r3, [r0, #32]
 8001dca:	f023 0310 	bic.w	r3, r3, #16
 8001dce:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001dd0:	6a03      	ldr	r3, [r0, #32]
{
 8001dd2:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 =  TIMx->CR2;
 8001dd4:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8001dd6:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001dd8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001dda:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001dde:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001de2:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8001de4:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001de8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001dec:	4d10      	ldr	r5, [pc, #64]	; (8001e30 <TIM_OC2_SetConfig+0x68>)
 8001dee:	42a8      	cmp	r0, r5
 8001df0:	d003      	beq.n	8001dfa <TIM_OC2_SetConfig+0x32>
 8001df2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001df6:	42a8      	cmp	r0, r5
 8001df8:	d114      	bne.n	8001e24 <TIM_OC2_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001dfa:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8001dfc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001e00:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001e04:	4d0a      	ldr	r5, [pc, #40]	; (8001e30 <TIM_OC2_SetConfig+0x68>)
 8001e06:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 8001e08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001e0c:	d003      	beq.n	8001e16 <TIM_OC2_SetConfig+0x4e>
 8001e0e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001e12:	42a8      	cmp	r0, r5
 8001e14:	d106      	bne.n	8001e24 <TIM_OC2_SetConfig+0x5c>
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001e16:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001e18:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001e1a:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001e1e:	4335      	orrs	r5, r6
 8001e20:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8001e24:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001e26:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8001e28:	684a      	ldr	r2, [r1, #4]
 8001e2a:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8001e2c:	6203      	str	r3, [r0, #32]
 8001e2e:	bd70      	pop	{r4, r5, r6, pc}
 8001e30:	40010000 	.word	0x40010000

08001e34 <HAL_TIM_PWM_ConfigChannel>:
{
 8001e34:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8001e36:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001e3a:	2b01      	cmp	r3, #1
{
 8001e3c:	4604      	mov	r4, r0
 8001e3e:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001e42:	d025      	beq.n	8001e90 <HAL_TIM_PWM_ConfigChannel+0x5c>
 8001e44:	2301      	movs	r3, #1
 8001e46:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8001e4a:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  switch (Channel)
 8001e4e:	2a0c      	cmp	r2, #12
 8001e50:	d818      	bhi.n	8001e84 <HAL_TIM_PWM_ConfigChannel+0x50>
 8001e52:	e8df f002 	tbb	[pc, r2]
 8001e56:	1707      	.short	0x1707
 8001e58:	171e1717 	.word	0x171e1717
 8001e5c:	172f1717 	.word	0x172f1717
 8001e60:	1717      	.short	0x1717
 8001e62:	40          	.byte	0x40
 8001e63:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001e64:	6820      	ldr	r0, [r4, #0]
 8001e66:	f7ff fe87 	bl	8001b78 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001e6a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001e6c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001e6e:	699a      	ldr	r2, [r3, #24]
 8001e70:	f042 0208 	orr.w	r2, r2, #8
 8001e74:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001e76:	699a      	ldr	r2, [r3, #24]
 8001e78:	f022 0204 	bic.w	r2, r2, #4
 8001e7c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001e7e:	699a      	ldr	r2, [r3, #24]
 8001e80:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001e82:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8001e84:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001e86:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001e88:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001e8c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001e90:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001e92:	6820      	ldr	r0, [r4, #0]
 8001e94:	f7ff ff98 	bl	8001dc8 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001e98:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001e9a:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001e9c:	699a      	ldr	r2, [r3, #24]
 8001e9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ea2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001ea4:	699a      	ldr	r2, [r3, #24]
 8001ea6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001eaa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001eac:	699a      	ldr	r2, [r3, #24]
 8001eae:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001eb2:	e7e6      	b.n	8001e82 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001eb4:	6820      	ldr	r0, [r4, #0]
 8001eb6:	f7ff fe91 	bl	8001bdc <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001eba:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001ebc:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001ebe:	69da      	ldr	r2, [r3, #28]
 8001ec0:	f042 0208 	orr.w	r2, r2, #8
 8001ec4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001ec6:	69da      	ldr	r2, [r3, #28]
 8001ec8:	f022 0204 	bic.w	r2, r2, #4
 8001ecc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001ece:	69da      	ldr	r2, [r3, #28]
 8001ed0:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001ed2:	61da      	str	r2, [r3, #28]
      break;
 8001ed4:	e7d6      	b.n	8001e84 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001ed6:	6820      	ldr	r0, [r4, #0]
 8001ed8:	f7ff feb6 	bl	8001c48 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001edc:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001ede:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001ee0:	69da      	ldr	r2, [r3, #28]
 8001ee2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ee6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001ee8:	69da      	ldr	r2, [r3, #28]
 8001eea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001eee:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001ef0:	69da      	ldr	r2, [r3, #28]
 8001ef2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001ef6:	e7ec      	b.n	8001ed2 <HAL_TIM_PWM_ConfigChannel+0x9e>

08001ef8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001ef8:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001efa:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001efc:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001efe:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001f02:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8001f06:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001f08:	6083      	str	r3, [r0, #8]
 8001f0a:	bd10      	pop	{r4, pc}

08001f0c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001f0c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001f10:	2b01      	cmp	r3, #1
{
 8001f12:	b570      	push	{r4, r5, r6, lr}
 8001f14:	4604      	mov	r4, r0
 8001f16:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001f1a:	d019      	beq.n	8001f50 <HAL_TIM_ConfigClockSource+0x44>
  htim->State = HAL_TIM_STATE_BUSY;
 8001f1c:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8001f20:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8001f22:	2301      	movs	r3, #1
 8001f24:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8001f28:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001f2e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8001f32:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8001f34:	680b      	ldr	r3, [r1, #0]
 8001f36:	2b40      	cmp	r3, #64	; 0x40
 8001f38:	d065      	beq.n	8002006 <HAL_TIM_ConfigClockSource+0xfa>
 8001f3a:	d815      	bhi.n	8001f68 <HAL_TIM_ConfigClockSource+0x5c>
 8001f3c:	2b10      	cmp	r3, #16
 8001f3e:	d00c      	beq.n	8001f5a <HAL_TIM_ConfigClockSource+0x4e>
 8001f40:	d807      	bhi.n	8001f52 <HAL_TIM_ConfigClockSource+0x46>
 8001f42:	b153      	cbz	r3, 8001f5a <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 8001f44:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001f46:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001f48:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001f4c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001f50:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8001f52:	2b20      	cmp	r3, #32
 8001f54:	d001      	beq.n	8001f5a <HAL_TIM_ConfigClockSource+0x4e>
 8001f56:	2b30      	cmp	r3, #48	; 0x30
 8001f58:	d1f4      	bne.n	8001f44 <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = TIMx->SMCR;
 8001f5a:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001f5c:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8001f60:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001f64:	4313      	orrs	r3, r2
 8001f66:	e01a      	b.n	8001f9e <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 8001f68:	2b60      	cmp	r3, #96	; 0x60
 8001f6a:	d034      	beq.n	8001fd6 <HAL_TIM_ConfigClockSource+0xca>
 8001f6c:	d819      	bhi.n	8001fa2 <HAL_TIM_ConfigClockSource+0x96>
 8001f6e:	2b50      	cmp	r3, #80	; 0x50
 8001f70:	d1e8      	bne.n	8001f44 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f72:	684a      	ldr	r2, [r1, #4]
 8001f74:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001f76:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f78:	6a05      	ldr	r5, [r0, #32]
 8001f7a:	f025 0501 	bic.w	r5, r5, #1
 8001f7e:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f80:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001f82:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001f86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001f8a:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001f8e:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8001f90:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001f92:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001f94:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001f96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001f9a:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8001f9e:	6083      	str	r3, [r0, #8]
 8001fa0:	e7d0      	b.n	8001f44 <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 8001fa2:	2b70      	cmp	r3, #112	; 0x70
 8001fa4:	d00c      	beq.n	8001fc0 <HAL_TIM_ConfigClockSource+0xb4>
 8001fa6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001faa:	d1cb      	bne.n	8001f44 <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 8001fac:	68cb      	ldr	r3, [r1, #12]
 8001fae:	684a      	ldr	r2, [r1, #4]
 8001fb0:	6889      	ldr	r1, [r1, #8]
 8001fb2:	f7ff ffa1 	bl	8001ef8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001fb6:	6822      	ldr	r2, [r4, #0]
 8001fb8:	6893      	ldr	r3, [r2, #8]
 8001fba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fbe:	e008      	b.n	8001fd2 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 8001fc0:	68cb      	ldr	r3, [r1, #12]
 8001fc2:	684a      	ldr	r2, [r1, #4]
 8001fc4:	6889      	ldr	r1, [r1, #8]
 8001fc6:	f7ff ff97 	bl	8001ef8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001fca:	6822      	ldr	r2, [r4, #0]
 8001fcc:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001fce:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001fd2:	6093      	str	r3, [r2, #8]
      break;
 8001fd4:	e7b6      	b.n	8001f44 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001fd6:	684d      	ldr	r5, [r1, #4]
 8001fd8:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001fda:	6a01      	ldr	r1, [r0, #32]
 8001fdc:	f021 0110 	bic.w	r1, r1, #16
 8001fe0:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001fe2:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8001fe4:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001fe6:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001fea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001fee:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001ff2:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8001ff6:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001ff8:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001ffa:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001ffc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002000:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8002004:	e7cb      	b.n	8001f9e <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002006:	684a      	ldr	r2, [r1, #4]
 8002008:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800200a:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800200c:	6a05      	ldr	r5, [r0, #32]
 800200e:	f025 0501 	bic.w	r5, r5, #1
 8002012:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002014:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002016:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800201a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800201e:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8002022:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8002024:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002026:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002028:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800202a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800202e:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8002032:	e7b4      	b.n	8001f9e <HAL_TIM_ConfigClockSource+0x92>

08002034 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002034:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002038:	2b01      	cmp	r3, #1
{
 800203a:	b530      	push	{r4, r5, lr}
 800203c:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8002040:	d035      	beq.n	80020ae <HAL_TIMEx_MasterConfigSynchronization+0x7a>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002042:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002046:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002048:	680d      	ldr	r5, [r1, #0]
  tmpcr2 = htim->Instance->CR2;
 800204a:	685c      	ldr	r4, [r3, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 800204c:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  __HAL_LOCK(htim);
 8002050:	2201      	movs	r2, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002052:	432c      	orrs	r4, r5
  __HAL_LOCK(htim);
 8002054:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8002058:	689a      	ldr	r2, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800205a:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800205c:	4c15      	ldr	r4, [pc, #84]	; (80020b4 <HAL_TIMEx_MasterConfigSynchronization+0x80>)
 800205e:	42a3      	cmp	r3, r4
 8002060:	d01a      	beq.n	8002098 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8002062:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002066:	d017      	beq.n	8002098 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8002068:	f5a4 447c 	sub.w	r4, r4, #64512	; 0xfc00
 800206c:	42a3      	cmp	r3, r4
 800206e:	d013      	beq.n	8002098 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8002070:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002074:	42a3      	cmp	r3, r4
 8002076:	d00f      	beq.n	8002098 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8002078:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800207c:	42a3      	cmp	r3, r4
 800207e:	d00b      	beq.n	8002098 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8002080:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 8002084:	42a3      	cmp	r3, r4
 8002086:	d007      	beq.n	8002098 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8002088:	f504 5470 	add.w	r4, r4, #15360	; 0x3c00
 800208c:	42a3      	cmp	r3, r4
 800208e:	d003      	beq.n	8002098 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8002090:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 8002094:	42a3      	cmp	r3, r4
 8002096:	d104      	bne.n	80020a2 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002098:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800209a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800209e:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80020a0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80020a2:	2301      	movs	r3, #1
 80020a4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80020a8:	2300      	movs	r3, #0
 80020aa:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 80020ae:	4618      	mov	r0, r3

  return HAL_OK;
}
 80020b0:	bd30      	pop	{r4, r5, pc}
 80020b2:	bf00      	nop
 80020b4:	40010000 	.word	0x40010000

080020b8 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80020b8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d01f      	beq.n	8002100 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80020c0:	68cb      	ldr	r3, [r1, #12]
 80020c2:	688a      	ldr	r2, [r1, #8]
 80020c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020c8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80020ca:	684a      	ldr	r2, [r1, #4]
 80020cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80020d0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80020d2:	680a      	ldr	r2, [r1, #0]
 80020d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80020d8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80020da:	690a      	ldr	r2, [r1, #16]
 80020dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80020e0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80020e2:	694a      	ldr	r2, [r1, #20]
 80020e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80020e8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80020ea:	69ca      	ldr	r2, [r1, #28]
 80020ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80020f0:	4313      	orrs	r3, r2


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80020f2:	6802      	ldr	r2, [r0, #0]
 80020f4:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80020f6:	2300      	movs	r3, #0
 80020f8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 80020fc:	4618      	mov	r0, r3
 80020fe:	4770      	bx	lr
  __HAL_LOCK(htim);
 8002100:	2002      	movs	r0, #2
}
 8002102:	4770      	bx	lr

08002104 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002104:	6803      	ldr	r3, [r0, #0]
 8002106:	68da      	ldr	r2, [r3, #12]
 8002108:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800210c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800210e:	695a      	ldr	r2, [r3, #20]
 8002110:	f022 0201 	bic.w	r2, r2, #1
 8002114:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002116:	2320      	movs	r3, #32
 8002118:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 800211c:	4770      	bx	lr
	...

08002120 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002120:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002122:	6803      	ldr	r3, [r0, #0]
 8002124:	68c1      	ldr	r1, [r0, #12]
 8002126:	691a      	ldr	r2, [r3, #16]
{
 8002128:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800212a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800212e:	430a      	orrs	r2, r1
 8002130:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002132:	6925      	ldr	r5, [r4, #16]
 8002134:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002136:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002138:	69c0      	ldr	r0, [r0, #28]
 800213a:	432a      	orrs	r2, r5
 800213c:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 800213e:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002142:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 8002144:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002148:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 800214a:	430a      	orrs	r2, r1
 800214c:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800214e:	695a      	ldr	r2, [r3, #20]
 8002150:	69a1      	ldr	r1, [r4, #24]
 8002152:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002156:	430a      	orrs	r2, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002158:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800215c:	615a      	str	r2, [r3, #20]
 800215e:	4a25      	ldr	r2, [pc, #148]	; (80021f4 <UART_SetConfig+0xd4>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002160:	d129      	bne.n	80021b6 <UART_SetConfig+0x96>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002162:	4293      	cmp	r3, r2
 8002164:	d003      	beq.n	800216e <UART_SetConfig+0x4e>
 8002166:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800216a:	4293      	cmp	r3, r2
 800216c:	d120      	bne.n	80021b0 <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800216e:	f7ff f84b 	bl	8001208 <HAL_RCC_GetPCLK2Freq>
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002172:	6862      	ldr	r2, [r4, #4]
 8002174:	6825      	ldr	r5, [r4, #0]
 8002176:	1892      	adds	r2, r2, r2
 8002178:	f04f 0300 	mov.w	r3, #0
 800217c:	f04f 0119 	mov.w	r1, #25
 8002180:	415b      	adcs	r3, r3
 8002182:	fba0 0101 	umull	r0, r1, r0, r1
 8002186:	f7fe f893 	bl	80002b0 <__aeabi_uldivmod>
 800218a:	2164      	movs	r1, #100	; 0x64
 800218c:	fbb0 f4f1 	udiv	r4, r0, r1
 8002190:	fb01 0314 	mls	r3, r1, r4, r0
 8002194:	00db      	lsls	r3, r3, #3
 8002196:	3332      	adds	r3, #50	; 0x32
 8002198:	fbb3 f3f1 	udiv	r3, r3, r1
 800219c:	f003 0207 	and.w	r2, r3, #7
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 80021a6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80021aa:	4413      	add	r3, r2
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80021ac:	60ab      	str	r3, [r5, #8]
 80021ae:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 80021b0:	f7ff f81a 	bl	80011e8 <HAL_RCC_GetPCLK1Freq>
 80021b4:	e7dd      	b.n	8002172 <UART_SetConfig+0x52>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d002      	beq.n	80021c0 <UART_SetConfig+0xa0>
 80021ba:	4a0f      	ldr	r2, [pc, #60]	; (80021f8 <UART_SetConfig+0xd8>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d116      	bne.n	80021ee <UART_SetConfig+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
 80021c0:	f7ff f822 	bl	8001208 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80021c4:	6863      	ldr	r3, [r4, #4]
 80021c6:	6825      	ldr	r5, [r4, #0]
 80021c8:	2119      	movs	r1, #25
 80021ca:	009a      	lsls	r2, r3, #2
 80021cc:	fba0 0101 	umull	r0, r1, r0, r1
 80021d0:	0f9b      	lsrs	r3, r3, #30
 80021d2:	f7fe f86d 	bl	80002b0 <__aeabi_uldivmod>
 80021d6:	2264      	movs	r2, #100	; 0x64
 80021d8:	fbb0 f1f2 	udiv	r1, r0, r2
 80021dc:	fb02 0311 	mls	r3, r2, r1, r0
 80021e0:	011b      	lsls	r3, r3, #4
 80021e2:	3332      	adds	r3, #50	; 0x32
 80021e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80021e8:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80021ec:	e7de      	b.n	80021ac <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK1Freq();
 80021ee:	f7fe fffb 	bl	80011e8 <HAL_RCC_GetPCLK1Freq>
 80021f2:	e7e7      	b.n	80021c4 <UART_SetConfig+0xa4>
 80021f4:	40011000 	.word	0x40011000
 80021f8:	40011400 	.word	0x40011400

080021fc <HAL_UART_Init>:
{
 80021fc:	b510      	push	{r4, lr}
  if (huart == NULL)
 80021fe:	4604      	mov	r4, r0
 8002200:	b340      	cbz	r0, 8002254 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8002202:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002206:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800220a:	b91b      	cbnz	r3, 8002214 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 800220c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8002210:	f001 fa12 	bl	8003638 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8002214:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002216:	2324      	movs	r3, #36	; 0x24
 8002218:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 800221c:	68d3      	ldr	r3, [r2, #12]
 800221e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002222:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002224:	4620      	mov	r0, r4
 8002226:	f7ff ff7b 	bl	8002120 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800222a:	6823      	ldr	r3, [r4, #0]
 800222c:	691a      	ldr	r2, [r3, #16]
 800222e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002232:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002234:	695a      	ldr	r2, [r3, #20]
 8002236:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800223a:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800223c:	68da      	ldr	r2, [r3, #12]
 800223e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002242:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002244:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002246:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002248:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800224a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800224e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8002252:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002254:	2001      	movs	r0, #1
}
 8002256:	bd10      	pop	{r4, pc}

08002258 <HAL_UART_Transmit_DMA>:
{
 8002258:	b538      	push	{r3, r4, r5, lr}
 800225a:	4604      	mov	r4, r0
 800225c:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800225e:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8002262:	2a20      	cmp	r2, #32
 8002264:	d12a      	bne.n	80022bc <HAL_UART_Transmit_DMA+0x64>
    if ((pData == NULL) || (Size == 0U))
 8002266:	b339      	cbz	r1, 80022b8 <HAL_UART_Transmit_DMA+0x60>
 8002268:	b333      	cbz	r3, 80022b8 <HAL_UART_Transmit_DMA+0x60>
    __HAL_LOCK(huart);
 800226a:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 800226e:	2a01      	cmp	r2, #1
 8002270:	d024      	beq.n	80022bc <HAL_UART_Transmit_DMA+0x64>
 8002272:	2201      	movs	r2, #1
 8002274:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002278:	6b20      	ldr	r0, [r4, #48]	; 0x30
    huart->TxXferCount = Size;
 800227a:	84e3      	strh	r3, [r4, #38]	; 0x26
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800227c:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800227e:	2221      	movs	r2, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002280:	63e5      	str	r5, [r4, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002282:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002286:	4a0e      	ldr	r2, [pc, #56]	; (80022c0 <HAL_UART_Transmit_DMA+0x68>)
    huart->TxXferSize = Size;
 8002288:	84a3      	strh	r3, [r4, #36]	; 0x24
    huart->pTxBuffPtr = pData;
 800228a:	6221      	str	r1, [r4, #32]
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800228c:	63c2      	str	r2, [r0, #60]	; 0x3c
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800228e:	4a0d      	ldr	r2, [pc, #52]	; (80022c4 <HAL_UART_Transmit_DMA+0x6c>)
 8002290:	6402      	str	r2, [r0, #64]	; 0x40
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002292:	4a0d      	ldr	r2, [pc, #52]	; (80022c8 <HAL_UART_Transmit_DMA+0x70>)
 8002294:	64c2      	str	r2, [r0, #76]	; 0x4c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8002296:	6822      	ldr	r2, [r4, #0]
    huart->hdmatx->XferAbortCallback = NULL;
 8002298:	6505      	str	r5, [r0, #80]	; 0x50
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800229a:	3204      	adds	r2, #4
 800229c:	f7fe fc3a 	bl	8000b14 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80022a0:	6823      	ldr	r3, [r4, #0]
 80022a2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80022a6:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80022a8:	695a      	ldr	r2, [r3, #20]
    __HAL_UNLOCK(huart);
 80022aa:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80022ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80022b2:	615a      	str	r2, [r3, #20]
    return HAL_OK;
 80022b4:	4628      	mov	r0, r5
 80022b6:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 80022b8:	2001      	movs	r0, #1
 80022ba:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_BUSY;
 80022bc:	2002      	movs	r0, #2
}
 80022be:	bd38      	pop	{r3, r4, r5, pc}
 80022c0:	0800235d 	.word	0x0800235d
 80022c4:	0800238b 	.word	0x0800238b
 80022c8:	08002457 	.word	0x08002457

080022cc <HAL_UART_Receive_DMA>:
{
 80022cc:	4613      	mov	r3, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 80022ce:	f890 203a 	ldrb.w	r2, [r0, #58]	; 0x3a
 80022d2:	2a20      	cmp	r2, #32
{
 80022d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80022d6:	4605      	mov	r5, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 80022d8:	d138      	bne.n	800234c <HAL_UART_Receive_DMA+0x80>
    if ((pData == NULL) || (Size == 0U))
 80022da:	2900      	cmp	r1, #0
 80022dc:	d034      	beq.n	8002348 <HAL_UART_Receive_DMA+0x7c>
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d032      	beq.n	8002348 <HAL_UART_Receive_DMA+0x7c>
    __HAL_LOCK(huart);
 80022e2:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 80022e6:	2a01      	cmp	r2, #1
 80022e8:	d030      	beq.n	800234c <HAL_UART_Receive_DMA+0x80>
 80022ea:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022ec:	2400      	movs	r4, #0
    __HAL_LOCK(huart);
 80022ee:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80022f2:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022f4:	63c4      	str	r4, [r0, #60]	; 0x3c
    huart->pRxBuffPtr = pData;
 80022f6:	6281      	str	r1, [r0, #40]	; 0x28
    huart->RxXferSize = Size;
 80022f8:	8583      	strh	r3, [r0, #44]	; 0x2c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80022fa:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80022fe:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8002300:	4a13      	ldr	r2, [pc, #76]	; (8002350 <HAL_UART_Receive_DMA+0x84>)
 8002302:	63c2      	str	r2, [r0, #60]	; 0x3c
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002304:	682e      	ldr	r6, [r5, #0]
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002306:	4a13      	ldr	r2, [pc, #76]	; (8002354 <HAL_UART_Receive_DMA+0x88>)
 8002308:	6402      	str	r2, [r0, #64]	; 0x40
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800230a:	4a13      	ldr	r2, [pc, #76]	; (8002358 <HAL_UART_Receive_DMA+0x8c>)
 800230c:	64c2      	str	r2, [r0, #76]	; 0x4c
    huart->hdmarx->XferAbortCallback = NULL;
 800230e:	6504      	str	r4, [r0, #80]	; 0x50
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002310:	460a      	mov	r2, r1
 8002312:	1d31      	adds	r1, r6, #4
 8002314:	f7fe fbfe 	bl	8000b14 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_OREFLAG(huart);
 8002318:	682b      	ldr	r3, [r5, #0]
 800231a:	9401      	str	r4, [sp, #4]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	9201      	str	r2, [sp, #4]
 8002320:	685a      	ldr	r2, [r3, #4]
 8002322:	9201      	str	r2, [sp, #4]
 8002324:	9a01      	ldr	r2, [sp, #4]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002326:	68da      	ldr	r2, [r3, #12]
    __HAL_UNLOCK(huart);
 8002328:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800232c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002330:	60da      	str	r2, [r3, #12]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002332:	695a      	ldr	r2, [r3, #20]
 8002334:	f042 0201 	orr.w	r2, r2, #1
 8002338:	615a      	str	r2, [r3, #20]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800233a:	695a      	ldr	r2, [r3, #20]
 800233c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002340:	615a      	str	r2, [r3, #20]
    return HAL_OK;
 8002342:	4620      	mov	r0, r4
}
 8002344:	b002      	add	sp, #8
 8002346:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002348:	2001      	movs	r0, #1
 800234a:	e7fb      	b.n	8002344 <HAL_UART_Receive_DMA+0x78>
    return HAL_BUSY;
 800234c:	2002      	movs	r0, #2
 800234e:	e7f9      	b.n	8002344 <HAL_UART_Receive_DMA+0x78>
 8002350:	08002397 	.word	0x08002397
 8002354:	0800244d 	.word	0x0800244d
 8002358:	08002457 	.word	0x08002457

0800235c <UART_DMATransmitCplt>:
{
 800235c:	b508      	push	{r3, lr}
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800235e:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002360:	6b82      	ldr	r2, [r0, #56]	; 0x38
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8002368:	d10a      	bne.n	8002380 <UART_DMATransmitCplt+0x24>
    huart->TxXferCount = 0x00U;
 800236a:	84d3      	strh	r3, [r2, #38]	; 0x26
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800236c:	6813      	ldr	r3, [r2, #0]
 800236e:	695a      	ldr	r2, [r3, #20]
 8002370:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002374:	615a      	str	r2, [r3, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002376:	68da      	ldr	r2, [r3, #12]
 8002378:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800237c:	60da      	str	r2, [r3, #12]
 800237e:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8002380:	4610      	mov	r0, r2
 8002382:	f000 fdf7 	bl	8002f74 <HAL_UART_TxCpltCallback>
 8002386:	bd08      	pop	{r3, pc}

08002388 <HAL_UART_TxHalfCpltCallback>:
 8002388:	4770      	bx	lr

0800238a <UART_DMATxHalfCplt>:
{
 800238a:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 800238c:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800238e:	f7ff fffb 	bl	8002388 <HAL_UART_TxHalfCpltCallback>
 8002392:	bd08      	pop	{r3, pc}

08002394 <HAL_UART_RxCpltCallback>:
 8002394:	4770      	bx	lr

08002396 <UART_DMAReceiveCplt>:
{
 8002396:	b508      	push	{r3, lr}
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002398:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800239a:	6b82      	ldr	r2, [r0, #56]	; 0x38
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 80023a2:	d110      	bne.n	80023c6 <UART_DMAReceiveCplt+0x30>
    huart->RxXferCount = 0U;
 80023a4:	85d3      	strh	r3, [r2, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80023a6:	6813      	ldr	r3, [r2, #0]
 80023a8:	68d9      	ldr	r1, [r3, #12]
 80023aa:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80023ae:	60d9      	str	r1, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023b0:	6959      	ldr	r1, [r3, #20]
 80023b2:	f021 0101 	bic.w	r1, r1, #1
 80023b6:	6159      	str	r1, [r3, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80023b8:	6959      	ldr	r1, [r3, #20]
 80023ba:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 80023be:	6159      	str	r1, [r3, #20]
    huart->RxState = HAL_UART_STATE_READY;
 80023c0:	2320      	movs	r3, #32
 80023c2:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
  HAL_UART_RxCpltCallback(huart);
 80023c6:	4610      	mov	r0, r2
 80023c8:	f7ff ffe4 	bl	8002394 <HAL_UART_RxCpltCallback>
 80023cc:	bd08      	pop	{r3, pc}

080023ce <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80023ce:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80023d2:	2b22      	cmp	r3, #34	; 0x22
{
 80023d4:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80023d6:	d136      	bne.n	8002446 <UART_Receive_IT+0x78>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80023d8:	6883      	ldr	r3, [r0, #8]
 80023da:	6901      	ldr	r1, [r0, #16]
 80023dc:	6802      	ldr	r2, [r0, #0]
 80023de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023e2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80023e4:	d123      	bne.n	800242e <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80023e6:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80023e8:	b9e9      	cbnz	r1, 8002426 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80023ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023ee:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 80023f2:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 80023f4:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 80023f6:	3c01      	subs	r4, #1
 80023f8:	b2a4      	uxth	r4, r4
 80023fa:	85c4      	strh	r4, [r0, #46]	; 0x2e
 80023fc:	b98c      	cbnz	r4, 8002422 <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80023fe:	6803      	ldr	r3, [r0, #0]
 8002400:	68da      	ldr	r2, [r3, #12]
 8002402:	f022 0220 	bic.w	r2, r2, #32
 8002406:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002408:	68da      	ldr	r2, [r3, #12]
 800240a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800240e:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002410:	695a      	ldr	r2, [r3, #20]
 8002412:	f022 0201 	bic.w	r2, r2, #1
 8002416:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8002418:	2320      	movs	r3, #32
 800241a:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 800241e:	f7ff ffb9 	bl	8002394 <HAL_UART_RxCpltCallback>
    if (--huart->RxXferCount == 0U)
 8002422:	2000      	movs	r0, #0
}
 8002424:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002426:	b2d2      	uxtb	r2, r2
 8002428:	f823 2b01 	strh.w	r2, [r3], #1
 800242c:	e7e1      	b.n	80023f2 <UART_Receive_IT+0x24>
      if (huart->Init.Parity == UART_PARITY_NONE)
 800242e:	b921      	cbnz	r1, 800243a <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002430:	1c59      	adds	r1, r3, #1
 8002432:	6852      	ldr	r2, [r2, #4]
 8002434:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002436:	701a      	strb	r2, [r3, #0]
 8002438:	e7dc      	b.n	80023f4 <UART_Receive_IT+0x26>
 800243a:	6852      	ldr	r2, [r2, #4]
 800243c:	1c59      	adds	r1, r3, #1
 800243e:	6281      	str	r1, [r0, #40]	; 0x28
 8002440:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002444:	e7f7      	b.n	8002436 <UART_Receive_IT+0x68>
    return HAL_BUSY;
 8002446:	2002      	movs	r0, #2
 8002448:	bd10      	pop	{r4, pc}

0800244a <HAL_UART_RxHalfCpltCallback>:
 800244a:	4770      	bx	lr

0800244c <UART_DMARxHalfCplt>:
{
 800244c:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart);
 800244e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8002450:	f7ff fffb 	bl	800244a <HAL_UART_RxHalfCpltCallback>
 8002454:	bd08      	pop	{r3, pc}

08002456 <UART_DMAError>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002456:	6b81      	ldr	r1, [r0, #56]	; 0x38
{
 8002458:	b508      	push	{r3, lr}
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800245a:	680b      	ldr	r3, [r1, #0]
 800245c:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800245e:	f891 0039 	ldrb.w	r0, [r1, #57]	; 0x39
 8002462:	2821      	cmp	r0, #33	; 0x21
 8002464:	d10a      	bne.n	800247c <UART_DMAError+0x26>
 8002466:	0612      	lsls	r2, r2, #24
 8002468:	d508      	bpl.n	800247c <UART_DMAError+0x26>
    huart->TxXferCount = 0x00U;
 800246a:	2200      	movs	r2, #0
 800246c:	84ca      	strh	r2, [r1, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800246e:	68da      	ldr	r2, [r3, #12]
 8002470:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002474:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002476:	2220      	movs	r2, #32
 8002478:	f881 2039 	strb.w	r2, [r1, #57]	; 0x39
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800247c:	695b      	ldr	r3, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800247e:	f891 203a 	ldrb.w	r2, [r1, #58]	; 0x3a
 8002482:	2a22      	cmp	r2, #34	; 0x22
 8002484:	d106      	bne.n	8002494 <UART_DMAError+0x3e>
 8002486:	065b      	lsls	r3, r3, #25
 8002488:	d504      	bpl.n	8002494 <UART_DMAError+0x3e>
    huart->RxXferCount = 0x00U;
 800248a:	2300      	movs	r3, #0
 800248c:	85cb      	strh	r3, [r1, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800248e:	4608      	mov	r0, r1
 8002490:	f7ff fe38 	bl	8002104 <UART_EndRxTransfer>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002494:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8002496:	f043 0310 	orr.w	r3, r3, #16
 800249a:	63cb      	str	r3, [r1, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 800249c:	4608      	mov	r0, r1
 800249e:	f000 fcc3 	bl	8002e28 <HAL_UART_ErrorCallback>
 80024a2:	bd08      	pop	{r3, pc}

080024a4 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80024a4:	6803      	ldr	r3, [r0, #0]
 80024a6:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80024a8:	68d9      	ldr	r1, [r3, #12]
{
 80024aa:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 80024ac:	0716      	lsls	r6, r2, #28
{
 80024ae:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80024b0:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 80024b2:	d107      	bne.n	80024c4 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80024b4:	0696      	lsls	r6, r2, #26
 80024b6:	d55c      	bpl.n	8002572 <HAL_UART_IRQHandler+0xce>
 80024b8:	068d      	lsls	r5, r1, #26
 80024ba:	d55a      	bpl.n	8002572 <HAL_UART_IRQHandler+0xce>
}
 80024bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 80024c0:	f7ff bf85 	b.w	80023ce <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80024c4:	f015 0501 	ands.w	r5, r5, #1
 80024c8:	d102      	bne.n	80024d0 <HAL_UART_IRQHandler+0x2c>
 80024ca:	f411 7f90 	tst.w	r1, #288	; 0x120
 80024ce:	d050      	beq.n	8002572 <HAL_UART_IRQHandler+0xce>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80024d0:	07d0      	lsls	r0, r2, #31
 80024d2:	d505      	bpl.n	80024e0 <HAL_UART_IRQHandler+0x3c>
 80024d4:	05cb      	lsls	r3, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80024d6:	bf42      	ittt	mi
 80024d8:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 80024da:	f043 0301 	orrmi.w	r3, r3, #1
 80024de:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024e0:	0756      	lsls	r6, r2, #29
 80024e2:	d504      	bpl.n	80024ee <HAL_UART_IRQHandler+0x4a>
 80024e4:	b11d      	cbz	r5, 80024ee <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80024e6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80024e8:	f043 0302 	orr.w	r3, r3, #2
 80024ec:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024ee:	0790      	lsls	r0, r2, #30
 80024f0:	d504      	bpl.n	80024fc <HAL_UART_IRQHandler+0x58>
 80024f2:	b11d      	cbz	r5, 80024fc <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80024f4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80024f6:	f043 0304 	orr.w	r3, r3, #4
 80024fa:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80024fc:	0713      	lsls	r3, r2, #28
 80024fe:	d506      	bpl.n	800250e <HAL_UART_IRQHandler+0x6a>
 8002500:	068e      	lsls	r6, r1, #26
 8002502:	d400      	bmi.n	8002506 <HAL_UART_IRQHandler+0x62>
 8002504:	b11d      	cbz	r5, 800250e <HAL_UART_IRQHandler+0x6a>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002506:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002508:	f043 0308 	orr.w	r3, r3, #8
 800250c:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800250e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002510:	2b00      	cmp	r3, #0
 8002512:	d066      	beq.n	80025e2 <HAL_UART_IRQHandler+0x13e>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002514:	0695      	lsls	r5, r2, #26
 8002516:	d504      	bpl.n	8002522 <HAL_UART_IRQHandler+0x7e>
 8002518:	0688      	lsls	r0, r1, #26
 800251a:	d502      	bpl.n	8002522 <HAL_UART_IRQHandler+0x7e>
        UART_Receive_IT(huart);
 800251c:	4620      	mov	r0, r4
 800251e:	f7ff ff56 	bl	80023ce <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002522:	6823      	ldr	r3, [r4, #0]
 8002524:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002526:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002528:	0711      	lsls	r1, r2, #28
        UART_EndRxTransfer(huart);
 800252a:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800252c:	d402      	bmi.n	8002534 <HAL_UART_IRQHandler+0x90>
 800252e:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8002532:	d01a      	beq.n	800256a <HAL_UART_IRQHandler+0xc6>
        UART_EndRxTransfer(huart);
 8002534:	f7ff fde6 	bl	8002104 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002538:	6823      	ldr	r3, [r4, #0]
 800253a:	695a      	ldr	r2, [r3, #20]
 800253c:	0652      	lsls	r2, r2, #25
 800253e:	d510      	bpl.n	8002562 <HAL_UART_IRQHandler+0xbe>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002540:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8002542:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002544:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002548:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 800254a:	b150      	cbz	r0, 8002562 <HAL_UART_IRQHandler+0xbe>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800254c:	4b25      	ldr	r3, [pc, #148]	; (80025e4 <HAL_UART_IRQHandler+0x140>)
 800254e:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002550:	f7fe fb1a 	bl	8000b88 <HAL_DMA_Abort_IT>
 8002554:	2800      	cmp	r0, #0
 8002556:	d044      	beq.n	80025e2 <HAL_UART_IRQHandler+0x13e>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002558:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 800255a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800255e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002560:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8002562:	4620      	mov	r0, r4
 8002564:	f000 fc60 	bl	8002e28 <HAL_UART_ErrorCallback>
 8002568:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 800256a:	f000 fc5d 	bl	8002e28 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800256e:	63e5      	str	r5, [r4, #60]	; 0x3c
 8002570:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002572:	0616      	lsls	r6, r2, #24
 8002574:	d527      	bpl.n	80025c6 <HAL_UART_IRQHandler+0x122>
 8002576:	060d      	lsls	r5, r1, #24
 8002578:	d525      	bpl.n	80025c6 <HAL_UART_IRQHandler+0x122>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800257a:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 800257e:	2a21      	cmp	r2, #33	; 0x21
 8002580:	d12f      	bne.n	80025e2 <HAL_UART_IRQHandler+0x13e>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002582:	68a2      	ldr	r2, [r4, #8]
 8002584:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002588:	6a22      	ldr	r2, [r4, #32]
 800258a:	d117      	bne.n	80025bc <HAL_UART_IRQHandler+0x118>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800258c:	8811      	ldrh	r1, [r2, #0]
 800258e:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8002592:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002594:	6921      	ldr	r1, [r4, #16]
 8002596:	b979      	cbnz	r1, 80025b8 <HAL_UART_IRQHandler+0x114>
        huart->pTxBuffPtr += 2U;
 8002598:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 800259a:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 800259c:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 800259e:	3a01      	subs	r2, #1
 80025a0:	b292      	uxth	r2, r2
 80025a2:	84e2      	strh	r2, [r4, #38]	; 0x26
 80025a4:	b9ea      	cbnz	r2, 80025e2 <HAL_UART_IRQHandler+0x13e>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80025a6:	68da      	ldr	r2, [r3, #12]
 80025a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025ac:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80025ae:	68da      	ldr	r2, [r3, #12]
 80025b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025b4:	60da      	str	r2, [r3, #12]
 80025b6:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 80025b8:	3201      	adds	r2, #1
 80025ba:	e7ee      	b.n	800259a <HAL_UART_IRQHandler+0xf6>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80025bc:	1c51      	adds	r1, r2, #1
 80025be:	6221      	str	r1, [r4, #32]
 80025c0:	7812      	ldrb	r2, [r2, #0]
 80025c2:	605a      	str	r2, [r3, #4]
 80025c4:	e7ea      	b.n	800259c <HAL_UART_IRQHandler+0xf8>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80025c6:	0650      	lsls	r0, r2, #25
 80025c8:	d50b      	bpl.n	80025e2 <HAL_UART_IRQHandler+0x13e>
 80025ca:	064a      	lsls	r2, r1, #25
 80025cc:	d509      	bpl.n	80025e2 <HAL_UART_IRQHandler+0x13e>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80025ce:	68da      	ldr	r2, [r3, #12]
 80025d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025d4:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80025d6:	2320      	movs	r3, #32
 80025d8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 80025dc:	4620      	mov	r0, r4
 80025de:	f000 fcc9 	bl	8002f74 <HAL_UART_TxCpltCallback>
 80025e2:	bd70      	pop	{r4, r5, r6, pc}
 80025e4:	080025e9 	.word	0x080025e9

080025e8 <UART_DMAAbortOnError>:
{
 80025e8:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025ea:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 80025ec:	2300      	movs	r3, #0
 80025ee:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80025f0:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80025f2:	f000 fc19 	bl	8002e28 <HAL_UART_ErrorCallback>
 80025f6:	bd08      	pop	{r3, pc}

080025f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025f8:	b530      	push	{r4, r5, lr}
 80025fa:	b0ad      	sub	sp, #180	; 0xb4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025fc:	2234      	movs	r2, #52	; 0x34
 80025fe:	2100      	movs	r1, #0
 8002600:	a808      	add	r0, sp, #32
 8002602:	f001 fa54 	bl	8003aae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002606:	2214      	movs	r2, #20
 8002608:	2100      	movs	r1, #0
 800260a:	a803      	add	r0, sp, #12
 800260c:	f001 fa4f 	bl	8003aae <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002610:	2100      	movs	r1, #0
 8002612:	225c      	movs	r2, #92	; 0x5c
 8002614:	a815      	add	r0, sp, #84	; 0x54
 8002616:	f001 fa4a 	bl	8003aae <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800261a:	2400      	movs	r4, #0
 800261c:	4b21      	ldr	r3, [pc, #132]	; (80026a4 <SystemClock_Config+0xac>)
 800261e:	9401      	str	r4, [sp, #4]
 8002620:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002622:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002626:	641a      	str	r2, [r3, #64]	; 0x40
 8002628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800262e:	9301      	str	r3, [sp, #4]
 8002630:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002632:	4b1d      	ldr	r3, [pc, #116]	; (80026a8 <SystemClock_Config+0xb0>)
 8002634:	9402      	str	r4, [sp, #8]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800263c:	601a      	str	r2, [r3, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 8002640:	940a      	str	r4, [sp, #40]	; 0x28
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002642:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002646:	9302      	str	r3, [sp, #8]
 8002648:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800264a:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800264c:	230a      	movs	r3, #10
 800264e:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002650:	2301      	movs	r3, #1
 8002652:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002654:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002656:	2308      	movs	r3, #8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002658:	2210      	movs	r2, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800265a:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLM = 8;
 800265c:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800265e:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLN = 180;
 8002660:	23b4      	movs	r3, #180	; 0xb4
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002662:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLN = 180;
 8002664:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002666:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002668:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800266a:	9513      	str	r5, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800266c:	9514      	str	r5, [sp, #80]	; 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800266e:	f7ff f82b 	bl	80016c8 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002672:	f7fe fce1 	bl	8001038 <HAL_PWREx_EnableOverDrive>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002676:	230f      	movs	r3, #15
 8002678:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800267a:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800267c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002680:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002682:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002684:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002686:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002688:	9405      	str	r4, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800268a:	f7fe fd11 	bl	80010b0 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800268e:	2320      	movs	r3, #32
 8002690:	9315      	str	r3, [sp, #84]	; 0x54
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002692:	a815      	add	r0, sp, #84	; 0x54
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002694:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002698:	9325      	str	r3, [sp, #148]	; 0x94
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800269a:	f7fe fdc5 	bl	8001228 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 800269e:	b02d      	add	sp, #180	; 0xb4
 80026a0:	bd30      	pop	{r4, r5, pc}
 80026a2:	bf00      	nop
 80026a4:	40023800 	.word	0x40023800
 80026a8:	40007000 	.word	0x40007000

080026ac <main>:
{
 80026ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026b0:	b0a7      	sub	sp, #156	; 0x9c
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026b2:	2400      	movs	r4, #0
 80026b4:	4db5      	ldr	r5, [pc, #724]	; (800298c <main+0x2e0>)
  HAL_Init();
 80026b6:	f7fd ffa7 	bl	8000608 <HAL_Init>
  SystemClock_Config();
 80026ba:	f7ff ff9d 	bl	80025f8 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026be:	2214      	movs	r2, #20
 80026c0:	2100      	movs	r1, #0
 80026c2:	a816      	add	r0, sp, #88	; 0x58
 80026c4:	f001 f9f3 	bl	8003aae <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026c8:	9404      	str	r4, [sp, #16]
 80026ca:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 80026cc:	48b0      	ldr	r0, [pc, #704]	; (8002990 <main+0x2e4>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026ce:	f043 0304 	orr.w	r3, r3, #4
 80026d2:	632b      	str	r3, [r5, #48]	; 0x30
 80026d4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80026d6:	f003 0304 	and.w	r3, r3, #4
 80026da:	9304      	str	r3, [sp, #16]
 80026dc:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80026de:	9405      	str	r4, [sp, #20]
 80026e0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80026e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026e6:	632b      	str	r3, [r5, #48]	; 0x30
 80026e8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80026ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026ee:	9305      	str	r3, [sp, #20]
 80026f0:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026f2:	9406      	str	r4, [sp, #24]
 80026f4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80026f6:	f043 0301 	orr.w	r3, r3, #1
 80026fa:	632b      	str	r3, [r5, #48]	; 0x30
 80026fc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	9306      	str	r3, [sp, #24]
 8002704:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002706:	9407      	str	r4, [sp, #28]
 8002708:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800270a:	f043 0302 	orr.w	r3, r3, #2
 800270e:	632b      	str	r3, [r5, #48]	; 0x30
 8002710:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002712:	f003 0302 	and.w	r3, r3, #2
 8002716:	9307      	str	r3, [sp, #28]
 8002718:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800271a:	9408      	str	r4, [sp, #32]
 800271c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800271e:	f043 0308 	orr.w	r3, r3, #8
 8002722:	632b      	str	r3, [r5, #48]	; 0x30
 8002724:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002726:	f003 0308 	and.w	r3, r3, #8
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 800272a:	4622      	mov	r2, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800272c:	9308      	str	r3, [sp, #32]
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 800272e:	2101      	movs	r1, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002730:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8002732:	f7fe fbcf 	bl	8000ed4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, IO_OUT_1_Pin|IO_OUT_2_Pin, GPIO_PIN_RESET);
 8002736:	4622      	mov	r2, r4
 8002738:	2109      	movs	r1, #9
 800273a:	4896      	ldr	r0, [pc, #600]	; (8002994 <main+0x2e8>)
 800273c:	f7fe fbca 	bl	8000ed4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 8002740:	4622      	mov	r2, r4
 8002742:	f241 0110 	movw	r1, #4112	; 0x1010
 8002746:	4894      	ldr	r0, [pc, #592]	; (8002998 <main+0x2ec>)
 8002748:	f7fe fbc4 	bl	8000ed4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USR_BUTT_Pin */
  GPIO_InitStruct.Pin = USR_BUTT_Pin;
 800274c:	f44f 5b00 	mov.w	fp, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USR_BUTT_GPIO_Port, &GPIO_InitStruct);
 8002750:	a916      	add	r1, sp, #88	; 0x58
 8002752:	4890      	ldr	r0, [pc, #576]	; (8002994 <main+0x2e8>)
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002754:	9417      	str	r4, [sp, #92]	; 0x5c

  /*Configure GPIO pin : LED4_Pin */
  GPIO_InitStruct.Pin = LED4_Pin;
 8002756:	2601      	movs	r6, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002758:	9418      	str	r4, [sp, #96]	; 0x60
  GPIO_InitStruct.Pin = USR_BUTT_Pin;
 800275a:	f8cd b058 	str.w	fp, [sp, #88]	; 0x58
  HAL_GPIO_Init(USR_BUTT_GPIO_Port, &GPIO_InitStruct);
 800275e:	f7fe fadf 	bl	8000d20 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 8002762:	a916      	add	r1, sp, #88	; 0x58
 8002764:	488a      	ldr	r0, [pc, #552]	; (8002990 <main+0x2e4>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002766:	9418      	str	r4, [sp, #96]	; 0x60
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002768:	9419      	str	r4, [sp, #100]	; 0x64
  GPIO_InitStruct.Pin = LED4_Pin;
 800276a:	9616      	str	r6, [sp, #88]	; 0x58
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800276c:	9617      	str	r6, [sp, #92]	; 0x5c
  HAL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 800276e:	f7fe fad7 	bl	8000d20 <HAL_GPIO_Init>

  /*Configure GPIO pin : IO_IN_2_Pin */
  GPIO_InitStruct.Pin = IO_IN_2_Pin;
 8002772:	2302      	movs	r3, #2
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(IO_IN_2_GPIO_Port, &GPIO_InitStruct);
 8002774:	a916      	add	r1, sp, #88	; 0x58
 8002776:	4886      	ldr	r0, [pc, #536]	; (8002990 <main+0x2e4>)
  GPIO_InitStruct.Pin = IO_IN_2_Pin;
 8002778:	9316      	str	r3, [sp, #88]	; 0x58
 800277a:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800277c:	9417      	str	r4, [sp, #92]	; 0x5c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277e:	9418      	str	r4, [sp, #96]	; 0x60
  HAL_GPIO_Init(IO_IN_2_GPIO_Port, &GPIO_InitStruct);
 8002780:	f7fe face 	bl	8000d20 <HAL_GPIO_Init>

  /*Configure GPIO pins : IO_OUT_1_Pin IO_OUT_2_Pin */
  GPIO_InitStruct.Pin = IO_OUT_1_Pin|IO_OUT_2_Pin;
 8002784:	2209      	movs	r2, #9
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002786:	a916      	add	r1, sp, #88	; 0x58
 8002788:	4882      	ldr	r0, [pc, #520]	; (8002994 <main+0x2e8>)
  GPIO_InitStruct.Pin = IO_OUT_1_Pin|IO_OUT_2_Pin;
 800278a:	9216      	str	r2, [sp, #88]	; 0x58

  /*Configure GPIO pin : ADC_IN_Pin */
  GPIO_InitStruct.Pin = ADC_IN_Pin;
 800278c:	f04f 0810 	mov.w	r8, #16
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002790:	9418      	str	r4, [sp, #96]	; 0x60
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002792:	9419      	str	r4, [sp, #100]	; 0x64
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002794:	9617      	str	r6, [sp, #92]	; 0x5c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002796:	f7fe fac3 	bl	8000d20 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800279a:	2303      	movs	r3, #3
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(ADC_IN_GPIO_Port, &GPIO_InitStruct);
 800279c:	a916      	add	r1, sp, #88	; 0x58
 800279e:	487f      	ldr	r0, [pc, #508]	; (800299c <main+0x2f0>)
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027a0:	9317      	str	r3, [sp, #92]	; 0x5c
  GPIO_InitStruct.Pin = ADC_IN_Pin;
 80027a2:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a6:	9418      	str	r4, [sp, #96]	; 0x60
  HAL_GPIO_Init(ADC_IN_GPIO_Port, &GPIO_InitStruct);
 80027a8:	f7fe faba 	bl	8000d20 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 80027ac:	f241 0210 	movw	r2, #4112	; 0x1010
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027b0:	a916      	add	r1, sp, #88	; 0x58
 80027b2:	4879      	ldr	r0, [pc, #484]	; (8002998 <main+0x2ec>)
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 80027b4:	9216      	str	r2, [sp, #88]	; 0x58
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b6:	9418      	str	r4, [sp, #96]	; 0x60
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027b8:	9419      	str	r4, [sp, #100]	; 0x64
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027ba:	9617      	str	r6, [sp, #92]	; 0x5c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027bc:	f7fe fab0 	bl	8000d20 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80027c0:	9403      	str	r4, [sp, #12]
 80027c2:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80027c4:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80027c8:	632a      	str	r2, [r5, #48]	; 0x30
 80027ca:	6b2a      	ldr	r2, [r5, #48]	; 0x30
  hadc1.Instance = ADC1;
 80027cc:	4d74      	ldr	r5, [pc, #464]	; (80029a0 <main+0x2f4>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 80027ce:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80027d2:	9203      	str	r2, [sp, #12]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80027d4:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 80027d6:	9a03      	ldr	r2, [sp, #12]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80027d8:	200b      	movs	r0, #11
 80027da:	4622      	mov	r2, r4
 80027dc:	f7fe f8ae 	bl	800093c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80027e0:	200b      	movs	r0, #11
 80027e2:	f7fe f8df 	bl	80009a4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80027e6:	4622      	mov	r2, r4
 80027e8:	4621      	mov	r1, r4
 80027ea:	200d      	movs	r0, #13
 80027ec:	f7fe f8a6 	bl	800093c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80027f0:	200d      	movs	r0, #13
 80027f2:	f7fe f8d7 	bl	80009a4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80027f6:	4622      	mov	r2, r4
 80027f8:	4621      	mov	r1, r4
 80027fa:	200e      	movs	r0, #14
 80027fc:	f7fe f89e 	bl	800093c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002800:	200e      	movs	r0, #14
 8002802:	f7fe f8cf 	bl	80009a4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8002806:	4622      	mov	r2, r4
 8002808:	4621      	mov	r1, r4
 800280a:	200f      	movs	r0, #15
 800280c:	f7fe f896 	bl	800093c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002810:	200f      	movs	r0, #15
 8002812:	f7fe f8c7 	bl	80009a4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002816:	4622      	mov	r2, r4
 8002818:	4621      	mov	r1, r4
 800281a:	4640      	mov	r0, r8
 800281c:	f7fe f88e 	bl	800093c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002820:	4640      	mov	r0, r8
 8002822:	f7fe f8bf 	bl	80009a4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002826:	4622      	mov	r2, r4
 8002828:	4621      	mov	r1, r4
 800282a:	2011      	movs	r0, #17
 800282c:	f7fe f886 	bl	800093c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002830:	2011      	movs	r0, #17
 8002832:	f7fe f8b7 	bl	80009a4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8002836:	4622      	mov	r2, r4
 8002838:	4621      	mov	r1, r4
 800283a:	202f      	movs	r0, #47	; 0x2f
 800283c:	f7fe f87e 	bl	800093c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8002840:	202f      	movs	r0, #47	; 0x2f
 8002842:	f7fe f8af 	bl	80009a4 <HAL_NVIC_EnableIRQ>
  ADC_ChannelConfTypeDef sConfig = {0};
 8002846:	4621      	mov	r1, r4
 8002848:	4642      	mov	r2, r8
 800284a:	a816      	add	r0, sp, #88	; 0x58
 800284c:	f001 f92f 	bl	8003aae <memset>
  hadc1.Instance = ADC1;
 8002850:	4a54      	ldr	r2, [pc, #336]	; (80029a4 <main+0x2f8>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002852:	60ac      	str	r4, [r5, #8]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002854:	e885 0014 	stmia.w	r5, {r2, r4}
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002858:	4628      	mov	r0, r5
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800285a:	4a53      	ldr	r2, [pc, #332]	; (80029a8 <main+0x2fc>)
 800285c:	62aa      	str	r2, [r5, #40]	; 0x28
  sConfig.Channel = ADC_CHANNEL_4;
 800285e:	f04f 0904 	mov.w	r9, #4
  hadc1.Init.ScanConvMode = DISABLE;
 8002862:	612c      	str	r4, [r5, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002864:	762c      	strb	r4, [r5, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002866:	f885 4020 	strb.w	r4, [r5, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800286a:	62ec      	str	r4, [r5, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800286c:	60ec      	str	r4, [r5, #12]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800286e:	f885 4030 	strb.w	r4, [r5, #48]	; 0x30
  hadc1.Init.NbrOfConversion = 1;
 8002872:	61ee      	str	r6, [r5, #28]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002874:	616e      	str	r6, [r5, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002876:	f7fd ff07 	bl	8000688 <HAL_ADC_Init>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800287a:	a916      	add	r1, sp, #88	; 0x58
 800287c:	4628      	mov	r0, r5
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800287e:	9418      	str	r4, [sp, #96]	; 0x60
  sConfig.Channel = ADC_CHANNEL_4;
 8002880:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
  sConfig.Rank = 1;
 8002884:	9617      	str	r6, [sp, #92]	; 0x5c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002886:	f7fd ffa5 	bl	80007d4 <HAL_ADC_ConfigChannel>
  hi2c1.Init.ClockSpeed = 100000;
 800288a:	4b48      	ldr	r3, [pc, #288]	; (80029ac <main+0x300>)
  hi2c1.Instance = I2C1;
 800288c:	4848      	ldr	r0, [pc, #288]	; (80029b0 <main+0x304>)
  hi2c1.Init.ClockSpeed = 100000;
 800288e:	4a49      	ldr	r2, [pc, #292]	; (80029b4 <main+0x308>)
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002890:	6084      	str	r4, [r0, #8]
  hi2c1.Init.ClockSpeed = 100000;
 8002892:	e880 000c 	stmia.w	r0, {r2, r3}
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002896:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c1.Init.OwnAddress1 = 0;
 800289a:	60c4      	str	r4, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800289c:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800289e:	6144      	str	r4, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80028a0:	6184      	str	r4, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80028a2:	61c4      	str	r4, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80028a4:	6204      	str	r4, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80028a6:	f7fe fb1b 	bl	8000ee0 <HAL_I2C_Init>
  hrtc.Instance = RTC;
 80028aa:	4843      	ldr	r0, [pc, #268]	; (80029b8 <main+0x30c>)
 80028ac:	4a43      	ldr	r2, [pc, #268]	; (80029bc <main+0x310>)
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80028ae:	6104      	str	r4, [r0, #16]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80028b0:	e880 0014 	stmia.w	r0, {r2, r4}
  hrtc.Init.AsynchPrediv = 127;
 80028b4:	227f      	movs	r2, #127	; 0x7f
 80028b6:	6082      	str	r2, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 80028b8:	22ff      	movs	r2, #255	; 0xff
 80028ba:	60c2      	str	r2, [r0, #12]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80028bc:	6144      	str	r4, [r0, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80028be:	6184      	str	r4, [r0, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80028c0:	f7ff f8ce 	bl	8001a60 <HAL_RTC_Init>
  hspi2.Instance = SPI2;
 80028c4:	483e      	ldr	r0, [pc, #248]	; (80029c0 <main+0x314>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80028c6:	493f      	ldr	r1, [pc, #252]	; (80029c4 <main+0x318>)
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80028c8:	6084      	str	r4, [r0, #8]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80028ca:	f44f 7282 	mov.w	r2, #260	; 0x104
 80028ce:	e880 0006 	stmia.w	r0, {r1, r2}
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80028d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028d6:	6182      	str	r2, [r0, #24]
  hspi2.Init.CRCPolynomial = 10;
 80028d8:	220a      	movs	r2, #10
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80028da:	60c4      	str	r4, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80028dc:	6104      	str	r4, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80028de:	6144      	str	r4, [r0, #20]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80028e0:	61c4      	str	r4, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80028e2:	6204      	str	r4, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80028e4:	6244      	str	r4, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028e6:	6284      	str	r4, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80028e8:	62c2      	str	r2, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80028ea:	f7ff f907 	bl	8001afc <HAL_SPI_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028ee:	4642      	mov	r2, r8
 80028f0:	4621      	mov	r1, r4
 80028f2:	a80b      	add	r0, sp, #44	; 0x2c
 80028f4:	f001 f8db 	bl	8003aae <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80028f8:	4621      	mov	r1, r4
 80028fa:	221c      	movs	r2, #28
 80028fc:	a80f      	add	r0, sp, #60	; 0x3c
  htim1.Instance = TIM1;
 80028fe:	4d32      	ldr	r5, [pc, #200]	; (80029c8 <main+0x31c>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002900:	9409      	str	r4, [sp, #36]	; 0x24
 8002902:	940a      	str	r4, [sp, #40]	; 0x28
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002904:	f001 f8d3 	bl	8003aae <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002908:	4621      	mov	r1, r4
 800290a:	2220      	movs	r2, #32
 800290c:	a816      	add	r0, sp, #88	; 0x58
 800290e:	f001 f8ce 	bl	8003aae <memset>
  htim1.Instance = TIM1;
 8002912:	4a2e      	ldr	r2, [pc, #184]	; (80029cc <main+0x320>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002914:	60ac      	str	r4, [r5, #8]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002916:	4628      	mov	r0, r5
  htim1.Init.Prescaler = 0;
 8002918:	e885 0014 	stmia.w	r5, {r2, r4}
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800291c:	f44f 5a80 	mov.w	sl, #4096	; 0x1000
  htim1.Init.Period = 0;
 8002920:	60ec      	str	r4, [r5, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002922:	612c      	str	r4, [r5, #16]
  htim1.Init.RepetitionCounter = 0;
 8002924:	616c      	str	r4, [r5, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002926:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002928:	f7ff fa1a 	bl	8001d60 <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800292c:	a90b      	add	r1, sp, #44	; 0x2c
 800292e:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002930:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002934:	f7ff faea 	bl	8001f0c <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002938:	4628      	mov	r0, r5
 800293a:	f7ff fa2b 	bl	8001d94 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800293e:	a909      	add	r1, sp, #36	; 0x24
 8002940:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002942:	2760      	movs	r7, #96	; 0x60
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002944:	9409      	str	r4, [sp, #36]	; 0x24
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002946:	940a      	str	r4, [sp, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002948:	f7ff fb74 	bl	8002034 <HAL_TIMEx_MasterConfigSynchronization>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800294c:	4622      	mov	r2, r4
 800294e:	a90f      	add	r1, sp, #60	; 0x3c
 8002950:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002952:	970f      	str	r7, [sp, #60]	; 0x3c
  sConfigOC.Pulse = 0;
 8002954:	9410      	str	r4, [sp, #64]	; 0x40
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002956:	9411      	str	r4, [sp, #68]	; 0x44
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002958:	9412      	str	r4, [sp, #72]	; 0x48
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800295a:	9413      	str	r4, [sp, #76]	; 0x4c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800295c:	9414      	str	r4, [sp, #80]	; 0x50
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800295e:	9415      	str	r4, [sp, #84]	; 0x54
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002960:	f7ff fa68 	bl	8001e34 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002964:	464a      	mov	r2, r9
 8002966:	a90f      	add	r1, sp, #60	; 0x3c
 8002968:	4628      	mov	r0, r5
 800296a:	f7ff fa63 	bl	8001e34 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800296e:	2208      	movs	r2, #8
 8002970:	a90f      	add	r1, sp, #60	; 0x3c
 8002972:	4628      	mov	r0, r5
 8002974:	f7ff fa5e 	bl	8001e34 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002978:	220c      	movs	r2, #12
 800297a:	a90f      	add	r1, sp, #60	; 0x3c
 800297c:	4628      	mov	r0, r5
 800297e:	f7ff fa59 	bl	8001e34 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002982:	a916      	add	r1, sp, #88	; 0x58
 8002984:	4628      	mov	r0, r5
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002986:	9416      	str	r4, [sp, #88]	; 0x58
 8002988:	e022      	b.n	80029d0 <main+0x324>
 800298a:	bf00      	nop
 800298c:	40023800 	.word	0x40023800
 8002990:	40021c00 	.word	0x40021c00
 8002994:	40020800 	.word	0x40020800
 8002998:	40020400 	.word	0x40020400
 800299c:	40020000 	.word	0x40020000
 80029a0:	20002c50 	.word	0x20002c50
 80029a4:	40012000 	.word	0x40012000
 80029a8:	0f000001 	.word	0x0f000001
 80029ac:	000186a0 	.word	0x000186a0
 80029b0:	20002a9c 	.word	0x20002a9c
 80029b4:	40005400 	.word	0x40005400
 80029b8:	20002d80 	.word	0x20002d80
 80029bc:	40002800 	.word	0x40002800
 80029c0:	20002a04 	.word	0x20002a04
 80029c4:	40003800 	.word	0x40003800
 80029c8:	20002da0 	.word	0x20002da0
 80029cc:	40010000 	.word	0x40010000
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80029d0:	9417      	str	r4, [sp, #92]	; 0x5c
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80029d2:	9418      	str	r4, [sp, #96]	; 0x60
  sBreakDeadTimeConfig.DeadTime = 0;
 80029d4:	9419      	str	r4, [sp, #100]	; 0x64
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80029d6:	941a      	str	r4, [sp, #104]	; 0x68
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80029d8:	941d      	str	r4, [sp, #116]	; 0x74
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80029da:	f8cd b06c 	str.w	fp, [sp, #108]	; 0x6c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80029de:	f7ff fb6b 	bl	80020b8 <HAL_TIMEx_ConfigBreakDeadTime>
  HAL_TIM_MspPostInit(&htim1);
 80029e2:	4628      	mov	r0, r5
 80029e4:	f000 fd12 	bl	800340c <HAL_TIM_MspPostInit>
  htim2.Instance = TIM2;
 80029e8:	4db9      	ldr	r5, [pc, #740]	; (8002cd0 <main+0x624>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029ea:	4642      	mov	r2, r8
 80029ec:	4621      	mov	r1, r4
 80029ee:	a80f      	add	r0, sp, #60	; 0x3c
 80029f0:	f001 f85d 	bl	8003aae <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80029f4:	4621      	mov	r1, r4
 80029f6:	221c      	movs	r2, #28
 80029f8:	a816      	add	r0, sp, #88	; 0x58
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029fa:	940b      	str	r4, [sp, #44]	; 0x2c
 80029fc:	940c      	str	r4, [sp, #48]	; 0x30
  TIM_OC_InitTypeDef sConfigOC = {0};
 80029fe:	f001 f856 	bl	8003aae <memset>
  htim2.Instance = TIM2;
 8002a02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002a06:	4628      	mov	r0, r5
  htim2.Init.Prescaler = 0;
 8002a08:	e885 0014 	stmia.w	r5, {r2, r4}
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a0c:	60ac      	str	r4, [r5, #8]
  htim2.Init.Period = 0;
 8002a0e:	60ec      	str	r4, [r5, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a10:	612c      	str	r4, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a12:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002a14:	f7ff f9a4 	bl	8001d60 <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002a18:	a90f      	add	r1, sp, #60	; 0x3c
 8002a1a:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a1c:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002a20:	f7ff fa74 	bl	8001f0c <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002a24:	4628      	mov	r0, r5
 8002a26:	f7ff f9b5 	bl	8001d94 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002a2a:	a90b      	add	r1, sp, #44	; 0x2c
 8002a2c:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a2e:	940b      	str	r4, [sp, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a30:	940c      	str	r4, [sp, #48]	; 0x30
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002a32:	f7ff faff 	bl	8002034 <HAL_TIMEx_MasterConfigSynchronization>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a36:	4622      	mov	r2, r4
 8002a38:	a916      	add	r1, sp, #88	; 0x58
 8002a3a:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a3c:	9716      	str	r7, [sp, #88]	; 0x58
  sConfigOC.Pulse = 0;
 8002a3e:	9417      	str	r4, [sp, #92]	; 0x5c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a40:	9418      	str	r4, [sp, #96]	; 0x60
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a42:	941a      	str	r4, [sp, #104]	; 0x68
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a44:	f7ff f9f6 	bl	8001e34 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002a48:	464a      	mov	r2, r9
 8002a4a:	a916      	add	r1, sp, #88	; 0x58
 8002a4c:	4628      	mov	r0, r5
 8002a4e:	f7ff f9f1 	bl	8001e34 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002a52:	2208      	movs	r2, #8
 8002a54:	a916      	add	r1, sp, #88	; 0x58
 8002a56:	4628      	mov	r0, r5
 8002a58:	f7ff f9ec 	bl	8001e34 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002a5c:	220c      	movs	r2, #12
 8002a5e:	a916      	add	r1, sp, #88	; 0x58
 8002a60:	4628      	mov	r0, r5
 8002a62:	f7ff f9e7 	bl	8001e34 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim2);
 8002a66:	4628      	mov	r0, r5
 8002a68:	f000 fcd0 	bl	800340c <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a6c:	4642      	mov	r2, r8
 8002a6e:	4621      	mov	r1, r4
 8002a70:	a80f      	add	r0, sp, #60	; 0x3c
  htim3.Instance = TIM3;
 8002a72:	4d98      	ldr	r5, [pc, #608]	; (8002cd4 <main+0x628>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a74:	f001 f81b 	bl	8003aae <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a78:	4621      	mov	r1, r4
 8002a7a:	221c      	movs	r2, #28
 8002a7c:	a816      	add	r0, sp, #88	; 0x58
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a7e:	940b      	str	r4, [sp, #44]	; 0x2c
 8002a80:	940c      	str	r4, [sp, #48]	; 0x30
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a82:	f001 f814 	bl	8003aae <memset>
  htim3.Instance = TIM3;
 8002a86:	4a94      	ldr	r2, [pc, #592]	; (8002cd8 <main+0x62c>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a88:	60ac      	str	r4, [r5, #8]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002a8a:	4628      	mov	r0, r5
  htim3.Init.Prescaler = 0;
 8002a8c:	e885 0014 	stmia.w	r5, {r2, r4}
  htim3.Init.Period = 0;
 8002a90:	60ec      	str	r4, [r5, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a92:	612c      	str	r4, [r5, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a94:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002a96:	f7ff f963 	bl	8001d60 <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002a9a:	a90f      	add	r1, sp, #60	; 0x3c
 8002a9c:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a9e:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002aa2:	f7ff fa33 	bl	8001f0c <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002aa6:	4628      	mov	r0, r5
 8002aa8:	f7ff f974 	bl	8001d94 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002aac:	a90b      	add	r1, sp, #44	; 0x2c
 8002aae:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ab0:	940b      	str	r4, [sp, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ab2:	940c      	str	r4, [sp, #48]	; 0x30
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002ab4:	f7ff fabe 	bl	8002034 <HAL_TIMEx_MasterConfigSynchronization>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002ab8:	4622      	mov	r2, r4
 8002aba:	a916      	add	r1, sp, #88	; 0x58
 8002abc:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002abe:	9716      	str	r7, [sp, #88]	; 0x58
  sConfigOC.Pulse = 0;
 8002ac0:	9417      	str	r4, [sp, #92]	; 0x5c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ac2:	9418      	str	r4, [sp, #96]	; 0x60
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ac4:	941a      	str	r4, [sp, #104]	; 0x68
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002ac6:	f7ff f9b5 	bl	8001e34 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002aca:	464a      	mov	r2, r9
 8002acc:	a916      	add	r1, sp, #88	; 0x58
 8002ace:	4628      	mov	r0, r5
 8002ad0:	f7ff f9b0 	bl	8001e34 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002ad4:	2208      	movs	r2, #8
 8002ad6:	a916      	add	r1, sp, #88	; 0x58
 8002ad8:	4628      	mov	r0, r5
 8002ada:	f7ff f9ab 	bl	8001e34 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002ade:	220c      	movs	r2, #12
 8002ae0:	a916      	add	r1, sp, #88	; 0x58
 8002ae2:	4628      	mov	r0, r5
 8002ae4:	f7ff f9a6 	bl	8001e34 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim3);
 8002ae8:	4628      	mov	r0, r5
 8002aea:	f000 fc8f 	bl	800340c <HAL_TIM_MspPostInit>
  htim5.Instance = TIM5;
 8002aee:	4d7b      	ldr	r5, [pc, #492]	; (8002cdc <main+0x630>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002af0:	940f      	str	r4, [sp, #60]	; 0x3c
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002af2:	4621      	mov	r1, r4
 8002af4:	221c      	movs	r2, #28
 8002af6:	a816      	add	r0, sp, #88	; 0x58
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002af8:	9410      	str	r4, [sp, #64]	; 0x40
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002afa:	f000 ffd8 	bl	8003aae <memset>
  htim5.Instance = TIM5;
 8002afe:	4a78      	ldr	r2, [pc, #480]	; (8002ce0 <main+0x634>)
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b00:	60ac      	str	r4, [r5, #8]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002b02:	4628      	mov	r0, r5
  htim5.Init.Prescaler = 0;
 8002b04:	e885 0014 	stmia.w	r5, {r2, r4}
  htim5.Init.Period = 0;
 8002b08:	60ec      	str	r4, [r5, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b0a:	612c      	str	r4, [r5, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b0c:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002b0e:	f7ff f941 	bl	8001d94 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002b12:	a90f      	add	r1, sp, #60	; 0x3c
 8002b14:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b16:	940f      	str	r4, [sp, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b18:	9410      	str	r4, [sp, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002b1a:	f7ff fa8b 	bl	8002034 <HAL_TIMEx_MasterConfigSynchronization>
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b1e:	4622      	mov	r2, r4
 8002b20:	a916      	add	r1, sp, #88	; 0x58
 8002b22:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b24:	9716      	str	r7, [sp, #88]	; 0x58
  sConfigOC.Pulse = 0;
 8002b26:	9417      	str	r4, [sp, #92]	; 0x5c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b28:	9418      	str	r4, [sp, #96]	; 0x60
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b2a:	941a      	str	r4, [sp, #104]	; 0x68
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b2c:	f7ff f982 	bl	8001e34 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002b30:	464a      	mov	r2, r9
 8002b32:	a916      	add	r1, sp, #88	; 0x58
 8002b34:	4628      	mov	r0, r5
 8002b36:	f7ff f97d 	bl	8001e34 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim5);
 8002b3a:	4628      	mov	r0, r5
 8002b3c:	f000 fc66 	bl	800340c <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b40:	4642      	mov	r2, r8
 8002b42:	4621      	mov	r1, r4
 8002b44:	a80b      	add	r0, sp, #44	; 0x2c
 8002b46:	f000 ffb2 	bl	8003aae <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b4a:	4621      	mov	r1, r4
 8002b4c:	221c      	movs	r2, #28
 8002b4e:	a80f      	add	r0, sp, #60	; 0x3c
  htim8.Instance = TIM8;
 8002b50:	4d64      	ldr	r5, [pc, #400]	; (8002ce4 <main+0x638>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b52:	9409      	str	r4, [sp, #36]	; 0x24
 8002b54:	940a      	str	r4, [sp, #40]	; 0x28
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b56:	f000 ffaa 	bl	8003aae <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002b5a:	4621      	mov	r1, r4
 8002b5c:	2220      	movs	r2, #32
 8002b5e:	a816      	add	r0, sp, #88	; 0x58
 8002b60:	f000 ffa5 	bl	8003aae <memset>
  htim8.Instance = TIM8;
 8002b64:	4a60      	ldr	r2, [pc, #384]	; (8002ce8 <main+0x63c>)
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b66:	60ac      	str	r4, [r5, #8]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002b68:	4628      	mov	r0, r5
  htim8.Init.Prescaler = 0;
 8002b6a:	e885 0014 	stmia.w	r5, {r2, r4}
  htim8.Init.Period = 0;
 8002b6e:	60ec      	str	r4, [r5, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b70:	612c      	str	r4, [r5, #16]
  htim8.Init.RepetitionCounter = 0;
 8002b72:	616c      	str	r4, [r5, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b74:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002b76:	f7ff f8f3 	bl	8001d60 <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002b7a:	a90b      	add	r1, sp, #44	; 0x2c
 8002b7c:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b7e:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002b82:	f7ff f9c3 	bl	8001f0c <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002b86:	4628      	mov	r0, r5
 8002b88:	f7ff f904 	bl	8001d94 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002b8c:	a909      	add	r1, sp, #36	; 0x24
 8002b8e:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b90:	9409      	str	r4, [sp, #36]	; 0x24
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b92:	940a      	str	r4, [sp, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002b94:	f7ff fa4e 	bl	8002034 <HAL_TIMEx_MasterConfigSynchronization>
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b98:	4622      	mov	r2, r4
 8002b9a:	a90f      	add	r1, sp, #60	; 0x3c
 8002b9c:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b9e:	970f      	str	r7, [sp, #60]	; 0x3c
  sConfigOC.Pulse = 0;
 8002ba0:	9410      	str	r4, [sp, #64]	; 0x40
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ba2:	9411      	str	r4, [sp, #68]	; 0x44
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002ba4:	9412      	str	r4, [sp, #72]	; 0x48
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ba6:	9413      	str	r4, [sp, #76]	; 0x4c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002ba8:	9414      	str	r4, [sp, #80]	; 0x50
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002baa:	9415      	str	r4, [sp, #84]	; 0x54
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002bac:	f7ff f942 	bl	8001e34 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002bb0:	464a      	mov	r2, r9
 8002bb2:	a90f      	add	r1, sp, #60	; 0x3c
 8002bb4:	4628      	mov	r0, r5
 8002bb6:	f7ff f93d 	bl	8001e34 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002bba:	2208      	movs	r2, #8
 8002bbc:	a90f      	add	r1, sp, #60	; 0x3c
 8002bbe:	4628      	mov	r0, r5
 8002bc0:	f7ff f938 	bl	8001e34 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002bc4:	220c      	movs	r2, #12
 8002bc6:	a90f      	add	r1, sp, #60	; 0x3c
 8002bc8:	4628      	mov	r0, r5
 8002bca:	f7ff f933 	bl	8001e34 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002bce:	a916      	add	r1, sp, #88	; 0x58
 8002bd0:	4628      	mov	r0, r5
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002bd2:	9416      	str	r4, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002bd4:	9417      	str	r4, [sp, #92]	; 0x5c
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002bd6:	9418      	str	r4, [sp, #96]	; 0x60
  sBreakDeadTimeConfig.DeadTime = 0;
 8002bd8:	9419      	str	r4, [sp, #100]	; 0x64
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002bda:	941a      	str	r4, [sp, #104]	; 0x68
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002bdc:	941d      	str	r4, [sp, #116]	; 0x74
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002bde:	f8cd b06c 	str.w	fp, [sp, #108]	; 0x6c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002be2:	f7ff fa69 	bl	80020b8 <HAL_TIMEx_ConfigBreakDeadTime>
  HAL_TIM_MspPostInit(&htim8);
 8002be6:	4628      	mov	r0, r5
 8002be8:	f000 fc10 	bl	800340c <HAL_TIM_MspPostInit>
  htim10.Instance = TIM10;
 8002bec:	4d3f      	ldr	r5, [pc, #252]	; (8002cec <main+0x640>)
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002bee:	4621      	mov	r1, r4
 8002bf0:	221c      	movs	r2, #28
 8002bf2:	a816      	add	r0, sp, #88	; 0x58
 8002bf4:	f000 ff5b 	bl	8003aae <memset>
  htim10.Instance = TIM10;
 8002bf8:	4a3d      	ldr	r2, [pc, #244]	; (8002cf0 <main+0x644>)
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bfa:	60ac      	str	r4, [r5, #8]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002bfc:	4628      	mov	r0, r5
  htim10.Init.Prescaler = 0;
 8002bfe:	e885 0014 	stmia.w	r5, {r2, r4}
  htim10.Init.Period = 0;
 8002c02:	60ec      	str	r4, [r5, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c04:	612c      	str	r4, [r5, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c06:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002c08:	f7ff f8aa 	bl	8001d60 <HAL_TIM_Base_Init>
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8002c0c:	4628      	mov	r0, r5
 8002c0e:	f7ff f8c1 	bl	8001d94 <HAL_TIM_PWM_Init>
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c12:	4622      	mov	r2, r4
 8002c14:	a916      	add	r1, sp, #88	; 0x58
 8002c16:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c18:	9716      	str	r7, [sp, #88]	; 0x58
  sConfigOC.Pulse = 0;
 8002c1a:	9417      	str	r4, [sp, #92]	; 0x5c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c1c:	9418      	str	r4, [sp, #96]	; 0x60
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c1e:	941a      	str	r4, [sp, #104]	; 0x68
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c20:	f7ff f908 	bl	8001e34 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim10);
 8002c24:	4628      	mov	r0, r5
 8002c26:	f000 fbf1 	bl	800340c <HAL_TIM_MspPostInit>
  htim11.Instance = TIM11;
 8002c2a:	4d32      	ldr	r5, [pc, #200]	; (8002cf4 <main+0x648>)
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c2c:	4621      	mov	r1, r4
 8002c2e:	221c      	movs	r2, #28
 8002c30:	a816      	add	r0, sp, #88	; 0x58
 8002c32:	f000 ff3c 	bl	8003aae <memset>
  htim11.Instance = TIM11;
 8002c36:	4a30      	ldr	r2, [pc, #192]	; (8002cf8 <main+0x64c>)
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c38:	60ac      	str	r4, [r5, #8]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002c3a:	4628      	mov	r0, r5
  htim11.Init.Prescaler = 0;
 8002c3c:	e885 0014 	stmia.w	r5, {r2, r4}
  htim11.Init.Period = 0;
 8002c40:	60ec      	str	r4, [r5, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c42:	612c      	str	r4, [r5, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c44:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002c46:	f7ff f88b 	bl	8001d60 <HAL_TIM_Base_Init>
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8002c4a:	4628      	mov	r0, r5
 8002c4c:	f7ff f8a2 	bl	8001d94 <HAL_TIM_PWM_Init>
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c50:	4622      	mov	r2, r4
 8002c52:	a916      	add	r1, sp, #88	; 0x58
 8002c54:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c56:	9716      	str	r7, [sp, #88]	; 0x58
  sConfigOC.Pulse = 0;
 8002c58:	9417      	str	r4, [sp, #92]	; 0x5c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c5a:	9418      	str	r4, [sp, #96]	; 0x60
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c5c:	941a      	str	r4, [sp, #104]	; 0x68
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c5e:	f7ff f8e9 	bl	8001e34 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim11);
 8002c62:	4628      	mov	r0, r5
 8002c64:	f000 fbd2 	bl	800340c <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c68:	4642      	mov	r2, r8
 8002c6a:	4621      	mov	r1, r4
 8002c6c:	a80f      	add	r0, sp, #60	; 0x3c
 8002c6e:	f000 ff1e 	bl	8003aae <memset>
  htim12.Instance = TIM12;
 8002c72:	4d22      	ldr	r5, [pc, #136]	; (8002cfc <main+0x650>)
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c74:	4621      	mov	r1, r4
 8002c76:	221c      	movs	r2, #28
 8002c78:	a816      	add	r0, sp, #88	; 0x58
 8002c7a:	f000 ff18 	bl	8003aae <memset>
  htim12.Instance = TIM12;
 8002c7e:	4a20      	ldr	r2, [pc, #128]	; (8002d00 <main+0x654>)
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c80:	60ac      	str	r4, [r5, #8]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8002c82:	4628      	mov	r0, r5
  htim12.Init.Prescaler = 0;
 8002c84:	e885 0014 	stmia.w	r5, {r2, r4}
  htim12.Init.Period = 0;
 8002c88:	60ec      	str	r4, [r5, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c8a:	612c      	str	r4, [r5, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c8c:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8002c8e:	f7ff f867 	bl	8001d60 <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8002c92:	a90f      	add	r1, sp, #60	; 0x3c
 8002c94:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c96:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8002c9a:	f7ff f937 	bl	8001f0c <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8002c9e:	4628      	mov	r0, r5
 8002ca0:	f7ff f878 	bl	8001d94 <HAL_TIM_PWM_Init>
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002ca4:	4622      	mov	r2, r4
 8002ca6:	a916      	add	r1, sp, #88	; 0x58
 8002ca8:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002caa:	9716      	str	r7, [sp, #88]	; 0x58
  sConfigOC.Pulse = 0;
 8002cac:	9417      	str	r4, [sp, #92]	; 0x5c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002cae:	9418      	str	r4, [sp, #96]	; 0x60
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002cb0:	941a      	str	r4, [sp, #104]	; 0x68
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002cb2:	f7ff f8bf 	bl	8001e34 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim12);
 8002cb6:	4628      	mov	r0, r5
 8002cb8:	f000 fba8 	bl	800340c <HAL_TIM_MspPostInit>
  htim14.Instance = TIM14;
 8002cbc:	4d11      	ldr	r5, [pc, #68]	; (8002d04 <main+0x658>)
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002cbe:	4621      	mov	r1, r4
 8002cc0:	221c      	movs	r2, #28
 8002cc2:	a816      	add	r0, sp, #88	; 0x58
 8002cc4:	f000 fef3 	bl	8003aae <memset>
  htim14.Instance = TIM14;
 8002cc8:	4a0f      	ldr	r2, [pc, #60]	; (8002d08 <main+0x65c>)
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cca:	60ac      	str	r4, [r5, #8]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002ccc:	4628      	mov	r0, r5
 8002cce:	e01d      	b.n	8002d0c <main+0x660>
 8002cd0:	20002e20 	.word	0x20002e20
 8002cd4:	20002bd0 	.word	0x20002bd0
 8002cd8:	40000400 	.word	0x40000400
 8002cdc:	20002b90 	.word	0x20002b90
 8002ce0:	40000c00 	.word	0x40000c00
 8002ce4:	20002a5c 	.word	0x20002a5c
 8002ce8:	40010400 	.word	0x40010400
 8002cec:	20002af0 	.word	0x20002af0
 8002cf0:	40014400 	.word	0x40014400
 8002cf4:	20002cf8 	.word	0x20002cf8
 8002cf8:	40014800 	.word	0x40014800
 8002cfc:	20002f40 	.word	0x20002f40
 8002d00:	40001800 	.word	0x40001800
 8002d04:	20002f00 	.word	0x20002f00
 8002d08:	40002000 	.word	0x40002000
  htim14.Init.Prescaler = 0;
 8002d0c:	e885 0014 	stmia.w	r5, {r2, r4}
  htim14.Init.Period = 0;
 8002d10:	60ec      	str	r4, [r5, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d12:	612c      	str	r4, [r5, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d14:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002d16:	f7ff f823 	bl	8001d60 <HAL_TIM_Base_Init>
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8002d1a:	4628      	mov	r0, r5
 8002d1c:	f7ff f83a 	bl	8001d94 <HAL_TIM_PWM_Init>
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d20:	a916      	add	r1, sp, #88	; 0x58
 8002d22:	4622      	mov	r2, r4
 8002d24:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d26:	9716      	str	r7, [sp, #88]	; 0x58
  sConfigOC.Pulse = 0;
 8002d28:	9417      	str	r4, [sp, #92]	; 0x5c
  huart4.Instance = UART4;
 8002d2a:	4f35      	ldr	r7, [pc, #212]	; (8002e00 <main+0x754>)
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d2c:	9418      	str	r4, [sp, #96]	; 0x60
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d2e:	941a      	str	r4, [sp, #104]	; 0x68
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d30:	f7ff f880 	bl	8001e34 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim14);
 8002d34:	4628      	mov	r0, r5
 8002d36:	f000 fb69 	bl	800340c <HAL_TIM_MspPostInit>
  huart4.Init.BaudRate = 9600;
 8002d3a:	4a32      	ldr	r2, [pc, #200]	; (8002e04 <main+0x758>)
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002d3c:	60bc      	str	r4, [r7, #8]
  huart4.Init.BaudRate = 9600;
 8002d3e:	f44f 5a16 	mov.w	sl, #9600	; 0x2580
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002d42:	f04f 080c 	mov.w	r8, #12
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002d46:	4638      	mov	r0, r7
  huart4.Init.BaudRate = 9600;
 8002d48:	e887 0404 	stmia.w	r7, {r2, sl}
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002d4c:	60fc      	str	r4, [r7, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002d4e:	613c      	str	r4, [r7, #16]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d50:	61bc      	str	r4, [r7, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d52:	61fc      	str	r4, [r7, #28]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002d54:	f8c7 8014 	str.w	r8, [r7, #20]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002d58:	f7ff fa50 	bl	80021fc <HAL_UART_Init>
  huart5.Instance = UART5;
 8002d5c:	482a      	ldr	r0, [pc, #168]	; (8002e08 <main+0x75c>)
 8002d5e:	4a2b      	ldr	r2, [pc, #172]	; (8002e0c <main+0x760>)
  huart2.Instance = USART2;
 8002d60:	4d2b      	ldr	r5, [pc, #172]	; (8002e10 <main+0x764>)
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002d62:	6084      	str	r4, [r0, #8]
  huart5.Init.BaudRate = 9600;
 8002d64:	e880 0404 	stmia.w	r0, {r2, sl}
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002d68:	60c4      	str	r4, [r0, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002d6a:	6104      	str	r4, [r0, #16]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d6c:	6184      	str	r4, [r0, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d6e:	61c4      	str	r4, [r0, #28]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002d70:	f8c0 8014 	str.w	r8, [r0, #20]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002d74:	f7ff fa42 	bl	80021fc <HAL_UART_Init>
  huart2.Instance = USART2;
 8002d78:	4a26      	ldr	r2, [pc, #152]	; (8002e14 <main+0x768>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002d7a:	60ac      	str	r4, [r5, #8]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002d7c:	4628      	mov	r0, r5
  huart2.Init.BaudRate = 9600;
 8002d7e:	e885 0404 	stmia.w	r5, {r2, sl}
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002d82:	60ec      	str	r4, [r5, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002d84:	612c      	str	r4, [r5, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d86:	61ac      	str	r4, [r5, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d88:	61ec      	str	r4, [r5, #28]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002d8a:	f8c5 8014 	str.w	r8, [r5, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002d8e:	f7ff fa35 	bl	80021fc <HAL_UART_Init>
  HAL_Serial_Init(&huart4, &FTDI_hserial);
 8002d92:	4921      	ldr	r1, [pc, #132]	; (8002e18 <main+0x76c>)
    if(len=HAL_LineBuffer_Read(&FTDI_hlinebuffer, cmd_line, sizeof(cmd_line)))
 8002d94:	4c21      	ldr	r4, [pc, #132]	; (8002e1c <main+0x770>)
  HAL_Serial_Init(&huart4, &FTDI_hserial);
 8002d96:	4638      	mov	r0, r7
 8002d98:	f000 f874 	bl	8002e84 <HAL_Serial_Init>
  HAL_Serial_Init(&huart2, &BT_hserial);
 8002d9c:	4628      	mov	r0, r5
 8002d9e:	4920      	ldr	r1, [pc, #128]	; (8002e20 <main+0x774>)
      HAL_Serial_Write(&FTDI_hserial, (uint8_t *)cmd_line, len);
 8002da0:	4d1d      	ldr	r5, [pc, #116]	; (8002e18 <main+0x76c>)
  HAL_Serial_Init(&huart2, &BT_hserial);
 8002da2:	f000 f86f 	bl	8002e84 <HAL_Serial_Init>
  HAL_LineBuffer_Init(&FTDI_hlinebuffer, &FTDI_hserial);
 8002da6:	491c      	ldr	r1, [pc, #112]	; (8002e18 <main+0x76c>)
 8002da8:	481c      	ldr	r0, [pc, #112]	; (8002e1c <main+0x770>)
 8002daa:	f000 f92d 	bl	8003008 <HAL_LineBuffer_Init>
  LedSwitch(2,GPIO_PIN_SET);
 8002dae:	9b01      	ldr	r3, [sp, #4]
 8002db0:	4631      	mov	r1, r6
 8002db2:	4618      	mov	r0, r3
 8002db4:	f000 fdec 	bl	8003990 <LedSwitch>
  LedSwitch(3,GPIO_PIN_SET);
 8002db8:	4631      	mov	r1, r6
 8002dba:	2003      	movs	r0, #3
 8002dbc:	f000 fde8 	bl	8003990 <LedSwitch>
  LedSwitch(4,GPIO_PIN_SET);
 8002dc0:	4631      	mov	r1, r6
 8002dc2:	4648      	mov	r0, r9
 8002dc4:	f000 fde4 	bl	8003990 <LedSwitch>
    LedSwitch(4, GPIO_PIN_RESET);
 8002dc8:	2100      	movs	r1, #0
 8002dca:	2004      	movs	r0, #4
 8002dcc:	f000 fde0 	bl	8003990 <LedSwitch>
    if(len=HAL_LineBuffer_Read(&FTDI_hlinebuffer, cmd_line, sizeof(cmd_line)))
 8002dd0:	2240      	movs	r2, #64	; 0x40
 8002dd2:	a916      	add	r1, sp, #88	; 0x58
 8002dd4:	4620      	mov	r0, r4
 8002dd6:	f000 f91b 	bl	8003010 <HAL_LineBuffer_Read>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	b118      	cbz	r0, 8002de6 <main+0x73a>
      HAL_Serial_Write(&FTDI_hserial, (uint8_t *)cmd_line, len);
 8002dde:	a916      	add	r1, sp, #88	; 0x58
 8002de0:	4628      	mov	r0, r5
 8002de2:	f000 f894 	bl	8002f0e <HAL_Serial_Write>
    HAL_Delay(500);
 8002de6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002dea:	f7fd fc39 	bl	8000660 <HAL_Delay>
    LedSwitch(4, GPIO_PIN_SET);
 8002dee:	2101      	movs	r1, #1
 8002df0:	2004      	movs	r0, #4
 8002df2:	f000 fdcd 	bl	8003990 <LedSwitch>
    HAL_Delay(500);
 8002df6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002dfa:	f7fd fc31 	bl	8000660 <HAL_Delay>
    LedSwitch(4, GPIO_PIN_RESET);
 8002dfe:	e7e3      	b.n	8002dc8 <main+0x71c>
 8002e00:	20002de0 	.word	0x20002de0
 8002e04:	40004c00 	.word	0x40004c00
 8002e08:	20002c10 	.word	0x20002c10
 8002e0c:	40005000 	.word	0x40005000
 8002e10:	20002e60 	.word	0x20002e60
 8002e14:	40004400 	.word	0x40004400
 8002e18:	20002f80 	.word	0x20002f80
 8002e1c:	20002d38 	.word	0x20002d38
 8002e20:	20000170 	.word	0x20000170

08002e24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e24:	4770      	bx	lr
	...

08002e28 <HAL_UART_ErrorCallback>:
 *
 */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
  static int id = 0;
  for(id=0;id!=serial_counter;++id)
 8002e28:	4913      	ldr	r1, [pc, #76]	; (8002e78 <HAL_UART_ErrorCallback+0x50>)
 8002e2a:	4a14      	ldr	r2, [pc, #80]	; (8002e7c <HAL_UART_ErrorCallback+0x54>)
{
 8002e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
  for(id=0;id!=serial_counter;++id)
 8002e2e:	2300      	movs	r3, #0
  {
    if(hserial_table[id]->huart == huart)
 8002e30:	f8df e04c 	ldr.w	lr, [pc, #76]	; 8002e80 <HAL_UART_ErrorCallback+0x58>
  for(id=0;id!=serial_counter;++id)
 8002e34:	680d      	ldr	r5, [r1, #0]
 8002e36:	6013      	str	r3, [r2, #0]
{
 8002e38:	4607      	mov	r7, r0
  for(id=0;id!=serial_counter;++id)
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	429d      	cmp	r5, r3
 8002e3e:	461e      	mov	r6, r3
 8002e40:	d102      	bne.n	8002e48 <HAL_UART_ErrorCallback+0x20>
 8002e42:	b101      	cbz	r1, 8002e46 <HAL_UART_ErrorCallback+0x1e>
 8002e44:	6015      	str	r5, [r2, #0]
 8002e46:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(hserial_table[id]->huart == huart)
 8002e48:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 8002e4c:	6820      	ldr	r0, [r4, #0]
 8002e4e:	42b8      	cmp	r0, r7
 8002e50:	f103 0301 	add.w	r3, r3, #1
 8002e54:	d10d      	bne.n	8002e72 <HAL_UART_ErrorCallback+0x4a>
 8002e56:	b101      	cbz	r1, 8002e5a <HAL_UART_ErrorCallback+0x32>
 8002e58:	6016      	str	r6, [r2, #0]
    {
      hserial_table[id]->rx_tail_ptr = hserial_table[id]->rx_circular_buffer;
 8002e5a:	f504 5102 	add.w	r1, r4, #8320	; 0x2080
 8002e5e:	f642 0390 	movw	r3, #10384	; 0x2890
 8002e62:	3110      	adds	r1, #16
 8002e64:	50e1      	str	r1, [r4, r3]
      HAL_UART_Receive_DMA(hserial_table[id]->huart, hserial_table[id]->rx_circular_buffer,size_of_rx_circular_buffer);
 8002e66:	f44f 6200 	mov.w	r2, #2048	; 0x800
       break;
    }
  }
}
 8002e6a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      HAL_UART_Receive_DMA(hserial_table[id]->huart, hserial_table[id]->rx_circular_buffer,size_of_rx_circular_buffer);
 8002e6e:	f7ff ba2d 	b.w	80022cc <HAL_UART_Receive_DMA>
 8002e72:	2101      	movs	r1, #1
 8002e74:	e7e2      	b.n	8002e3c <HAL_UART_ErrorCallback+0x14>
 8002e76:	bf00      	nop
 8002e78:	2000009c 	.word	0x2000009c
 8002e7c:	20000094 	.word	0x20000094
 8002e80:	2000008c 	.word	0x2000008c

08002e84 <HAL_Serial_Init>:

/**********************************************************
 *
 */
void HAL_Serial_Init(UART_HandleTypeDef * huart, HAL_Serial_Handler * hserial)
{
 8002e84:	460b      	mov	r3, r1
  // register this handle
  hserial_table[serial_counter++]=hserial;
 8002e86:	490f      	ldr	r1, [pc, #60]	; (8002ec4 <HAL_Serial_Init+0x40>)
 8002e88:	680a      	ldr	r2, [r1, #0]
{
 8002e8a:	b410      	push	{r4}
  hserial_table[serial_counter++]=hserial;
 8002e8c:	1c54      	adds	r4, r2, #1
 8002e8e:	600c      	str	r4, [r1, #0]
 8002e90:	490d      	ldr	r1, [pc, #52]	; (8002ec8 <HAL_Serial_Init+0x44>)
  // reset rx circular buffer
  hserial->rx_tail_ptr = hserial->rx_circular_buffer;

    // start rx DMA
  HAL_UART_Receive_DMA(hserial->huart, hserial->rx_circular_buffer,size_of_rx_circular_buffer);
}
 8002e92:	f85d 4b04 	ldr.w	r4, [sp], #4
  hserial_table[serial_counter++]=hserial;
 8002e96:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
    hserial->tx_head_position = 0;
 8002e9a:	f242 0184 	movw	r1, #8324	; 0x2084
 8002e9e:	2200      	movs	r2, #0
    hserial->huart = huart;
 8002ea0:	6018      	str	r0, [r3, #0]
    hserial->tx_head_position = 0;
 8002ea2:	505a      	str	r2, [r3, r1]
    hserial->tx_tail_position = 0;
 8002ea4:	f242 0188 	movw	r1, #8328	; 0x2088
 8002ea8:	505a      	str	r2, [r3, r1]
  hserial->tx_dma = 0;
 8002eaa:	f242 018c 	movw	r1, #8332	; 0x208c
 8002eae:	505a      	str	r2, [r3, r1]
  hserial->rx_tail_ptr = hserial->rx_circular_buffer;
 8002eb0:	f642 0290 	movw	r2, #10384	; 0x2890
 8002eb4:	f503 5102 	add.w	r1, r3, #8320	; 0x2080
 8002eb8:	3110      	adds	r1, #16
 8002eba:	5099      	str	r1, [r3, r2]
  HAL_UART_Receive_DMA(hserial->huart, hserial->rx_circular_buffer,size_of_rx_circular_buffer);
 8002ebc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ec0:	f7ff ba04 	b.w	80022cc <HAL_UART_Receive_DMA>
 8002ec4:	2000009c 	.word	0x2000009c
 8002ec8:	2000008c 	.word	0x2000008c

08002ecc <HAL_Serial_Read>:

/**********************************************************
 *
 */
int HAL_Serial_Read(HAL_Serial_Handler * hserial, uint8_t * ptr, int len )
{
 8002ecc:	4603      	mov	r3, r0
    if(hserial->huart == 0)
 8002ece:	6800      	ldr	r0, [r0, #0]
{
 8002ed0:	b570      	push	{r4, r5, r6, lr}
    if(hserial->huart == 0)
 8002ed2:	b160      	cbz	r0, 8002eee <HAL_Serial_Read+0x22>
        return 0;
    uint8_t const * head = hserial->rx_circular_buffer + size_of_rx_circular_buffer - __HAL_DMA_GET_COUNTER(hserial->huart->hdmarx);
 8002ed4:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8002ed6:	6800      	ldr	r0, [r0, #0]
 8002ed8:	6844      	ldr	r4, [r0, #4]
 8002eda:	1b1c      	subs	r4, r3, r4
 8002edc:	f504 5422 	add.w	r4, r4, #10368	; 0x2880
    int counter = 0;
    while(counter!=len)
    {
        if(head==hserial->rx_tail_ptr)
 8002ee0:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
    uint8_t const * head = hserial->rx_circular_buffer + size_of_rx_circular_buffer - __HAL_DMA_GET_COUNTER(hserial->huart->hdmarx);
 8002ee4:	3410      	adds	r4, #16
    int counter = 0;
 8002ee6:	2000      	movs	r0, #0
        if(head==hserial->rx_tail_ptr)
 8002ee8:	3310      	adds	r3, #16
    while(counter!=len)
 8002eea:	4290      	cmp	r0, r2
 8002eec:	d100      	bne.n	8002ef0 <HAL_Serial_Read+0x24>
        if(hserial->rx_tail_ptr>=hserial->rx_circular_buffer + size_of_rx_circular_buffer)
            hserial->rx_tail_ptr-=size_of_rx_circular_buffer;
        ++counter;
    }
    return counter;
}
 8002eee:	bd70      	pop	{r4, r5, r6, pc}
        if(head==hserial->rx_tail_ptr)
 8002ef0:	681d      	ldr	r5, [r3, #0]
 8002ef2:	42ac      	cmp	r4, r5
 8002ef4:	d0fb      	beq.n	8002eee <HAL_Serial_Read+0x22>
        *ptr++=*hserial->rx_tail_ptr++;
 8002ef6:	1c6e      	adds	r6, r5, #1
 8002ef8:	601e      	str	r6, [r3, #0]
 8002efa:	782d      	ldrb	r5, [r5, #0]
 8002efc:	540d      	strb	r5, [r1, r0]
        if(hserial->rx_tail_ptr>=hserial->rx_circular_buffer + size_of_rx_circular_buffer)
 8002efe:	681d      	ldr	r5, [r3, #0]
 8002f00:	429d      	cmp	r5, r3
            hserial->rx_tail_ptr-=size_of_rx_circular_buffer;
 8002f02:	bf24      	itt	cs
 8002f04:	f5a5 6500 	subcs.w	r5, r5, #2048	; 0x800
 8002f08:	601d      	strcs	r5, [r3, #0]
        ++counter;
 8002f0a:	3001      	adds	r0, #1
 8002f0c:	e7ed      	b.n	8002eea <HAL_Serial_Read+0x1e>

08002f0e <HAL_Serial_Write>:

/**********************************************************
 *
 */
int HAL_Serial_Write(HAL_Serial_Handler * hserial, uint8_t const * ptr, int len )
{
 8002f0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(hserial->huart == 0)
 8002f10:	6803      	ldr	r3, [r0, #0]
{
 8002f12:	4604      	mov	r4, r0
 8002f14:	4616      	mov	r6, r2
    if(hserial->huart == 0)
 8002f16:	b353      	cbz	r3, 8002f6e <HAL_Serial_Write+0x60>
        return 0;

    // copy user data into the head tx buffer into tx pool, inc tx pool head
    hserial->tx_buffer_pool[hserial->tx_head_position].length = len;
 8002f18:	f242 0784 	movw	r7, #8324	; 0x2084
 8002f1c:	f44f 7582 	mov.w	r5, #260	; 0x104
 8002f20:	59c0      	ldr	r0, [r0, r7]
 8002f22:	4368      	muls	r0, r5
 8002f24:	1823      	adds	r3, r4, r0
    uint8_t * dst = hserial->tx_buffer_pool[hserial->tx_head_position].data;
 8002f26:	3004      	adds	r0, #4
    hserial->tx_buffer_pool[hserial->tx_head_position].length = len;
 8002f28:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    memcpy(dst,ptr,len);
 8002f2c:	4420      	add	r0, r4
 8002f2e:	f000 fd99 	bl	8003a64 <memcpy>
    hserial->tx_head_position = (hserial->tx_head_position + 1 ) % size_of_tx_pool;
 8002f32:	59e3      	ldr	r3, [r4, r7]
 8002f34:	3301      	adds	r3, #1
 8002f36:	f003 031f 	and.w	r3, r3, #31
 8002f3a:	51e3      	str	r3, [r4, r7]

    // if no tx dma running, start tx dma
    if(hserial->tx_dma==0)
 8002f3c:	f242 038c 	movw	r3, #8332	; 0x208c
 8002f40:	58e2      	ldr	r2, [r4, r3]
 8002f42:	b992      	cbnz	r2, 8002f6a <HAL_Serial_Write+0x5c>
        //do
        //{
          //result =
          HAL_UART_Transmit_DMA(
              hserial->huart,
          hserial->tx_buffer_pool[hserial->tx_tail_position].data,
 8002f44:	f242 0788 	movw	r7, #8328	; 0x2088
        hserial->tx_dma=1;
 8002f48:	2201      	movs	r2, #1
          hserial->tx_buffer_pool[hserial->tx_tail_position].data,
 8002f4a:	59e1      	ldr	r1, [r4, r7]
        hserial->tx_dma=1;
 8002f4c:	50e2      	str	r2, [r4, r3]
          hserial->tx_buffer_pool[hserial->tx_tail_position].length
 8002f4e:	434d      	muls	r5, r1
 8002f50:	1963      	adds	r3, r4, r5
          hserial->tx_buffer_pool[hserial->tx_tail_position].data,
 8002f52:	3504      	adds	r5, #4
          HAL_UART_Transmit_DMA(
 8002f54:	f8b3 2104 	ldrh.w	r2, [r3, #260]	; 0x104
 8002f58:	6820      	ldr	r0, [r4, #0]
 8002f5a:	1961      	adds	r1, r4, r5
 8002f5c:	f7ff f97c 	bl	8002258 <HAL_UART_Transmit_DMA>
          );
        //}
        //while(result!=HAL_OK);
        hserial->tx_tail_position = (hserial->tx_tail_position + 1 ) % size_of_tx_pool;
 8002f60:	59e3      	ldr	r3, [r4, r7]
 8002f62:	3301      	adds	r3, #1
 8002f64:	f003 031f 	and.w	r3, r3, #31
 8002f68:	51e3      	str	r3, [r4, r7]
    else
    {
      // end of tx dma callback will start next tx dma
    }
    return len;
}
 8002f6a:	4630      	mov	r0, r6
 8002f6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
 8002f6e:	461e      	mov	r6, r3
 8002f70:	e7fb      	b.n	8002f6a <HAL_Serial_Write+0x5c>
	...

08002f74 <HAL_UART_TxCpltCallback>:

/**********************************************************
 *
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  static int id = 0;
  LedSwitch(2,GPIO_PIN_RESET);
 8002f76:	2100      	movs	r1, #0
{
 8002f78:	4606      	mov	r6, r0
  LedSwitch(2,GPIO_PIN_RESET);
 8002f7a:	2002      	movs	r0, #2
 8002f7c:	f000 fd08 	bl	8003990 <LedSwitch>
  for(id=0;id!=serial_counter;++id)
 8002f80:	4d1e      	ldr	r5, [pc, #120]	; (8002ffc <HAL_UART_TxCpltCallback+0x88>)
 8002f82:	4a1f      	ldr	r2, [pc, #124]	; (8003000 <HAL_UART_TxCpltCallback+0x8c>)
  {
    if(hserial_table[id]->huart == huart && hserial_table[id]->tx_dma == 1)
 8002f84:	4f1f      	ldr	r7, [pc, #124]	; (8003004 <HAL_UART_TxCpltCallback+0x90>)
  for(id=0;id!=serial_counter;++id)
 8002f86:	6811      	ldr	r1, [r2, #0]
 8002f88:	2300      	movs	r3, #0
 8002f8a:	602b      	str	r3, [r5, #0]
 8002f8c:	461a      	mov	r2, r3
    if(hserial_table[id]->huart == huart && hserial_table[id]->tx_dma == 1)
 8002f8e:	f242 0e8c 	movw	lr, #8332	; 0x208c
  for(id=0;id!=serial_counter;++id)
 8002f92:	4299      	cmp	r1, r3
 8002f94:	d102      	bne.n	8002f9c <HAL_UART_TxCpltCallback+0x28>
 8002f96:	b102      	cbz	r2, 8002f9a <HAL_UART_TxCpltCallback+0x26>
 8002f98:	6029      	str	r1, [r5, #0]
 8002f9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(hserial_table[id]->huart == huart && hserial_table[id]->tx_dma == 1)
 8002f9c:	f857 4023 	ldr.w	r4, [r7, r3, lsl #2]
 8002fa0:	6820      	ldr	r0, [r4, #0]
 8002fa2:	42b0      	cmp	r0, r6
 8002fa4:	d126      	bne.n	8002ff4 <HAL_UART_TxCpltCallback+0x80>
 8002fa6:	f854 c00e 	ldr.w	ip, [r4, lr]
 8002faa:	f1bc 0f01 	cmp.w	ip, #1
 8002fae:	d121      	bne.n	8002ff4 <HAL_UART_TxCpltCallback+0x80>
 8002fb0:	b102      	cbz	r2, 8002fb4 <HAL_UART_TxCpltCallback+0x40>
 8002fb2:	602b      	str	r3, [r5, #0]
    {
      // tx buffer from pool waiting for transmission ?
      if(hserial_table[id]->tx_head_position!=hserial_table[id]->tx_tail_position)
 8002fb4:	f242 0688 	movw	r6, #8328	; 0x2088
 8002fb8:	f242 0284 	movw	r2, #8324	; 0x2084
 8002fbc:	59a3      	ldr	r3, [r4, r6]
 8002fbe:	58a2      	ldr	r2, [r4, r2]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d012      	beq.n	8002fea <HAL_UART_TxCpltCallback+0x76>
        //{
        //result =
        HAL_UART_Transmit_DMA(
              hserial_table[id]->huart,
              hserial_table[id]->tx_buffer_pool[hserial_table[id]->tx_tail_position].data,
              hserial_table[id]->tx_buffer_pool[hserial_table[id]->tx_tail_position].length
 8002fc4:	f44f 7182 	mov.w	r1, #260	; 0x104
 8002fc8:	4359      	muls	r1, r3
 8002fca:	1863      	adds	r3, r4, r1
              hserial_table[id]->tx_buffer_pool[hserial_table[id]->tx_tail_position].data,
 8002fcc:	3104      	adds	r1, #4
        HAL_UART_Transmit_DMA(
 8002fce:	f8b3 2104 	ldrh.w	r2, [r3, #260]	; 0x104
 8002fd2:	4421      	add	r1, r4
 8002fd4:	f7ff f940 	bl	8002258 <HAL_UART_Transmit_DMA>
              );
            //}
            //while(result!=HAL_OK);

        // inc tail
        hserial_table[id]->tx_tail_position = (hserial_table[id]->tx_tail_position + 1 ) % size_of_tx_pool;
 8002fd8:	682b      	ldr	r3, [r5, #0]
 8002fda:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
 8002fde:	5993      	ldr	r3, [r2, r6]
 8002fe0:	3301      	adds	r3, #1
 8002fe2:	f003 031f 	and.w	r3, r3, #31
 8002fe6:	5193      	str	r3, [r2, r6]
 8002fe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      }
      else
      {
        // reset tx dma
        hserial_table[id]->tx_dma = 0;
 8002fea:	f242 038c 	movw	r3, #8332	; 0x208c
 8002fee:	2200      	movs	r2, #0
 8002ff0:	50e2      	str	r2, [r4, r3]
 8002ff2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	e7cb      	b.n	8002f92 <HAL_UART_TxCpltCallback+0x1e>
 8002ffa:	bf00      	nop
 8002ffc:	20000098 	.word	0x20000098
 8003000:	2000009c 	.word	0x2000009c
 8003004:	2000008c 	.word	0x2000008c

08003008 <HAL_LineBuffer_Init>:
 *
 */
void HAL_LineBuffer_Init(HAL_LineBuffer_Handler * hline, HAL_Serial_Handler * hserial)
{
  hline->hserial=hserial;
  hline->len=0;
 8003008:	2300      	movs	r3, #0
  hline->hserial=hserial;
 800300a:	6001      	str	r1, [r0, #0]
  hline->len=0;
 800300c:	6443      	str	r3, [r0, #68]	; 0x44
 800300e:	4770      	bx	lr

08003010 <HAL_LineBuffer_Read>:
 * @param outbuf output buffer
 * @param outbuf_len size of output buffer
 * @return 0 if nothing in buffer or no newline, or number of bytes copied.
 */
int HAL_LineBuffer_Read(HAL_LineBuffer_Handler * hlinebuffer, char * outbuf, int outbuf_len)
{
 8003010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003014:	4688      	mov	r8, r1
  int total_len;
  int i;
  char buf[64];

  // read data from serial to internal buffer
  recv_len=HAL_Serial_Read(hlinebuffer->hserial, (uint8_t *)hlinebuffer->data+hlinebuffer->len, size_of_rx_buffer-hlinebuffer->len);
 8003016:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8003018:	1d07      	adds	r7, r0, #4
{
 800301a:	4604      	mov	r4, r0
  recv_len=HAL_Serial_Read(hlinebuffer->hserial, (uint8_t *)hlinebuffer->data+hlinebuffer->len, size_of_rx_buffer-hlinebuffer->len);
 800301c:	f1c1 0240 	rsb	r2, r1, #64	; 0x40
{
 8003020:	b090      	sub	sp, #64	; 0x40
  recv_len=HAL_Serial_Read(hlinebuffer->hserial, (uint8_t *)hlinebuffer->data+hlinebuffer->len, size_of_rx_buffer-hlinebuffer->len);
 8003022:	4439      	add	r1, r7
 8003024:	6800      	ldr	r0, [r0, #0]
 8003026:	f7ff ff51 	bl	8002ecc <HAL_Serial_Read>
  // update internal buffer length
  hlinebuffer->len+=recv_len;
 800302a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800302c:	4403      	add	r3, r0

  // read a line from the buffer
  total_len=0;
  if(hlinebuffer->len > 0)
 800302e:	2b00      	cmp	r3, #0
  recv_len=HAL_Serial_Read(hlinebuffer->hserial, (uint8_t *)hlinebuffer->data+hlinebuffer->len, size_of_rx_buffer-hlinebuffer->len);
 8003030:	4602      	mov	r2, r0
  hlinebuffer->len+=recv_len;
 8003032:	6463      	str	r3, [r4, #68]	; 0x44
  if(hlinebuffer->len > 0)
 8003034:	dc04      	bgt.n	8003040 <HAL_LineBuffer_Read+0x30>
  total_len=0;
 8003036:	2500      	movs	r5, #0
      }
    }
  }

  return(total_len);
}
 8003038:	4628      	mov	r0, r5
 800303a:	b010      	add	sp, #64	; 0x40
 800303c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    HAL_Serial_Write(hlinebuffer->hserial, buf, sprintf(buf, "Received %d bytes. circbuf=%d", recv_len, hlinebuffer->hserial->rx_tail_ptr-hlinebuffer->hserial->rx_circular_buffer));
 8003040:	6825      	ldr	r5, [r4, #0]
 8003042:	f642 0190 	movw	r1, #10384	; 0x2890
 8003046:	f505 5302 	add.w	r3, r5, #8320	; 0x2080
 800304a:	5869      	ldr	r1, [r5, r1]
 800304c:	3310      	adds	r3, #16
 800304e:	1acb      	subs	r3, r1, r3
 8003050:	4668      	mov	r0, sp
 8003052:	4913      	ldr	r1, [pc, #76]	; (80030a0 <HAL_LineBuffer_Read+0x90>)
 8003054:	f000 fd34 	bl	8003ac0 <siprintf>
 8003058:	4669      	mov	r1, sp
 800305a:	4602      	mov	r2, r0
 800305c:	4628      	mov	r0, r5
 800305e:	f7ff ff56 	bl	8002f0e <HAL_Serial_Write>
    for(i=0;i<hlinebuffer->len;i++)
 8003062:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003064:	463b      	mov	r3, r7
 8003066:	2600      	movs	r6, #0
 8003068:	4296      	cmp	r6, r2
 800306a:	dae4      	bge.n	8003036 <HAL_LineBuffer_Read+0x26>
      if(hlinebuffer->data[i] == '\n')
 800306c:	f813 1b01 	ldrb.w	r1, [r3], #1
 8003070:	290a      	cmp	r1, #10
 8003072:	f106 0501 	add.w	r5, r6, #1
 8003076:	d111      	bne.n	800309c <HAL_LineBuffer_Read+0x8c>
        memcpy(outbuf, hlinebuffer->data, total_len);
 8003078:	462a      	mov	r2, r5
 800307a:	4639      	mov	r1, r7
 800307c:	4640      	mov	r0, r8
        hlinebuffer->data[total_len-1]=0; // replace \n by end of string
 800307e:	4426      	add	r6, r4
        memcpy(outbuf, hlinebuffer->data, total_len);
 8003080:	f000 fcf0 	bl	8003a64 <memcpy>
        hlinebuffer->data[total_len-1]=0; // replace \n by end of string
 8003084:	2300      	movs	r3, #0
 8003086:	7133      	strb	r3, [r6, #4]
        memmove(hlinebuffer->data, hlinebuffer->data+total_len, hlinebuffer->len-total_len);
 8003088:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800308a:	1979      	adds	r1, r7, r5
 800308c:	1b52      	subs	r2, r2, r5
 800308e:	4638      	mov	r0, r7
 8003090:	f000 fcf3 	bl	8003a7a <memmove>
        hlinebuffer->len=hlinebuffer->len-total_len;
 8003094:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003096:	1b5b      	subs	r3, r3, r5
 8003098:	6463      	str	r3, [r4, #68]	; 0x44
        break;
 800309a:	e7cd      	b.n	8003038 <HAL_LineBuffer_Read+0x28>
    for(i=0;i<hlinebuffer->len;i++)
 800309c:	462e      	mov	r6, r5
 800309e:	e7e3      	b.n	8003068 <HAL_LineBuffer_Read+0x58>
 80030a0:	080042d0 	.word	0x080042d0

080030a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030a4:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030a6:	4b0c      	ldr	r3, [pc, #48]	; (80030d8 <HAL_MspInit+0x34>)
 80030a8:	2100      	movs	r1, #0
 80030aa:	9100      	str	r1, [sp, #0]
 80030ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030b2:	645a      	str	r2, [r3, #68]	; 0x44
 80030b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030b6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80030ba:	9200      	str	r2, [sp, #0]
 80030bc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80030be:	9101      	str	r1, [sp, #4]
 80030c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030c2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80030c6:	641a      	str	r2, [r3, #64]	; 0x40
 80030c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ce:	9301      	str	r3, [sp, #4]
 80030d0:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80030d2:	b002      	add	sp, #8
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	40023800 	.word	0x40023800

080030dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80030dc:	b510      	push	{r4, lr}
 80030de:	4604      	mov	r4, r0
 80030e0:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030e2:	2214      	movs	r2, #20
 80030e4:	2100      	movs	r1, #0
 80030e6:	a803      	add	r0, sp, #12
 80030e8:	f000 fce1 	bl	8003aae <memset>
  if(hadc->Instance==ADC1)
 80030ec:	6822      	ldr	r2, [r4, #0]
 80030ee:	4b12      	ldr	r3, [pc, #72]	; (8003138 <HAL_ADC_MspInit+0x5c>)
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d11e      	bne.n	8003132 <HAL_ADC_MspInit+0x56>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80030f4:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 80030f8:	2100      	movs	r1, #0
 80030fa:	9101      	str	r1, [sp, #4]
 80030fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    PA4     ------> ADC1_IN4 
    */
    GPIO_InitStruct.Pin = ADC_IN_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(ADC_IN_GPIO_Port, &GPIO_InitStruct);
 80030fe:	480f      	ldr	r0, [pc, #60]	; (800313c <HAL_ADC_MspInit+0x60>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003100:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003104:	645a      	str	r2, [r3, #68]	; 0x44
 8003106:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003108:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800310c:	9201      	str	r2, [sp, #4]
 800310e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003110:	9102      	str	r1, [sp, #8]
 8003112:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003114:	f042 0201 	orr.w	r2, r2, #1
 8003118:	631a      	str	r2, [r3, #48]	; 0x30
 800311a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311c:	f003 0301 	and.w	r3, r3, #1
 8003120:	9302      	str	r3, [sp, #8]
 8003122:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = ADC_IN_Pin;
 8003124:	2310      	movs	r3, #16
 8003126:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(ADC_IN_GPIO_Port, &GPIO_InitStruct);
 8003128:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800312a:	2303      	movs	r3, #3
 800312c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(ADC_IN_GPIO_Port, &GPIO_InitStruct);
 800312e:	f7fd fdf7 	bl	8000d20 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003132:	b008      	add	sp, #32
 8003134:	bd10      	pop	{r4, pc}
 8003136:	bf00      	nop
 8003138:	40012000 	.word	0x40012000
 800313c:	40020000 	.word	0x40020000

08003140 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003140:	b530      	push	{r4, r5, lr}
 8003142:	4604      	mov	r4, r0
 8003144:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003146:	2214      	movs	r2, #20
 8003148:	2100      	movs	r1, #0
 800314a:	a803      	add	r0, sp, #12
 800314c:	f000 fcaf 	bl	8003aae <memset>
  if(hi2c->Instance==I2C1)
 8003150:	6822      	ldr	r2, [r4, #0]
 8003152:	4b14      	ldr	r3, [pc, #80]	; (80031a4 <HAL_I2C_MspInit+0x64>)
 8003154:	429a      	cmp	r2, r3
 8003156:	d123      	bne.n	80031a0 <HAL_I2C_MspInit+0x60>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003158:	4c13      	ldr	r4, [pc, #76]	; (80031a8 <HAL_I2C_MspInit+0x68>)
    GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SCA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800315a:	4814      	ldr	r0, [pc, #80]	; (80031ac <HAL_I2C_MspInit+0x6c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800315c:	2500      	movs	r5, #0
 800315e:	9501      	str	r5, [sp, #4]
 8003160:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003162:	f043 0302 	orr.w	r3, r3, #2
 8003166:	6323      	str	r3, [r4, #48]	; 0x30
 8003168:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800316a:	f003 0302 	and.w	r3, r3, #2
 800316e:	9301      	str	r3, [sp, #4]
 8003170:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SCA_Pin;
 8003172:	23c0      	movs	r3, #192	; 0xc0
 8003174:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003176:	2312      	movs	r3, #18
 8003178:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800317a:	2301      	movs	r3, #1
 800317c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800317e:	2303      	movs	r3, #3
 8003180:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003182:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003184:	2304      	movs	r3, #4
 8003186:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003188:	f7fd fdca 	bl	8000d20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800318c:	9502      	str	r5, [sp, #8]
 800318e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003190:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003194:	6423      	str	r3, [r4, #64]	; 0x40
 8003196:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003198:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800319c:	9302      	str	r3, [sp, #8]
 800319e:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80031a0:	b009      	add	sp, #36	; 0x24
 80031a2:	bd30      	pop	{r4, r5, pc}
 80031a4:	40005400 	.word	0x40005400
 80031a8:	40023800 	.word	0x40023800
 80031ac:	40020400 	.word	0x40020400

080031b0 <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 80031b0:	6802      	ldr	r2, [r0, #0]
 80031b2:	4b03      	ldr	r3, [pc, #12]	; (80031c0 <HAL_RTC_MspInit+0x10>)
 80031b4:	429a      	cmp	r2, r3
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80031b6:	bf02      	ittt	eq
 80031b8:	4b02      	ldreq	r3, [pc, #8]	; (80031c4 <HAL_RTC_MspInit+0x14>)
 80031ba:	2201      	moveq	r2, #1
 80031bc:	601a      	streq	r2, [r3, #0]
 80031be:	4770      	bx	lr
 80031c0:	40002800 	.word	0x40002800
 80031c4:	42470e3c 	.word	0x42470e3c

080031c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80031c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031cc:	4606      	mov	r6, r0
 80031ce:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031d0:	2214      	movs	r2, #20
 80031d2:	2100      	movs	r1, #0
 80031d4:	a803      	add	r0, sp, #12
 80031d6:	f000 fc6a 	bl	8003aae <memset>
  if(hspi->Instance==SPI2)
 80031da:	6832      	ldr	r2, [r6, #0]
 80031dc:	4b30      	ldr	r3, [pc, #192]	; (80032a0 <HAL_SPI_MspInit+0xd8>)
 80031de:	429a      	cmp	r2, r3
 80031e0:	d15a      	bne.n	8003298 <HAL_SPI_MspInit+0xd0>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80031e2:	2500      	movs	r5, #0
 80031e4:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80031e8:	9500      	str	r5, [sp, #0]
 80031ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031ec:	482d      	ldr	r0, [pc, #180]	; (80032a4 <HAL_SPI_MspInit+0xdc>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 80031ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031f2:	641a      	str	r2, [r3, #64]	; 0x40
 80031f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031f6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80031fa:	9200      	str	r2, [sp, #0]
 80031fc:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80031fe:	9501      	str	r5, [sp, #4]
 8003200:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003202:	f042 0204 	orr.w	r2, r2, #4
 8003206:	631a      	str	r2, [r3, #48]	; 0x30
 8003208:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800320a:	f002 0204 	and.w	r2, r2, #4
 800320e:	9201      	str	r2, [sp, #4]
 8003210:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003212:	9502      	str	r5, [sp, #8]
 8003214:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003216:	f042 0202 	orr.w	r2, r2, #2
 800321a:	631a      	str	r2, [r3, #48]	; 0x30
 800321c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321e:	f003 0302 	and.w	r3, r3, #2
 8003222:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003224:	2402      	movs	r4, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003226:	2703      	movs	r7, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003228:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800322a:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 800322c:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800322e:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003230:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8003232:	9307      	str	r3, [sp, #28]

    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003234:	f04f 0805 	mov.w	r8, #5
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003238:	9706      	str	r7, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800323a:	f7fd fd71 	bl	8000d20 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800323e:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003240:	a903      	add	r1, sp, #12
 8003242:	4818      	ldr	r0, [pc, #96]	; (80032a4 <HAL_SPI_MspInit+0xdc>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003244:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003246:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003248:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800324a:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800324c:	f8cd 801c 	str.w	r8, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003250:	f7fd fd66 	bl	8000d20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003254:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003258:	4813      	ldr	r0, [pc, #76]	; (80032a8 <HAL_SPI_MspInit+0xe0>)
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800325a:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800325c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800325e:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003260:	9505      	str	r5, [sp, #20]

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8003262:	4c12      	ldr	r4, [pc, #72]	; (80032ac <HAL_SPI_MspInit+0xe4>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003264:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003266:	f8cd 801c 	str.w	r8, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800326a:	f7fd fd59 	bl	8000d20 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 800326e:	4b10      	ldr	r3, [pc, #64]	; (80032b0 <HAL_SPI_MspInit+0xe8>)
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003270:	60a5      	str	r5, [r4, #8]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8003272:	e884 0028 	stmia.w	r4, {r3, r5}
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8003276:	4620      	mov	r0, r4
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003278:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800327c:	60e5      	str	r5, [r4, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800327e:	6123      	str	r3, [r4, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003280:	6165      	str	r5, [r4, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003282:	61a5      	str	r5, [r4, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8003284:	61e5      	str	r5, [r4, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003286:	6225      	str	r5, [r4, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003288:	6265      	str	r5, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800328a:	f7fd fbc5 	bl	8000a18 <HAL_DMA_Init>
 800328e:	b108      	cbz	r0, 8003294 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8003290:	f7ff fdc8 	bl	8002e24 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8003294:	64f4      	str	r4, [r6, #76]	; 0x4c
 8003296:	63a6      	str	r6, [r4, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003298:	b008      	add	sp, #32
 800329a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800329e:	bf00      	nop
 80032a0:	40003800 	.word	0x40003800
 80032a4:	40020800 	.word	0x40020800
 80032a8:	40020400 	.word	0x40020400
 80032ac:	20002b30 	.word	0x20002b30
 80032b0:	40026058 	.word	0x40026058

080032b4 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 80032b4:	6803      	ldr	r3, [r0, #0]
 80032b6:	4a41      	ldr	r2, [pc, #260]	; (80033bc <HAL_TIM_Base_MspInit+0x108>)
 80032b8:	4293      	cmp	r3, r2
{
 80032ba:	b088      	sub	sp, #32
  if(htim_base->Instance==TIM1)
 80032bc:	d10d      	bne.n	80032da <HAL_TIM_Base_MspInit+0x26>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80032be:	2300      	movs	r3, #0
 80032c0:	9300      	str	r3, [sp, #0]
 80032c2:	4b3f      	ldr	r3, [pc, #252]	; (80033c0 <HAL_TIM_Base_MspInit+0x10c>)
 80032c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032c6:	f042 0201 	orr.w	r2, r2, #1
 80032ca:	645a      	str	r2, [r3, #68]	; 0x44
 80032cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	9300      	str	r3, [sp, #0]
 80032d4:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80032d6:	b008      	add	sp, #32
 80032d8:	4770      	bx	lr
  else if(htim_base->Instance==TIM2)
 80032da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032de:	d10c      	bne.n	80032fa <HAL_TIM_Base_MspInit+0x46>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80032e0:	2300      	movs	r3, #0
 80032e2:	9301      	str	r3, [sp, #4]
 80032e4:	4b36      	ldr	r3, [pc, #216]	; (80033c0 <HAL_TIM_Base_MspInit+0x10c>)
 80032e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032e8:	f042 0201 	orr.w	r2, r2, #1
 80032ec:	641a      	str	r2, [r3, #64]	; 0x40
 80032ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f0:	f003 0301 	and.w	r3, r3, #1
 80032f4:	9301      	str	r3, [sp, #4]
 80032f6:	9b01      	ldr	r3, [sp, #4]
 80032f8:	e7ed      	b.n	80032d6 <HAL_TIM_Base_MspInit+0x22>
  else if(htim_base->Instance==TIM3)
 80032fa:	4a32      	ldr	r2, [pc, #200]	; (80033c4 <HAL_TIM_Base_MspInit+0x110>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d10c      	bne.n	800331a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003300:	2300      	movs	r3, #0
 8003302:	9302      	str	r3, [sp, #8]
 8003304:	4b2e      	ldr	r3, [pc, #184]	; (80033c0 <HAL_TIM_Base_MspInit+0x10c>)
 8003306:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003308:	f042 0202 	orr.w	r2, r2, #2
 800330c:	641a      	str	r2, [r3, #64]	; 0x40
 800330e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003310:	f003 0302 	and.w	r3, r3, #2
 8003314:	9302      	str	r3, [sp, #8]
 8003316:	9b02      	ldr	r3, [sp, #8]
 8003318:	e7dd      	b.n	80032d6 <HAL_TIM_Base_MspInit+0x22>
  else if(htim_base->Instance==TIM8)
 800331a:	4a2b      	ldr	r2, [pc, #172]	; (80033c8 <HAL_TIM_Base_MspInit+0x114>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d10c      	bne.n	800333a <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003320:	2300      	movs	r3, #0
 8003322:	9303      	str	r3, [sp, #12]
 8003324:	4b26      	ldr	r3, [pc, #152]	; (80033c0 <HAL_TIM_Base_MspInit+0x10c>)
 8003326:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003328:	f042 0202 	orr.w	r2, r2, #2
 800332c:	645a      	str	r2, [r3, #68]	; 0x44
 800332e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003330:	f003 0302 	and.w	r3, r3, #2
 8003334:	9303      	str	r3, [sp, #12]
 8003336:	9b03      	ldr	r3, [sp, #12]
 8003338:	e7cd      	b.n	80032d6 <HAL_TIM_Base_MspInit+0x22>
  else if(htim_base->Instance==TIM10)
 800333a:	4a24      	ldr	r2, [pc, #144]	; (80033cc <HAL_TIM_Base_MspInit+0x118>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d10c      	bne.n	800335a <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8003340:	2300      	movs	r3, #0
 8003342:	9304      	str	r3, [sp, #16]
 8003344:	4b1e      	ldr	r3, [pc, #120]	; (80033c0 <HAL_TIM_Base_MspInit+0x10c>)
 8003346:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003348:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800334c:	645a      	str	r2, [r3, #68]	; 0x44
 800334e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003350:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003354:	9304      	str	r3, [sp, #16]
 8003356:	9b04      	ldr	r3, [sp, #16]
 8003358:	e7bd      	b.n	80032d6 <HAL_TIM_Base_MspInit+0x22>
  else if(htim_base->Instance==TIM11)
 800335a:	4a1d      	ldr	r2, [pc, #116]	; (80033d0 <HAL_TIM_Base_MspInit+0x11c>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d10c      	bne.n	800337a <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8003360:	2300      	movs	r3, #0
 8003362:	9305      	str	r3, [sp, #20]
 8003364:	4b16      	ldr	r3, [pc, #88]	; (80033c0 <HAL_TIM_Base_MspInit+0x10c>)
 8003366:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003368:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800336c:	645a      	str	r2, [r3, #68]	; 0x44
 800336e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003370:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003374:	9305      	str	r3, [sp, #20]
 8003376:	9b05      	ldr	r3, [sp, #20]
 8003378:	e7ad      	b.n	80032d6 <HAL_TIM_Base_MspInit+0x22>
  else if(htim_base->Instance==TIM12)
 800337a:	4a16      	ldr	r2, [pc, #88]	; (80033d4 <HAL_TIM_Base_MspInit+0x120>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d10c      	bne.n	800339a <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8003380:	2300      	movs	r3, #0
 8003382:	9306      	str	r3, [sp, #24]
 8003384:	4b0e      	ldr	r3, [pc, #56]	; (80033c0 <HAL_TIM_Base_MspInit+0x10c>)
 8003386:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003388:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800338c:	641a      	str	r2, [r3, #64]	; 0x40
 800338e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003394:	9306      	str	r3, [sp, #24]
 8003396:	9b06      	ldr	r3, [sp, #24]
 8003398:	e79d      	b.n	80032d6 <HAL_TIM_Base_MspInit+0x22>
  else if(htim_base->Instance==TIM14)
 800339a:	4a0f      	ldr	r2, [pc, #60]	; (80033d8 <HAL_TIM_Base_MspInit+0x124>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d19a      	bne.n	80032d6 <HAL_TIM_Base_MspInit+0x22>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80033a0:	2300      	movs	r3, #0
 80033a2:	9307      	str	r3, [sp, #28]
 80033a4:	4b06      	ldr	r3, [pc, #24]	; (80033c0 <HAL_TIM_Base_MspInit+0x10c>)
 80033a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033ac:	641a      	str	r2, [r3, #64]	; 0x40
 80033ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033b4:	9307      	str	r3, [sp, #28]
 80033b6:	9b07      	ldr	r3, [sp, #28]
}
 80033b8:	e78d      	b.n	80032d6 <HAL_TIM_Base_MspInit+0x22>
 80033ba:	bf00      	nop
 80033bc:	40010000 	.word	0x40010000
 80033c0:	40023800 	.word	0x40023800
 80033c4:	40000400 	.word	0x40000400
 80033c8:	40010400 	.word	0x40010400
 80033cc:	40014400 	.word	0x40014400
 80033d0:	40014800 	.word	0x40014800
 80033d4:	40001800 	.word	0x40001800
 80033d8:	40002000 	.word	0x40002000

080033dc <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM5)
 80033dc:	6802      	ldr	r2, [r0, #0]
 80033de:	4b09      	ldr	r3, [pc, #36]	; (8003404 <HAL_TIM_PWM_MspInit+0x28>)
 80033e0:	429a      	cmp	r2, r3
{
 80033e2:	b082      	sub	sp, #8
  if(htim_pwm->Instance==TIM5)
 80033e4:	d10b      	bne.n	80033fe <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80033e6:	2300      	movs	r3, #0
 80033e8:	9301      	str	r3, [sp, #4]
 80033ea:	4b07      	ldr	r3, [pc, #28]	; (8003408 <HAL_TIM_PWM_MspInit+0x2c>)
 80033ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033ee:	f042 0208 	orr.w	r2, r2, #8
 80033f2:	641a      	str	r2, [r3, #64]	; 0x40
 80033f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f6:	f003 0308 	and.w	r3, r3, #8
 80033fa:	9301      	str	r3, [sp, #4]
 80033fc:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80033fe:	b002      	add	sp, #8
 8003400:	4770      	bx	lr
 8003402:	bf00      	nop
 8003404:	40000c00 	.word	0x40000c00
 8003408:	40023800 	.word	0x40023800

0800340c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800340c:	b570      	push	{r4, r5, r6, lr}
 800340e:	4604      	mov	r4, r0
 8003410:	b090      	sub	sp, #64	; 0x40
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003412:	2214      	movs	r2, #20
 8003414:	2100      	movs	r1, #0
 8003416:	a80b      	add	r0, sp, #44	; 0x2c
 8003418:	f000 fb49 	bl	8003aae <memset>
  if(htim->Instance==TIM1)
 800341c:	6823      	ldr	r3, [r4, #0]
 800341e:	4a7a      	ldr	r2, [pc, #488]	; (8003608 <HAL_TIM_MspPostInit+0x1fc>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d113      	bne.n	800344c <HAL_TIM_MspPostInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003424:	2300      	movs	r3, #0
 8003426:	9300      	str	r3, [sp, #0]
 8003428:	4b78      	ldr	r3, [pc, #480]	; (800360c <HAL_TIM_MspPostInit+0x200>)
 800342a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800342c:	f042 0201 	orr.w	r2, r2, #1
 8003430:	631a      	str	r2, [r3, #48]	; 0x30
 8003432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003434:	f003 0301 	and.w	r3, r3, #1
 8003438:	9300      	str	r3, [sp, #0]
 800343a:	9b00      	ldr	r3, [sp, #0]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = S15i2_Pin|S09x2_Pin|S18_Pin|S17_Pin;
 800343c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003440:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003442:	2302      	movs	r3, #2
 8003444:	930c      	str	r3, [sp, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003446:	2301      	movs	r3, #1
    */
    GPIO_InitStruct.Pin = S11_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8003448:	930f      	str	r3, [sp, #60]	; 0x3c
 800344a:	e02b      	b.n	80034a4 <HAL_TIM_MspPostInit+0x98>
  else if(htim->Instance==TIM2)
 800344c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003450:	d12b      	bne.n	80034aa <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003452:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8003456:	2400      	movs	r4, #0
 8003458:	9401      	str	r4, [sp, #4]
 800345a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800345c:	486c      	ldr	r0, [pc, #432]	; (8003610 <HAL_TIM_MspPostInit+0x204>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800345e:	f042 0202 	orr.w	r2, r2, #2
 8003462:	631a      	str	r2, [r3, #48]	; 0x30
 8003464:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003466:	f002 0202 	and.w	r2, r2, #2
 800346a:	9201      	str	r2, [sp, #4]
 800346c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800346e:	9402      	str	r4, [sp, #8]
 8003470:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003472:	f042 0201 	orr.w	r2, r2, #1
 8003476:	631a      	str	r2, [r3, #48]	; 0x30
 8003478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	9302      	str	r3, [sp, #8]
 8003480:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003482:	2602      	movs	r6, #2
    GPIO_InitStruct.Pin = S02_Pin|S03_Pin|S14x3_Pin;
 8003484:	f240 430c 	movw	r3, #1036	; 0x40c
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003488:	2501      	movs	r5, #1
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800348a:	a90b      	add	r1, sp, #44	; 0x2c
    GPIO_InitStruct.Pin = S02_Pin|S03_Pin|S14x3_Pin;
 800348c:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800348e:	960c      	str	r6, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003490:	950f      	str	r5, [sp, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003492:	f7fd fc45 	bl	8000d20 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = S19i3_Pin;
 8003496:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800349a:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800349c:	960c      	str	r6, [sp, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800349e:	940d      	str	r4, [sp, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034a0:	940e      	str	r4, [sp, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80034a2:	950f      	str	r5, [sp, #60]	; 0x3c
    HAL_GPIO_Init(S11_GPIO_Port, &GPIO_InitStruct);
 80034a4:	a90b      	add	r1, sp, #44	; 0x2c
 80034a6:	485b      	ldr	r0, [pc, #364]	; (8003614 <HAL_TIM_MspPostInit+0x208>)
 80034a8:	e056      	b.n	8003558 <HAL_TIM_MspPostInit+0x14c>
  else if(htim->Instance==TIM3)
 80034aa:	4a5b      	ldr	r2, [pc, #364]	; (8003618 <HAL_TIM_MspPostInit+0x20c>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d127      	bne.n	8003500 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034b0:	4b56      	ldr	r3, [pc, #344]	; (800360c <HAL_TIM_MspPostInit+0x200>)
    HAL_GPIO_Init(S05i5_GPIO_Port, &GPIO_InitStruct);
 80034b2:	4858      	ldr	r0, [pc, #352]	; (8003614 <HAL_TIM_MspPostInit+0x208>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034b4:	2500      	movs	r5, #0
 80034b6:	9503      	str	r5, [sp, #12]
 80034b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034ba:	f042 0201 	orr.w	r2, r2, #1
 80034be:	631a      	str	r2, [r3, #48]	; 0x30
 80034c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034c2:	f002 0201 	and.w	r2, r2, #1
 80034c6:	9203      	str	r2, [sp, #12]
 80034c8:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034ca:	9504      	str	r5, [sp, #16]
 80034cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034ce:	f042 0202 	orr.w	r2, r2, #2
 80034d2:	631a      	str	r2, [r3, #48]	; 0x30
 80034d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d6:	f003 0302 	and.w	r3, r3, #2
 80034da:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034dc:	2402      	movs	r4, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034de:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034e0:	940c      	str	r4, [sp, #48]	; 0x30
    GPIO_InitStruct.Pin = S05i5_Pin;
 80034e2:	2340      	movs	r3, #64	; 0x40
    HAL_GPIO_Init(S05i5_GPIO_Port, &GPIO_InitStruct);
 80034e4:	a90b      	add	r1, sp, #44	; 0x2c
    GPIO_InitStruct.Pin = S05i5_Pin;
 80034e6:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80034e8:	940f      	str	r4, [sp, #60]	; 0x3c
    HAL_GPIO_Init(S05i5_GPIO_Port, &GPIO_InitStruct);
 80034ea:	f7fd fc19 	bl	8000d20 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = S10_Pin|S01_Pin|S13x5_Pin;
 80034ee:	2323      	movs	r3, #35	; 0x23
 80034f0:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034f2:	940c      	str	r4, [sp, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f4:	950d      	str	r5, [sp, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034f6:	950e      	str	r5, [sp, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80034f8:	940f      	str	r4, [sp, #60]	; 0x3c
    HAL_GPIO_Init(S22i1_GPIO_Port, &GPIO_InitStruct);
 80034fa:	a90b      	add	r1, sp, #44	; 0x2c
 80034fc:	4844      	ldr	r0, [pc, #272]	; (8003610 <HAL_TIM_MspPostInit+0x204>)
 80034fe:	e02b      	b.n	8003558 <HAL_TIM_MspPostInit+0x14c>
  else if(htim->Instance==TIM5)
 8003500:	4a46      	ldr	r2, [pc, #280]	; (800361c <HAL_TIM_MspPostInit+0x210>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d110      	bne.n	8003528 <HAL_TIM_MspPostInit+0x11c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003506:	2300      	movs	r3, #0
 8003508:	9305      	str	r3, [sp, #20]
 800350a:	4b40      	ldr	r3, [pc, #256]	; (800360c <HAL_TIM_MspPostInit+0x200>)
 800350c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800350e:	f042 0201 	orr.w	r2, r2, #1
 8003512:	631a      	str	r2, [r3, #48]	; 0x30
 8003514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003516:	f003 0301 	and.w	r3, r3, #1
 800351a:	9305      	str	r3, [sp, #20]
 800351c:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = S21i4_Pin|S04x4_Pin;
 800351e:	2303      	movs	r3, #3
 8003520:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003522:	2302      	movs	r3, #2
 8003524:	930c      	str	r3, [sp, #48]	; 0x30
 8003526:	e78f      	b.n	8003448 <HAL_TIM_MspPostInit+0x3c>
  else if(htim->Instance==TIM8)
 8003528:	4a3d      	ldr	r2, [pc, #244]	; (8003620 <HAL_TIM_MspPostInit+0x214>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d118      	bne.n	8003560 <HAL_TIM_MspPostInit+0x154>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800352e:	2300      	movs	r3, #0
 8003530:	9306      	str	r3, [sp, #24]
 8003532:	4b36      	ldr	r3, [pc, #216]	; (800360c <HAL_TIM_MspPostInit+0x200>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003534:	483b      	ldr	r0, [pc, #236]	; (8003624 <HAL_TIM_MspPostInit+0x218>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003536:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003538:	f042 0204 	orr.w	r2, r2, #4
 800353c:	631a      	str	r2, [r3, #48]	; 0x30
 800353e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003540:	f003 0304 	and.w	r3, r3, #4
 8003544:	9306      	str	r3, [sp, #24]
 8003546:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = S20i6_Pin|S06x6_Pin|S07_Pin|S08_Pin;
 8003548:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800354c:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800354e:	2302      	movs	r3, #2
 8003550:	930c      	str	r3, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003552:	2303      	movs	r3, #3
 8003554:	930f      	str	r3, [sp, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003556:	a90b      	add	r1, sp, #44	; 0x2c
    HAL_GPIO_Init(S11_GPIO_Port, &GPIO_InitStruct);
 8003558:	f7fd fbe2 	bl	8000d20 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 800355c:	b010      	add	sp, #64	; 0x40
 800355e:	bd70      	pop	{r4, r5, r6, pc}
  else if(htim->Instance==TIM10)
 8003560:	4a31      	ldr	r2, [pc, #196]	; (8003628 <HAL_TIM_MspPostInit+0x21c>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d113      	bne.n	800358e <HAL_TIM_MspPostInit+0x182>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003566:	2300      	movs	r3, #0
 8003568:	9307      	str	r3, [sp, #28]
 800356a:	4b28      	ldr	r3, [pc, #160]	; (800360c <HAL_TIM_MspPostInit+0x200>)
 800356c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800356e:	f042 0202 	orr.w	r2, r2, #2
 8003572:	631a      	str	r2, [r3, #48]	; 0x30
 8003574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003576:	f003 0302 	and.w	r3, r3, #2
 800357a:	9307      	str	r3, [sp, #28]
 800357c:	9b07      	ldr	r3, [sp, #28]
    GPIO_InitStruct.Pin = S16_Pin;
 800357e:	f44f 7380 	mov.w	r3, #256	; 0x100
    GPIO_InitStruct.Pin = S12_Pin;
 8003582:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003584:	2302      	movs	r3, #2
 8003586:	930c      	str	r3, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8003588:	2303      	movs	r3, #3
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800358a:	930f      	str	r3, [sp, #60]	; 0x3c
 800358c:	e7b5      	b.n	80034fa <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM11)
 800358e:	4a27      	ldr	r2, [pc, #156]	; (800362c <HAL_TIM_MspPostInit+0x220>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d10e      	bne.n	80035b2 <HAL_TIM_MspPostInit+0x1a6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003594:	2300      	movs	r3, #0
 8003596:	9308      	str	r3, [sp, #32]
 8003598:	4b1c      	ldr	r3, [pc, #112]	; (800360c <HAL_TIM_MspPostInit+0x200>)
 800359a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800359c:	f042 0202 	orr.w	r2, r2, #2
 80035a0:	631a      	str	r2, [r3, #48]	; 0x30
 80035a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a4:	f003 0302 	and.w	r3, r3, #2
 80035a8:	9308      	str	r3, [sp, #32]
 80035aa:	9b08      	ldr	r3, [sp, #32]
    GPIO_InitStruct.Pin = S12_Pin;
 80035ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80035b0:	e7e7      	b.n	8003582 <HAL_TIM_MspPostInit+0x176>
  else if(htim->Instance==TIM12)
 80035b2:	4a1f      	ldr	r2, [pc, #124]	; (8003630 <HAL_TIM_MspPostInit+0x224>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d112      	bne.n	80035de <HAL_TIM_MspPostInit+0x1d2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035b8:	2300      	movs	r3, #0
 80035ba:	9309      	str	r3, [sp, #36]	; 0x24
 80035bc:	4b13      	ldr	r3, [pc, #76]	; (800360c <HAL_TIM_MspPostInit+0x200>)
 80035be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035c0:	f042 0202 	orr.w	r2, r2, #2
 80035c4:	631a      	str	r2, [r3, #48]	; 0x30
 80035c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c8:	f003 0302 	and.w	r3, r3, #2
 80035cc:	9309      	str	r3, [sp, #36]	; 0x24
 80035ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Pin = S22i1_Pin;
 80035d0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80035d4:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035d6:	2302      	movs	r3, #2
 80035d8:	930c      	str	r3, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80035da:	2309      	movs	r3, #9
 80035dc:	e7d5      	b.n	800358a <HAL_TIM_MspPostInit+0x17e>
  else if(htim->Instance==TIM14)
 80035de:	4a15      	ldr	r2, [pc, #84]	; (8003634 <HAL_TIM_MspPostInit+0x228>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d1bb      	bne.n	800355c <HAL_TIM_MspPostInit+0x150>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035e4:	2300      	movs	r3, #0
 80035e6:	930a      	str	r3, [sp, #40]	; 0x28
 80035e8:	4b08      	ldr	r3, [pc, #32]	; (800360c <HAL_TIM_MspPostInit+0x200>)
 80035ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035ec:	f042 0201 	orr.w	r2, r2, #1
 80035f0:	631a      	str	r2, [r3, #48]	; 0x30
 80035f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f4:	f003 0301 	and.w	r3, r3, #1
 80035f8:	930a      	str	r3, [sp, #40]	; 0x28
 80035fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = S11_Pin;
 80035fc:	2380      	movs	r3, #128	; 0x80
 80035fe:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003600:	2302      	movs	r3, #2
 8003602:	930c      	str	r3, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8003604:	2309      	movs	r3, #9
 8003606:	e71f      	b.n	8003448 <HAL_TIM_MspPostInit+0x3c>
 8003608:	40010000 	.word	0x40010000
 800360c:	40023800 	.word	0x40023800
 8003610:	40020400 	.word	0x40020400
 8003614:	40020000 	.word	0x40020000
 8003618:	40000400 	.word	0x40000400
 800361c:	40000c00 	.word	0x40000c00
 8003620:	40010400 	.word	0x40010400
 8003624:	40020800 	.word	0x40020800
 8003628:	40014400 	.word	0x40014400
 800362c:	40014800 	.word	0x40014800
 8003630:	40001800 	.word	0x40001800
 8003634:	40002000 	.word	0x40002000

08003638 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003638:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800363c:	4605      	mov	r5, r0
 800363e:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003640:	2214      	movs	r2, #20
 8003642:	2100      	movs	r1, #0
 8003644:	a807      	add	r0, sp, #28
 8003646:	f000 fa32 	bl	8003aae <memset>
  if(huart->Instance==UART4)
 800364a:	682b      	ldr	r3, [r5, #0]
 800364c:	4a8c      	ldr	r2, [pc, #560]	; (8003880 <HAL_UART_MspInit+0x248>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d161      	bne.n	8003716 <HAL_UART_MspInit+0xde>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003652:	2600      	movs	r6, #0
 8003654:	4b8b      	ldr	r3, [pc, #556]	; (8003884 <HAL_UART_MspInit+0x24c>)
 8003656:	9600      	str	r6, [sp, #0]
 8003658:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = FTDI_TX_Pin|FTDI_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800365a:	488b      	ldr	r0, [pc, #556]	; (8003888 <HAL_UART_MspInit+0x250>)

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 800365c:	4c8b      	ldr	r4, [pc, #556]	; (800388c <HAL_UART_MspInit+0x254>)
    __HAL_RCC_UART4_CLK_ENABLE();
 800365e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003662:	641a      	str	r2, [r3, #64]	; 0x40
 8003664:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003666:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 800366a:	9200      	str	r2, [sp, #0]
 800366c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800366e:	9601      	str	r6, [sp, #4]
 8003670:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003672:	f042 0204 	orr.w	r2, r2, #4
 8003676:	631a      	str	r2, [r3, #48]	; 0x30
 8003678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800367a:	f003 0304 	and.w	r3, r3, #4
 800367e:	9301      	str	r3, [sp, #4]
 8003680:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = FTDI_TX_Pin|FTDI_RX_Pin;
 8003682:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003686:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003688:	2302      	movs	r3, #2
 800368a:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800368c:	2301      	movs	r3, #1
 800368e:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003690:	2303      	movs	r3, #3
 8003692:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003694:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003696:	2308      	movs	r3, #8
 8003698:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800369a:	f7fd fb41 	bl	8000d20 <HAL_GPIO_Init>
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 800369e:	4b7c      	ldr	r3, [pc, #496]	; (8003890 <HAL_UART_MspInit+0x258>)
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80036a0:	60a6      	str	r6, [r4, #8]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 80036a2:	f04f 6800 	mov.w	r8, #134217728	; 0x8000000
 80036a6:	e884 0108 	stmia.w	r4, {r3, r8}
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80036aa:	4620      	mov	r0, r4
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80036ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80036b0:	60e6      	str	r6, [r4, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80036b2:	6123      	str	r3, [r4, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80036b4:	6166      	str	r6, [r4, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80036b6:	61a6      	str	r6, [r4, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 80036b8:	61e6      	str	r6, [r4, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80036ba:	6226      	str	r6, [r4, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80036bc:	6266      	str	r6, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80036be:	f7fd f9ab 	bl	8000a18 <HAL_DMA_Init>
 80036c2:	b108      	cbz	r0, 80036c8 <HAL_UART_MspInit+0x90>
    {
      Error_Handler();
 80036c4:	f7ff fbae 	bl	8002e24 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 80036c8:	636c      	str	r4, [r5, #52]	; 0x34

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80036ca:	4b72      	ldr	r3, [pc, #456]	; (8003894 <HAL_UART_MspInit+0x25c>)
    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 80036cc:	63a5      	str	r5, [r4, #56]	; 0x38
    hdma_uart4_tx.Instance = DMA1_Stream4;
 80036ce:	4c72      	ldr	r4, [pc, #456]	; (8003898 <HAL_UART_MspInit+0x260>)
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80036d0:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
 80036d4:	f04f 0e40 	mov.w	lr, #64	; 0x40
 80036d8:	e884 5008 	stmia.w	r4, {r3, ip, lr}
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80036dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80036e0:	2300      	movs	r3, #0
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 80036e2:	4620      	mov	r0, r4
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80036e4:	60e3      	str	r3, [r4, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80036e6:	6122      	str	r2, [r4, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80036e8:	6163      	str	r3, [r4, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80036ea:	61a3      	str	r3, [r4, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 80036ec:	61e3      	str	r3, [r4, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80036ee:	6223      	str	r3, [r4, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80036f0:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 80036f2:	f7fd f991 	bl	8000a18 <HAL_DMA_Init>
 80036f6:	b108      	cbz	r0, 80036fc <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 80036f8:	f7ff fb94 	bl	8002e24 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80036fc:	2200      	movs	r2, #0
    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 80036fe:	632c      	str	r4, [r5, #48]	; 0x30
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8003700:	2034      	movs	r0, #52	; 0x34
 8003702:	4611      	mov	r1, r2
    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8003704:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8003706:	f7fd f919 	bl	800093c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800370a:	2034      	movs	r0, #52	; 0x34
 800370c:	f7fd f94a 	bl	80009a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003710:	b00d      	add	sp, #52	; 0x34
 8003712:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  else if(huart->Instance==UART5)
 8003716:	4a61      	ldr	r2, [pc, #388]	; (800389c <HAL_UART_MspInit+0x264>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d171      	bne.n	8003800 <HAL_UART_MspInit+0x1c8>
    __HAL_RCC_UART5_CLK_ENABLE();
 800371c:	2600      	movs	r6, #0
 800371e:	4b59      	ldr	r3, [pc, #356]	; (8003884 <HAL_UART_MspInit+0x24c>)
 8003720:	9602      	str	r6, [sp, #8]
 8003722:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(UART5_TX_GPIO_Port, &GPIO_InitStruct);
 8003724:	4858      	ldr	r0, [pc, #352]	; (8003888 <HAL_UART_MspInit+0x250>)
    __HAL_RCC_UART5_CLK_ENABLE();
 8003726:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800372a:	641a      	str	r2, [r3, #64]	; 0x40
 800372c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800372e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003732:	9202      	str	r2, [sp, #8]
 8003734:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003736:	9603      	str	r6, [sp, #12]
 8003738:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800373a:	f042 0204 	orr.w	r2, r2, #4
 800373e:	631a      	str	r2, [r3, #48]	; 0x30
 8003740:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003742:	f002 0204 	and.w	r2, r2, #4
 8003746:	9203      	str	r2, [sp, #12]
 8003748:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800374a:	9604      	str	r6, [sp, #16]
 800374c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800374e:	f042 0208 	orr.w	r2, r2, #8
 8003752:	631a      	str	r2, [r3, #48]	; 0x30
 8003754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003756:	f003 0308 	and.w	r3, r3, #8
 800375a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800375c:	2408      	movs	r4, #8
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800375e:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003760:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Pin = UART5_TX_Pin;
 8003762:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003766:	f04f 0902 	mov.w	r9, #2
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800376a:	f04f 0801 	mov.w	r8, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800376e:	2703      	movs	r7, #3
    HAL_GPIO_Init(UART5_TX_GPIO_Port, &GPIO_InitStruct);
 8003770:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Pin = UART5_TX_Pin;
 8003772:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003774:	f8cd 9020 	str.w	r9, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003778:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800377c:	970a      	str	r7, [sp, #40]	; 0x28
    HAL_GPIO_Init(UART5_TX_GPIO_Port, &GPIO_InitStruct);
 800377e:	f7fd facf 	bl	8000d20 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = UART5_RX_Pin;
 8003782:	2304      	movs	r3, #4
    HAL_GPIO_Init(UART5_RX_GPIO_Port, &GPIO_InitStruct);
 8003784:	a907      	add	r1, sp, #28
 8003786:	4846      	ldr	r0, [pc, #280]	; (80038a0 <HAL_UART_MspInit+0x268>)
    GPIO_InitStruct.Pin = UART5_RX_Pin;
 8003788:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800378a:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800378c:	f8cd 9020 	str.w	r9, [sp, #32]
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8003790:	4c44      	ldr	r4, [pc, #272]	; (80038a4 <HAL_UART_MspInit+0x26c>)
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003792:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003796:	970a      	str	r7, [sp, #40]	; 0x28
    HAL_GPIO_Init(UART5_RX_GPIO_Port, &GPIO_InitStruct);
 8003798:	f7fd fac2 	bl	8000d20 <HAL_GPIO_Init>
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 800379c:	4942      	ldr	r1, [pc, #264]	; (80038a8 <HAL_UART_MspInit+0x270>)
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800379e:	60a6      	str	r6, [r4, #8]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 80037a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80037a4:	e884 000a 	stmia.w	r4, {r1, r3}
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 80037a8:	4620      	mov	r0, r4
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80037aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80037ae:	60e6      	str	r6, [r4, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80037b0:	6123      	str	r3, [r4, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80037b2:	6166      	str	r6, [r4, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80037b4:	61a6      	str	r6, [r4, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 80037b6:	61e6      	str	r6, [r4, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 80037b8:	6226      	str	r6, [r4, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80037ba:	6266      	str	r6, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 80037bc:	f7fd f92c 	bl	8000a18 <HAL_DMA_Init>
 80037c0:	b108      	cbz	r0, 80037c6 <HAL_UART_MspInit+0x18e>
      Error_Handler();
 80037c2:	f7ff fb2f 	bl	8002e24 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 80037c6:	636c      	str	r4, [r5, #52]	; 0x34
    hdma_uart5_tx.Instance = DMA1_Stream7;
 80037c8:	4b38      	ldr	r3, [pc, #224]	; (80038ac <HAL_UART_MspInit+0x274>)
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 80037ca:	63a5      	str	r5, [r4, #56]	; 0x38
    hdma_uart5_tx.Instance = DMA1_Stream7;
 80037cc:	4c38      	ldr	r4, [pc, #224]	; (80038b0 <HAL_UART_MspInit+0x278>)
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80037ce:	6023      	str	r3, [r4, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80037d0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80037d4:	6063      	str	r3, [r4, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80037d6:	2340      	movs	r3, #64	; 0x40
 80037d8:	60a3      	str	r3, [r4, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80037da:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80037de:	2300      	movs	r3, #0
 80037e0:	60e3      	str	r3, [r4, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80037e2:	6122      	str	r2, [r4, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80037e4:	6163      	str	r3, [r4, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80037e6:	61a3      	str	r3, [r4, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80037e8:	61e3      	str	r3, [r4, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80037ea:	6223      	str	r3, [r4, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80037ec:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80037ee:	4620      	mov	r0, r4
 80037f0:	f7fd f912 	bl	8000a18 <HAL_DMA_Init>
 80037f4:	b108      	cbz	r0, 80037fa <HAL_UART_MspInit+0x1c2>
      Error_Handler();
 80037f6:	f7ff fb15 	bl	8002e24 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80037fa:	632c      	str	r4, [r5, #48]	; 0x30
 80037fc:	63a5      	str	r5, [r4, #56]	; 0x38
}
 80037fe:	e787      	b.n	8003710 <HAL_UART_MspInit+0xd8>
  else if(huart->Instance==USART2)
 8003800:	4a2c      	ldr	r2, [pc, #176]	; (80038b4 <HAL_UART_MspInit+0x27c>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d184      	bne.n	8003710 <HAL_UART_MspInit+0xd8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003806:	2600      	movs	r6, #0
 8003808:	4b1e      	ldr	r3, [pc, #120]	; (8003884 <HAL_UART_MspInit+0x24c>)
 800380a:	9605      	str	r6, [sp, #20]
 800380c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800380e:	482a      	ldr	r0, [pc, #168]	; (80038b8 <HAL_UART_MspInit+0x280>)
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003810:	4c2a      	ldr	r4, [pc, #168]	; (80038bc <HAL_UART_MspInit+0x284>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8003812:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003816:	641a      	str	r2, [r3, #64]	; 0x40
 8003818:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800381a:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800381e:	9205      	str	r2, [sp, #20]
 8003820:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003822:	9606      	str	r6, [sp, #24]
 8003824:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003826:	f042 0201 	orr.w	r2, r2, #1
 800382a:	631a      	str	r2, [r3, #48]	; 0x30
 800382c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382e:	f003 0301 	and.w	r3, r3, #1
 8003832:	9306      	str	r3, [sp, #24]
 8003834:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = UART2_TX_Pin|UART2_RX_Pin;
 8003836:	230c      	movs	r3, #12
 8003838:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800383a:	2302      	movs	r3, #2
 800383c:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800383e:	2303      	movs	r3, #3
 8003840:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003842:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003844:	2307      	movs	r3, #7
 8003846:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003848:	f7fd fa6a 	bl	8000d20 <HAL_GPIO_Init>
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800384c:	4a1c      	ldr	r2, [pc, #112]	; (80038c0 <HAL_UART_MspInit+0x288>)
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800384e:	60a6      	str	r6, [r4, #8]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003850:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003854:	e884 000c 	stmia.w	r4, {r2, r3}
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003858:	4620      	mov	r0, r4
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800385a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800385e:	60e6      	str	r6, [r4, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003860:	6123      	str	r3, [r4, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003862:	6166      	str	r6, [r4, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003864:	61a6      	str	r6, [r4, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003866:	61e6      	str	r6, [r4, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003868:	6226      	str	r6, [r4, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800386a:	6266      	str	r6, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800386c:	f7fd f8d4 	bl	8000a18 <HAL_DMA_Init>
 8003870:	b108      	cbz	r0, 8003876 <HAL_UART_MspInit+0x23e>
      Error_Handler();
 8003872:	f7ff fad7 	bl	8002e24 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003876:	636c      	str	r4, [r5, #52]	; 0x34
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8003878:	4b12      	ldr	r3, [pc, #72]	; (80038c4 <HAL_UART_MspInit+0x28c>)
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800387a:	63a5      	str	r5, [r4, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800387c:	4c12      	ldr	r4, [pc, #72]	; (80038c8 <HAL_UART_MspInit+0x290>)
 800387e:	e7a6      	b.n	80037ce <HAL_UART_MspInit+0x196>
 8003880:	40004c00 	.word	0x40004c00
 8003884:	40023800 	.word	0x40023800
 8003888:	40020800 	.word	0x40020800
 800388c:	200000b0 	.word	0x200000b0
 8003890:	40026040 	.word	0x40026040
 8003894:	40026070 	.word	0x40026070
 8003898:	20005814 	.word	0x20005814
 800389c:	40005000 	.word	0x40005000
 80038a0:	40020c00 	.word	0x40020c00
 80038a4:	20002ea0 	.word	0x20002ea0
 80038a8:	40026010 	.word	0x40026010
 80038ac:	400260b8 	.word	0x400260b8
 80038b0:	20005874 	.word	0x20005874
 80038b4:	40004400 	.word	0x40004400
 80038b8:	40020000 	.word	0x40020000
 80038bc:	20000110 	.word	0x20000110
 80038c0:	40026088 	.word	0x40026088
 80038c4:	400260a0 	.word	0x400260a0
 80038c8:	20002c98 	.word	0x20002c98

080038cc <NMI_Handler>:
 80038cc:	4770      	bx	lr

080038ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80038ce:	e7fe      	b.n	80038ce <HardFault_Handler>

080038d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80038d0:	e7fe      	b.n	80038d0 <MemManage_Handler>

080038d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80038d2:	e7fe      	b.n	80038d2 <BusFault_Handler>

080038d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80038d4:	e7fe      	b.n	80038d4 <UsageFault_Handler>

080038d6 <SVC_Handler>:
 80038d6:	4770      	bx	lr

080038d8 <DebugMon_Handler>:
 80038d8:	4770      	bx	lr

080038da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80038da:	4770      	bx	lr

080038dc <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80038dc:	f7fc beae 	b.w	800063c <HAL_IncTick>

080038e0 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 80038e0:	4801      	ldr	r0, [pc, #4]	; (80038e8 <DMA1_Stream0_IRQHandler+0x8>)
 80038e2:	f7fd b963 	b.w	8000bac <HAL_DMA_IRQHandler>
 80038e6:	bf00      	nop
 80038e8:	20002ea0 	.word	0x20002ea0

080038ec <DMA1_Stream2_IRQHandler>:
void DMA1_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80038ec:	4801      	ldr	r0, [pc, #4]	; (80038f4 <DMA1_Stream2_IRQHandler+0x8>)
 80038ee:	f7fd b95d 	b.w	8000bac <HAL_DMA_IRQHandler>
 80038f2:	bf00      	nop
 80038f4:	200000b0 	.word	0x200000b0

080038f8 <DMA1_Stream3_IRQHandler>:
void DMA1_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80038f8:	4801      	ldr	r0, [pc, #4]	; (8003900 <DMA1_Stream3_IRQHandler+0x8>)
 80038fa:	f7fd b957 	b.w	8000bac <HAL_DMA_IRQHandler>
 80038fe:	bf00      	nop
 8003900:	20002b30 	.word	0x20002b30

08003904 <DMA1_Stream4_IRQHandler>:
void DMA1_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8003904:	4801      	ldr	r0, [pc, #4]	; (800390c <DMA1_Stream4_IRQHandler+0x8>)
 8003906:	f7fd b951 	b.w	8000bac <HAL_DMA_IRQHandler>
 800390a:	bf00      	nop
 800390c:	20005814 	.word	0x20005814

08003910 <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003910:	4801      	ldr	r0, [pc, #4]	; (8003918 <DMA1_Stream5_IRQHandler+0x8>)
 8003912:	f7fd b94b 	b.w	8000bac <HAL_DMA_IRQHandler>
 8003916:	bf00      	nop
 8003918:	20000110 	.word	0x20000110

0800391c <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800391c:	4801      	ldr	r0, [pc, #4]	; (8003924 <DMA1_Stream6_IRQHandler+0x8>)
 800391e:	f7fd b945 	b.w	8000bac <HAL_DMA_IRQHandler>
 8003922:	bf00      	nop
 8003924:	20002c98 	.word	0x20002c98

08003928 <DMA1_Stream7_IRQHandler>:
void DMA1_Stream7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8003928:	4801      	ldr	r0, [pc, #4]	; (8003930 <DMA1_Stream7_IRQHandler+0x8>)
 800392a:	f7fd b93f 	b.w	8000bac <HAL_DMA_IRQHandler>
 800392e:	bf00      	nop
 8003930:	20005874 	.word	0x20005874

08003934 <UART4_IRQHandler>:
void UART4_IRQHandler(void)
{
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003934:	4801      	ldr	r0, [pc, #4]	; (800393c <UART4_IRQHandler+0x8>)
 8003936:	f7fe bdb5 	b.w	80024a4 <HAL_UART_IRQHandler>
 800393a:	bf00      	nop
 800393c:	20002de0 	.word	0x20002de0

08003940 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8003940:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003942:	4b0a      	ldr	r3, [pc, #40]	; (800396c <_sbrk+0x2c>)
 8003944:	6819      	ldr	r1, [r3, #0]
{
 8003946:	4602      	mov	r2, r0
	if (heap_end == 0)
 8003948:	b909      	cbnz	r1, 800394e <_sbrk+0xe>
		heap_end = &end;
 800394a:	4909      	ldr	r1, [pc, #36]	; (8003970 <_sbrk+0x30>)
 800394c:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 800394e:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8003950:	4669      	mov	r1, sp
 8003952:	4402      	add	r2, r0
 8003954:	428a      	cmp	r2, r1
 8003956:	d906      	bls.n	8003966 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8003958:	f000 f85a 	bl	8003a10 <__errno>
 800395c:	230c      	movs	r3, #12
 800395e:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8003960:	f04f 30ff 	mov.w	r0, #4294967295
 8003964:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8003966:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8003968:	bd08      	pop	{r3, pc}
 800396a:	bf00      	nop
 800396c:	200000a0 	.word	0x200000a0
 8003970:	200058d8 	.word	0x200058d8

08003974 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003974:	4b05      	ldr	r3, [pc, #20]	; (800398c <SystemInit+0x18>)
 8003976:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800397a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800397e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003982:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003986:	609a      	str	r2, [r3, #8]
 8003988:	4770      	bx	lr
 800398a:	bf00      	nop
 800398c:	e000ed00 	.word	0xe000ed00

08003990 <LedSwitch>:
  if(led_num == 2)
  {
    port=LED2_GPIO_Port;
    pin=LED2_Pin;
  }
  if(led_num == 3)
 8003990:	2803      	cmp	r0, #3
 8003992:	d00b      	beq.n	80039ac <LedSwitch+0x1c>
    pin=LED3_Pin;
  }
  if(led_num == 4)
  {
    port=LED4_GPIO_Port;
    pin=LED4_Pin;
 8003994:	4a07      	ldr	r2, [pc, #28]	; (80039b4 <LedSwitch+0x24>)
  if(led_num == 4)
 8003996:	2804      	cmp	r0, #4
    pin=LED4_Pin;
 8003998:	bf18      	it	ne
 800399a:	2310      	movne	r3, #16
 800399c:	4806      	ldr	r0, [pc, #24]	; (80039b8 <LedSwitch+0x28>)
 800399e:	bf04      	itt	eq
 80039a0:	2301      	moveq	r3, #1
 80039a2:	4610      	moveq	r0, r2
  }

  HAL_GPIO_WritePin(port, pin, state);
 80039a4:	b2ca      	uxtb	r2, r1
 80039a6:	4619      	mov	r1, r3
 80039a8:	f7fd ba94 	b.w	8000ed4 <HAL_GPIO_WritePin>
    pin=LED3_Pin;
 80039ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039b0:	4801      	ldr	r0, [pc, #4]	; (80039b8 <LedSwitch+0x28>)
 80039b2:	e7f7      	b.n	80039a4 <LedSwitch+0x14>
 80039b4:	40021c00 	.word	0x40021c00
 80039b8:	40020400 	.word	0x40020400

080039bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80039bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80039f4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80039c0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80039c2:	e003      	b.n	80039cc <LoopCopyDataInit>

080039c4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80039c4:	4b0c      	ldr	r3, [pc, #48]	; (80039f8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80039c6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80039c8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80039ca:	3104      	adds	r1, #4

080039cc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80039cc:	480b      	ldr	r0, [pc, #44]	; (80039fc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80039ce:	4b0c      	ldr	r3, [pc, #48]	; (8003a00 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80039d0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80039d2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80039d4:	d3f6      	bcc.n	80039c4 <CopyDataInit>
  ldr  r2, =_sbss
 80039d6:	4a0b      	ldr	r2, [pc, #44]	; (8003a04 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80039d8:	e002      	b.n	80039e0 <LoopFillZerobss>

080039da <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80039da:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80039dc:	f842 3b04 	str.w	r3, [r2], #4

080039e0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80039e0:	4b09      	ldr	r3, [pc, #36]	; (8003a08 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80039e2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80039e4:	d3f9      	bcc.n	80039da <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80039e6:	f7ff ffc5 	bl	8003974 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80039ea:	f000 f817 	bl	8003a1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80039ee:	f7fe fe5d 	bl	80026ac <main>
  bx  lr    
 80039f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80039f4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80039f8:	0800434c 	.word	0x0800434c
  ldr  r0, =_sdata
 80039fc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003a00:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8003a04:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8003a08:	200058d8 	.word	0x200058d8

08003a0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003a0c:	e7fe      	b.n	8003a0c <ADC_IRQHandler>
	...

08003a10 <__errno>:
 8003a10:	4b01      	ldr	r3, [pc, #4]	; (8003a18 <__errno+0x8>)
 8003a12:	6818      	ldr	r0, [r3, #0]
 8003a14:	4770      	bx	lr
 8003a16:	bf00      	nop
 8003a18:	2000000c 	.word	0x2000000c

08003a1c <__libc_init_array>:
 8003a1c:	b570      	push	{r4, r5, r6, lr}
 8003a1e:	4e0d      	ldr	r6, [pc, #52]	; (8003a54 <__libc_init_array+0x38>)
 8003a20:	4c0d      	ldr	r4, [pc, #52]	; (8003a58 <__libc_init_array+0x3c>)
 8003a22:	1ba4      	subs	r4, r4, r6
 8003a24:	10a4      	asrs	r4, r4, #2
 8003a26:	2500      	movs	r5, #0
 8003a28:	42a5      	cmp	r5, r4
 8003a2a:	d109      	bne.n	8003a40 <__libc_init_array+0x24>
 8003a2c:	4e0b      	ldr	r6, [pc, #44]	; (8003a5c <__libc_init_array+0x40>)
 8003a2e:	4c0c      	ldr	r4, [pc, #48]	; (8003a60 <__libc_init_array+0x44>)
 8003a30:	f000 fc3e 	bl	80042b0 <_init>
 8003a34:	1ba4      	subs	r4, r4, r6
 8003a36:	10a4      	asrs	r4, r4, #2
 8003a38:	2500      	movs	r5, #0
 8003a3a:	42a5      	cmp	r5, r4
 8003a3c:	d105      	bne.n	8003a4a <__libc_init_array+0x2e>
 8003a3e:	bd70      	pop	{r4, r5, r6, pc}
 8003a40:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003a44:	4798      	blx	r3
 8003a46:	3501      	adds	r5, #1
 8003a48:	e7ee      	b.n	8003a28 <__libc_init_array+0xc>
 8003a4a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003a4e:	4798      	blx	r3
 8003a50:	3501      	adds	r5, #1
 8003a52:	e7f2      	b.n	8003a3a <__libc_init_array+0x1e>
 8003a54:	08004344 	.word	0x08004344
 8003a58:	08004344 	.word	0x08004344
 8003a5c:	08004344 	.word	0x08004344
 8003a60:	08004348 	.word	0x08004348

08003a64 <memcpy>:
 8003a64:	b510      	push	{r4, lr}
 8003a66:	1e43      	subs	r3, r0, #1
 8003a68:	440a      	add	r2, r1
 8003a6a:	4291      	cmp	r1, r2
 8003a6c:	d100      	bne.n	8003a70 <memcpy+0xc>
 8003a6e:	bd10      	pop	{r4, pc}
 8003a70:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a74:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003a78:	e7f7      	b.n	8003a6a <memcpy+0x6>

08003a7a <memmove>:
 8003a7a:	4288      	cmp	r0, r1
 8003a7c:	b510      	push	{r4, lr}
 8003a7e:	eb01 0302 	add.w	r3, r1, r2
 8003a82:	d803      	bhi.n	8003a8c <memmove+0x12>
 8003a84:	1e42      	subs	r2, r0, #1
 8003a86:	4299      	cmp	r1, r3
 8003a88:	d10c      	bne.n	8003aa4 <memmove+0x2a>
 8003a8a:	bd10      	pop	{r4, pc}
 8003a8c:	4298      	cmp	r0, r3
 8003a8e:	d2f9      	bcs.n	8003a84 <memmove+0xa>
 8003a90:	1881      	adds	r1, r0, r2
 8003a92:	1ad2      	subs	r2, r2, r3
 8003a94:	42d3      	cmn	r3, r2
 8003a96:	d100      	bne.n	8003a9a <memmove+0x20>
 8003a98:	bd10      	pop	{r4, pc}
 8003a9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003a9e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003aa2:	e7f7      	b.n	8003a94 <memmove+0x1a>
 8003aa4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003aa8:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003aac:	e7eb      	b.n	8003a86 <memmove+0xc>

08003aae <memset>:
 8003aae:	4402      	add	r2, r0
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d100      	bne.n	8003ab8 <memset+0xa>
 8003ab6:	4770      	bx	lr
 8003ab8:	f803 1b01 	strb.w	r1, [r3], #1
 8003abc:	e7f9      	b.n	8003ab2 <memset+0x4>
	...

08003ac0 <siprintf>:
 8003ac0:	b40e      	push	{r1, r2, r3}
 8003ac2:	b500      	push	{lr}
 8003ac4:	b09c      	sub	sp, #112	; 0x70
 8003ac6:	f44f 7102 	mov.w	r1, #520	; 0x208
 8003aca:	ab1d      	add	r3, sp, #116	; 0x74
 8003acc:	f8ad 1014 	strh.w	r1, [sp, #20]
 8003ad0:	9002      	str	r0, [sp, #8]
 8003ad2:	9006      	str	r0, [sp, #24]
 8003ad4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003ad8:	480a      	ldr	r0, [pc, #40]	; (8003b04 <siprintf+0x44>)
 8003ada:	9104      	str	r1, [sp, #16]
 8003adc:	9107      	str	r1, [sp, #28]
 8003ade:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003ae2:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ae6:	f8ad 1016 	strh.w	r1, [sp, #22]
 8003aea:	6800      	ldr	r0, [r0, #0]
 8003aec:	9301      	str	r3, [sp, #4]
 8003aee:	a902      	add	r1, sp, #8
 8003af0:	f000 f866 	bl	8003bc0 <_svfiprintf_r>
 8003af4:	9b02      	ldr	r3, [sp, #8]
 8003af6:	2200      	movs	r2, #0
 8003af8:	701a      	strb	r2, [r3, #0]
 8003afa:	b01c      	add	sp, #112	; 0x70
 8003afc:	f85d eb04 	ldr.w	lr, [sp], #4
 8003b00:	b003      	add	sp, #12
 8003b02:	4770      	bx	lr
 8003b04:	2000000c 	.word	0x2000000c

08003b08 <__ssputs_r>:
 8003b08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b0c:	688e      	ldr	r6, [r1, #8]
 8003b0e:	429e      	cmp	r6, r3
 8003b10:	4682      	mov	sl, r0
 8003b12:	460c      	mov	r4, r1
 8003b14:	4691      	mov	r9, r2
 8003b16:	4698      	mov	r8, r3
 8003b18:	d835      	bhi.n	8003b86 <__ssputs_r+0x7e>
 8003b1a:	898a      	ldrh	r2, [r1, #12]
 8003b1c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003b20:	d031      	beq.n	8003b86 <__ssputs_r+0x7e>
 8003b22:	6825      	ldr	r5, [r4, #0]
 8003b24:	6909      	ldr	r1, [r1, #16]
 8003b26:	1a6f      	subs	r7, r5, r1
 8003b28:	6965      	ldr	r5, [r4, #20]
 8003b2a:	2302      	movs	r3, #2
 8003b2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003b30:	fb95 f5f3 	sdiv	r5, r5, r3
 8003b34:	f108 0301 	add.w	r3, r8, #1
 8003b38:	443b      	add	r3, r7
 8003b3a:	429d      	cmp	r5, r3
 8003b3c:	bf38      	it	cc
 8003b3e:	461d      	movcc	r5, r3
 8003b40:	0553      	lsls	r3, r2, #21
 8003b42:	d531      	bpl.n	8003ba8 <__ssputs_r+0xa0>
 8003b44:	4629      	mov	r1, r5
 8003b46:	f000 fb13 	bl	8004170 <_malloc_r>
 8003b4a:	4606      	mov	r6, r0
 8003b4c:	b950      	cbnz	r0, 8003b64 <__ssputs_r+0x5c>
 8003b4e:	230c      	movs	r3, #12
 8003b50:	f8ca 3000 	str.w	r3, [sl]
 8003b54:	89a3      	ldrh	r3, [r4, #12]
 8003b56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b5a:	81a3      	strh	r3, [r4, #12]
 8003b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b64:	463a      	mov	r2, r7
 8003b66:	6921      	ldr	r1, [r4, #16]
 8003b68:	f7ff ff7c 	bl	8003a64 <memcpy>
 8003b6c:	89a3      	ldrh	r3, [r4, #12]
 8003b6e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003b72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b76:	81a3      	strh	r3, [r4, #12]
 8003b78:	6126      	str	r6, [r4, #16]
 8003b7a:	6165      	str	r5, [r4, #20]
 8003b7c:	443e      	add	r6, r7
 8003b7e:	1bed      	subs	r5, r5, r7
 8003b80:	6026      	str	r6, [r4, #0]
 8003b82:	60a5      	str	r5, [r4, #8]
 8003b84:	4646      	mov	r6, r8
 8003b86:	4546      	cmp	r6, r8
 8003b88:	bf28      	it	cs
 8003b8a:	4646      	movcs	r6, r8
 8003b8c:	4632      	mov	r2, r6
 8003b8e:	4649      	mov	r1, r9
 8003b90:	6820      	ldr	r0, [r4, #0]
 8003b92:	f7ff ff72 	bl	8003a7a <memmove>
 8003b96:	68a3      	ldr	r3, [r4, #8]
 8003b98:	1b9b      	subs	r3, r3, r6
 8003b9a:	60a3      	str	r3, [r4, #8]
 8003b9c:	6823      	ldr	r3, [r4, #0]
 8003b9e:	441e      	add	r6, r3
 8003ba0:	6026      	str	r6, [r4, #0]
 8003ba2:	2000      	movs	r0, #0
 8003ba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ba8:	462a      	mov	r2, r5
 8003baa:	f000 fb3f 	bl	800422c <_realloc_r>
 8003bae:	4606      	mov	r6, r0
 8003bb0:	2800      	cmp	r0, #0
 8003bb2:	d1e1      	bne.n	8003b78 <__ssputs_r+0x70>
 8003bb4:	6921      	ldr	r1, [r4, #16]
 8003bb6:	4650      	mov	r0, sl
 8003bb8:	f000 fa8c 	bl	80040d4 <_free_r>
 8003bbc:	e7c7      	b.n	8003b4e <__ssputs_r+0x46>
	...

08003bc0 <_svfiprintf_r>:
 8003bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bc4:	b09d      	sub	sp, #116	; 0x74
 8003bc6:	4680      	mov	r8, r0
 8003bc8:	9303      	str	r3, [sp, #12]
 8003bca:	898b      	ldrh	r3, [r1, #12]
 8003bcc:	061c      	lsls	r4, r3, #24
 8003bce:	460d      	mov	r5, r1
 8003bd0:	4616      	mov	r6, r2
 8003bd2:	d50f      	bpl.n	8003bf4 <_svfiprintf_r+0x34>
 8003bd4:	690b      	ldr	r3, [r1, #16]
 8003bd6:	b96b      	cbnz	r3, 8003bf4 <_svfiprintf_r+0x34>
 8003bd8:	2140      	movs	r1, #64	; 0x40
 8003bda:	f000 fac9 	bl	8004170 <_malloc_r>
 8003bde:	6028      	str	r0, [r5, #0]
 8003be0:	6128      	str	r0, [r5, #16]
 8003be2:	b928      	cbnz	r0, 8003bf0 <_svfiprintf_r+0x30>
 8003be4:	230c      	movs	r3, #12
 8003be6:	f8c8 3000 	str.w	r3, [r8]
 8003bea:	f04f 30ff 	mov.w	r0, #4294967295
 8003bee:	e0c5      	b.n	8003d7c <_svfiprintf_r+0x1bc>
 8003bf0:	2340      	movs	r3, #64	; 0x40
 8003bf2:	616b      	str	r3, [r5, #20]
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	9309      	str	r3, [sp, #36]	; 0x24
 8003bf8:	2320      	movs	r3, #32
 8003bfa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003bfe:	2330      	movs	r3, #48	; 0x30
 8003c00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003c04:	f04f 0b01 	mov.w	fp, #1
 8003c08:	4637      	mov	r7, r6
 8003c0a:	463c      	mov	r4, r7
 8003c0c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d13c      	bne.n	8003c8e <_svfiprintf_r+0xce>
 8003c14:	ebb7 0a06 	subs.w	sl, r7, r6
 8003c18:	d00b      	beq.n	8003c32 <_svfiprintf_r+0x72>
 8003c1a:	4653      	mov	r3, sl
 8003c1c:	4632      	mov	r2, r6
 8003c1e:	4629      	mov	r1, r5
 8003c20:	4640      	mov	r0, r8
 8003c22:	f7ff ff71 	bl	8003b08 <__ssputs_r>
 8003c26:	3001      	adds	r0, #1
 8003c28:	f000 80a3 	beq.w	8003d72 <_svfiprintf_r+0x1b2>
 8003c2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c2e:	4453      	add	r3, sl
 8003c30:	9309      	str	r3, [sp, #36]	; 0x24
 8003c32:	783b      	ldrb	r3, [r7, #0]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	f000 809c 	beq.w	8003d72 <_svfiprintf_r+0x1b2>
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	f04f 32ff 	mov.w	r2, #4294967295
 8003c40:	9304      	str	r3, [sp, #16]
 8003c42:	9307      	str	r3, [sp, #28]
 8003c44:	9205      	str	r2, [sp, #20]
 8003c46:	9306      	str	r3, [sp, #24]
 8003c48:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003c4c:	931a      	str	r3, [sp, #104]	; 0x68
 8003c4e:	2205      	movs	r2, #5
 8003c50:	7821      	ldrb	r1, [r4, #0]
 8003c52:	4850      	ldr	r0, [pc, #320]	; (8003d94 <_svfiprintf_r+0x1d4>)
 8003c54:	f7fc fadc 	bl	8000210 <memchr>
 8003c58:	1c67      	adds	r7, r4, #1
 8003c5a:	9b04      	ldr	r3, [sp, #16]
 8003c5c:	b9d8      	cbnz	r0, 8003c96 <_svfiprintf_r+0xd6>
 8003c5e:	06d9      	lsls	r1, r3, #27
 8003c60:	bf44      	itt	mi
 8003c62:	2220      	movmi	r2, #32
 8003c64:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003c68:	071a      	lsls	r2, r3, #28
 8003c6a:	bf44      	itt	mi
 8003c6c:	222b      	movmi	r2, #43	; 0x2b
 8003c6e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003c72:	7822      	ldrb	r2, [r4, #0]
 8003c74:	2a2a      	cmp	r2, #42	; 0x2a
 8003c76:	d016      	beq.n	8003ca6 <_svfiprintf_r+0xe6>
 8003c78:	9a07      	ldr	r2, [sp, #28]
 8003c7a:	2100      	movs	r1, #0
 8003c7c:	200a      	movs	r0, #10
 8003c7e:	4627      	mov	r7, r4
 8003c80:	3401      	adds	r4, #1
 8003c82:	783b      	ldrb	r3, [r7, #0]
 8003c84:	3b30      	subs	r3, #48	; 0x30
 8003c86:	2b09      	cmp	r3, #9
 8003c88:	d951      	bls.n	8003d2e <_svfiprintf_r+0x16e>
 8003c8a:	b1c9      	cbz	r1, 8003cc0 <_svfiprintf_r+0x100>
 8003c8c:	e011      	b.n	8003cb2 <_svfiprintf_r+0xf2>
 8003c8e:	2b25      	cmp	r3, #37	; 0x25
 8003c90:	d0c0      	beq.n	8003c14 <_svfiprintf_r+0x54>
 8003c92:	4627      	mov	r7, r4
 8003c94:	e7b9      	b.n	8003c0a <_svfiprintf_r+0x4a>
 8003c96:	4a3f      	ldr	r2, [pc, #252]	; (8003d94 <_svfiprintf_r+0x1d4>)
 8003c98:	1a80      	subs	r0, r0, r2
 8003c9a:	fa0b f000 	lsl.w	r0, fp, r0
 8003c9e:	4318      	orrs	r0, r3
 8003ca0:	9004      	str	r0, [sp, #16]
 8003ca2:	463c      	mov	r4, r7
 8003ca4:	e7d3      	b.n	8003c4e <_svfiprintf_r+0x8e>
 8003ca6:	9a03      	ldr	r2, [sp, #12]
 8003ca8:	1d11      	adds	r1, r2, #4
 8003caa:	6812      	ldr	r2, [r2, #0]
 8003cac:	9103      	str	r1, [sp, #12]
 8003cae:	2a00      	cmp	r2, #0
 8003cb0:	db01      	blt.n	8003cb6 <_svfiprintf_r+0xf6>
 8003cb2:	9207      	str	r2, [sp, #28]
 8003cb4:	e004      	b.n	8003cc0 <_svfiprintf_r+0x100>
 8003cb6:	4252      	negs	r2, r2
 8003cb8:	f043 0302 	orr.w	r3, r3, #2
 8003cbc:	9207      	str	r2, [sp, #28]
 8003cbe:	9304      	str	r3, [sp, #16]
 8003cc0:	783b      	ldrb	r3, [r7, #0]
 8003cc2:	2b2e      	cmp	r3, #46	; 0x2e
 8003cc4:	d10e      	bne.n	8003ce4 <_svfiprintf_r+0x124>
 8003cc6:	787b      	ldrb	r3, [r7, #1]
 8003cc8:	2b2a      	cmp	r3, #42	; 0x2a
 8003cca:	f107 0101 	add.w	r1, r7, #1
 8003cce:	d132      	bne.n	8003d36 <_svfiprintf_r+0x176>
 8003cd0:	9b03      	ldr	r3, [sp, #12]
 8003cd2:	1d1a      	adds	r2, r3, #4
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	9203      	str	r2, [sp, #12]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	bfb8      	it	lt
 8003cdc:	f04f 33ff 	movlt.w	r3, #4294967295
 8003ce0:	3702      	adds	r7, #2
 8003ce2:	9305      	str	r3, [sp, #20]
 8003ce4:	4c2c      	ldr	r4, [pc, #176]	; (8003d98 <_svfiprintf_r+0x1d8>)
 8003ce6:	7839      	ldrb	r1, [r7, #0]
 8003ce8:	2203      	movs	r2, #3
 8003cea:	4620      	mov	r0, r4
 8003cec:	f7fc fa90 	bl	8000210 <memchr>
 8003cf0:	b138      	cbz	r0, 8003d02 <_svfiprintf_r+0x142>
 8003cf2:	2340      	movs	r3, #64	; 0x40
 8003cf4:	1b00      	subs	r0, r0, r4
 8003cf6:	fa03 f000 	lsl.w	r0, r3, r0
 8003cfa:	9b04      	ldr	r3, [sp, #16]
 8003cfc:	4303      	orrs	r3, r0
 8003cfe:	9304      	str	r3, [sp, #16]
 8003d00:	3701      	adds	r7, #1
 8003d02:	7839      	ldrb	r1, [r7, #0]
 8003d04:	4825      	ldr	r0, [pc, #148]	; (8003d9c <_svfiprintf_r+0x1dc>)
 8003d06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003d0a:	2206      	movs	r2, #6
 8003d0c:	1c7e      	adds	r6, r7, #1
 8003d0e:	f7fc fa7f 	bl	8000210 <memchr>
 8003d12:	2800      	cmp	r0, #0
 8003d14:	d035      	beq.n	8003d82 <_svfiprintf_r+0x1c2>
 8003d16:	4b22      	ldr	r3, [pc, #136]	; (8003da0 <_svfiprintf_r+0x1e0>)
 8003d18:	b9fb      	cbnz	r3, 8003d5a <_svfiprintf_r+0x19a>
 8003d1a:	9b03      	ldr	r3, [sp, #12]
 8003d1c:	3307      	adds	r3, #7
 8003d1e:	f023 0307 	bic.w	r3, r3, #7
 8003d22:	3308      	adds	r3, #8
 8003d24:	9303      	str	r3, [sp, #12]
 8003d26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d28:	444b      	add	r3, r9
 8003d2a:	9309      	str	r3, [sp, #36]	; 0x24
 8003d2c:	e76c      	b.n	8003c08 <_svfiprintf_r+0x48>
 8003d2e:	fb00 3202 	mla	r2, r0, r2, r3
 8003d32:	2101      	movs	r1, #1
 8003d34:	e7a3      	b.n	8003c7e <_svfiprintf_r+0xbe>
 8003d36:	2300      	movs	r3, #0
 8003d38:	9305      	str	r3, [sp, #20]
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	240a      	movs	r4, #10
 8003d3e:	460f      	mov	r7, r1
 8003d40:	3101      	adds	r1, #1
 8003d42:	783a      	ldrb	r2, [r7, #0]
 8003d44:	3a30      	subs	r2, #48	; 0x30
 8003d46:	2a09      	cmp	r2, #9
 8003d48:	d903      	bls.n	8003d52 <_svfiprintf_r+0x192>
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d0ca      	beq.n	8003ce4 <_svfiprintf_r+0x124>
 8003d4e:	9005      	str	r0, [sp, #20]
 8003d50:	e7c8      	b.n	8003ce4 <_svfiprintf_r+0x124>
 8003d52:	fb04 2000 	mla	r0, r4, r0, r2
 8003d56:	2301      	movs	r3, #1
 8003d58:	e7f1      	b.n	8003d3e <_svfiprintf_r+0x17e>
 8003d5a:	ab03      	add	r3, sp, #12
 8003d5c:	9300      	str	r3, [sp, #0]
 8003d5e:	462a      	mov	r2, r5
 8003d60:	4b10      	ldr	r3, [pc, #64]	; (8003da4 <_svfiprintf_r+0x1e4>)
 8003d62:	a904      	add	r1, sp, #16
 8003d64:	4640      	mov	r0, r8
 8003d66:	f3af 8000 	nop.w
 8003d6a:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003d6e:	4681      	mov	r9, r0
 8003d70:	d1d9      	bne.n	8003d26 <_svfiprintf_r+0x166>
 8003d72:	89ab      	ldrh	r3, [r5, #12]
 8003d74:	065b      	lsls	r3, r3, #25
 8003d76:	f53f af38 	bmi.w	8003bea <_svfiprintf_r+0x2a>
 8003d7a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003d7c:	b01d      	add	sp, #116	; 0x74
 8003d7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d82:	ab03      	add	r3, sp, #12
 8003d84:	9300      	str	r3, [sp, #0]
 8003d86:	462a      	mov	r2, r5
 8003d88:	4b06      	ldr	r3, [pc, #24]	; (8003da4 <_svfiprintf_r+0x1e4>)
 8003d8a:	a904      	add	r1, sp, #16
 8003d8c:	4640      	mov	r0, r8
 8003d8e:	f000 f881 	bl	8003e94 <_printf_i>
 8003d92:	e7ea      	b.n	8003d6a <_svfiprintf_r+0x1aa>
 8003d94:	08004306 	.word	0x08004306
 8003d98:	0800430c 	.word	0x0800430c
 8003d9c:	08004310 	.word	0x08004310
 8003da0:	00000000 	.word	0x00000000
 8003da4:	08003b09 	.word	0x08003b09

08003da8 <_printf_common>:
 8003da8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003dac:	4691      	mov	r9, r2
 8003dae:	461f      	mov	r7, r3
 8003db0:	688a      	ldr	r2, [r1, #8]
 8003db2:	690b      	ldr	r3, [r1, #16]
 8003db4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003db8:	4293      	cmp	r3, r2
 8003dba:	bfb8      	it	lt
 8003dbc:	4613      	movlt	r3, r2
 8003dbe:	f8c9 3000 	str.w	r3, [r9]
 8003dc2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003dc6:	4606      	mov	r6, r0
 8003dc8:	460c      	mov	r4, r1
 8003dca:	b112      	cbz	r2, 8003dd2 <_printf_common+0x2a>
 8003dcc:	3301      	adds	r3, #1
 8003dce:	f8c9 3000 	str.w	r3, [r9]
 8003dd2:	6823      	ldr	r3, [r4, #0]
 8003dd4:	0699      	lsls	r1, r3, #26
 8003dd6:	bf42      	ittt	mi
 8003dd8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003ddc:	3302      	addmi	r3, #2
 8003dde:	f8c9 3000 	strmi.w	r3, [r9]
 8003de2:	6825      	ldr	r5, [r4, #0]
 8003de4:	f015 0506 	ands.w	r5, r5, #6
 8003de8:	d107      	bne.n	8003dfa <_printf_common+0x52>
 8003dea:	f104 0a19 	add.w	sl, r4, #25
 8003dee:	68e3      	ldr	r3, [r4, #12]
 8003df0:	f8d9 2000 	ldr.w	r2, [r9]
 8003df4:	1a9b      	subs	r3, r3, r2
 8003df6:	429d      	cmp	r5, r3
 8003df8:	db29      	blt.n	8003e4e <_printf_common+0xa6>
 8003dfa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003dfe:	6822      	ldr	r2, [r4, #0]
 8003e00:	3300      	adds	r3, #0
 8003e02:	bf18      	it	ne
 8003e04:	2301      	movne	r3, #1
 8003e06:	0692      	lsls	r2, r2, #26
 8003e08:	d42e      	bmi.n	8003e68 <_printf_common+0xc0>
 8003e0a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e0e:	4639      	mov	r1, r7
 8003e10:	4630      	mov	r0, r6
 8003e12:	47c0      	blx	r8
 8003e14:	3001      	adds	r0, #1
 8003e16:	d021      	beq.n	8003e5c <_printf_common+0xb4>
 8003e18:	6823      	ldr	r3, [r4, #0]
 8003e1a:	68e5      	ldr	r5, [r4, #12]
 8003e1c:	f8d9 2000 	ldr.w	r2, [r9]
 8003e20:	f003 0306 	and.w	r3, r3, #6
 8003e24:	2b04      	cmp	r3, #4
 8003e26:	bf08      	it	eq
 8003e28:	1aad      	subeq	r5, r5, r2
 8003e2a:	68a3      	ldr	r3, [r4, #8]
 8003e2c:	6922      	ldr	r2, [r4, #16]
 8003e2e:	bf0c      	ite	eq
 8003e30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e34:	2500      	movne	r5, #0
 8003e36:	4293      	cmp	r3, r2
 8003e38:	bfc4      	itt	gt
 8003e3a:	1a9b      	subgt	r3, r3, r2
 8003e3c:	18ed      	addgt	r5, r5, r3
 8003e3e:	f04f 0900 	mov.w	r9, #0
 8003e42:	341a      	adds	r4, #26
 8003e44:	454d      	cmp	r5, r9
 8003e46:	d11b      	bne.n	8003e80 <_printf_common+0xd8>
 8003e48:	2000      	movs	r0, #0
 8003e4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e4e:	2301      	movs	r3, #1
 8003e50:	4652      	mov	r2, sl
 8003e52:	4639      	mov	r1, r7
 8003e54:	4630      	mov	r0, r6
 8003e56:	47c0      	blx	r8
 8003e58:	3001      	adds	r0, #1
 8003e5a:	d103      	bne.n	8003e64 <_printf_common+0xbc>
 8003e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e64:	3501      	adds	r5, #1
 8003e66:	e7c2      	b.n	8003dee <_printf_common+0x46>
 8003e68:	18e1      	adds	r1, r4, r3
 8003e6a:	1c5a      	adds	r2, r3, #1
 8003e6c:	2030      	movs	r0, #48	; 0x30
 8003e6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003e72:	4422      	add	r2, r4
 8003e74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003e78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003e7c:	3302      	adds	r3, #2
 8003e7e:	e7c4      	b.n	8003e0a <_printf_common+0x62>
 8003e80:	2301      	movs	r3, #1
 8003e82:	4622      	mov	r2, r4
 8003e84:	4639      	mov	r1, r7
 8003e86:	4630      	mov	r0, r6
 8003e88:	47c0      	blx	r8
 8003e8a:	3001      	adds	r0, #1
 8003e8c:	d0e6      	beq.n	8003e5c <_printf_common+0xb4>
 8003e8e:	f109 0901 	add.w	r9, r9, #1
 8003e92:	e7d7      	b.n	8003e44 <_printf_common+0x9c>

08003e94 <_printf_i>:
 8003e94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003e98:	4617      	mov	r7, r2
 8003e9a:	7e0a      	ldrb	r2, [r1, #24]
 8003e9c:	b085      	sub	sp, #20
 8003e9e:	2a6e      	cmp	r2, #110	; 0x6e
 8003ea0:	4698      	mov	r8, r3
 8003ea2:	4606      	mov	r6, r0
 8003ea4:	460c      	mov	r4, r1
 8003ea6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003ea8:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8003eac:	f000 80bc 	beq.w	8004028 <_printf_i+0x194>
 8003eb0:	d81a      	bhi.n	8003ee8 <_printf_i+0x54>
 8003eb2:	2a63      	cmp	r2, #99	; 0x63
 8003eb4:	d02e      	beq.n	8003f14 <_printf_i+0x80>
 8003eb6:	d80a      	bhi.n	8003ece <_printf_i+0x3a>
 8003eb8:	2a00      	cmp	r2, #0
 8003eba:	f000 80c8 	beq.w	800404e <_printf_i+0x1ba>
 8003ebe:	2a58      	cmp	r2, #88	; 0x58
 8003ec0:	f000 808a 	beq.w	8003fd8 <_printf_i+0x144>
 8003ec4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ec8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8003ecc:	e02a      	b.n	8003f24 <_printf_i+0x90>
 8003ece:	2a64      	cmp	r2, #100	; 0x64
 8003ed0:	d001      	beq.n	8003ed6 <_printf_i+0x42>
 8003ed2:	2a69      	cmp	r2, #105	; 0x69
 8003ed4:	d1f6      	bne.n	8003ec4 <_printf_i+0x30>
 8003ed6:	6821      	ldr	r1, [r4, #0]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003ede:	d023      	beq.n	8003f28 <_printf_i+0x94>
 8003ee0:	1d11      	adds	r1, r2, #4
 8003ee2:	6019      	str	r1, [r3, #0]
 8003ee4:	6813      	ldr	r3, [r2, #0]
 8003ee6:	e027      	b.n	8003f38 <_printf_i+0xa4>
 8003ee8:	2a73      	cmp	r2, #115	; 0x73
 8003eea:	f000 80b4 	beq.w	8004056 <_printf_i+0x1c2>
 8003eee:	d808      	bhi.n	8003f02 <_printf_i+0x6e>
 8003ef0:	2a6f      	cmp	r2, #111	; 0x6f
 8003ef2:	d02a      	beq.n	8003f4a <_printf_i+0xb6>
 8003ef4:	2a70      	cmp	r2, #112	; 0x70
 8003ef6:	d1e5      	bne.n	8003ec4 <_printf_i+0x30>
 8003ef8:	680a      	ldr	r2, [r1, #0]
 8003efa:	f042 0220 	orr.w	r2, r2, #32
 8003efe:	600a      	str	r2, [r1, #0]
 8003f00:	e003      	b.n	8003f0a <_printf_i+0x76>
 8003f02:	2a75      	cmp	r2, #117	; 0x75
 8003f04:	d021      	beq.n	8003f4a <_printf_i+0xb6>
 8003f06:	2a78      	cmp	r2, #120	; 0x78
 8003f08:	d1dc      	bne.n	8003ec4 <_printf_i+0x30>
 8003f0a:	2278      	movs	r2, #120	; 0x78
 8003f0c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8003f10:	496e      	ldr	r1, [pc, #440]	; (80040cc <_printf_i+0x238>)
 8003f12:	e064      	b.n	8003fde <_printf_i+0x14a>
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8003f1a:	1d11      	adds	r1, r2, #4
 8003f1c:	6019      	str	r1, [r3, #0]
 8003f1e:	6813      	ldr	r3, [r2, #0]
 8003f20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003f24:	2301      	movs	r3, #1
 8003f26:	e0a3      	b.n	8004070 <_printf_i+0x1dc>
 8003f28:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003f2c:	f102 0104 	add.w	r1, r2, #4
 8003f30:	6019      	str	r1, [r3, #0]
 8003f32:	d0d7      	beq.n	8003ee4 <_printf_i+0x50>
 8003f34:	f9b2 3000 	ldrsh.w	r3, [r2]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	da03      	bge.n	8003f44 <_printf_i+0xb0>
 8003f3c:	222d      	movs	r2, #45	; 0x2d
 8003f3e:	425b      	negs	r3, r3
 8003f40:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003f44:	4962      	ldr	r1, [pc, #392]	; (80040d0 <_printf_i+0x23c>)
 8003f46:	220a      	movs	r2, #10
 8003f48:	e017      	b.n	8003f7a <_printf_i+0xe6>
 8003f4a:	6820      	ldr	r0, [r4, #0]
 8003f4c:	6819      	ldr	r1, [r3, #0]
 8003f4e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003f52:	d003      	beq.n	8003f5c <_printf_i+0xc8>
 8003f54:	1d08      	adds	r0, r1, #4
 8003f56:	6018      	str	r0, [r3, #0]
 8003f58:	680b      	ldr	r3, [r1, #0]
 8003f5a:	e006      	b.n	8003f6a <_printf_i+0xd6>
 8003f5c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003f60:	f101 0004 	add.w	r0, r1, #4
 8003f64:	6018      	str	r0, [r3, #0]
 8003f66:	d0f7      	beq.n	8003f58 <_printf_i+0xc4>
 8003f68:	880b      	ldrh	r3, [r1, #0]
 8003f6a:	4959      	ldr	r1, [pc, #356]	; (80040d0 <_printf_i+0x23c>)
 8003f6c:	2a6f      	cmp	r2, #111	; 0x6f
 8003f6e:	bf14      	ite	ne
 8003f70:	220a      	movne	r2, #10
 8003f72:	2208      	moveq	r2, #8
 8003f74:	2000      	movs	r0, #0
 8003f76:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8003f7a:	6865      	ldr	r5, [r4, #4]
 8003f7c:	60a5      	str	r5, [r4, #8]
 8003f7e:	2d00      	cmp	r5, #0
 8003f80:	f2c0 809c 	blt.w	80040bc <_printf_i+0x228>
 8003f84:	6820      	ldr	r0, [r4, #0]
 8003f86:	f020 0004 	bic.w	r0, r0, #4
 8003f8a:	6020      	str	r0, [r4, #0]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d13f      	bne.n	8004010 <_printf_i+0x17c>
 8003f90:	2d00      	cmp	r5, #0
 8003f92:	f040 8095 	bne.w	80040c0 <_printf_i+0x22c>
 8003f96:	4675      	mov	r5, lr
 8003f98:	2a08      	cmp	r2, #8
 8003f9a:	d10b      	bne.n	8003fb4 <_printf_i+0x120>
 8003f9c:	6823      	ldr	r3, [r4, #0]
 8003f9e:	07da      	lsls	r2, r3, #31
 8003fa0:	d508      	bpl.n	8003fb4 <_printf_i+0x120>
 8003fa2:	6923      	ldr	r3, [r4, #16]
 8003fa4:	6862      	ldr	r2, [r4, #4]
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	bfde      	ittt	le
 8003faa:	2330      	movle	r3, #48	; 0x30
 8003fac:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003fb0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003fb4:	ebae 0305 	sub.w	r3, lr, r5
 8003fb8:	6123      	str	r3, [r4, #16]
 8003fba:	f8cd 8000 	str.w	r8, [sp]
 8003fbe:	463b      	mov	r3, r7
 8003fc0:	aa03      	add	r2, sp, #12
 8003fc2:	4621      	mov	r1, r4
 8003fc4:	4630      	mov	r0, r6
 8003fc6:	f7ff feef 	bl	8003da8 <_printf_common>
 8003fca:	3001      	adds	r0, #1
 8003fcc:	d155      	bne.n	800407a <_printf_i+0x1e6>
 8003fce:	f04f 30ff 	mov.w	r0, #4294967295
 8003fd2:	b005      	add	sp, #20
 8003fd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003fd8:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8003fdc:	493c      	ldr	r1, [pc, #240]	; (80040d0 <_printf_i+0x23c>)
 8003fde:	6822      	ldr	r2, [r4, #0]
 8003fe0:	6818      	ldr	r0, [r3, #0]
 8003fe2:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003fe6:	f100 0504 	add.w	r5, r0, #4
 8003fea:	601d      	str	r5, [r3, #0]
 8003fec:	d001      	beq.n	8003ff2 <_printf_i+0x15e>
 8003fee:	6803      	ldr	r3, [r0, #0]
 8003ff0:	e002      	b.n	8003ff8 <_printf_i+0x164>
 8003ff2:	0655      	lsls	r5, r2, #25
 8003ff4:	d5fb      	bpl.n	8003fee <_printf_i+0x15a>
 8003ff6:	8803      	ldrh	r3, [r0, #0]
 8003ff8:	07d0      	lsls	r0, r2, #31
 8003ffa:	bf44      	itt	mi
 8003ffc:	f042 0220 	orrmi.w	r2, r2, #32
 8004000:	6022      	strmi	r2, [r4, #0]
 8004002:	b91b      	cbnz	r3, 800400c <_printf_i+0x178>
 8004004:	6822      	ldr	r2, [r4, #0]
 8004006:	f022 0220 	bic.w	r2, r2, #32
 800400a:	6022      	str	r2, [r4, #0]
 800400c:	2210      	movs	r2, #16
 800400e:	e7b1      	b.n	8003f74 <_printf_i+0xe0>
 8004010:	4675      	mov	r5, lr
 8004012:	fbb3 f0f2 	udiv	r0, r3, r2
 8004016:	fb02 3310 	mls	r3, r2, r0, r3
 800401a:	5ccb      	ldrb	r3, [r1, r3]
 800401c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004020:	4603      	mov	r3, r0
 8004022:	2800      	cmp	r0, #0
 8004024:	d1f5      	bne.n	8004012 <_printf_i+0x17e>
 8004026:	e7b7      	b.n	8003f98 <_printf_i+0x104>
 8004028:	6808      	ldr	r0, [r1, #0]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	6949      	ldr	r1, [r1, #20]
 800402e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8004032:	d004      	beq.n	800403e <_printf_i+0x1aa>
 8004034:	1d10      	adds	r0, r2, #4
 8004036:	6018      	str	r0, [r3, #0]
 8004038:	6813      	ldr	r3, [r2, #0]
 800403a:	6019      	str	r1, [r3, #0]
 800403c:	e007      	b.n	800404e <_printf_i+0x1ba>
 800403e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004042:	f102 0004 	add.w	r0, r2, #4
 8004046:	6018      	str	r0, [r3, #0]
 8004048:	6813      	ldr	r3, [r2, #0]
 800404a:	d0f6      	beq.n	800403a <_printf_i+0x1a6>
 800404c:	8019      	strh	r1, [r3, #0]
 800404e:	2300      	movs	r3, #0
 8004050:	6123      	str	r3, [r4, #16]
 8004052:	4675      	mov	r5, lr
 8004054:	e7b1      	b.n	8003fba <_printf_i+0x126>
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	1d11      	adds	r1, r2, #4
 800405a:	6019      	str	r1, [r3, #0]
 800405c:	6815      	ldr	r5, [r2, #0]
 800405e:	6862      	ldr	r2, [r4, #4]
 8004060:	2100      	movs	r1, #0
 8004062:	4628      	mov	r0, r5
 8004064:	f7fc f8d4 	bl	8000210 <memchr>
 8004068:	b108      	cbz	r0, 800406e <_printf_i+0x1da>
 800406a:	1b40      	subs	r0, r0, r5
 800406c:	6060      	str	r0, [r4, #4]
 800406e:	6863      	ldr	r3, [r4, #4]
 8004070:	6123      	str	r3, [r4, #16]
 8004072:	2300      	movs	r3, #0
 8004074:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004078:	e79f      	b.n	8003fba <_printf_i+0x126>
 800407a:	6923      	ldr	r3, [r4, #16]
 800407c:	462a      	mov	r2, r5
 800407e:	4639      	mov	r1, r7
 8004080:	4630      	mov	r0, r6
 8004082:	47c0      	blx	r8
 8004084:	3001      	adds	r0, #1
 8004086:	d0a2      	beq.n	8003fce <_printf_i+0x13a>
 8004088:	6823      	ldr	r3, [r4, #0]
 800408a:	079b      	lsls	r3, r3, #30
 800408c:	d507      	bpl.n	800409e <_printf_i+0x20a>
 800408e:	2500      	movs	r5, #0
 8004090:	f104 0919 	add.w	r9, r4, #25
 8004094:	68e3      	ldr	r3, [r4, #12]
 8004096:	9a03      	ldr	r2, [sp, #12]
 8004098:	1a9b      	subs	r3, r3, r2
 800409a:	429d      	cmp	r5, r3
 800409c:	db05      	blt.n	80040aa <_printf_i+0x216>
 800409e:	68e0      	ldr	r0, [r4, #12]
 80040a0:	9b03      	ldr	r3, [sp, #12]
 80040a2:	4298      	cmp	r0, r3
 80040a4:	bfb8      	it	lt
 80040a6:	4618      	movlt	r0, r3
 80040a8:	e793      	b.n	8003fd2 <_printf_i+0x13e>
 80040aa:	2301      	movs	r3, #1
 80040ac:	464a      	mov	r2, r9
 80040ae:	4639      	mov	r1, r7
 80040b0:	4630      	mov	r0, r6
 80040b2:	47c0      	blx	r8
 80040b4:	3001      	adds	r0, #1
 80040b6:	d08a      	beq.n	8003fce <_printf_i+0x13a>
 80040b8:	3501      	adds	r5, #1
 80040ba:	e7eb      	b.n	8004094 <_printf_i+0x200>
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d1a7      	bne.n	8004010 <_printf_i+0x17c>
 80040c0:	780b      	ldrb	r3, [r1, #0]
 80040c2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80040c6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80040ca:	e765      	b.n	8003f98 <_printf_i+0x104>
 80040cc:	08004328 	.word	0x08004328
 80040d0:	08004317 	.word	0x08004317

080040d4 <_free_r>:
 80040d4:	b538      	push	{r3, r4, r5, lr}
 80040d6:	4605      	mov	r5, r0
 80040d8:	2900      	cmp	r1, #0
 80040da:	d045      	beq.n	8004168 <_free_r+0x94>
 80040dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040e0:	1f0c      	subs	r4, r1, #4
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	bfb8      	it	lt
 80040e6:	18e4      	addlt	r4, r4, r3
 80040e8:	f000 f8d6 	bl	8004298 <__malloc_lock>
 80040ec:	4a1f      	ldr	r2, [pc, #124]	; (800416c <_free_r+0x98>)
 80040ee:	6813      	ldr	r3, [r2, #0]
 80040f0:	4610      	mov	r0, r2
 80040f2:	b933      	cbnz	r3, 8004102 <_free_r+0x2e>
 80040f4:	6063      	str	r3, [r4, #4]
 80040f6:	6014      	str	r4, [r2, #0]
 80040f8:	4628      	mov	r0, r5
 80040fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80040fe:	f000 b8cc 	b.w	800429a <__malloc_unlock>
 8004102:	42a3      	cmp	r3, r4
 8004104:	d90c      	bls.n	8004120 <_free_r+0x4c>
 8004106:	6821      	ldr	r1, [r4, #0]
 8004108:	1862      	adds	r2, r4, r1
 800410a:	4293      	cmp	r3, r2
 800410c:	bf04      	itt	eq
 800410e:	681a      	ldreq	r2, [r3, #0]
 8004110:	685b      	ldreq	r3, [r3, #4]
 8004112:	6063      	str	r3, [r4, #4]
 8004114:	bf04      	itt	eq
 8004116:	1852      	addeq	r2, r2, r1
 8004118:	6022      	streq	r2, [r4, #0]
 800411a:	6004      	str	r4, [r0, #0]
 800411c:	e7ec      	b.n	80040f8 <_free_r+0x24>
 800411e:	4613      	mov	r3, r2
 8004120:	685a      	ldr	r2, [r3, #4]
 8004122:	b10a      	cbz	r2, 8004128 <_free_r+0x54>
 8004124:	42a2      	cmp	r2, r4
 8004126:	d9fa      	bls.n	800411e <_free_r+0x4a>
 8004128:	6819      	ldr	r1, [r3, #0]
 800412a:	1858      	adds	r0, r3, r1
 800412c:	42a0      	cmp	r0, r4
 800412e:	d10b      	bne.n	8004148 <_free_r+0x74>
 8004130:	6820      	ldr	r0, [r4, #0]
 8004132:	4401      	add	r1, r0
 8004134:	1858      	adds	r0, r3, r1
 8004136:	4282      	cmp	r2, r0
 8004138:	6019      	str	r1, [r3, #0]
 800413a:	d1dd      	bne.n	80040f8 <_free_r+0x24>
 800413c:	6810      	ldr	r0, [r2, #0]
 800413e:	6852      	ldr	r2, [r2, #4]
 8004140:	605a      	str	r2, [r3, #4]
 8004142:	4401      	add	r1, r0
 8004144:	6019      	str	r1, [r3, #0]
 8004146:	e7d7      	b.n	80040f8 <_free_r+0x24>
 8004148:	d902      	bls.n	8004150 <_free_r+0x7c>
 800414a:	230c      	movs	r3, #12
 800414c:	602b      	str	r3, [r5, #0]
 800414e:	e7d3      	b.n	80040f8 <_free_r+0x24>
 8004150:	6820      	ldr	r0, [r4, #0]
 8004152:	1821      	adds	r1, r4, r0
 8004154:	428a      	cmp	r2, r1
 8004156:	bf04      	itt	eq
 8004158:	6811      	ldreq	r1, [r2, #0]
 800415a:	6852      	ldreq	r2, [r2, #4]
 800415c:	6062      	str	r2, [r4, #4]
 800415e:	bf04      	itt	eq
 8004160:	1809      	addeq	r1, r1, r0
 8004162:	6021      	streq	r1, [r4, #0]
 8004164:	605c      	str	r4, [r3, #4]
 8004166:	e7c7      	b.n	80040f8 <_free_r+0x24>
 8004168:	bd38      	pop	{r3, r4, r5, pc}
 800416a:	bf00      	nop
 800416c:	200000a4 	.word	0x200000a4

08004170 <_malloc_r>:
 8004170:	b570      	push	{r4, r5, r6, lr}
 8004172:	1ccd      	adds	r5, r1, #3
 8004174:	f025 0503 	bic.w	r5, r5, #3
 8004178:	3508      	adds	r5, #8
 800417a:	2d0c      	cmp	r5, #12
 800417c:	bf38      	it	cc
 800417e:	250c      	movcc	r5, #12
 8004180:	2d00      	cmp	r5, #0
 8004182:	4606      	mov	r6, r0
 8004184:	db01      	blt.n	800418a <_malloc_r+0x1a>
 8004186:	42a9      	cmp	r1, r5
 8004188:	d903      	bls.n	8004192 <_malloc_r+0x22>
 800418a:	230c      	movs	r3, #12
 800418c:	6033      	str	r3, [r6, #0]
 800418e:	2000      	movs	r0, #0
 8004190:	bd70      	pop	{r4, r5, r6, pc}
 8004192:	f000 f881 	bl	8004298 <__malloc_lock>
 8004196:	4a23      	ldr	r2, [pc, #140]	; (8004224 <_malloc_r+0xb4>)
 8004198:	6814      	ldr	r4, [r2, #0]
 800419a:	4621      	mov	r1, r4
 800419c:	b991      	cbnz	r1, 80041c4 <_malloc_r+0x54>
 800419e:	4c22      	ldr	r4, [pc, #136]	; (8004228 <_malloc_r+0xb8>)
 80041a0:	6823      	ldr	r3, [r4, #0]
 80041a2:	b91b      	cbnz	r3, 80041ac <_malloc_r+0x3c>
 80041a4:	4630      	mov	r0, r6
 80041a6:	f000 f867 	bl	8004278 <_sbrk_r>
 80041aa:	6020      	str	r0, [r4, #0]
 80041ac:	4629      	mov	r1, r5
 80041ae:	4630      	mov	r0, r6
 80041b0:	f000 f862 	bl	8004278 <_sbrk_r>
 80041b4:	1c43      	adds	r3, r0, #1
 80041b6:	d126      	bne.n	8004206 <_malloc_r+0x96>
 80041b8:	230c      	movs	r3, #12
 80041ba:	6033      	str	r3, [r6, #0]
 80041bc:	4630      	mov	r0, r6
 80041be:	f000 f86c 	bl	800429a <__malloc_unlock>
 80041c2:	e7e4      	b.n	800418e <_malloc_r+0x1e>
 80041c4:	680b      	ldr	r3, [r1, #0]
 80041c6:	1b5b      	subs	r3, r3, r5
 80041c8:	d41a      	bmi.n	8004200 <_malloc_r+0x90>
 80041ca:	2b0b      	cmp	r3, #11
 80041cc:	d90f      	bls.n	80041ee <_malloc_r+0x7e>
 80041ce:	600b      	str	r3, [r1, #0]
 80041d0:	50cd      	str	r5, [r1, r3]
 80041d2:	18cc      	adds	r4, r1, r3
 80041d4:	4630      	mov	r0, r6
 80041d6:	f000 f860 	bl	800429a <__malloc_unlock>
 80041da:	f104 000b 	add.w	r0, r4, #11
 80041de:	1d23      	adds	r3, r4, #4
 80041e0:	f020 0007 	bic.w	r0, r0, #7
 80041e4:	1ac3      	subs	r3, r0, r3
 80041e6:	d01b      	beq.n	8004220 <_malloc_r+0xb0>
 80041e8:	425a      	negs	r2, r3
 80041ea:	50e2      	str	r2, [r4, r3]
 80041ec:	bd70      	pop	{r4, r5, r6, pc}
 80041ee:	428c      	cmp	r4, r1
 80041f0:	bf0d      	iteet	eq
 80041f2:	6863      	ldreq	r3, [r4, #4]
 80041f4:	684b      	ldrne	r3, [r1, #4]
 80041f6:	6063      	strne	r3, [r4, #4]
 80041f8:	6013      	streq	r3, [r2, #0]
 80041fa:	bf18      	it	ne
 80041fc:	460c      	movne	r4, r1
 80041fe:	e7e9      	b.n	80041d4 <_malloc_r+0x64>
 8004200:	460c      	mov	r4, r1
 8004202:	6849      	ldr	r1, [r1, #4]
 8004204:	e7ca      	b.n	800419c <_malloc_r+0x2c>
 8004206:	1cc4      	adds	r4, r0, #3
 8004208:	f024 0403 	bic.w	r4, r4, #3
 800420c:	42a0      	cmp	r0, r4
 800420e:	d005      	beq.n	800421c <_malloc_r+0xac>
 8004210:	1a21      	subs	r1, r4, r0
 8004212:	4630      	mov	r0, r6
 8004214:	f000 f830 	bl	8004278 <_sbrk_r>
 8004218:	3001      	adds	r0, #1
 800421a:	d0cd      	beq.n	80041b8 <_malloc_r+0x48>
 800421c:	6025      	str	r5, [r4, #0]
 800421e:	e7d9      	b.n	80041d4 <_malloc_r+0x64>
 8004220:	bd70      	pop	{r4, r5, r6, pc}
 8004222:	bf00      	nop
 8004224:	200000a4 	.word	0x200000a4
 8004228:	200000a8 	.word	0x200000a8

0800422c <_realloc_r>:
 800422c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800422e:	4607      	mov	r7, r0
 8004230:	4614      	mov	r4, r2
 8004232:	460e      	mov	r6, r1
 8004234:	b921      	cbnz	r1, 8004240 <_realloc_r+0x14>
 8004236:	4611      	mov	r1, r2
 8004238:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800423c:	f7ff bf98 	b.w	8004170 <_malloc_r>
 8004240:	b922      	cbnz	r2, 800424c <_realloc_r+0x20>
 8004242:	f7ff ff47 	bl	80040d4 <_free_r>
 8004246:	4625      	mov	r5, r4
 8004248:	4628      	mov	r0, r5
 800424a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800424c:	f000 f826 	bl	800429c <_malloc_usable_size_r>
 8004250:	4284      	cmp	r4, r0
 8004252:	d90f      	bls.n	8004274 <_realloc_r+0x48>
 8004254:	4621      	mov	r1, r4
 8004256:	4638      	mov	r0, r7
 8004258:	f7ff ff8a 	bl	8004170 <_malloc_r>
 800425c:	4605      	mov	r5, r0
 800425e:	2800      	cmp	r0, #0
 8004260:	d0f2      	beq.n	8004248 <_realloc_r+0x1c>
 8004262:	4631      	mov	r1, r6
 8004264:	4622      	mov	r2, r4
 8004266:	f7ff fbfd 	bl	8003a64 <memcpy>
 800426a:	4631      	mov	r1, r6
 800426c:	4638      	mov	r0, r7
 800426e:	f7ff ff31 	bl	80040d4 <_free_r>
 8004272:	e7e9      	b.n	8004248 <_realloc_r+0x1c>
 8004274:	4635      	mov	r5, r6
 8004276:	e7e7      	b.n	8004248 <_realloc_r+0x1c>

08004278 <_sbrk_r>:
 8004278:	b538      	push	{r3, r4, r5, lr}
 800427a:	4c06      	ldr	r4, [pc, #24]	; (8004294 <_sbrk_r+0x1c>)
 800427c:	2300      	movs	r3, #0
 800427e:	4605      	mov	r5, r0
 8004280:	4608      	mov	r0, r1
 8004282:	6023      	str	r3, [r4, #0]
 8004284:	f7ff fb5c 	bl	8003940 <_sbrk>
 8004288:	1c43      	adds	r3, r0, #1
 800428a:	d102      	bne.n	8004292 <_sbrk_r+0x1a>
 800428c:	6823      	ldr	r3, [r4, #0]
 800428e:	b103      	cbz	r3, 8004292 <_sbrk_r+0x1a>
 8004290:	602b      	str	r3, [r5, #0]
 8004292:	bd38      	pop	{r3, r4, r5, pc}
 8004294:	200058d4 	.word	0x200058d4

08004298 <__malloc_lock>:
 8004298:	4770      	bx	lr

0800429a <__malloc_unlock>:
 800429a:	4770      	bx	lr

0800429c <_malloc_usable_size_r>:
 800429c:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80042a0:	2800      	cmp	r0, #0
 80042a2:	f1a0 0004 	sub.w	r0, r0, #4
 80042a6:	bfbc      	itt	lt
 80042a8:	580b      	ldrlt	r3, [r1, r0]
 80042aa:	18c0      	addlt	r0, r0, r3
 80042ac:	4770      	bx	lr
	...

080042b0 <_init>:
 80042b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042b2:	bf00      	nop
 80042b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042b6:	bc08      	pop	{r3}
 80042b8:	469e      	mov	lr, r3
 80042ba:	4770      	bx	lr

080042bc <_fini>:
 80042bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042be:	bf00      	nop
 80042c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042c2:	bc08      	pop	{r3}
 80042c4:	469e      	mov	lr, r3
 80042c6:	4770      	bx	lr
