
RM_stm32sw_v4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038d8  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08003a9c  08003a9c  00013a9c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003abc  08003abc  00013abc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003ac4  08003ac4  00013ac4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08003ac8  08003ac8  00013ac8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08003acc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000728  2000000c  08003ad8  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000734  08003ad8  00020734  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001a576  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000032a0  00000000  00000000  0003a5b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000d4e4  00000000  00000000  0003d852  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000f78  00000000  00000000  0004ad38  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000016a8  00000000  00000000  0004bcb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000092a2  00000000  00000000  0004d358  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000062aa  00000000  00000000  000565fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0005c8a4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003138  00000000  00000000  0005c920  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003a84 	.word	0x08003a84

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08003a84 	.word	0x08003a84

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b97a 	b.w	8000510 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	468c      	mov	ip, r1
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	9e08      	ldr	r6, [sp, #32]
 8000240:	2b00      	cmp	r3, #0
 8000242:	d151      	bne.n	80002e8 <__udivmoddi4+0xb4>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d96d      	bls.n	8000326 <__udivmoddi4+0xf2>
 800024a:	fab2 fe82 	clz	lr, r2
 800024e:	f1be 0f00 	cmp.w	lr, #0
 8000252:	d00b      	beq.n	800026c <__udivmoddi4+0x38>
 8000254:	f1ce 0c20 	rsb	ip, lr, #32
 8000258:	fa01 f50e 	lsl.w	r5, r1, lr
 800025c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000260:	fa02 f70e 	lsl.w	r7, r2, lr
 8000264:	ea4c 0c05 	orr.w	ip, ip, r5
 8000268:	fa00 f40e 	lsl.w	r4, r0, lr
 800026c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000270:	0c25      	lsrs	r5, r4, #16
 8000272:	fbbc f8fa 	udiv	r8, ip, sl
 8000276:	fa1f f987 	uxth.w	r9, r7
 800027a:	fb0a cc18 	mls	ip, sl, r8, ip
 800027e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000282:	fb08 f309 	mul.w	r3, r8, r9
 8000286:	42ab      	cmp	r3, r5
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x6c>
 800028a:	19ed      	adds	r5, r5, r7
 800028c:	f108 32ff 	add.w	r2, r8, #4294967295
 8000290:	f080 8123 	bcs.w	80004da <__udivmoddi4+0x2a6>
 8000294:	42ab      	cmp	r3, r5
 8000296:	f240 8120 	bls.w	80004da <__udivmoddi4+0x2a6>
 800029a:	f1a8 0802 	sub.w	r8, r8, #2
 800029e:	443d      	add	r5, r7
 80002a0:	1aed      	subs	r5, r5, r3
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb5 f0fa 	udiv	r0, r5, sl
 80002a8:	fb0a 5510 	mls	r5, sl, r0, r5
 80002ac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002b0:	fb00 f909 	mul.w	r9, r0, r9
 80002b4:	45a1      	cmp	r9, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x98>
 80002b8:	19e4      	adds	r4, r4, r7
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 810a 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80002c2:	45a1      	cmp	r9, r4
 80002c4:	f240 8107 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80002c8:	3802      	subs	r0, #2
 80002ca:	443c      	add	r4, r7
 80002cc:	eba4 0409 	sub.w	r4, r4, r9
 80002d0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002d4:	2100      	movs	r1, #0
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d061      	beq.n	800039e <__udivmoddi4+0x16a>
 80002da:	fa24 f40e 	lsr.w	r4, r4, lr
 80002de:	2300      	movs	r3, #0
 80002e0:	6034      	str	r4, [r6, #0]
 80002e2:	6073      	str	r3, [r6, #4]
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d907      	bls.n	80002fc <__udivmoddi4+0xc8>
 80002ec:	2e00      	cmp	r6, #0
 80002ee:	d054      	beq.n	800039a <__udivmoddi4+0x166>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e886 0021 	stmia.w	r6, {r0, r5}
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	f040 808e 	bne.w	8000422 <__udivmoddi4+0x1ee>
 8000306:	42ab      	cmp	r3, r5
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xdc>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 80fa 	bhi.w	8000504 <__udivmoddi4+0x2d0>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb65 0503 	sbc.w	r5, r5, r3
 8000316:	2001      	movs	r0, #1
 8000318:	46ac      	mov	ip, r5
 800031a:	2e00      	cmp	r6, #0
 800031c:	d03f      	beq.n	800039e <__udivmoddi4+0x16a>
 800031e:	e886 1010 	stmia.w	r6, {r4, ip}
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	b912      	cbnz	r2, 800032e <__udivmoddi4+0xfa>
 8000328:	2701      	movs	r7, #1
 800032a:	fbb7 f7f2 	udiv	r7, r7, r2
 800032e:	fab7 fe87 	clz	lr, r7
 8000332:	f1be 0f00 	cmp.w	lr, #0
 8000336:	d134      	bne.n	80003a2 <__udivmoddi4+0x16e>
 8000338:	1beb      	subs	r3, r5, r7
 800033a:	0c3a      	lsrs	r2, r7, #16
 800033c:	fa1f fc87 	uxth.w	ip, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb3 f8f2 	udiv	r8, r3, r2
 8000346:	0c25      	lsrs	r5, r4, #16
 8000348:	fb02 3318 	mls	r3, r2, r8, r3
 800034c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000350:	fb0c f308 	mul.w	r3, ip, r8
 8000354:	42ab      	cmp	r3, r5
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x134>
 8000358:	19ed      	adds	r5, r5, r7
 800035a:	f108 30ff 	add.w	r0, r8, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x132>
 8000360:	42ab      	cmp	r3, r5
 8000362:	f200 80d1 	bhi.w	8000508 <__udivmoddi4+0x2d4>
 8000366:	4680      	mov	r8, r0
 8000368:	1aed      	subs	r5, r5, r3
 800036a:	b2a3      	uxth	r3, r4
 800036c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000370:	fb02 5510 	mls	r5, r2, r0, r5
 8000374:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000378:	fb0c fc00 	mul.w	ip, ip, r0
 800037c:	45a4      	cmp	ip, r4
 800037e:	d907      	bls.n	8000390 <__udivmoddi4+0x15c>
 8000380:	19e4      	adds	r4, r4, r7
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x15a>
 8000388:	45a4      	cmp	ip, r4
 800038a:	f200 80b8 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 800038e:	4618      	mov	r0, r3
 8000390:	eba4 040c 	sub.w	r4, r4, ip
 8000394:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000398:	e79d      	b.n	80002d6 <__udivmoddi4+0xa2>
 800039a:	4631      	mov	r1, r6
 800039c:	4630      	mov	r0, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	f1ce 0420 	rsb	r4, lr, #32
 80003a6:	fa05 f30e 	lsl.w	r3, r5, lr
 80003aa:	fa07 f70e 	lsl.w	r7, r7, lr
 80003ae:	fa20 f804 	lsr.w	r8, r0, r4
 80003b2:	0c3a      	lsrs	r2, r7, #16
 80003b4:	fa25 f404 	lsr.w	r4, r5, r4
 80003b8:	ea48 0803 	orr.w	r8, r8, r3
 80003bc:	fbb4 f1f2 	udiv	r1, r4, r2
 80003c0:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003c4:	fb02 4411 	mls	r4, r2, r1, r4
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003d0:	fb01 f30c 	mul.w	r3, r1, ip
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	fa00 f40e 	lsl.w	r4, r0, lr
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x1bc>
 80003dc:	19ed      	adds	r5, r5, r7
 80003de:	f101 30ff 	add.w	r0, r1, #4294967295
 80003e2:	f080 808a 	bcs.w	80004fa <__udivmoddi4+0x2c6>
 80003e6:	42ab      	cmp	r3, r5
 80003e8:	f240 8087 	bls.w	80004fa <__udivmoddi4+0x2c6>
 80003ec:	3902      	subs	r1, #2
 80003ee:	443d      	add	r5, r7
 80003f0:	1aeb      	subs	r3, r5, r3
 80003f2:	fa1f f588 	uxth.w	r5, r8
 80003f6:	fbb3 f0f2 	udiv	r0, r3, r2
 80003fa:	fb02 3310 	mls	r3, r2, r0, r3
 80003fe:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000402:	fb00 f30c 	mul.w	r3, r0, ip
 8000406:	42ab      	cmp	r3, r5
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1e6>
 800040a:	19ed      	adds	r5, r5, r7
 800040c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000410:	d26f      	bcs.n	80004f2 <__udivmoddi4+0x2be>
 8000412:	42ab      	cmp	r3, r5
 8000414:	d96d      	bls.n	80004f2 <__udivmoddi4+0x2be>
 8000416:	3802      	subs	r0, #2
 8000418:	443d      	add	r5, r7
 800041a:	1aeb      	subs	r3, r5, r3
 800041c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000420:	e78f      	b.n	8000342 <__udivmoddi4+0x10e>
 8000422:	f1c1 0720 	rsb	r7, r1, #32
 8000426:	fa22 f807 	lsr.w	r8, r2, r7
 800042a:	408b      	lsls	r3, r1
 800042c:	fa05 f401 	lsl.w	r4, r5, r1
 8000430:	ea48 0303 	orr.w	r3, r8, r3
 8000434:	fa20 fe07 	lsr.w	lr, r0, r7
 8000438:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800043c:	40fd      	lsrs	r5, r7
 800043e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000442:	fbb5 f9fc 	udiv	r9, r5, ip
 8000446:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800044a:	fb0c 5519 	mls	r5, ip, r9, r5
 800044e:	fa1f f883 	uxth.w	r8, r3
 8000452:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000456:	fb09 f408 	mul.w	r4, r9, r8
 800045a:	42ac      	cmp	r4, r5
 800045c:	fa02 f201 	lsl.w	r2, r2, r1
 8000460:	fa00 fa01 	lsl.w	sl, r0, r1
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x244>
 8000466:	18ed      	adds	r5, r5, r3
 8000468:	f109 30ff 	add.w	r0, r9, #4294967295
 800046c:	d243      	bcs.n	80004f6 <__udivmoddi4+0x2c2>
 800046e:	42ac      	cmp	r4, r5
 8000470:	d941      	bls.n	80004f6 <__udivmoddi4+0x2c2>
 8000472:	f1a9 0902 	sub.w	r9, r9, #2
 8000476:	441d      	add	r5, r3
 8000478:	1b2d      	subs	r5, r5, r4
 800047a:	fa1f fe8e 	uxth.w	lr, lr
 800047e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000482:	fb0c 5510 	mls	r5, ip, r0, r5
 8000486:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800048a:	fb00 f808 	mul.w	r8, r0, r8
 800048e:	45a0      	cmp	r8, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x26e>
 8000492:	18e4      	adds	r4, r4, r3
 8000494:	f100 35ff 	add.w	r5, r0, #4294967295
 8000498:	d229      	bcs.n	80004ee <__udivmoddi4+0x2ba>
 800049a:	45a0      	cmp	r8, r4
 800049c:	d927      	bls.n	80004ee <__udivmoddi4+0x2ba>
 800049e:	3802      	subs	r0, #2
 80004a0:	441c      	add	r4, r3
 80004a2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004a6:	eba4 0408 	sub.w	r4, r4, r8
 80004aa:	fba0 8902 	umull	r8, r9, r0, r2
 80004ae:	454c      	cmp	r4, r9
 80004b0:	46c6      	mov	lr, r8
 80004b2:	464d      	mov	r5, r9
 80004b4:	d315      	bcc.n	80004e2 <__udivmoddi4+0x2ae>
 80004b6:	d012      	beq.n	80004de <__udivmoddi4+0x2aa>
 80004b8:	b156      	cbz	r6, 80004d0 <__udivmoddi4+0x29c>
 80004ba:	ebba 030e 	subs.w	r3, sl, lr
 80004be:	eb64 0405 	sbc.w	r4, r4, r5
 80004c2:	fa04 f707 	lsl.w	r7, r4, r7
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431f      	orrs	r7, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	6037      	str	r7, [r6, #0]
 80004ce:	6074      	str	r4, [r6, #4]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d6:	4618      	mov	r0, r3
 80004d8:	e6f8      	b.n	80002cc <__udivmoddi4+0x98>
 80004da:	4690      	mov	r8, r2
 80004dc:	e6e0      	b.n	80002a0 <__udivmoddi4+0x6c>
 80004de:	45c2      	cmp	sl, r8
 80004e0:	d2ea      	bcs.n	80004b8 <__udivmoddi4+0x284>
 80004e2:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e6:	eb69 0503 	sbc.w	r5, r9, r3
 80004ea:	3801      	subs	r0, #1
 80004ec:	e7e4      	b.n	80004b8 <__udivmoddi4+0x284>
 80004ee:	4628      	mov	r0, r5
 80004f0:	e7d7      	b.n	80004a2 <__udivmoddi4+0x26e>
 80004f2:	4640      	mov	r0, r8
 80004f4:	e791      	b.n	800041a <__udivmoddi4+0x1e6>
 80004f6:	4681      	mov	r9, r0
 80004f8:	e7be      	b.n	8000478 <__udivmoddi4+0x244>
 80004fa:	4601      	mov	r1, r0
 80004fc:	e778      	b.n	80003f0 <__udivmoddi4+0x1bc>
 80004fe:	3802      	subs	r0, #2
 8000500:	443c      	add	r4, r7
 8000502:	e745      	b.n	8000390 <__udivmoddi4+0x15c>
 8000504:	4608      	mov	r0, r1
 8000506:	e708      	b.n	800031a <__udivmoddi4+0xe6>
 8000508:	f1a8 0802 	sub.w	r8, r8, #2
 800050c:	443d      	add	r5, r7
 800050e:	e72b      	b.n	8000368 <__udivmoddi4+0x134>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000514:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000516:	4a0e      	ldr	r2, [pc, #56]	; (8000550 <HAL_InitTick+0x3c>)
 8000518:	4b0e      	ldr	r3, [pc, #56]	; (8000554 <HAL_InitTick+0x40>)
{
 800051a:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800051c:	7818      	ldrb	r0, [r3, #0]
 800051e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000522:	fbb3 f3f0 	udiv	r3, r3, r0
 8000526:	6810      	ldr	r0, [r2, #0]
 8000528:	fbb0 f0f3 	udiv	r0, r0, r3
 800052c:	f000 f9f2 	bl	8000914 <HAL_SYSTICK_Config>
 8000530:	4604      	mov	r4, r0
 8000532:	b958      	cbnz	r0, 800054c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000534:	2d0f      	cmp	r5, #15
 8000536:	d809      	bhi.n	800054c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000538:	4602      	mov	r2, r0
 800053a:	4629      	mov	r1, r5
 800053c:	f04f 30ff 	mov.w	r0, #4294967295
 8000540:	f000 f9a6 	bl	8000890 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000544:	4b04      	ldr	r3, [pc, #16]	; (8000558 <HAL_InitTick+0x44>)
 8000546:	4620      	mov	r0, r4
 8000548:	601d      	str	r5, [r3, #0]
 800054a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800054c:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800054e:	bd38      	pop	{r3, r4, r5, pc}
 8000550:	20000008 	.word	0x20000008
 8000554:	20000000 	.word	0x20000000
 8000558:	20000004 	.word	0x20000004

0800055c <HAL_Init>:
{
 800055c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800055e:	4b0b      	ldr	r3, [pc, #44]	; (800058c <HAL_Init+0x30>)
 8000560:	681a      	ldr	r2, [r3, #0]
 8000562:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000566:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000568:	681a      	ldr	r2, [r3, #0]
 800056a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800056e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000570:	681a      	ldr	r2, [r3, #0]
 8000572:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000576:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000578:	2003      	movs	r0, #3
 800057a:	f000 f977 	bl	800086c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800057e:	2000      	movs	r0, #0
 8000580:	f7ff ffc8 	bl	8000514 <HAL_InitTick>
  HAL_MspInit();
 8000584:	f002 fda4 	bl	80030d0 <HAL_MspInit>
}
 8000588:	2000      	movs	r0, #0
 800058a:	bd08      	pop	{r3, pc}
 800058c:	40023c00 	.word	0x40023c00

08000590 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000590:	4a03      	ldr	r2, [pc, #12]	; (80005a0 <HAL_IncTick+0x10>)
 8000592:	4b04      	ldr	r3, [pc, #16]	; (80005a4 <HAL_IncTick+0x14>)
 8000594:	6811      	ldr	r1, [r2, #0]
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	440b      	add	r3, r1
 800059a:	6013      	str	r3, [r2, #0]
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	2000003c 	.word	0x2000003c
 80005a4:	20000000 	.word	0x20000000

080005a8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005a8:	4b01      	ldr	r3, [pc, #4]	; (80005b0 <HAL_GetTick+0x8>)
 80005aa:	6818      	ldr	r0, [r3, #0]
}
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	2000003c 	.word	0x2000003c

080005b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005b4:	b538      	push	{r3, r4, r5, lr}
 80005b6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80005b8:	f7ff fff6 	bl	80005a8 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005bc:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80005be:	bf1c      	itt	ne
 80005c0:	4b05      	ldrne	r3, [pc, #20]	; (80005d8 <HAL_Delay+0x24>)
 80005c2:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 80005c4:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 80005c6:	bf18      	it	ne
 80005c8:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005ca:	f7ff ffed 	bl	80005a8 <HAL_GetTick>
 80005ce:	1b40      	subs	r0, r0, r5
 80005d0:	4284      	cmp	r4, r0
 80005d2:	d8fa      	bhi.n	80005ca <HAL_Delay+0x16>
  {
  }
}
 80005d4:	bd38      	pop	{r3, r4, r5, pc}
 80005d6:	bf00      	nop
 80005d8:	20000000 	.word	0x20000000

080005dc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80005dc:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 80005de:	4604      	mov	r4, r0
 80005e0:	2800      	cmp	r0, #0
 80005e2:	f000 809b 	beq.w	800071c <HAL_ADC_Init+0x140>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80005e6:	6c05      	ldr	r5, [r0, #64]	; 0x40
 80005e8:	b925      	cbnz	r5, 80005f4 <HAL_ADC_Init+0x18>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80005ea:	f002 fd8d 	bl	8003108 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80005ee:	6465      	str	r5, [r4, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80005f0:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80005f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80005f6:	06db      	lsls	r3, r3, #27
 80005f8:	f100 808e 	bmi.w	8000718 <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80005fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80005fe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000602:	f023 0302 	bic.w	r3, r3, #2
 8000606:	f043 0302 	orr.w	r3, r3, #2
 800060a:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800060c:	4b44      	ldr	r3, [pc, #272]	; (8000720 <HAL_ADC_Init+0x144>)
 800060e:	685a      	ldr	r2, [r3, #4]
 8000610:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000614:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000616:	685a      	ldr	r2, [r3, #4]
 8000618:	6861      	ldr	r1, [r4, #4]
 800061a:	430a      	orrs	r2, r1
 800061c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800061e:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000620:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000622:	685a      	ldr	r2, [r3, #4]
 8000624:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000628:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800062a:	685a      	ldr	r2, [r3, #4]
 800062c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000630:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000632:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000634:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000636:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800063a:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800063c:	685a      	ldr	r2, [r3, #4]
 800063e:	430a      	orrs	r2, r1
 8000640:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000642:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000644:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000646:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800064a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800064c:	689a      	ldr	r2, [r3, #8]
 800064e:	430a      	orrs	r2, r1
 8000650:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000652:	4934      	ldr	r1, [pc, #208]	; (8000724 <HAL_ADC_Init+0x148>)
 8000654:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000656:	428a      	cmp	r2, r1
 8000658:	d052      	beq.n	8000700 <HAL_ADC_Init+0x124>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800065a:	6899      	ldr	r1, [r3, #8]
 800065c:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8000660:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000662:	6899      	ldr	r1, [r3, #8]
 8000664:	430a      	orrs	r2, r1
 8000666:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000668:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800066a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800066c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000670:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000672:	689a      	ldr	r2, [r3, #8]
 8000674:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000676:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000678:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800067a:	7e21      	ldrb	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800067c:	f022 0202 	bic.w	r2, r2, #2
 8000680:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000682:	689a      	ldr	r2, [r3, #8]
 8000684:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8000688:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800068a:	f894 2020 	ldrb.w	r2, [r4, #32]
 800068e:	2a00      	cmp	r2, #0
 8000690:	d03e      	beq.n	8000710 <HAL_ADC_Init+0x134>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000692:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000694:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000696:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800069a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800069c:	685a      	ldr	r2, [r3, #4]
 800069e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80006a2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80006a4:	685a      	ldr	r2, [r3, #4]
 80006a6:	3901      	subs	r1, #1
 80006a8:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80006ac:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80006ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80006b0:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80006b2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80006b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80006b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006ba:	3901      	subs	r1, #1
 80006bc:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 80006c0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80006c2:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80006c4:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80006c8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80006cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80006ce:	689a      	ldr	r2, [r3, #8]
 80006d0:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 80006d4:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80006d6:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80006d8:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80006da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80006de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80006e0:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 80006e2:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80006e4:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 80006e8:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 80006ea:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 80006ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80006ee:	f023 0303 	bic.w	r3, r3, #3
 80006f2:	f043 0301 	orr.w	r3, r3, #1
 80006f6:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 80006f8:	2300      	movs	r3, #0
 80006fa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 80006fe:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000700:	689a      	ldr	r2, [r3, #8]
 8000702:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000706:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000708:	689a      	ldr	r2, [r3, #8]
 800070a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800070e:	e7b2      	b.n	8000676 <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000710:	685a      	ldr	r2, [r3, #4]
 8000712:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000716:	e7c9      	b.n	80006ac <HAL_ADC_Init+0xd0>
    tmp_hal_status = HAL_ERROR;
 8000718:	2001      	movs	r0, #1
 800071a:	e7ed      	b.n	80006f8 <HAL_ADC_Init+0x11c>
    return HAL_ERROR;
 800071c:	2001      	movs	r0, #1
}
 800071e:	bd38      	pop	{r3, r4, r5, pc}
 8000720:	40012300 	.word	0x40012300
 8000724:	0f000001 	.word	0x0f000001

08000728 <HAL_ADC_ConfigChannel>:
{
 8000728:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 800072a:	2300      	movs	r3, #0
 800072c:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800072e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000732:	2b01      	cmp	r3, #1
 8000734:	d06e      	beq.n	8000814 <HAL_ADC_ConfigChannel+0xec>
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000736:	680d      	ldr	r5, [r1, #0]
 8000738:	6804      	ldr	r4, [r0, #0]
 800073a:	688a      	ldr	r2, [r1, #8]
  __HAL_LOCK(hadc);
 800073c:	2301      	movs	r3, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 800073e:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 8000740:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 8000744:	b2ae      	uxth	r6, r5
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000746:	d92a      	bls.n	800079e <HAL_ADC_ConfigChannel+0x76>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000748:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 800074c:	68e7      	ldr	r7, [r4, #12]
 800074e:	3b1e      	subs	r3, #30
 8000750:	f04f 0e07 	mov.w	lr, #7
 8000754:	fa0e fe03 	lsl.w	lr, lr, r3
 8000758:	ea27 070e 	bic.w	r7, r7, lr
 800075c:	60e7      	str	r7, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800075e:	68e7      	ldr	r7, [r4, #12]
 8000760:	fa02 f303 	lsl.w	r3, r2, r3
 8000764:	433b      	orrs	r3, r7
 8000766:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 8000768:	684a      	ldr	r2, [r1, #4]
 800076a:	2a06      	cmp	r2, #6
 800076c:	ea4f 0382 	mov.w	r3, r2, lsl #2
 8000770:	d825      	bhi.n	80007be <HAL_ADC_ConfigChannel+0x96>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000772:	4413      	add	r3, r2
 8000774:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8000776:	1f59      	subs	r1, r3, #5
 8000778:	231f      	movs	r3, #31
 800077a:	408b      	lsls	r3, r1
 800077c:	ea27 0303 	bic.w	r3, r7, r3
 8000780:	6363      	str	r3, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000782:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000784:	fa06 f101 	lsl.w	r1, r6, r1
 8000788:	4311      	orrs	r1, r2
 800078a:	6361      	str	r1, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800078c:	4b32      	ldr	r3, [pc, #200]	; (8000858 <HAL_ADC_ConfigChannel+0x130>)
 800078e:	429c      	cmp	r4, r3
 8000790:	d034      	beq.n	80007fc <HAL_ADC_ConfigChannel+0xd4>
  __HAL_UNLOCK(hadc);
 8000792:	2300      	movs	r3, #0
 8000794:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8000798:	4618      	mov	r0, r3
}
 800079a:	b003      	add	sp, #12
 800079c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800079e:	6927      	ldr	r7, [r4, #16]
 80007a0:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80007a4:	f04f 0e07 	mov.w	lr, #7
 80007a8:	fa0e fe03 	lsl.w	lr, lr, r3
 80007ac:	ea27 070e 	bic.w	r7, r7, lr
 80007b0:	6127      	str	r7, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80007b2:	6927      	ldr	r7, [r4, #16]
 80007b4:	fa02 f303 	lsl.w	r3, r2, r3
 80007b8:	433b      	orrs	r3, r7
 80007ba:	6123      	str	r3, [r4, #16]
 80007bc:	e7d4      	b.n	8000768 <HAL_ADC_ConfigChannel+0x40>
  else if (sConfig->Rank < 13U)
 80007be:	2a0c      	cmp	r2, #12
 80007c0:	d80e      	bhi.n	80007e0 <HAL_ADC_ConfigChannel+0xb8>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80007c2:	4413      	add	r3, r2
 80007c4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80007c6:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 80007ca:	231f      	movs	r3, #31
 80007cc:	4093      	lsls	r3, r2
 80007ce:	ea21 0303 	bic.w	r3, r1, r3
 80007d2:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80007d4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80007d6:	fa06 f202 	lsl.w	r2, r6, r2
 80007da:	431a      	orrs	r2, r3
 80007dc:	6322      	str	r2, [r4, #48]	; 0x30
 80007de:	e7d5      	b.n	800078c <HAL_ADC_ConfigChannel+0x64>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80007e0:	4413      	add	r3, r2
 80007e2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80007e4:	3b41      	subs	r3, #65	; 0x41
 80007e6:	221f      	movs	r2, #31
 80007e8:	409a      	lsls	r2, r3
 80007ea:	ea21 0202 	bic.w	r2, r1, r2
 80007ee:	62e2      	str	r2, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80007f0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80007f2:	fa06 f103 	lsl.w	r1, r6, r3
 80007f6:	4311      	orrs	r1, r2
 80007f8:	62e1      	str	r1, [r4, #44]	; 0x2c
 80007fa:	e7c7      	b.n	800078c <HAL_ADC_ConfigChannel+0x64>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80007fc:	2d12      	cmp	r5, #18
 80007fe:	d10b      	bne.n	8000818 <HAL_ADC_ConfigChannel+0xf0>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8000800:	4b16      	ldr	r3, [pc, #88]	; (800085c <HAL_ADC_ConfigChannel+0x134>)
 8000802:	685a      	ldr	r2, [r3, #4]
 8000804:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8000808:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800080a:	685a      	ldr	r2, [r3, #4]
 800080c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	e7be      	b.n	8000792 <HAL_ADC_ConfigChannel+0x6a>
  __HAL_LOCK(hadc);
 8000814:	2002      	movs	r0, #2
 8000816:	e7c0      	b.n	800079a <HAL_ADC_ConfigChannel+0x72>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000818:	4b11      	ldr	r3, [pc, #68]	; (8000860 <HAL_ADC_ConfigChannel+0x138>)
 800081a:	429d      	cmp	r5, r3
 800081c:	d001      	beq.n	8000822 <HAL_ADC_ConfigChannel+0xfa>
 800081e:	2d11      	cmp	r5, #17
 8000820:	d1b7      	bne.n	8000792 <HAL_ADC_ConfigChannel+0x6a>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8000822:	4b0e      	ldr	r3, [pc, #56]	; (800085c <HAL_ADC_ConfigChannel+0x134>)
 8000824:	685a      	ldr	r2, [r3, #4]
 8000826:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 800082a:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800082c:	685a      	ldr	r2, [r3, #4]
 800082e:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000832:	605a      	str	r2, [r3, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000834:	4b0a      	ldr	r3, [pc, #40]	; (8000860 <HAL_ADC_ConfigChannel+0x138>)
 8000836:	429d      	cmp	r5, r3
 8000838:	d1ab      	bne.n	8000792 <HAL_ADC_ConfigChannel+0x6a>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800083a:	4b0a      	ldr	r3, [pc, #40]	; (8000864 <HAL_ADC_ConfigChannel+0x13c>)
 800083c:	4a0a      	ldr	r2, [pc, #40]	; (8000868 <HAL_ADC_ConfigChannel+0x140>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	fbb3 f2f2 	udiv	r2, r3, r2
 8000844:	230a      	movs	r3, #10
 8000846:	4353      	muls	r3, r2
        counter--;
 8000848:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 800084a:	9b01      	ldr	r3, [sp, #4]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d0a0      	beq.n	8000792 <HAL_ADC_ConfigChannel+0x6a>
        counter--;
 8000850:	9b01      	ldr	r3, [sp, #4]
 8000852:	3b01      	subs	r3, #1
 8000854:	e7f8      	b.n	8000848 <HAL_ADC_ConfigChannel+0x120>
 8000856:	bf00      	nop
 8000858:	40012000 	.word	0x40012000
 800085c:	40012300 	.word	0x40012300
 8000860:	10000012 	.word	0x10000012
 8000864:	20000008 	.word	0x20000008
 8000868:	000f4240 	.word	0x000f4240

0800086c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800086c:	4a07      	ldr	r2, [pc, #28]	; (800088c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800086e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000870:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000874:	041b      	lsls	r3, r3, #16
 8000876:	0c1b      	lsrs	r3, r3, #16
 8000878:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800087c:	0200      	lsls	r0, r0, #8
 800087e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000882:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000886:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000888:	60d3      	str	r3, [r2, #12]
 800088a:	4770      	bx	lr
 800088c:	e000ed00 	.word	0xe000ed00

08000890 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000890:	4b17      	ldr	r3, [pc, #92]	; (80008f0 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000892:	b530      	push	{r4, r5, lr}
 8000894:	68dc      	ldr	r4, [r3, #12]
 8000896:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800089a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800089e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008a0:	2b04      	cmp	r3, #4
 80008a2:	bf28      	it	cs
 80008a4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008a6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008a8:	f04f 0501 	mov.w	r5, #1
 80008ac:	fa05 f303 	lsl.w	r3, r5, r3
 80008b0:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008b4:	bf8c      	ite	hi
 80008b6:	3c03      	subhi	r4, #3
 80008b8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008ba:	4019      	ands	r1, r3
 80008bc:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008be:	fa05 f404 	lsl.w	r4, r5, r4
 80008c2:	3c01      	subs	r4, #1
 80008c4:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 80008c6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008c8:	ea42 0201 	orr.w	r2, r2, r1
 80008cc:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008d0:	bfad      	iteet	ge
 80008d2:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008d6:	f000 000f 	andlt.w	r0, r0, #15
 80008da:	4b06      	ldrlt	r3, [pc, #24]	; (80008f4 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008dc:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008e0:	bfb5      	itete	lt
 80008e2:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008e4:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008e6:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008e8:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80008ec:	bd30      	pop	{r4, r5, pc}
 80008ee:	bf00      	nop
 80008f0:	e000ed00 	.word	0xe000ed00
 80008f4:	e000ed14 	.word	0xe000ed14

080008f8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80008f8:	2800      	cmp	r0, #0
 80008fa:	db08      	blt.n	800090e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008fc:	0942      	lsrs	r2, r0, #5
 80008fe:	2301      	movs	r3, #1
 8000900:	f000 001f 	and.w	r0, r0, #31
 8000904:	fa03 f000 	lsl.w	r0, r3, r0
 8000908:	4b01      	ldr	r3, [pc, #4]	; (8000910 <HAL_NVIC_EnableIRQ+0x18>)
 800090a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800090e:	4770      	bx	lr
 8000910:	e000e100 	.word	0xe000e100

08000914 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000914:	3801      	subs	r0, #1
 8000916:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800091a:	d20a      	bcs.n	8000932 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800091c:	4b06      	ldr	r3, [pc, #24]	; (8000938 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800091e:	4a07      	ldr	r2, [pc, #28]	; (800093c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000920:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000922:	21f0      	movs	r1, #240	; 0xf0
 8000924:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000928:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800092a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800092c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000932:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	e000e010 	.word	0xe000e010
 800093c:	e000ed00 	.word	0xe000ed00

08000940 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000940:	6803      	ldr	r3, [r0, #0]
 8000942:	b2da      	uxtb	r2, r3
 8000944:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000948:	f023 0303 	bic.w	r3, r3, #3
 800094c:	2118      	movs	r1, #24
 800094e:	3a10      	subs	r2, #16
 8000950:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000954:	4904      	ldr	r1, [pc, #16]	; (8000968 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8000956:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000958:	bf88      	it	hi
 800095a:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800095c:	5c89      	ldrb	r1, [r1, r2]
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800095e:	6583      	str	r3, [r0, #88]	; 0x58
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000960:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  
  return hdma->StreamBaseAddress;
}
 8000962:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	08003a9c 	.word	0x08003a9c

0800096c <HAL_DMA_Init>:
{
 800096c:	b570      	push	{r4, r5, r6, lr}
 800096e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000970:	f7ff fe1a 	bl	80005a8 <HAL_GetTick>
 8000974:	4605      	mov	r5, r0
  if(hdma == NULL)
 8000976:	2c00      	cmp	r4, #0
 8000978:	d071      	beq.n	8000a5e <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 800097a:	2300      	movs	r3, #0
 800097c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8000980:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8000982:	2302      	movs	r3, #2
 8000984:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8000988:	6813      	ldr	r3, [r2, #0]
 800098a:	f023 0301 	bic.w	r3, r3, #1
 800098e:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000990:	6821      	ldr	r1, [r4, #0]
 8000992:	680b      	ldr	r3, [r1, #0]
 8000994:	07d8      	lsls	r0, r3, #31
 8000996:	d43c      	bmi.n	8000a12 <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 8000998:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800099a:	4d32      	ldr	r5, [pc, #200]	; (8000a64 <HAL_DMA_Init+0xf8>)
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800099c:	6862      	ldr	r2, [r4, #4]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800099e:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80009a0:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80009a2:	68a3      	ldr	r3, [r4, #8]
 80009a4:	4313      	orrs	r3, r2
 80009a6:	68e2      	ldr	r2, [r4, #12]
 80009a8:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80009aa:	6922      	ldr	r2, [r4, #16]
 80009ac:	4313      	orrs	r3, r2
 80009ae:	6962      	ldr	r2, [r4, #20]
 80009b0:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80009b2:	69e2      	ldr	r2, [r4, #28]
 80009b4:	4303      	orrs	r3, r0
 80009b6:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 80009b8:	6a22      	ldr	r2, [r4, #32]
 80009ba:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80009bc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80009be:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80009c0:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80009c4:	bf01      	itttt	eq
 80009c6:	6b26      	ldreq	r6, [r4, #48]	; 0x30
 80009c8:	6ae5      	ldreq	r5, [r4, #44]	; 0x2c
 80009ca:	4335      	orreq	r5, r6
 80009cc:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 80009ce:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 80009d0:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80009d2:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80009d4:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 80009d8:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80009dc:	d10b      	bne.n	80009f6 <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 80009de:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80009e0:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 80009e2:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80009e4:	b13d      	cbz	r5, 80009f6 <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80009e6:	b9f8      	cbnz	r0, 8000a28 <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 80009e8:	2a01      	cmp	r2, #1
 80009ea:	d02d      	beq.n	8000a48 <HAL_DMA_Init+0xdc>
 80009ec:	d301      	bcc.n	80009f2 <HAL_DMA_Init+0x86>
 80009ee:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80009f0:	d101      	bne.n	80009f6 <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80009f2:	01ea      	lsls	r2, r5, #7
 80009f4:	d42b      	bmi.n	8000a4e <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 80009f6:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80009f8:	4620      	mov	r0, r4
 80009fa:	f7ff ffa1 	bl	8000940 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80009fe:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000a00:	233f      	movs	r3, #63	; 0x3f
 8000a02:	4093      	lsls	r3, r2
 8000a04:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a06:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8000a08:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a0a:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8000a0c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8000a10:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000a12:	f7ff fdc9 	bl	80005a8 <HAL_GetTick>
 8000a16:	1b40      	subs	r0, r0, r5
 8000a18:	2805      	cmp	r0, #5
 8000a1a:	d9b9      	bls.n	8000990 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000a1c:	2320      	movs	r3, #32
 8000a1e:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000a20:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 8000a22:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8000a26:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000a28:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8000a2c:	d113      	bne.n	8000a56 <HAL_DMA_Init+0xea>
    switch (tmp)
 8000a2e:	2a03      	cmp	r2, #3
 8000a30:	d8e1      	bhi.n	80009f6 <HAL_DMA_Init+0x8a>
 8000a32:	a001      	add	r0, pc, #4	; (adr r0, 8000a38 <HAL_DMA_Init+0xcc>)
 8000a34:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8000a38:	08000a4f 	.word	0x08000a4f
 8000a3c:	080009f3 	.word	0x080009f3
 8000a40:	08000a4f 	.word	0x08000a4f
 8000a44:	08000a49 	.word	0x08000a49
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000a48:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8000a4c:	d1d3      	bne.n	80009f6 <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000a4e:	2340      	movs	r3, #64	; 0x40
 8000a50:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8000a52:	2001      	movs	r0, #1
 8000a54:	e7e5      	b.n	8000a22 <HAL_DMA_Init+0xb6>
    switch (tmp)
 8000a56:	2a02      	cmp	r2, #2
 8000a58:	d9f9      	bls.n	8000a4e <HAL_DMA_Init+0xe2>
 8000a5a:	2a03      	cmp	r2, #3
 8000a5c:	e7c8      	b.n	80009f0 <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 8000a5e:	2001      	movs	r0, #1
 8000a60:	bd70      	pop	{r4, r5, r6, pc}
 8000a62:	bf00      	nop
 8000a64:	f010803f 	.word	0xf010803f

08000a68 <HAL_DMA_Start_IT>:
{
 8000a68:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8000a6a:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8000a6e:	2c01      	cmp	r4, #1
 8000a70:	d032      	beq.n	8000ad8 <HAL_DMA_Start_IT+0x70>
 8000a72:	2401      	movs	r4, #1
 8000a74:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8000a78:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000a7c:	6d86      	ldr	r6, [r0, #88]	; 0x58
  if(HAL_DMA_STATE_READY == hdma->State)
 8000a7e:	2c01      	cmp	r4, #1
 8000a80:	f04f 0500 	mov.w	r5, #0
 8000a84:	f04f 0402 	mov.w	r4, #2
 8000a88:	d124      	bne.n	8000ad4 <HAL_DMA_Start_IT+0x6c>
    hdma->State = HAL_DMA_STATE_BUSY;
 8000a8a:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000a8e:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a90:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000a92:	6825      	ldr	r5, [r4, #0]
 8000a94:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8000a98:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8000a9a:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000a9c:	6883      	ldr	r3, [r0, #8]
 8000a9e:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 8000aa0:	bf0e      	itee	eq
 8000aa2:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 8000aa4:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8000aa6:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000aa8:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 8000aaa:	bf08      	it	eq
 8000aac:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000aae:	233f      	movs	r3, #63	; 0x3f
 8000ab0:	4093      	lsls	r3, r2
 8000ab2:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000ab4:	6823      	ldr	r3, [r4, #0]
 8000ab6:	f043 0316 	orr.w	r3, r3, #22
 8000aba:	6023      	str	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8000abc:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000abe:	b11b      	cbz	r3, 8000ac8 <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 8000ac0:	6823      	ldr	r3, [r4, #0]
 8000ac2:	f043 0308 	orr.w	r3, r3, #8
 8000ac6:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8000ac8:	6823      	ldr	r3, [r4, #0]
 8000aca:	f043 0301 	orr.w	r3, r3, #1
 8000ace:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000ad0:	2000      	movs	r0, #0
 8000ad2:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hdma);	  
 8000ad4:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 8000ad8:	2002      	movs	r0, #2
}
 8000ada:	bd70      	pop	{r4, r5, r6, pc}

08000adc <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000adc:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000ae0:	2b02      	cmp	r3, #2
 8000ae2:	d003      	beq.n	8000aec <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ae4:	2380      	movs	r3, #128	; 0x80
 8000ae6:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8000ae8:	2001      	movs	r0, #1
 8000aea:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8000aec:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8000aee:	2305      	movs	r3, #5
 8000af0:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8000af4:	6813      	ldr	r3, [r2, #0]
 8000af6:	f023 0301 	bic.w	r3, r3, #1
 8000afa:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8000afc:	2000      	movs	r0, #0
}
 8000afe:	4770      	bx	lr

08000b00 <HAL_DMA_IRQHandler>:
{
 8000b00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 8000b02:	2300      	movs	r3, #0
 8000b04:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000b06:	4b5a      	ldr	r3, [pc, #360]	; (8000c70 <HAL_DMA_IRQHandler+0x170>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000b08:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 8000b0a:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000b0c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8000b0e:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000b10:	2208      	movs	r2, #8
 8000b12:	409a      	lsls	r2, r3
 8000b14:	4216      	tst	r6, r2
{
 8000b16:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000b18:	d00c      	beq.n	8000b34 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000b1a:	6801      	ldr	r1, [r0, #0]
 8000b1c:	6808      	ldr	r0, [r1, #0]
 8000b1e:	0740      	lsls	r0, r0, #29
 8000b20:	d508      	bpl.n	8000b34 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000b22:	6808      	ldr	r0, [r1, #0]
 8000b24:	f020 0004 	bic.w	r0, r0, #4
 8000b28:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000b2a:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000b2c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000b2e:	f042 0201 	orr.w	r2, r2, #1
 8000b32:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000b34:	2201      	movs	r2, #1
 8000b36:	409a      	lsls	r2, r3
 8000b38:	4216      	tst	r6, r2
 8000b3a:	d008      	beq.n	8000b4e <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000b3c:	6821      	ldr	r1, [r4, #0]
 8000b3e:	6949      	ldr	r1, [r1, #20]
 8000b40:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000b42:	bf41      	itttt	mi
 8000b44:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000b46:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8000b48:	f042 0202 	orrmi.w	r2, r2, #2
 8000b4c:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000b4e:	2204      	movs	r2, #4
 8000b50:	409a      	lsls	r2, r3
 8000b52:	4216      	tst	r6, r2
 8000b54:	d008      	beq.n	8000b68 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000b56:	6821      	ldr	r1, [r4, #0]
 8000b58:	6809      	ldr	r1, [r1, #0]
 8000b5a:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000b5c:	bf41      	itttt	mi
 8000b5e:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000b60:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8000b62:	f042 0204 	orrmi.w	r2, r2, #4
 8000b66:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000b68:	2210      	movs	r2, #16
 8000b6a:	409a      	lsls	r2, r3
 8000b6c:	4216      	tst	r6, r2
 8000b6e:	d010      	beq.n	8000b92 <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000b70:	6823      	ldr	r3, [r4, #0]
 8000b72:	6819      	ldr	r1, [r3, #0]
 8000b74:	0709      	lsls	r1, r1, #28
 8000b76:	d50c      	bpl.n	8000b92 <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000b78:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000b7a:	681a      	ldr	r2, [r3, #0]
 8000b7c:	0350      	lsls	r0, r2, #13
 8000b7e:	d535      	bpl.n	8000bec <HAL_DMA_IRQHandler+0xec>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	0319      	lsls	r1, r3, #12
 8000b84:	d401      	bmi.n	8000b8a <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 8000b86:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000b88:	e000      	b.n	8000b8c <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000b8a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8000b8c:	b10b      	cbz	r3, 8000b92 <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 8000b8e:	4620      	mov	r0, r4
 8000b90:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000b92:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8000b94:	2220      	movs	r2, #32
 8000b96:	408a      	lsls	r2, r1
 8000b98:	4216      	tst	r6, r2
 8000b9a:	d038      	beq.n	8000c0e <HAL_DMA_IRQHandler+0x10e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000b9c:	6823      	ldr	r3, [r4, #0]
 8000b9e:	6818      	ldr	r0, [r3, #0]
 8000ba0:	06c6      	lsls	r6, r0, #27
 8000ba2:	d534      	bpl.n	8000c0e <HAL_DMA_IRQHandler+0x10e>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000ba4:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000ba6:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8000baa:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000bac:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000bae:	d125      	bne.n	8000bfc <HAL_DMA_IRQHandler+0xfc>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000bb0:	f022 0216 	bic.w	r2, r2, #22
 8000bb4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000bb6:	695a      	ldr	r2, [r3, #20]
 8000bb8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000bbc:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000bbe:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000bc0:	b90a      	cbnz	r2, 8000bc6 <HAL_DMA_IRQHandler+0xc6>
 8000bc2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8000bc4:	b11a      	cbz	r2, 8000bce <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	f022 0208 	bic.w	r2, r2, #8
 8000bcc:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000bce:	233f      	movs	r3, #63	; 0x3f
 8000bd0:	408b      	lsls	r3, r1
 8000bd2:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8000be0:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 8000be2:	b10b      	cbz	r3, 8000be8 <HAL_DMA_IRQHandler+0xe8>
      hdma->XferErrorCallback(hdma);
 8000be4:	4620      	mov	r0, r4
 8000be6:	4798      	blx	r3
}
 8000be8:	b003      	add	sp, #12
 8000bea:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000bf0:	bf5e      	ittt	pl
 8000bf2:	681a      	ldrpl	r2, [r3, #0]
 8000bf4:	f022 0208 	bicpl.w	r2, r2, #8
 8000bf8:	601a      	strpl	r2, [r3, #0]
 8000bfa:	e7c4      	b.n	8000b86 <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000bfc:	0350      	lsls	r0, r2, #13
 8000bfe:	d528      	bpl.n	8000c52 <HAL_DMA_IRQHandler+0x152>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	0319      	lsls	r1, r3, #12
 8000c04:	d432      	bmi.n	8000c6c <HAL_DMA_IRQHandler+0x16c>
          if(hdma->XferM1CpltCallback != NULL)
 8000c06:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8000c08:	b10b      	cbz	r3, 8000c0e <HAL_DMA_IRQHandler+0x10e>
          hdma->XferCpltCallback(hdma);
 8000c0a:	4620      	mov	r0, r4
 8000c0c:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000c0e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d0e9      	beq.n	8000be8 <HAL_DMA_IRQHandler+0xe8>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000c14:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000c16:	07da      	lsls	r2, r3, #31
 8000c18:	d519      	bpl.n	8000c4e <HAL_DMA_IRQHandler+0x14e>
      hdma->State = HAL_DMA_STATE_ABORT;
 8000c1a:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 8000c1c:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 8000c1e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8000c22:	6813      	ldr	r3, [r2, #0]
 8000c24:	f023 0301 	bic.w	r3, r3, #1
 8000c28:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000c2a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000c2e:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 8000c32:	9b01      	ldr	r3, [sp, #4]
 8000c34:	3301      	adds	r3, #1
 8000c36:	429f      	cmp	r7, r3
 8000c38:	9301      	str	r3, [sp, #4]
 8000c3a:	d302      	bcc.n	8000c42 <HAL_DMA_IRQHandler+0x142>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000c3c:	6813      	ldr	r3, [r2, #0]
 8000c3e:	07db      	lsls	r3, r3, #31
 8000c40:	d4f7      	bmi.n	8000c32 <HAL_DMA_IRQHandler+0x132>
      __HAL_UNLOCK(hdma);
 8000c42:	2300      	movs	r3, #0
 8000c44:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8000c4e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000c50:	e7c7      	b.n	8000be2 <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8000c58:	d108      	bne.n	8000c6c <HAL_DMA_IRQHandler+0x16c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000c5a:	6819      	ldr	r1, [r3, #0]
 8000c5c:	f021 0110 	bic.w	r1, r1, #16
 8000c60:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8000c62:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8000c64:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8000c68:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8000c6c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000c6e:	e7cb      	b.n	8000c08 <HAL_DMA_IRQHandler+0x108>
 8000c70:	20000008 	.word	0x20000008

08000c74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c78:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c7a:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c7c:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8000e20 <HAL_GPIO_Init+0x1ac>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c80:	4a65      	ldr	r2, [pc, #404]	; (8000e18 <HAL_GPIO_Init+0x1a4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c82:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 8000e24 <HAL_GPIO_Init+0x1b0>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c86:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c88:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000c8a:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c8c:	9d01      	ldr	r5, [sp, #4]
    ioposition = 0x01U << position;
 8000c8e:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c90:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 8000c92:	42ac      	cmp	r4, r5
 8000c94:	f040 80ac 	bne.w	8000df0 <HAL_GPIO_Init+0x17c>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c98:	684c      	ldr	r4, [r1, #4]
 8000c9a:	f024 0c10 	bic.w	ip, r4, #16
 8000c9e:	f10c 36ff 	add.w	r6, ip, #4294967295
 8000ca2:	2e01      	cmp	r6, #1
 8000ca4:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000ca8:	d812      	bhi.n	8000cd0 <HAL_GPIO_Init+0x5c>
        temp = GPIOx->OSPEEDR; 
 8000caa:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000cac:	2603      	movs	r6, #3
 8000cae:	fa06 f60e 	lsl.w	r6, r6, lr
 8000cb2:	ea27 0706 	bic.w	r7, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cb6:	68ce      	ldr	r6, [r1, #12]
 8000cb8:	fa06 f60e 	lsl.w	r6, r6, lr
 8000cbc:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 8000cbe:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000cc0:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000cc2:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cc6:	ea27 0705 	bic.w	r7, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000cca:	409e      	lsls	r6, r3
 8000ccc:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 8000cce:	6046      	str	r6, [r0, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000cd0:	2603      	movs	r6, #3
      temp = GPIOx->PUPDR;
 8000cd2:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000cd4:	fa06 f60e 	lsl.w	r6, r6, lr
 8000cd8:	43f6      	mvns	r6, r6
 8000cda:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cde:	688f      	ldr	r7, [r1, #8]
 8000ce0:	fa07 f70e 	lsl.w	r7, r7, lr
 8000ce4:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ce8:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 8000cec:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cee:	d116      	bne.n	8000d1e <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3U];
 8000cf0:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000cf4:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000cf8:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000cfc:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d00:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000d04:	f04f 0c0f 	mov.w	ip, #15
 8000d08:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000d0c:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d10:	690f      	ldr	r7, [r1, #16]
 8000d12:	fa07 f70b 	lsl.w	r7, r7, fp
 8000d16:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000d1a:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 8000d1e:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d20:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d22:	f004 0703 	and.w	r7, r4, #3
 8000d26:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000d2a:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 8000d2e:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d30:	00e6      	lsls	r6, r4, #3
 8000d32:	d55d      	bpl.n	8000df0 <HAL_GPIO_Init+0x17c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d34:	f04f 0b00 	mov.w	fp, #0
 8000d38:	f8cd b00c 	str.w	fp, [sp, #12]
 8000d3c:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d40:	4e36      	ldr	r6, [pc, #216]	; (8000e1c <HAL_GPIO_Init+0x1a8>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d42:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000d46:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000d4a:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000d4e:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000d52:	9703      	str	r7, [sp, #12]
 8000d54:	9f03      	ldr	r7, [sp, #12]
 8000d56:	f023 0703 	bic.w	r7, r3, #3
 8000d5a:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000d5e:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d62:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000d66:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d6a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000d6e:	f04f 0e0f 	mov.w	lr, #15
 8000d72:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d76:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d78:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d7c:	d03f      	beq.n	8000dfe <HAL_GPIO_Init+0x18a>
 8000d7e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000d82:	42b0      	cmp	r0, r6
 8000d84:	d03d      	beq.n	8000e02 <HAL_GPIO_Init+0x18e>
 8000d86:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000d8a:	42b0      	cmp	r0, r6
 8000d8c:	d03b      	beq.n	8000e06 <HAL_GPIO_Init+0x192>
 8000d8e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000d92:	42b0      	cmp	r0, r6
 8000d94:	d039      	beq.n	8000e0a <HAL_GPIO_Init+0x196>
 8000d96:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000d9a:	42b0      	cmp	r0, r6
 8000d9c:	d037      	beq.n	8000e0e <HAL_GPIO_Init+0x19a>
 8000d9e:	4548      	cmp	r0, r9
 8000da0:	d037      	beq.n	8000e12 <HAL_GPIO_Init+0x19e>
 8000da2:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8000da6:	42b0      	cmp	r0, r6
 8000da8:	bf14      	ite	ne
 8000daa:	2607      	movne	r6, #7
 8000dac:	2606      	moveq	r6, #6
 8000dae:	fa06 f60c 	lsl.w	r6, r6, ip
 8000db2:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000db6:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8000db8:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000dba:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000dbc:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000dc0:	bf0c      	ite	eq
 8000dc2:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000dc4:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 8000dc6:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 8000dc8:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000dca:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000dce:	bf0c      	ite	eq
 8000dd0:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000dd2:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 8000dd4:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000dd6:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000dd8:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000ddc:	bf0c      	ite	eq
 8000dde:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000de0:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 8000de2:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8000de4:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000de6:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000de8:	bf54      	ite	pl
 8000dea:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8000dec:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 8000dee:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000df0:	3301      	adds	r3, #1
 8000df2:	2b10      	cmp	r3, #16
 8000df4:	f47f af49 	bne.w	8000c8a <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000df8:	b005      	add	sp, #20
 8000dfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000dfe:	465e      	mov	r6, fp
 8000e00:	e7d5      	b.n	8000dae <HAL_GPIO_Init+0x13a>
 8000e02:	2601      	movs	r6, #1
 8000e04:	e7d3      	b.n	8000dae <HAL_GPIO_Init+0x13a>
 8000e06:	2602      	movs	r6, #2
 8000e08:	e7d1      	b.n	8000dae <HAL_GPIO_Init+0x13a>
 8000e0a:	2603      	movs	r6, #3
 8000e0c:	e7cf      	b.n	8000dae <HAL_GPIO_Init+0x13a>
 8000e0e:	2604      	movs	r6, #4
 8000e10:	e7cd      	b.n	8000dae <HAL_GPIO_Init+0x13a>
 8000e12:	2605      	movs	r6, #5
 8000e14:	e7cb      	b.n	8000dae <HAL_GPIO_Init+0x13a>
 8000e16:	bf00      	nop
 8000e18:	40013c00 	.word	0x40013c00
 8000e1c:	40020000 	.word	0x40020000
 8000e20:	40023800 	.word	0x40023800
 8000e24:	40021400 	.word	0x40021400

08000e28 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e28:	b10a      	cbz	r2, 8000e2e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000e2a:	6181      	str	r1, [r0, #24]
 8000e2c:	4770      	bx	lr
 8000e2e:	0409      	lsls	r1, r1, #16
 8000e30:	e7fb      	b.n	8000e2a <HAL_GPIO_WritePin+0x2>

08000e32 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000e32:	6943      	ldr	r3, [r0, #20]
 8000e34:	ea31 0303 	bics.w	r3, r1, r3
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000e38:	bf08      	it	eq
 8000e3a:	0409      	lsleq	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e3c:	6181      	str	r1, [r0, #24]
 8000e3e:	4770      	bx	lr

08000e40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000e40:	b570      	push	{r4, r5, r6, lr}
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000e42:	4604      	mov	r4, r0
 8000e44:	b908      	cbnz	r0, 8000e4a <HAL_I2C_Init+0xa>
  {
    return HAL_ERROR;
 8000e46:	2001      	movs	r0, #1
 8000e48:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000e4a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000e4e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000e52:	b91b      	cbnz	r3, 8000e5c <HAL_I2C_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000e54:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000e58:	f002 f988 	bl	800316c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000e5c:	2324      	movs	r3, #36	; 0x24
 8000e5e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000e62:	6823      	ldr	r3, [r4, #0]
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	f022 0201 	bic.w	r2, r2, #1
 8000e6a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000e72:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000e7a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000e7c:	f000 f964 	bl	8001148 <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000e80:	6865      	ldr	r5, [r4, #4]
 8000e82:	4b41      	ldr	r3, [pc, #260]	; (8000f88 <HAL_I2C_Init+0x148>)
 8000e84:	429d      	cmp	r5, r3
 8000e86:	d84d      	bhi.n	8000f24 <HAL_I2C_Init+0xe4>
 8000e88:	4b40      	ldr	r3, [pc, #256]	; (8000f8c <HAL_I2C_Init+0x14c>)
 8000e8a:	4298      	cmp	r0, r3
 8000e8c:	d9db      	bls.n	8000e46 <HAL_I2C_Init+0x6>
  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000e8e:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8000e90:	493f      	ldr	r1, [pc, #252]	; (8000f90 <HAL_I2C_Init+0x150>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000e92:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8000e94:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000e98:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000e9c:	430b      	orrs	r3, r1
 8000e9e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000ea0:	6a13      	ldr	r3, [r2, #32]
 8000ea2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000ea6:	3101      	adds	r1, #1
 8000ea8:	4319      	orrs	r1, r3
 8000eaa:	6211      	str	r1, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000eac:	69d1      	ldr	r1, [r2, #28]
 8000eae:	4b36      	ldr	r3, [pc, #216]	; (8000f88 <HAL_I2C_Init+0x148>)
 8000eb0:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8000eb4:	429d      	cmp	r5, r3
 8000eb6:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8000eba:	f100 30ff 	add.w	r0, r0, #4294967295
 8000ebe:	d848      	bhi.n	8000f52 <HAL_I2C_Init+0x112>
 8000ec0:	006d      	lsls	r5, r5, #1
 8000ec2:	fbb0 f0f5 	udiv	r0, r0, r5
 8000ec6:	3001      	adds	r0, #1
 8000ec8:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8000ecc:	2b04      	cmp	r3, #4
 8000ece:	bf38      	it	cc
 8000ed0:	2304      	movcc	r3, #4
 8000ed2:	430b      	orrs	r3, r1
 8000ed4:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000ed6:	6811      	ldr	r1, [r2, #0]
 8000ed8:	6a20      	ldr	r0, [r4, #32]
 8000eda:	69e3      	ldr	r3, [r4, #28]
 8000edc:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8000ee0:	4303      	orrs	r3, r0
 8000ee2:	430b      	orrs	r3, r1
 8000ee4:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000ee6:	6891      	ldr	r1, [r2, #8]
 8000ee8:	68e0      	ldr	r0, [r4, #12]
 8000eea:	6923      	ldr	r3, [r4, #16]
 8000eec:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8000ef0:	4303      	orrs	r3, r0
 8000ef2:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8000ef6:	430b      	orrs	r3, r1
 8000ef8:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000efa:	68d1      	ldr	r1, [r2, #12]
 8000efc:	69a0      	ldr	r0, [r4, #24]
 8000efe:	6963      	ldr	r3, [r4, #20]
 8000f00:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8000f04:	4303      	orrs	r3, r0
 8000f06:	430b      	orrs	r3, r1
 8000f08:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000f0a:	6813      	ldr	r3, [r2, #0]
 8000f0c:	f043 0301 	orr.w	r3, r3, #1
 8000f10:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f12:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8000f14:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f16:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000f18:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000f1c:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f1e:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e

  return HAL_OK;
 8000f22:	bd70      	pop	{r4, r5, r6, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000f24:	4b1b      	ldr	r3, [pc, #108]	; (8000f94 <HAL_I2C_Init+0x154>)
 8000f26:	4298      	cmp	r0, r3
 8000f28:	d98d      	bls.n	8000e46 <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000f2a:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8000f2c:	4e18      	ldr	r6, [pc, #96]	; (8000f90 <HAL_I2C_Init+0x150>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000f2e:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8000f30:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000f34:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f38:	4333      	orrs	r3, r6
 8000f3a:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000f3c:	6a13      	ldr	r3, [r2, #32]
 8000f3e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000f42:	4371      	muls	r1, r6
 8000f44:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f48:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8000f4c:	fbb1 f1f6 	udiv	r1, r1, r6
 8000f50:	e7a9      	b.n	8000ea6 <HAL_I2C_Init+0x66>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000f52:	68a3      	ldr	r3, [r4, #8]
 8000f54:	b953      	cbnz	r3, 8000f6c <HAL_I2C_Init+0x12c>
 8000f56:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8000f5a:	fbb0 f0f3 	udiv	r0, r0, r3
 8000f5e:	1c43      	adds	r3, r0, #1
 8000f60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f64:	b16b      	cbz	r3, 8000f82 <HAL_I2C_Init+0x142>
 8000f66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f6a:	e7b2      	b.n	8000ed2 <HAL_I2C_Init+0x92>
 8000f6c:	2319      	movs	r3, #25
 8000f6e:	436b      	muls	r3, r5
 8000f70:	fbb0 f0f3 	udiv	r0, r0, r3
 8000f74:	1c43      	adds	r3, r0, #1
 8000f76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f7a:	b113      	cbz	r3, 8000f82 <HAL_I2C_Init+0x142>
 8000f7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f80:	e7a7      	b.n	8000ed2 <HAL_I2C_Init+0x92>
 8000f82:	2301      	movs	r3, #1
 8000f84:	e7a5      	b.n	8000ed2 <HAL_I2C_Init+0x92>
 8000f86:	bf00      	nop
 8000f88:	000186a0 	.word	0x000186a0
 8000f8c:	001e847f 	.word	0x001e847f
 8000f90:	000f4240 	.word	0x000f4240
 8000f94:	003d08ff 	.word	0x003d08ff

08000f98 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000f98:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	9301      	str	r3, [sp, #4]
 8000f9e:	4b18      	ldr	r3, [pc, #96]	; (8001000 <HAL_PWREx_EnableOverDrive+0x68>)
  __HAL_PWR_OVERDRIVE_ENABLE();

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000fa0:	4c18      	ldr	r4, [pc, #96]	; (8001004 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fa2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fa4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000fa8:	641a      	str	r2, [r3, #64]	; 0x40
 8000faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fb0:	9301      	str	r3, [sp, #4]
 8000fb2:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000fb4:	4b14      	ldr	r3, [pc, #80]	; (8001008 <HAL_PWREx_EnableOverDrive+0x70>)
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8000fba:	f7ff faf5 	bl	80005a8 <HAL_GetTick>
 8000fbe:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000fc0:	6863      	ldr	r3, [r4, #4]
 8000fc2:	03da      	lsls	r2, r3, #15
 8000fc4:	d50b      	bpl.n	8000fde <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000fc6:	4b11      	ldr	r3, [pc, #68]	; (800100c <HAL_PWREx_EnableOverDrive+0x74>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000fc8:	4c0e      	ldr	r4, [pc, #56]	; (8001004 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000fca:	2201      	movs	r2, #1
 8000fcc:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8000fce:	f7ff faeb 	bl	80005a8 <HAL_GetTick>
 8000fd2:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000fd4:	6863      	ldr	r3, [r4, #4]
 8000fd6:	039b      	lsls	r3, r3, #14
 8000fd8:	d50a      	bpl.n	8000ff0 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8000fda:	2000      	movs	r0, #0
 8000fdc:	e006      	b.n	8000fec <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000fde:	f7ff fae3 	bl	80005a8 <HAL_GetTick>
 8000fe2:	1b40      	subs	r0, r0, r5
 8000fe4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000fe8:	d9ea      	bls.n	8000fc0 <HAL_PWREx_EnableOverDrive+0x28>
      return HAL_TIMEOUT;
 8000fea:	2003      	movs	r0, #3
}
 8000fec:	b003      	add	sp, #12
 8000fee:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000ff0:	f7ff fada 	bl	80005a8 <HAL_GetTick>
 8000ff4:	1b40      	subs	r0, r0, r5
 8000ff6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000ffa:	d9eb      	bls.n	8000fd4 <HAL_PWREx_EnableOverDrive+0x3c>
 8000ffc:	e7f5      	b.n	8000fea <HAL_PWREx_EnableOverDrive+0x52>
 8000ffe:	bf00      	nop
 8001000:	40023800 	.word	0x40023800
 8001004:	40007000 	.word	0x40007000
 8001008:	420e0040 	.word	0x420e0040
 800100c:	420e0044 	.word	0x420e0044

08001010 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001014:	460d      	mov	r5, r1
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001016:	4604      	mov	r4, r0
 8001018:	b910      	cbnz	r0, 8001020 <HAL_RCC_ClockConfig+0x10>
  {
    return HAL_ERROR;
 800101a:	2001      	movs	r0, #1
 800101c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001020:	4b44      	ldr	r3, [pc, #272]	; (8001134 <HAL_RCC_ClockConfig+0x124>)
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	f002 020f 	and.w	r2, r2, #15
 8001028:	428a      	cmp	r2, r1
 800102a:	d329      	bcc.n	8001080 <HAL_RCC_ClockConfig+0x70>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800102c:	6821      	ldr	r1, [r4, #0]
 800102e:	078f      	lsls	r7, r1, #30
 8001030:	d42e      	bmi.n	8001090 <HAL_RCC_ClockConfig+0x80>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001032:	07c8      	lsls	r0, r1, #31
 8001034:	d441      	bmi.n	80010ba <HAL_RCC_ClockConfig+0xaa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001036:	4b3f      	ldr	r3, [pc, #252]	; (8001134 <HAL_RCC_ClockConfig+0x124>)
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	f002 020f 	and.w	r2, r2, #15
 800103e:	4295      	cmp	r5, r2
 8001040:	d367      	bcc.n	8001112 <HAL_RCC_ClockConfig+0x102>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001042:	6822      	ldr	r2, [r4, #0]
 8001044:	0751      	lsls	r1, r2, #29
 8001046:	d46d      	bmi.n	8001124 <HAL_RCC_ClockConfig+0x114>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001048:	0713      	lsls	r3, r2, #28
 800104a:	d507      	bpl.n	800105c <HAL_RCC_ClockConfig+0x4c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800104c:	4a3a      	ldr	r2, [pc, #232]	; (8001138 <HAL_RCC_ClockConfig+0x128>)
 800104e:	6921      	ldr	r1, [r4, #16]
 8001050:	6893      	ldr	r3, [r2, #8]
 8001052:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001056:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800105a:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800105c:	f000 fa9c 	bl	8001598 <HAL_RCC_GetSysClockFreq>
 8001060:	4b35      	ldr	r3, [pc, #212]	; (8001138 <HAL_RCC_ClockConfig+0x128>)
 8001062:	4a36      	ldr	r2, [pc, #216]	; (800113c <HAL_RCC_ClockConfig+0x12c>)
 8001064:	689b      	ldr	r3, [r3, #8]
 8001066:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800106a:	5cd3      	ldrb	r3, [r2, r3]
 800106c:	40d8      	lsrs	r0, r3
 800106e:	4b34      	ldr	r3, [pc, #208]	; (8001140 <HAL_RCC_ClockConfig+0x130>)
 8001070:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001072:	4b34      	ldr	r3, [pc, #208]	; (8001144 <HAL_RCC_ClockConfig+0x134>)
 8001074:	6818      	ldr	r0, [r3, #0]
 8001076:	f7ff fa4d 	bl	8000514 <HAL_InitTick>

  return HAL_OK;
 800107a:	2000      	movs	r0, #0
 800107c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001080:	b2ca      	uxtb	r2, r1
 8001082:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f003 030f 	and.w	r3, r3, #15
 800108a:	4299      	cmp	r1, r3
 800108c:	d1c5      	bne.n	800101a <HAL_RCC_ClockConfig+0xa>
 800108e:	e7cd      	b.n	800102c <HAL_RCC_ClockConfig+0x1c>
 8001090:	4b29      	ldr	r3, [pc, #164]	; (8001138 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001092:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001096:	bf1e      	ittt	ne
 8001098:	689a      	ldrne	r2, [r3, #8]
 800109a:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 800109e:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010a0:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010a2:	bf42      	ittt	mi
 80010a4:	689a      	ldrmi	r2, [r3, #8]
 80010a6:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 80010aa:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010ac:	689a      	ldr	r2, [r3, #8]
 80010ae:	68a0      	ldr	r0, [r4, #8]
 80010b0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80010b4:	4302      	orrs	r2, r0
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	e7bb      	b.n	8001032 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010ba:	6862      	ldr	r2, [r4, #4]
 80010bc:	4b1e      	ldr	r3, [pc, #120]	; (8001138 <HAL_RCC_ClockConfig+0x128>)
 80010be:	2a01      	cmp	r2, #1
 80010c0:	d11d      	bne.n	80010fe <HAL_RCC_ClockConfig+0xee>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010c8:	d0a7      	beq.n	800101a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010ca:	4e1b      	ldr	r6, [pc, #108]	; (8001138 <HAL_RCC_ClockConfig+0x128>)
 80010cc:	68b3      	ldr	r3, [r6, #8]
 80010ce:	f023 0303 	bic.w	r3, r3, #3
 80010d2:	4313      	orrs	r3, r2
 80010d4:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80010d6:	f7ff fa67 	bl	80005a8 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010da:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80010de:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010e0:	68b3      	ldr	r3, [r6, #8]
 80010e2:	6862      	ldr	r2, [r4, #4]
 80010e4:	f003 030c 	and.w	r3, r3, #12
 80010e8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80010ec:	d0a3      	beq.n	8001036 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010ee:	f7ff fa5b 	bl	80005a8 <HAL_GetTick>
 80010f2:	1bc0      	subs	r0, r0, r7
 80010f4:	4540      	cmp	r0, r8
 80010f6:	d9f3      	bls.n	80010e0 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 80010f8:	2003      	movs	r0, #3
}
 80010fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010fe:	1e91      	subs	r1, r2, #2
 8001100:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001102:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001104:	d802      	bhi.n	800110c <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001106:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800110a:	e7dd      	b.n	80010c8 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800110c:	f013 0f02 	tst.w	r3, #2
 8001110:	e7da      	b.n	80010c8 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001112:	b2ea      	uxtb	r2, r5
 8001114:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f003 030f 	and.w	r3, r3, #15
 800111c:	429d      	cmp	r5, r3
 800111e:	f47f af7c 	bne.w	800101a <HAL_RCC_ClockConfig+0xa>
 8001122:	e78e      	b.n	8001042 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001124:	4904      	ldr	r1, [pc, #16]	; (8001138 <HAL_RCC_ClockConfig+0x128>)
 8001126:	68e0      	ldr	r0, [r4, #12]
 8001128:	688b      	ldr	r3, [r1, #8]
 800112a:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800112e:	4303      	orrs	r3, r0
 8001130:	608b      	str	r3, [r1, #8]
 8001132:	e789      	b.n	8001048 <HAL_RCC_ClockConfig+0x38>
 8001134:	40023c00 	.word	0x40023c00
 8001138:	40023800 	.word	0x40023800
 800113c:	08003aa4 	.word	0x08003aa4
 8001140:	20000008 	.word	0x20000008
 8001144:	20000004 	.word	0x20000004

08001148 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001148:	4b04      	ldr	r3, [pc, #16]	; (800115c <HAL_RCC_GetPCLK1Freq+0x14>)
 800114a:	4a05      	ldr	r2, [pc, #20]	; (8001160 <HAL_RCC_GetPCLK1Freq+0x18>)
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001152:	5cd3      	ldrb	r3, [r2, r3]
 8001154:	4a03      	ldr	r2, [pc, #12]	; (8001164 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001156:	6810      	ldr	r0, [r2, #0]
}
 8001158:	40d8      	lsrs	r0, r3
 800115a:	4770      	bx	lr
 800115c:	40023800 	.word	0x40023800
 8001160:	08003ab4 	.word	0x08003ab4
 8001164:	20000008 	.word	0x20000008

08001168 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001168:	4b04      	ldr	r3, [pc, #16]	; (800117c <HAL_RCC_GetPCLK2Freq+0x14>)
 800116a:	4a05      	ldr	r2, [pc, #20]	; (8001180 <HAL_RCC_GetPCLK2Freq+0x18>)
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001172:	5cd3      	ldrb	r3, [r2, r3]
 8001174:	4a03      	ldr	r2, [pc, #12]	; (8001184 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001176:	6810      	ldr	r0, [r2, #0]
}
 8001178:	40d8      	lsrs	r0, r3
 800117a:	4770      	bx	lr
 800117c:	40023800 	.word	0x40023800
 8001180:	08003ab4 	.word	0x08003ab4
 8001184:	20000008 	.word	0x20000008

08001188 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001188:	6803      	ldr	r3, [r0, #0]
{
 800118a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800118e:	f013 0601 	ands.w	r6, r3, #1
{
 8001192:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001194:	d00b      	beq.n	80011ae <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001196:	49aa      	ldr	r1, [pc, #680]	; (8001440 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8001198:	6b86      	ldr	r6, [r0, #56]	; 0x38
 800119a:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 800119e:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 80011a2:	4332      	orrs	r2, r6
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80011a4:	fab6 f686 	clz	r6, r6
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80011a8:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80011ac:	0976      	lsrs	r6, r6, #5
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80011ae:	079d      	lsls	r5, r3, #30
 80011b0:	d50b      	bpl.n	80011ca <HAL_RCCEx_PeriphCLKConfig+0x42>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80011b2:	48a3      	ldr	r0, [pc, #652]	; (8001440 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80011b4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80011b6:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 80011ba:	f022 52c0 	bic.w	r2, r2, #402653184	; 0x18000000
 80011be:	430a      	orrs	r2, r1
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
    {
      plli2sused = 1U;
 80011c0:	2900      	cmp	r1, #0
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80011c2:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
      plli2sused = 1U;
 80011c6:	bf08      	it	eq
 80011c8:	2601      	moveq	r6, #1
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80011ca:	f013 0504 	ands.w	r5, r3, #4
 80011ce:	d012      	beq.n	80011f6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80011d0:	499b      	ldr	r1, [pc, #620]	; (8001440 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80011d2:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80011d4:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80011d8:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80011dc:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80011e0:	ea42 0205 	orr.w	r2, r2, r5
    {
      plli2sused = 1U;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80011e4:	bf18      	it	ne
 80011e6:	fab5 f585 	clzne	r5, r5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80011ea:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80011ee:	bf12      	itee	ne
 80011f0:	096d      	lsrne	r5, r5, #5
  uint32_t pllsaiused = 0U;
 80011f2:	2500      	moveq	r5, #0
      plli2sused = 1U;
 80011f4:	2601      	moveq	r6, #1
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80011f6:	0718      	lsls	r0, r3, #28
 80011f8:	d50f      	bpl.n	800121a <HAL_RCCEx_PeriphCLKConfig+0x92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80011fa:	4891      	ldr	r0, [pc, #580]	; (8001440 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80011fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80011fe:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8001202:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8001206:	430a      	orrs	r2, r1

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001208:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800120c:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001210:	f000 8109 	beq.w	8001426 <HAL_RCCEx_PeriphCLKConfig+0x29e>
      plli2sused = 1U;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1U;
 8001214:	2900      	cmp	r1, #0
 8001216:	bf08      	it	eq
 8001218:	2501      	moveq	r5, #1
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800121a:	0699      	lsls	r1, r3, #26
 800121c:	d533      	bpl.n	8001286 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	9301      	str	r3, [sp, #4]
 8001222:	4b87      	ldr	r3, [pc, #540]	; (8001440 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001224:	4f87      	ldr	r7, [pc, #540]	; (8001444 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8001226:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001228:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800122c:	641a      	str	r2, [r3, #64]	; 0x40
 800122e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001230:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001234:	9301      	str	r3, [sp, #4]
 8001236:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800123e:	603b      	str	r3, [r7, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001240:	f7ff f9b2 	bl	80005a8 <HAL_GetTick>
 8001244:	4680      	mov	r8, r0

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	05da      	lsls	r2, r3, #23
 800124a:	f140 80ee 	bpl.w	800142a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
      {
        return HAL_TIMEOUT;
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800124e:	4f7c      	ldr	r7, [pc, #496]	; (8001440 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8001250:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001252:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001256:	f040 80fb 	bne.w	8001450 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800125a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800125c:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8001260:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8001264:	4a76      	ldr	r2, [pc, #472]	; (8001440 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8001266:	f040 8116 	bne.w	8001496 <HAL_RCCEx_PeriphCLKConfig+0x30e>
 800126a:	6891      	ldr	r1, [r2, #8]
 800126c:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8001270:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001274:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8001278:	4301      	orrs	r1, r0
 800127a:	6091      	str	r1, [r2, #8]
 800127c:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800127e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001282:	430b      	orrs	r3, r1
 8001284:	6713      	str	r3, [r2, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001286:	6823      	ldr	r3, [r4, #0]
 8001288:	06d9      	lsls	r1, r3, #27
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800128a:	bf42      	ittt	mi
 800128c:	4b6e      	ldrmi	r3, [pc, #440]	; (8001448 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800128e:	f894 2058 	ldrbmi.w	r2, [r4, #88]	; 0x58
 8001292:	601a      	strmi	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8001294:	6823      	ldr	r3, [r4, #0]
 8001296:	061a      	lsls	r2, r3, #24
 8001298:	d508      	bpl.n	80012ac <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800129a:	4969      	ldr	r1, [pc, #420]	; (8001440 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800129c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800129e:	f8d1 2094 	ldr.w	r2, [r1, #148]	; 0x94
 80012a2:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80012a6:	4302      	orrs	r2, r0
 80012a8:	f8c1 2094 	str.w	r2, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80012ac:	065f      	lsls	r7, r3, #25
 80012ae:	d508      	bpl.n	80012c2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80012b0:	4963      	ldr	r1, [pc, #396]	; (8001440 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80012b2:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80012b4:	f8d1 2094 	ldr.w	r2, [r1, #148]	; 0x94
 80012b8:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80012bc:	4302      	orrs	r2, r0
 80012be:	f8c1 2094 	str.w	r2, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80012c2:	05d8      	lsls	r0, r3, #23
 80012c4:	d50c      	bpl.n	80012e0 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80012c6:	485e      	ldr	r0, [pc, #376]	; (8001440 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80012c8:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80012ca:	f8d0 2094 	ldr.w	r2, [r0, #148]	; 0x94
 80012ce:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
 80012d2:	430a      	orrs	r2, r1

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
    {
      pllsaiused = 1U;
 80012d4:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80012d8:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
      pllsaiused = 1U;
 80012dc:	bf08      	it	eq
 80012de:	2501      	moveq	r5, #1
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80012e0:	0599      	lsls	r1, r3, #22
 80012e2:	d508      	bpl.n	80012f6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80012e4:	4956      	ldr	r1, [pc, #344]	; (8001440 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80012e6:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80012e8:	f8d1 2094 	ldr.w	r2, [r1, #148]	; 0x94
 80012ec:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80012f0:	4302      	orrs	r2, r0
 80012f2:	f8c1 2094 	str.w	r2, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80012f6:	055a      	lsls	r2, r3, #21
 80012f8:	f100 80d1 	bmi.w	800149e <HAL_RCCEx_PeriphCLKConfig+0x316>
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80012fc:	2e01      	cmp	r6, #1
 80012fe:	f040 80dc 	bne.w	80014ba <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001302:	4e52      	ldr	r6, [pc, #328]	; (800144c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
    /* Get tick */
    tickstart = HAL_GetTick();
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001304:	4f4e      	ldr	r7, [pc, #312]	; (8001440 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
    __HAL_RCC_PLLI2S_DISABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800130a:	f7ff f94d 	bl	80005a8 <HAL_GetTick>
 800130e:	4680      	mov	r8, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	011b      	lsls	r3, r3, #4
 8001314:	f100 8125 	bmi.w	8001562 <HAL_RCCEx_PeriphCLKConfig+0x3da>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001318:	6822      	ldr	r2, [r4, #0]
 800131a:	07d0      	lsls	r0, r2, #31
 800131c:	d501      	bpl.n	8001322 <HAL_RCCEx_PeriphCLKConfig+0x19a>
 800131e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001320:	b11b      	cbz	r3, 800132a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8001322:	0791      	lsls	r1, r2, #30
 8001324:	d515      	bpl.n	8001352 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001326:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001328:	b99b      	cbnz	r3, 8001352 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800132a:	4945      	ldr	r1, [pc, #276]	; (8001440 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800132c:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001330:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8001334:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001338:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 800133c:	4303      	orrs	r3, r0
 800133e:	6860      	ldr	r0, [r4, #4]
 8001340:	4303      	orrs	r3, r0
 8001342:	68a0      	ldr	r0, [r4, #8]
 8001344:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001348:	6960      	ldr	r0, [r4, #20]
 800134a:	ea43 7300 	orr.w	r3, r3, r0, lsl #28
 800134e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001352:	0753      	lsls	r3, r2, #29
 8001354:	d503      	bpl.n	800135e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
 8001356:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001358:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800135c:	d005      	beq.n	800136a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800135e:	0717      	lsls	r7, r2, #28
 8001360:	d520      	bpl.n	80013a4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001362:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001364:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001368:	d11c      	bne.n	80013a4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800136a:	4935      	ldr	r1, [pc, #212]	; (8001440 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800136c:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001370:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8001374:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001378:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800137c:	4303      	orrs	r3, r0
 800137e:	6860      	ldr	r0, [r4, #4]
 8001380:	4303      	orrs	r3, r0
 8001382:	68a0      	ldr	r0, [r4, #8]
 8001384:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001388:	6920      	ldr	r0, [r4, #16]
 800138a:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800138e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001392:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 8001396:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001398:	f020 001f 	bic.w	r0, r0, #31
 800139c:	3b01      	subs	r3, #1
 800139e:	4303      	orrs	r3, r0
 80013a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80013a4:	0550      	lsls	r0, r2, #21
 80013a6:	d51b      	bpl.n	80013e0 <HAL_RCCEx_PeriphCLKConfig+0x258>
 80013a8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80013aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80013ae:	d117      	bne.n	80013e0 <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80013b0:	4823      	ldr	r0, [pc, #140]	; (8001440 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80013b2:	6867      	ldr	r7, [r4, #4]
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80013b4:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80013b8:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80013bc:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80013c0:	433b      	orrs	r3, r7
 80013c2:	68a7      	ldr	r7, [r4, #8]
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80013c4:	f3c1 4101 	ubfx	r1, r1, #16, #2
 80013c8:	3101      	adds	r1, #1
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80013ca:	ea43 1387 	orr.w	r3, r3, r7, lsl #6
 80013ce:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 80013d2:	68e1      	ldr	r1, [r4, #12]
 80013d4:	0849      	lsrs	r1, r1, #1
 80013d6:	3901      	subs	r1, #1
 80013d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80013dc:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80013e0:	0511      	lsls	r1, r2, #20
 80013e2:	d511      	bpl.n	8001408 <HAL_RCCEx_PeriphCLKConfig+0x280>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80013e4:	6923      	ldr	r3, [r4, #16]
 80013e6:	68a2      	ldr	r2, [r4, #8]
 80013e8:	061b      	lsls	r3, r3, #24
 80013ea:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80013ee:	6862      	ldr	r2, [r4, #4]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	6962      	ldr	r2, [r4, #20]
 80013f4:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80013f8:	68e2      	ldr	r2, [r4, #12]
 80013fa:	0852      	lsrs	r2, r2, #1
 80013fc:	3a01      	subs	r2, #1
 80013fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001402:	4a0f      	ldr	r2, [pc, #60]	; (8001440 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8001404:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001408:	2301      	movs	r3, #1
 800140a:	6033      	str	r3, [r6, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800140c:	f7ff f8cc 	bl	80005a8 <HAL_GetTick>
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001410:	4e0b      	ldr	r6, [pc, #44]	; (8001440 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
    tickstart = HAL_GetTick();
 8001412:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001414:	6833      	ldr	r3, [r6, #0]
 8001416:	011a      	lsls	r2, r3, #4
 8001418:	d453      	bmi.n	80014c2 <HAL_RCCEx_PeriphCLKConfig+0x33a>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800141a:	f7ff f8c5 	bl	80005a8 <HAL_GetTick>
 800141e:	1bc0      	subs	r0, r0, r7
 8001420:	2802      	cmp	r0, #2
 8001422:	d9f7      	bls.n	8001414 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8001424:	e008      	b.n	8001438 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
      plli2sused = 1U;
 8001426:	2601      	movs	r6, #1
 8001428:	e6f7      	b.n	800121a <HAL_RCCEx_PeriphCLKConfig+0x92>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800142a:	f7ff f8bd 	bl	80005a8 <HAL_GetTick>
 800142e:	eba0 0008 	sub.w	r0, r0, r8
 8001432:	2802      	cmp	r0, #2
 8001434:	f67f af07 	bls.w	8001246 <HAL_RCCEx_PeriphCLKConfig+0xbe>
        return HAL_TIMEOUT;
 8001438:	2003      	movs	r0, #3
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
}
 800143a:	b003      	add	sp, #12
 800143c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001440:	40023800 	.word	0x40023800
 8001444:	40007000 	.word	0x40007000
 8001448:	424711e0 	.word	0x424711e0
 800144c:	42470068 	.word	0x42470068
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001450:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001452:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001456:	4293      	cmp	r3, r2
 8001458:	f43f aeff 	beq.w	800125a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800145c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 800145e:	4a4b      	ldr	r2, [pc, #300]	; (800158c <HAL_RCCEx_PeriphCLKConfig+0x404>)
 8001460:	2101      	movs	r1, #1
 8001462:	6011      	str	r1, [r2, #0]
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001464:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001468:	2100      	movs	r1, #0
 800146a:	6011      	str	r1, [r2, #0]
      RCC->BDCR = tmpreg1;
 800146c:	673b      	str	r3, [r7, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800146e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001470:	07db      	lsls	r3, r3, #31
 8001472:	f57f aef2 	bpl.w	800125a <HAL_RCCEx_PeriphCLKConfig+0xd2>
        tickstart = HAL_GetTick();
 8001476:	f7ff f897 	bl	80005a8 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800147a:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800147e:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001480:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001482:	0798      	lsls	r0, r3, #30
 8001484:	f53f aee9 	bmi.w	800125a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001488:	f7ff f88e 	bl	80005a8 <HAL_GetTick>
 800148c:	eba0 0008 	sub.w	r0, r0, r8
 8001490:	4548      	cmp	r0, r9
 8001492:	d9f5      	bls.n	8001480 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 8001494:	e7d0      	b.n	8001438 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001496:	6891      	ldr	r1, [r2, #8]
 8001498:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 800149c:	e6ed      	b.n	800127a <HAL_RCCEx_PeriphCLKConfig+0xf2>
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800149e:	483c      	ldr	r0, [pc, #240]	; (8001590 <HAL_RCCEx_PeriphCLKConfig+0x408>)
 80014a0:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80014a2:	f8d0 2094 	ldr.w	r2, [r0, #148]	; 0x94
 80014a6:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80014aa:	430a      	orrs	r2, r1
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80014ac:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80014b0:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80014b4:	f47f af22 	bne.w	80012fc <HAL_RCCEx_PeriphCLKConfig+0x174>
 80014b8:	e723      	b.n	8001302 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80014ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80014be:	f43f af20 	beq.w	8001302 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  if(pllsaiused == 1U)
 80014c2:	2d01      	cmp	r5, #1
 80014c4:	d14b      	bne.n	800155e <HAL_RCCEx_PeriphCLKConfig+0x3d6>
    __HAL_RCC_PLLSAI_DISABLE();
 80014c6:	4d33      	ldr	r5, [pc, #204]	; (8001594 <HAL_RCCEx_PeriphCLKConfig+0x40c>)
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80014c8:	4e31      	ldr	r6, [pc, #196]	; (8001590 <HAL_RCCEx_PeriphCLKConfig+0x408>)
    __HAL_RCC_PLLSAI_DISABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80014ce:	f7ff f86b 	bl	80005a8 <HAL_GetTick>
 80014d2:	4607      	mov	r7, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80014d4:	6833      	ldr	r3, [r6, #0]
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	d44b      	bmi.n	8001572 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80014da:	6821      	ldr	r1, [r4, #0]
 80014dc:	074e      	lsls	r6, r1, #29
 80014de:	d501      	bpl.n	80014e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80014e0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80014e2:	b11b      	cbz	r3, 80014ec <HAL_RCCEx_PeriphCLKConfig+0x364>
 80014e4:	0708      	lsls	r0, r1, #28
 80014e6:	d51a      	bpl.n	800151e <HAL_RCCEx_PeriphCLKConfig+0x396>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80014e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80014ea:	b9c3      	cbnz	r3, 800151e <HAL_RCCEx_PeriphCLKConfig+0x396>
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80014ec:	4a28      	ldr	r2, [pc, #160]	; (8001590 <HAL_RCCEx_PeriphCLKConfig+0x408>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80014ee:	69a0      	ldr	r0, [r4, #24]
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80014f0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80014f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014f8:	4303      	orrs	r3, r0
 80014fa:	69e0      	ldr	r0, [r4, #28]
 80014fc:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001500:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001502:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8001506:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800150a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800150e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001510:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8001514:	3801      	subs	r0, #1
 8001516:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800151a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800151e:	05ca      	lsls	r2, r1, #23
 8001520:	d514      	bpl.n	800154c <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8001522:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001524:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001528:	d110      	bne.n	800154c <HAL_RCCEx_PeriphCLKConfig+0x3c4>
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800152a:	4919      	ldr	r1, [pc, #100]	; (8001590 <HAL_RCCEx_PeriphCLKConfig+0x408>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800152c:	69a2      	ldr	r2, [r4, #24]
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800152e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8001532:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8001536:	4313      	orrs	r3, r2
 8001538:	69e2      	ldr	r2, [r4, #28]
 800153a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800153e:	6a22      	ldr	r2, [r4, #32]
 8001540:	0852      	lsrs	r2, r2, #1
 8001542:	3a01      	subs	r2, #1
 8001544:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001548:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    __HAL_RCC_PLLSAI_ENABLE();
 800154c:	2301      	movs	r3, #1
 800154e:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8001550:	f7ff f82a 	bl	80005a8 <HAL_GetTick>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001554:	4c0e      	ldr	r4, [pc, #56]	; (8001590 <HAL_RCCEx_PeriphCLKConfig+0x408>)
    tickstart = HAL_GetTick();
 8001556:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001558:	6823      	ldr	r3, [r4, #0]
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	d50f      	bpl.n	800157e <HAL_RCCEx_PeriphCLKConfig+0x3f6>
  return HAL_OK;
 800155e:	2000      	movs	r0, #0
 8001560:	e76b      	b.n	800143a <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001562:	f7ff f821 	bl	80005a8 <HAL_GetTick>
 8001566:	eba0 0008 	sub.w	r0, r0, r8
 800156a:	2802      	cmp	r0, #2
 800156c:	f67f aed0 	bls.w	8001310 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8001570:	e762      	b.n	8001438 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001572:	f7ff f819 	bl	80005a8 <HAL_GetTick>
 8001576:	1bc0      	subs	r0, r0, r7
 8001578:	2802      	cmp	r0, #2
 800157a:	d9ab      	bls.n	80014d4 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800157c:	e75c      	b.n	8001438 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800157e:	f7ff f813 	bl	80005a8 <HAL_GetTick>
 8001582:	1b40      	subs	r0, r0, r5
 8001584:	2802      	cmp	r0, #2
 8001586:	d9e7      	bls.n	8001558 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8001588:	e756      	b.n	8001438 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800158a:	bf00      	nop
 800158c:	42470e40 	.word	0x42470e40
 8001590:	40023800 	.word	0x40023800
 8001594:	42470070 	.word	0x42470070

08001598 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001598:	4920      	ldr	r1, [pc, #128]	; (800161c <HAL_RCC_GetSysClockFreq+0x84>)
{
 800159a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800159c:	688b      	ldr	r3, [r1, #8]
 800159e:	f003 030c 	and.w	r3, r3, #12
 80015a2:	2b08      	cmp	r3, #8
 80015a4:	d007      	beq.n	80015b6 <HAL_RCC_GetSysClockFreq+0x1e>
 80015a6:	2b0c      	cmp	r3, #12
 80015a8:	d020      	beq.n	80015ec <HAL_RCC_GetSysClockFreq+0x54>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80015aa:	4a1d      	ldr	r2, [pc, #116]	; (8001620 <HAL_RCC_GetSysClockFreq+0x88>)
 80015ac:	481d      	ldr	r0, [pc, #116]	; (8001624 <HAL_RCC_GetSysClockFreq+0x8c>)
 80015ae:	2b04      	cmp	r3, #4
 80015b0:	bf18      	it	ne
 80015b2:	4610      	movne	r0, r2
 80015b4:	bd08      	pop	{r3, pc}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015b6:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015b8:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015ba:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015bc:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015c0:	bf14      	ite	ne
 80015c2:	4818      	ldrne	r0, [pc, #96]	; (8001624 <HAL_RCC_GetSysClockFreq+0x8c>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015c4:	4816      	ldreq	r0, [pc, #88]	; (8001620 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015c6:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80015ca:	bf18      	it	ne
 80015cc:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015ce:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015d2:	fba1 0100 	umull	r0, r1, r1, r0
 80015d6:	f7fe fe15 	bl	8000204 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80015da:	4b10      	ldr	r3, [pc, #64]	; (800161c <HAL_RCC_GetSysClockFreq+0x84>)
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80015e2:	3301      	adds	r3, #1
 80015e4:	005b      	lsls	r3, r3, #1
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);

      sysclockfreq = pllvco/pllr;
 80015e6:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80015ea:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015ec:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015ee:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015f0:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015f2:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015f6:	bf14      	ite	ne
 80015f8:	480a      	ldrne	r0, [pc, #40]	; (8001624 <HAL_RCC_GetSysClockFreq+0x8c>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015fa:	4809      	ldreq	r0, [pc, #36]	; (8001620 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015fc:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001600:	bf18      	it	ne
 8001602:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001604:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001608:	fba1 0100 	umull	r0, r1, r1, r0
 800160c:	f7fe fdfa 	bl	8000204 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001610:	4b02      	ldr	r3, [pc, #8]	; (800161c <HAL_RCC_GetSysClockFreq+0x84>)
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f3c3 7302 	ubfx	r3, r3, #28, #3
 8001618:	e7e5      	b.n	80015e6 <HAL_RCC_GetSysClockFreq+0x4e>
 800161a:	bf00      	nop
 800161c:	40023800 	.word	0x40023800
 8001620:	00f42400 	.word	0x00f42400
 8001624:	017d7840 	.word	0x017d7840

08001628 <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001628:	6803      	ldr	r3, [r0, #0]
{
 800162a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800162e:	07df      	lsls	r7, r3, #31
{
 8001630:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001632:	d410      	bmi.n	8001656 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001634:	6823      	ldr	r3, [r4, #0]
 8001636:	079e      	lsls	r6, r3, #30
 8001638:	d467      	bmi.n	800170a <HAL_RCC_OscConfig+0xe2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800163a:	6823      	ldr	r3, [r4, #0]
 800163c:	071a      	lsls	r2, r3, #28
 800163e:	f100 80b2 	bmi.w	80017a6 <HAL_RCC_OscConfig+0x17e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001642:	6823      	ldr	r3, [r4, #0]
 8001644:	075b      	lsls	r3, r3, #29
 8001646:	f100 80d0 	bmi.w	80017ea <HAL_RCC_OscConfig+0x1c2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800164a:	69a2      	ldr	r2, [r4, #24]
 800164c:	2a00      	cmp	r2, #0
 800164e:	f040 8139 	bne.w	80018c4 <HAL_RCC_OscConfig+0x29c>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8001652:	2000      	movs	r0, #0
 8001654:	e01e      	b.n	8001694 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001656:	4b97      	ldr	r3, [pc, #604]	; (80018b4 <HAL_RCC_OscConfig+0x28c>)
 8001658:	689a      	ldr	r2, [r3, #8]
 800165a:	f002 020c 	and.w	r2, r2, #12
 800165e:	2a04      	cmp	r2, #4
 8001660:	d010      	beq.n	8001684 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001662:	689a      	ldr	r2, [r3, #8]
 8001664:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001668:	2a08      	cmp	r2, #8
 800166a:	d102      	bne.n	8001672 <HAL_RCC_OscConfig+0x4a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	025d      	lsls	r5, r3, #9
 8001670:	d408      	bmi.n	8001684 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001672:	4b90      	ldr	r3, [pc, #576]	; (80018b4 <HAL_RCC_OscConfig+0x28c>)
 8001674:	689a      	ldr	r2, [r3, #8]
 8001676:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800167a:	2a0c      	cmp	r2, #12
 800167c:	d10d      	bne.n	800169a <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800167e:	685a      	ldr	r2, [r3, #4]
 8001680:	0250      	lsls	r0, r2, #9
 8001682:	d50a      	bpl.n	800169a <HAL_RCC_OscConfig+0x72>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001684:	4b8b      	ldr	r3, [pc, #556]	; (80018b4 <HAL_RCC_OscConfig+0x28c>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	0399      	lsls	r1, r3, #14
 800168a:	d5d3      	bpl.n	8001634 <HAL_RCC_OscConfig+0xc>
 800168c:	6863      	ldr	r3, [r4, #4]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d1d0      	bne.n	8001634 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8001692:	2001      	movs	r0, #1
}
 8001694:	b002      	add	sp, #8
 8001696:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800169a:	6862      	ldr	r2, [r4, #4]
 800169c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80016a0:	d111      	bne.n	80016c6 <HAL_RCC_OscConfig+0x9e>
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80016a8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80016aa:	f7fe ff7d 	bl	80005a8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ae:	4d81      	ldr	r5, [pc, #516]	; (80018b4 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 80016b0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016b2:	682b      	ldr	r3, [r5, #0]
 80016b4:	039a      	lsls	r2, r3, #14
 80016b6:	d4bd      	bmi.n	8001634 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016b8:	f7fe ff76 	bl	80005a8 <HAL_GetTick>
 80016bc:	1b80      	subs	r0, r0, r6
 80016be:	2864      	cmp	r0, #100	; 0x64
 80016c0:	d9f7      	bls.n	80016b2 <HAL_RCC_OscConfig+0x8a>
            return HAL_TIMEOUT;
 80016c2:	2003      	movs	r0, #3
 80016c4:	e7e6      	b.n	8001694 <HAL_RCC_OscConfig+0x6c>
 80016c6:	4d7b      	ldr	r5, [pc, #492]	; (80018b4 <HAL_RCC_OscConfig+0x28c>)
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016c8:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 80016cc:	682b      	ldr	r3, [r5, #0]
 80016ce:	d107      	bne.n	80016e0 <HAL_RCC_OscConfig+0xb8>
 80016d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016d4:	602b      	str	r3, [r5, #0]
 80016d6:	682b      	ldr	r3, [r5, #0]
 80016d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016dc:	602b      	str	r3, [r5, #0]
 80016de:	e7e4      	b.n	80016aa <HAL_RCC_OscConfig+0x82>
 80016e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016e4:	602b      	str	r3, [r5, #0]
 80016e6:	682b      	ldr	r3, [r5, #0]
 80016e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016ec:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80016ee:	2a00      	cmp	r2, #0
 80016f0:	d1db      	bne.n	80016aa <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 80016f2:	f7fe ff59 	bl	80005a8 <HAL_GetTick>
 80016f6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016f8:	682b      	ldr	r3, [r5, #0]
 80016fa:	039b      	lsls	r3, r3, #14
 80016fc:	d59a      	bpl.n	8001634 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016fe:	f7fe ff53 	bl	80005a8 <HAL_GetTick>
 8001702:	1b80      	subs	r0, r0, r6
 8001704:	2864      	cmp	r0, #100	; 0x64
 8001706:	d9f7      	bls.n	80016f8 <HAL_RCC_OscConfig+0xd0>
 8001708:	e7db      	b.n	80016c2 <HAL_RCC_OscConfig+0x9a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800170a:	4b6a      	ldr	r3, [pc, #424]	; (80018b4 <HAL_RCC_OscConfig+0x28c>)
 800170c:	689a      	ldr	r2, [r3, #8]
 800170e:	f012 0f0c 	tst.w	r2, #12
 8001712:	d010      	beq.n	8001736 <HAL_RCC_OscConfig+0x10e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001714:	689a      	ldr	r2, [r3, #8]
 8001716:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800171a:	2a08      	cmp	r2, #8
 800171c:	d102      	bne.n	8001724 <HAL_RCC_OscConfig+0xfc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	025f      	lsls	r7, r3, #9
 8001722:	d508      	bpl.n	8001736 <HAL_RCC_OscConfig+0x10e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001724:	4a63      	ldr	r2, [pc, #396]	; (80018b4 <HAL_RCC_OscConfig+0x28c>)
 8001726:	6893      	ldr	r3, [r2, #8]
 8001728:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800172c:	2b0c      	cmp	r3, #12
 800172e:	d111      	bne.n	8001754 <HAL_RCC_OscConfig+0x12c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001730:	6853      	ldr	r3, [r2, #4]
 8001732:	025e      	lsls	r6, r3, #9
 8001734:	d40e      	bmi.n	8001754 <HAL_RCC_OscConfig+0x12c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001736:	4b5f      	ldr	r3, [pc, #380]	; (80018b4 <HAL_RCC_OscConfig+0x28c>)
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	0795      	lsls	r5, r2, #30
 800173c:	d502      	bpl.n	8001744 <HAL_RCC_OscConfig+0x11c>
 800173e:	68e2      	ldr	r2, [r4, #12]
 8001740:	2a01      	cmp	r2, #1
 8001742:	d1a6      	bne.n	8001692 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	6921      	ldr	r1, [r4, #16]
 8001748:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800174c:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8001750:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001752:	e772      	b.n	800163a <HAL_RCC_OscConfig+0x12>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001754:	68e2      	ldr	r2, [r4, #12]
 8001756:	4b58      	ldr	r3, [pc, #352]	; (80018b8 <HAL_RCC_OscConfig+0x290>)
 8001758:	b1b2      	cbz	r2, 8001788 <HAL_RCC_OscConfig+0x160>
        __HAL_RCC_HSI_ENABLE();
 800175a:	2201      	movs	r2, #1
 800175c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800175e:	f7fe ff23 	bl	80005a8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001762:	4d54      	ldr	r5, [pc, #336]	; (80018b4 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8001764:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001766:	682b      	ldr	r3, [r5, #0]
 8001768:	0798      	lsls	r0, r3, #30
 800176a:	d507      	bpl.n	800177c <HAL_RCC_OscConfig+0x154>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800176c:	682b      	ldr	r3, [r5, #0]
 800176e:	6922      	ldr	r2, [r4, #16]
 8001770:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001774:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001778:	602b      	str	r3, [r5, #0]
 800177a:	e75e      	b.n	800163a <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800177c:	f7fe ff14 	bl	80005a8 <HAL_GetTick>
 8001780:	1b80      	subs	r0, r0, r6
 8001782:	2802      	cmp	r0, #2
 8001784:	d9ef      	bls.n	8001766 <HAL_RCC_OscConfig+0x13e>
 8001786:	e79c      	b.n	80016c2 <HAL_RCC_OscConfig+0x9a>
        __HAL_RCC_HSI_DISABLE();
 8001788:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800178a:	f7fe ff0d 	bl	80005a8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800178e:	4d49      	ldr	r5, [pc, #292]	; (80018b4 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8001790:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001792:	682b      	ldr	r3, [r5, #0]
 8001794:	0799      	lsls	r1, r3, #30
 8001796:	f57f af50 	bpl.w	800163a <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800179a:	f7fe ff05 	bl	80005a8 <HAL_GetTick>
 800179e:	1b80      	subs	r0, r0, r6
 80017a0:	2802      	cmp	r0, #2
 80017a2:	d9f6      	bls.n	8001792 <HAL_RCC_OscConfig+0x16a>
 80017a4:	e78d      	b.n	80016c2 <HAL_RCC_OscConfig+0x9a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80017a6:	6962      	ldr	r2, [r4, #20]
 80017a8:	4b44      	ldr	r3, [pc, #272]	; (80018bc <HAL_RCC_OscConfig+0x294>)
 80017aa:	b17a      	cbz	r2, 80017cc <HAL_RCC_OscConfig+0x1a4>
      __HAL_RCC_LSI_ENABLE();
 80017ac:	2201      	movs	r2, #1
 80017ae:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80017b0:	f7fe fefa 	bl	80005a8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017b4:	4d3f      	ldr	r5, [pc, #252]	; (80018b4 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 80017b6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017b8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80017ba:	079f      	lsls	r7, r3, #30
 80017bc:	f53f af41 	bmi.w	8001642 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017c0:	f7fe fef2 	bl	80005a8 <HAL_GetTick>
 80017c4:	1b80      	subs	r0, r0, r6
 80017c6:	2802      	cmp	r0, #2
 80017c8:	d9f6      	bls.n	80017b8 <HAL_RCC_OscConfig+0x190>
 80017ca:	e77a      	b.n	80016c2 <HAL_RCC_OscConfig+0x9a>
      __HAL_RCC_LSI_DISABLE();
 80017cc:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80017ce:	f7fe feeb 	bl	80005a8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017d2:	4d38      	ldr	r5, [pc, #224]	; (80018b4 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 80017d4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017d6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80017d8:	0798      	lsls	r0, r3, #30
 80017da:	f57f af32 	bpl.w	8001642 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017de:	f7fe fee3 	bl	80005a8 <HAL_GetTick>
 80017e2:	1b80      	subs	r0, r0, r6
 80017e4:	2802      	cmp	r0, #2
 80017e6:	d9f6      	bls.n	80017d6 <HAL_RCC_OscConfig+0x1ae>
 80017e8:	e76b      	b.n	80016c2 <HAL_RCC_OscConfig+0x9a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017ea:	4b32      	ldr	r3, [pc, #200]	; (80018b4 <HAL_RCC_OscConfig+0x28c>)
 80017ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017ee:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 80017f2:	d128      	bne.n	8001846 <HAL_RCC_OscConfig+0x21e>
      __HAL_RCC_PWR_CLK_ENABLE();
 80017f4:	9201      	str	r2, [sp, #4]
 80017f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017f8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80017fc:	641a      	str	r2, [r3, #64]	; 0x40
 80017fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001800:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001804:	9301      	str	r3, [sp, #4]
 8001806:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001808:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800180a:	4d2d      	ldr	r5, [pc, #180]	; (80018c0 <HAL_RCC_OscConfig+0x298>)
 800180c:	682b      	ldr	r3, [r5, #0]
 800180e:	05d9      	lsls	r1, r3, #23
 8001810:	d51b      	bpl.n	800184a <HAL_RCC_OscConfig+0x222>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001812:	68a3      	ldr	r3, [r4, #8]
 8001814:	4d27      	ldr	r5, [pc, #156]	; (80018b4 <HAL_RCC_OscConfig+0x28c>)
 8001816:	2b01      	cmp	r3, #1
 8001818:	d127      	bne.n	800186a <HAL_RCC_OscConfig+0x242>
 800181a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800181c:	f043 0301 	orr.w	r3, r3, #1
 8001820:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001822:	f7fe fec1 	bl	80005a8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001826:	4d23      	ldr	r5, [pc, #140]	; (80018b4 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8001828:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800182a:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800182e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001830:	079b      	lsls	r3, r3, #30
 8001832:	d539      	bpl.n	80018a8 <HAL_RCC_OscConfig+0x280>
    if(pwrclkchanged == SET)
 8001834:	2e00      	cmp	r6, #0
 8001836:	f43f af08 	beq.w	800164a <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 800183a:	4a1e      	ldr	r2, [pc, #120]	; (80018b4 <HAL_RCC_OscConfig+0x28c>)
 800183c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800183e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001842:	6413      	str	r3, [r2, #64]	; 0x40
 8001844:	e701      	b.n	800164a <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8001846:	2600      	movs	r6, #0
 8001848:	e7df      	b.n	800180a <HAL_RCC_OscConfig+0x1e2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800184a:	682b      	ldr	r3, [r5, #0]
 800184c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001850:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001852:	f7fe fea9 	bl	80005a8 <HAL_GetTick>
 8001856:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001858:	682b      	ldr	r3, [r5, #0]
 800185a:	05da      	lsls	r2, r3, #23
 800185c:	d4d9      	bmi.n	8001812 <HAL_RCC_OscConfig+0x1ea>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800185e:	f7fe fea3 	bl	80005a8 <HAL_GetTick>
 8001862:	1bc0      	subs	r0, r0, r7
 8001864:	2802      	cmp	r0, #2
 8001866:	d9f7      	bls.n	8001858 <HAL_RCC_OscConfig+0x230>
 8001868:	e72b      	b.n	80016c2 <HAL_RCC_OscConfig+0x9a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800186a:	2b05      	cmp	r3, #5
 800186c:	d104      	bne.n	8001878 <HAL_RCC_OscConfig+0x250>
 800186e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001870:	f043 0304 	orr.w	r3, r3, #4
 8001874:	672b      	str	r3, [r5, #112]	; 0x70
 8001876:	e7d0      	b.n	800181a <HAL_RCC_OscConfig+0x1f2>
 8001878:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800187a:	f022 0201 	bic.w	r2, r2, #1
 800187e:	672a      	str	r2, [r5, #112]	; 0x70
 8001880:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001882:	f022 0204 	bic.w	r2, r2, #4
 8001886:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001888:	2b00      	cmp	r3, #0
 800188a:	d1ca      	bne.n	8001822 <HAL_RCC_OscConfig+0x1fa>
      tickstart = HAL_GetTick();
 800188c:	f7fe fe8c 	bl	80005a8 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001890:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001894:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001896:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001898:	0798      	lsls	r0, r3, #30
 800189a:	d5cb      	bpl.n	8001834 <HAL_RCC_OscConfig+0x20c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800189c:	f7fe fe84 	bl	80005a8 <HAL_GetTick>
 80018a0:	1bc0      	subs	r0, r0, r7
 80018a2:	4540      	cmp	r0, r8
 80018a4:	d9f7      	bls.n	8001896 <HAL_RCC_OscConfig+0x26e>
 80018a6:	e70c      	b.n	80016c2 <HAL_RCC_OscConfig+0x9a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018a8:	f7fe fe7e 	bl	80005a8 <HAL_GetTick>
 80018ac:	1bc0      	subs	r0, r0, r7
 80018ae:	4540      	cmp	r0, r8
 80018b0:	d9bd      	bls.n	800182e <HAL_RCC_OscConfig+0x206>
 80018b2:	e706      	b.n	80016c2 <HAL_RCC_OscConfig+0x9a>
 80018b4:	40023800 	.word	0x40023800
 80018b8:	42470000 	.word	0x42470000
 80018bc:	42470e80 	.word	0x42470e80
 80018c0:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80018c4:	4d23      	ldr	r5, [pc, #140]	; (8001954 <HAL_RCC_OscConfig+0x32c>)
 80018c6:	68ab      	ldr	r3, [r5, #8]
 80018c8:	f003 030c 	and.w	r3, r3, #12
 80018cc:	2b08      	cmp	r3, #8
 80018ce:	f43f aee0 	beq.w	8001692 <HAL_RCC_OscConfig+0x6a>
 80018d2:	4e21      	ldr	r6, [pc, #132]	; (8001958 <HAL_RCC_OscConfig+0x330>)
 80018d4:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018d6:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80018d8:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018da:	d12d      	bne.n	8001938 <HAL_RCC_OscConfig+0x310>
        tickstart = HAL_GetTick();
 80018dc:	f7fe fe64 	bl	80005a8 <HAL_GetTick>
 80018e0:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018e2:	682b      	ldr	r3, [r5, #0]
 80018e4:	0199      	lsls	r1, r3, #6
 80018e6:	d421      	bmi.n	800192c <HAL_RCC_OscConfig+0x304>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018e8:	6a22      	ldr	r2, [r4, #32]
 80018ea:	69e3      	ldr	r3, [r4, #28]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80018f0:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80018f4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80018f6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80018fa:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80018fc:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001900:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001902:	4c14      	ldr	r4, [pc, #80]	; (8001954 <HAL_RCC_OscConfig+0x32c>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001904:	0852      	lsrs	r2, r2, #1
 8001906:	3a01      	subs	r2, #1
 8001908:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800190c:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800190e:	2301      	movs	r3, #1
 8001910:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001912:	f7fe fe49 	bl	80005a8 <HAL_GetTick>
 8001916:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001918:	6823      	ldr	r3, [r4, #0]
 800191a:	019a      	lsls	r2, r3, #6
 800191c:	f53f ae99 	bmi.w	8001652 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001920:	f7fe fe42 	bl	80005a8 <HAL_GetTick>
 8001924:	1b40      	subs	r0, r0, r5
 8001926:	2802      	cmp	r0, #2
 8001928:	d9f6      	bls.n	8001918 <HAL_RCC_OscConfig+0x2f0>
 800192a:	e6ca      	b.n	80016c2 <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800192c:	f7fe fe3c 	bl	80005a8 <HAL_GetTick>
 8001930:	1bc0      	subs	r0, r0, r7
 8001932:	2802      	cmp	r0, #2
 8001934:	d9d5      	bls.n	80018e2 <HAL_RCC_OscConfig+0x2ba>
 8001936:	e6c4      	b.n	80016c2 <HAL_RCC_OscConfig+0x9a>
        tickstart = HAL_GetTick();
 8001938:	f7fe fe36 	bl	80005a8 <HAL_GetTick>
 800193c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800193e:	682b      	ldr	r3, [r5, #0]
 8001940:	019b      	lsls	r3, r3, #6
 8001942:	f57f ae86 	bpl.w	8001652 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001946:	f7fe fe2f 	bl	80005a8 <HAL_GetTick>
 800194a:	1b00      	subs	r0, r0, r4
 800194c:	2802      	cmp	r0, #2
 800194e:	d9f6      	bls.n	800193e <HAL_RCC_OscConfig+0x316>
 8001950:	e6b7      	b.n	80016c2 <HAL_RCC_OscConfig+0x9a>
 8001952:	bf00      	nop
 8001954:	40023800 	.word	0x40023800
 8001958:	42470060 	.word	0x42470060

0800195c <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800195c:	6802      	ldr	r2, [r0, #0]
{
 800195e:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8001960:	68d3      	ldr	r3, [r2, #12]
 8001962:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001966:	60d3      	str	r3, [r2, #12]
{
 8001968:	4604      	mov	r4, r0

    /* Get tick */
    tickstart = HAL_GetTick();
 800196a:	f7fe fe1d 	bl	80005a8 <HAL_GetTick>
 800196e:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8001970:	6823      	ldr	r3, [r4, #0]
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	069b      	lsls	r3, r3, #26
 8001976:	d501      	bpl.n	800197c <HAL_RTC_WaitForSynchro+0x20>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8001978:	2000      	movs	r0, #0
 800197a:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800197c:	f7fe fe14 	bl	80005a8 <HAL_GetTick>
 8001980:	1b40      	subs	r0, r0, r5
 8001982:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001986:	d9f3      	bls.n	8001970 <HAL_RTC_WaitForSynchro+0x14>
      return HAL_TIMEOUT;
 8001988:	2003      	movs	r0, #3
}
 800198a:	bd38      	pop	{r3, r4, r5, pc}

0800198c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800198c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800198e:	6803      	ldr	r3, [r0, #0]
 8001990:	68da      	ldr	r2, [r3, #12]
 8001992:	0652      	lsls	r2, r2, #25
{
 8001994:	4604      	mov	r4, r0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001996:	d501      	bpl.n	800199c <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8001998:	2000      	movs	r0, #0
 800199a:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800199c:	f04f 32ff 	mov.w	r2, #4294967295
 80019a0:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 80019a2:	f7fe fe01 	bl	80005a8 <HAL_GetTick>
 80019a6:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80019a8:	6823      	ldr	r3, [r4, #0]
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	065b      	lsls	r3, r3, #25
 80019ae:	d4f3      	bmi.n	8001998 <RTC_EnterInitMode+0xc>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80019b0:	f7fe fdfa 	bl	80005a8 <HAL_GetTick>
 80019b4:	1b40      	subs	r0, r0, r5
 80019b6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80019ba:	d9f5      	bls.n	80019a8 <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 80019bc:	2003      	movs	r0, #3
}
 80019be:	bd38      	pop	{r3, r4, r5, pc}

080019c0 <HAL_RTC_Init>:
{
 80019c0:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 80019c2:	4604      	mov	r4, r0
 80019c4:	b1b8      	cbz	r0, 80019f6 <HAL_RTC_Init+0x36>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80019c6:	7f43      	ldrb	r3, [r0, #29]
 80019c8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80019cc:	b913      	cbnz	r3, 80019d4 <HAL_RTC_Init+0x14>
    hrtc->Lock = HAL_UNLOCKED;
 80019ce:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 80019d0:	f001 fc04 	bl	80031dc <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 80019d4:	2302      	movs	r3, #2
 80019d6:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80019d8:	6823      	ldr	r3, [r4, #0]
 80019da:	22ca      	movs	r2, #202	; 0xca
 80019dc:	625a      	str	r2, [r3, #36]	; 0x24
 80019de:	2253      	movs	r2, #83	; 0x53
 80019e0:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80019e2:	4620      	mov	r0, r4
 80019e4:	f7ff ffd2 	bl	800198c <RTC_EnterInitMode>
 80019e8:	6823      	ldr	r3, [r4, #0]
 80019ea:	4605      	mov	r5, r0
 80019ec:	b128      	cbz	r0, 80019fa <HAL_RTC_Init+0x3a>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80019ee:	22ff      	movs	r2, #255	; 0xff
 80019f0:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80019f2:	2304      	movs	r3, #4
 80019f4:	7763      	strb	r3, [r4, #29]
     return HAL_ERROR;
 80019f6:	2501      	movs	r5, #1
 80019f8:	e02e      	b.n	8001a58 <HAL_RTC_Init+0x98>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80019fa:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80019fc:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80019fe:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 8001a02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a06:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001a08:	6862      	ldr	r2, [r4, #4]
 8001a0a:	6899      	ldr	r1, [r3, #8]
 8001a0c:	4302      	orrs	r2, r0
 8001a0e:	6960      	ldr	r0, [r4, #20]
 8001a10:	4302      	orrs	r2, r0
 8001a12:	430a      	orrs	r2, r1
 8001a14:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001a16:	68e2      	ldr	r2, [r4, #12]
 8001a18:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8001a1a:	691a      	ldr	r2, [r3, #16]
 8001a1c:	68a1      	ldr	r1, [r4, #8]
 8001a1e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001a22:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8001a24:	68da      	ldr	r2, [r3, #12]
 8001a26:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a2a:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	069b      	lsls	r3, r3, #26
 8001a30:	d405      	bmi.n	8001a3e <HAL_RTC_Init+0x7e>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001a32:	4620      	mov	r0, r4
 8001a34:	f7ff ff92 	bl	800195c <HAL_RTC_WaitForSynchro>
 8001a38:	b108      	cbz	r0, 8001a3e <HAL_RTC_Init+0x7e>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001a3a:	6823      	ldr	r3, [r4, #0]
 8001a3c:	e7d7      	b.n	80019ee <HAL_RTC_Init+0x2e>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8001a3e:	6823      	ldr	r3, [r4, #0]
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8001a40:	69a1      	ldr	r1, [r4, #24]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8001a42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a44:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001a48:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8001a4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a4c:	430a      	orrs	r2, r1
 8001a4e:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001a50:	22ff      	movs	r2, #255	; 0xff
 8001a52:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8001a54:	2301      	movs	r3, #1
 8001a56:	7763      	strb	r3, [r4, #29]
}
 8001a58:	4628      	mov	r0, r5
 8001a5a:	bd38      	pop	{r3, r4, r5, pc}

08001a5c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001a5c:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001a5e:	4604      	mov	r4, r0
 8001a60:	2800      	cmp	r0, #0
 8001a62:	d036      	beq.n	8001ad2 <HAL_SPI_Init+0x76>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a64:	2300      	movs	r3, #0
 8001a66:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001a68:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8001a6c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001a70:	b91b      	cbnz	r3, 8001a7a <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001a72:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001a76:	f001 fbbd 	bl	80031f4 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001a7a:	6821      	ldr	r1, [r4, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001a7c:	68a0      	ldr	r0, [r4, #8]
 8001a7e:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001a80:	2302      	movs	r3, #2
 8001a82:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8001a86:	680b      	ldr	r3, [r1, #0]
 8001a88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001a8c:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001a8e:	6863      	ldr	r3, [r4, #4]
 8001a90:	4303      	orrs	r3, r0
 8001a92:	68e0      	ldr	r0, [r4, #12]
 8001a94:	4303      	orrs	r3, r0
 8001a96:	6920      	ldr	r0, [r4, #16]
 8001a98:	4303      	orrs	r3, r0
 8001a9a:	6960      	ldr	r0, [r4, #20]
 8001a9c:	4303      	orrs	r3, r0
 8001a9e:	69e0      	ldr	r0, [r4, #28]
 8001aa0:	4303      	orrs	r3, r0
 8001aa2:	6a20      	ldr	r0, [r4, #32]
 8001aa4:	4303      	orrs	r3, r0
 8001aa6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001aa8:	4303      	orrs	r3, r0
 8001aaa:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8001aae:	4303      	orrs	r3, r0
 8001ab0:	600b      	str	r3, [r1, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001ab2:	0c12      	lsrs	r2, r2, #16
 8001ab4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001ab6:	f002 0204 	and.w	r2, r2, #4
 8001aba:	431a      	orrs	r2, r3
 8001abc:	604a      	str	r2, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001abe:	69cb      	ldr	r3, [r1, #28]
 8001ac0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001ac4:	61cb      	str	r3, [r1, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001ac6:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8001ac8:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001aca:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001acc:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
 8001ad0:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001ad2:	2001      	movs	r0, #1
}
 8001ad4:	bd10      	pop	{r4, pc}
	...

08001ad8 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001ad8:	6a03      	ldr	r3, [r0, #32]
 8001ada:	f023 0301 	bic.w	r3, r3, #1
 8001ade:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001ae0:	6a03      	ldr	r3, [r0, #32]
{
 8001ae2:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001ae4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001ae6:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001ae8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001aea:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001aee:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001af0:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8001af2:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8001af6:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001af8:	4d0e      	ldr	r5, [pc, #56]	; (8001b34 <TIM_OC1_SetConfig+0x5c>)
 8001afa:	42a8      	cmp	r0, r5
 8001afc:	d002      	beq.n	8001b04 <TIM_OC1_SetConfig+0x2c>
 8001afe:	4e0e      	ldr	r6, [pc, #56]	; (8001b38 <TIM_OC1_SetConfig+0x60>)
 8001b00:	42b0      	cmp	r0, r6
 8001b02:	d110      	bne.n	8001b26 <TIM_OC1_SetConfig+0x4e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001b04:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8001b06:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8001b0a:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001b0c:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8001b0e:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001b12:	d002      	beq.n	8001b1a <TIM_OC1_SetConfig+0x42>
 8001b14:	4d08      	ldr	r5, [pc, #32]	; (8001b38 <TIM_OC1_SetConfig+0x60>)
 8001b16:	42a8      	cmp	r0, r5
 8001b18:	d105      	bne.n	8001b26 <TIM_OC1_SetConfig+0x4e>
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001b1a:	694d      	ldr	r5, [r1, #20]
 8001b1c:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001b1e:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8001b22:	4335      	orrs	r5, r6
 8001b24:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001b26:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001b28:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001b2a:	684a      	ldr	r2, [r1, #4]
 8001b2c:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001b2e:	6203      	str	r3, [r0, #32]
 8001b30:	bd70      	pop	{r4, r5, r6, pc}
 8001b32:	bf00      	nop
 8001b34:	40010000 	.word	0x40010000
 8001b38:	40010400 	.word	0x40010400

08001b3c <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001b3c:	6a03      	ldr	r3, [r0, #32]
 8001b3e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b42:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001b44:	6a03      	ldr	r3, [r0, #32]
{
 8001b46:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001b48:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001b4a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001b4c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001b4e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001b52:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001b54:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8001b56:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001b5a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001b5e:	4d11      	ldr	r5, [pc, #68]	; (8001ba4 <TIM_OC3_SetConfig+0x68>)
 8001b60:	42a8      	cmp	r0, r5
 8001b62:	d003      	beq.n	8001b6c <TIM_OC3_SetConfig+0x30>
 8001b64:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001b68:	42a8      	cmp	r0, r5
 8001b6a:	d114      	bne.n	8001b96 <TIM_OC3_SetConfig+0x5a>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001b6c:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8001b6e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001b72:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001b76:	4d0b      	ldr	r5, [pc, #44]	; (8001ba4 <TIM_OC3_SetConfig+0x68>)
 8001b78:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 8001b7a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001b7e:	d003      	beq.n	8001b88 <TIM_OC3_SetConfig+0x4c>
 8001b80:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001b84:	42a8      	cmp	r0, r5
 8001b86:	d106      	bne.n	8001b96 <TIM_OC3_SetConfig+0x5a>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001b88:	694d      	ldr	r5, [r1, #20]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001b8a:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001b8c:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001b90:	4335      	orrs	r5, r6
 8001b92:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001b96:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001b98:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001b9a:	684a      	ldr	r2, [r1, #4]
 8001b9c:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001b9e:	6203      	str	r3, [r0, #32]
 8001ba0:	bd70      	pop	{r4, r5, r6, pc}
 8001ba2:	bf00      	nop
 8001ba4:	40010000 	.word	0x40010000

08001ba8 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001ba8:	6a03      	ldr	r3, [r0, #32]
 8001baa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001bae:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001bb0:	6a03      	ldr	r3, [r0, #32]
{
 8001bb2:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001bb4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001bb6:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001bb8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001bba:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001bbe:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001bc2:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8001bc4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001bc8:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001bcc:	4d08      	ldr	r5, [pc, #32]	; (8001bf0 <TIM_OC4_SetConfig+0x48>)
 8001bce:	42a8      	cmp	r0, r5
 8001bd0:	d003      	beq.n	8001bda <TIM_OC4_SetConfig+0x32>
 8001bd2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001bd6:	42a8      	cmp	r0, r5
 8001bd8:	d104      	bne.n	8001be4 <TIM_OC4_SetConfig+0x3c>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001bda:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001bdc:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001be0:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001be4:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001be6:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001be8:	684a      	ldr	r2, [r1, #4]
 8001bea:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001bec:	6203      	str	r3, [r0, #32]
 8001bee:	bd30      	pop	{r4, r5, pc}
 8001bf0:	40010000 	.word	0x40010000

08001bf4 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001bf4:	6803      	ldr	r3, [r0, #0]
 8001bf6:	68da      	ldr	r2, [r3, #12]
 8001bf8:	f042 0201 	orr.w	r2, r2, #1
 8001bfc:	60da      	str	r2, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001bfe:	689a      	ldr	r2, [r3, #8]
 8001c00:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c04:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 8001c06:	bf1e      	ittt	ne
 8001c08:	681a      	ldrne	r2, [r3, #0]
 8001c0a:	f042 0201 	orrne.w	r2, r2, #1
 8001c0e:	601a      	strne	r2, [r3, #0]
}
 8001c10:	2000      	movs	r0, #0
 8001c12:	4770      	bx	lr

08001c14 <HAL_TIM_PeriodElapsedCallback>:
 8001c14:	4770      	bx	lr

08001c16 <HAL_TIM_OC_DelayElapsedCallback>:
 8001c16:	4770      	bx	lr

08001c18 <HAL_TIM_IC_CaptureCallback>:
 8001c18:	4770      	bx	lr

08001c1a <HAL_TIM_PWM_PulseFinishedCallback>:
 8001c1a:	4770      	bx	lr

08001c1c <HAL_TIM_TriggerCallback>:
 8001c1c:	4770      	bx	lr

08001c1e <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c1e:	6803      	ldr	r3, [r0, #0]
 8001c20:	691a      	ldr	r2, [r3, #16]
 8001c22:	0791      	lsls	r1, r2, #30
{
 8001c24:	b510      	push	{r4, lr}
 8001c26:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c28:	d50e      	bpl.n	8001c48 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c2a:	68da      	ldr	r2, [r3, #12]
 8001c2c:	0792      	lsls	r2, r2, #30
 8001c2e:	d50b      	bpl.n	8001c48 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c30:	f06f 0202 	mvn.w	r2, #2
 8001c34:	611a      	str	r2, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c36:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c38:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c3a:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c3c:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c3e:	d077      	beq.n	8001d30 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8001c40:	f7ff ffea 	bl	8001c18 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c44:	2300      	movs	r3, #0
 8001c46:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c48:	6823      	ldr	r3, [r4, #0]
 8001c4a:	691a      	ldr	r2, [r3, #16]
 8001c4c:	0750      	lsls	r0, r2, #29
 8001c4e:	d510      	bpl.n	8001c72 <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001c50:	68da      	ldr	r2, [r3, #12]
 8001c52:	0751      	lsls	r1, r2, #29
 8001c54:	d50d      	bpl.n	8001c72 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c56:	f06f 0204 	mvn.w	r2, #4
 8001c5a:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c5c:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c5e:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c60:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c64:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8001c66:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c68:	d068      	beq.n	8001d3c <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8001c6a:	f7ff ffd5 	bl	8001c18 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001c72:	6823      	ldr	r3, [r4, #0]
 8001c74:	691a      	ldr	r2, [r3, #16]
 8001c76:	0712      	lsls	r2, r2, #28
 8001c78:	d50f      	bpl.n	8001c9a <HAL_TIM_IRQHandler+0x7c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001c7a:	68da      	ldr	r2, [r3, #12]
 8001c7c:	0710      	lsls	r0, r2, #28
 8001c7e:	d50c      	bpl.n	8001c9a <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c80:	f06f 0208 	mvn.w	r2, #8
 8001c84:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c86:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c88:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c8a:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c8c:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8001c8e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c90:	d05a      	beq.n	8001d48 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001c92:	f7ff ffc1 	bl	8001c18 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c96:	2300      	movs	r3, #0
 8001c98:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001c9a:	6823      	ldr	r3, [r4, #0]
 8001c9c:	691a      	ldr	r2, [r3, #16]
 8001c9e:	06d2      	lsls	r2, r2, #27
 8001ca0:	d510      	bpl.n	8001cc4 <HAL_TIM_IRQHandler+0xa6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001ca2:	68da      	ldr	r2, [r3, #12]
 8001ca4:	06d0      	lsls	r0, r2, #27
 8001ca6:	d50d      	bpl.n	8001cc4 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ca8:	f06f 0210 	mvn.w	r2, #16
 8001cac:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001cae:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001cb0:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001cb2:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001cb6:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8001cb8:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001cba:	d04b      	beq.n	8001d54 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8001cbc:	f7ff ffac 	bl	8001c18 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001cc4:	6823      	ldr	r3, [r4, #0]
 8001cc6:	691a      	ldr	r2, [r3, #16]
 8001cc8:	07d1      	lsls	r1, r2, #31
 8001cca:	d508      	bpl.n	8001cde <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001ccc:	68da      	ldr	r2, [r3, #12]
 8001cce:	07d2      	lsls	r2, r2, #31
 8001cd0:	d505      	bpl.n	8001cde <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001cd2:	f06f 0201 	mvn.w	r2, #1
 8001cd6:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001cd8:	4620      	mov	r0, r4
 8001cda:	f7ff ff9b 	bl	8001c14 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001cde:	6823      	ldr	r3, [r4, #0]
 8001ce0:	691a      	ldr	r2, [r3, #16]
 8001ce2:	0610      	lsls	r0, r2, #24
 8001ce4:	d508      	bpl.n	8001cf8 <HAL_TIM_IRQHandler+0xda>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001ce6:	68da      	ldr	r2, [r3, #12]
 8001ce8:	0611      	lsls	r1, r2, #24
 8001cea:	d505      	bpl.n	8001cf8 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001cec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001cf0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001cf2:	4620      	mov	r0, r4
 8001cf4:	f000 fa6f 	bl	80021d6 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001cf8:	6823      	ldr	r3, [r4, #0]
 8001cfa:	691a      	ldr	r2, [r3, #16]
 8001cfc:	0652      	lsls	r2, r2, #25
 8001cfe:	d508      	bpl.n	8001d12 <HAL_TIM_IRQHandler+0xf4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001d00:	68da      	ldr	r2, [r3, #12]
 8001d02:	0650      	lsls	r0, r2, #25
 8001d04:	d505      	bpl.n	8001d12 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001d06:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001d0a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001d0c:	4620      	mov	r0, r4
 8001d0e:	f7ff ff85 	bl	8001c1c <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001d12:	6823      	ldr	r3, [r4, #0]
 8001d14:	691a      	ldr	r2, [r3, #16]
 8001d16:	0691      	lsls	r1, r2, #26
 8001d18:	d522      	bpl.n	8001d60 <HAL_TIM_IRQHandler+0x142>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001d1a:	68da      	ldr	r2, [r3, #12]
 8001d1c:	0692      	lsls	r2, r2, #26
 8001d1e:	d51f      	bpl.n	8001d60 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001d20:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8001d24:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001d26:	611a      	str	r2, [r3, #16]
}
 8001d28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8001d2c:	f000 ba52 	b.w	80021d4 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d30:	f7ff ff71 	bl	8001c16 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d34:	4620      	mov	r0, r4
 8001d36:	f7ff ff70 	bl	8001c1a <HAL_TIM_PWM_PulseFinishedCallback>
 8001d3a:	e783      	b.n	8001c44 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d3c:	f7ff ff6b 	bl	8001c16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d40:	4620      	mov	r0, r4
 8001d42:	f7ff ff6a 	bl	8001c1a <HAL_TIM_PWM_PulseFinishedCallback>
 8001d46:	e792      	b.n	8001c6e <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d48:	f7ff ff65 	bl	8001c16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d4c:	4620      	mov	r0, r4
 8001d4e:	f7ff ff64 	bl	8001c1a <HAL_TIM_PWM_PulseFinishedCallback>
 8001d52:	e7a0      	b.n	8001c96 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d54:	f7ff ff5f 	bl	8001c16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d58:	4620      	mov	r0, r4
 8001d5a:	f7ff ff5e 	bl	8001c1a <HAL_TIM_PWM_PulseFinishedCallback>
 8001d5e:	e7af      	b.n	8001cc0 <HAL_TIM_IRQHandler+0xa2>
 8001d60:	bd10      	pop	{r4, pc}
	...

08001d64 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d64:	4a30      	ldr	r2, [pc, #192]	; (8001e28 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8001d66:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d68:	4290      	cmp	r0, r2
 8001d6a:	d012      	beq.n	8001d92 <TIM_Base_SetConfig+0x2e>
 8001d6c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001d70:	d00f      	beq.n	8001d92 <TIM_Base_SetConfig+0x2e>
 8001d72:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001d76:	4290      	cmp	r0, r2
 8001d78:	d00b      	beq.n	8001d92 <TIM_Base_SetConfig+0x2e>
 8001d7a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d7e:	4290      	cmp	r0, r2
 8001d80:	d007      	beq.n	8001d92 <TIM_Base_SetConfig+0x2e>
 8001d82:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d86:	4290      	cmp	r0, r2
 8001d88:	d003      	beq.n	8001d92 <TIM_Base_SetConfig+0x2e>
 8001d8a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001d8e:	4290      	cmp	r0, r2
 8001d90:	d119      	bne.n	8001dc6 <TIM_Base_SetConfig+0x62>
    tmpcr1 |= Structure->CounterMode;
 8001d92:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001d98:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d9a:	4a23      	ldr	r2, [pc, #140]	; (8001e28 <TIM_Base_SetConfig+0xc4>)
 8001d9c:	4290      	cmp	r0, r2
 8001d9e:	d029      	beq.n	8001df4 <TIM_Base_SetConfig+0x90>
 8001da0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001da4:	d026      	beq.n	8001df4 <TIM_Base_SetConfig+0x90>
 8001da6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001daa:	4290      	cmp	r0, r2
 8001dac:	d022      	beq.n	8001df4 <TIM_Base_SetConfig+0x90>
 8001dae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001db2:	4290      	cmp	r0, r2
 8001db4:	d01e      	beq.n	8001df4 <TIM_Base_SetConfig+0x90>
 8001db6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001dba:	4290      	cmp	r0, r2
 8001dbc:	d01a      	beq.n	8001df4 <TIM_Base_SetConfig+0x90>
 8001dbe:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001dc2:	4290      	cmp	r0, r2
 8001dc4:	d016      	beq.n	8001df4 <TIM_Base_SetConfig+0x90>
 8001dc6:	4a19      	ldr	r2, [pc, #100]	; (8001e2c <TIM_Base_SetConfig+0xc8>)
 8001dc8:	4290      	cmp	r0, r2
 8001dca:	d013      	beq.n	8001df4 <TIM_Base_SetConfig+0x90>
 8001dcc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001dd0:	4290      	cmp	r0, r2
 8001dd2:	d00f      	beq.n	8001df4 <TIM_Base_SetConfig+0x90>
 8001dd4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001dd8:	4290      	cmp	r0, r2
 8001dda:	d00b      	beq.n	8001df4 <TIM_Base_SetConfig+0x90>
 8001ddc:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001de0:	4290      	cmp	r0, r2
 8001de2:	d007      	beq.n	8001df4 <TIM_Base_SetConfig+0x90>
 8001de4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001de8:	4290      	cmp	r0, r2
 8001dea:	d003      	beq.n	8001df4 <TIM_Base_SetConfig+0x90>
 8001dec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001df0:	4290      	cmp	r0, r2
 8001df2:	d103      	bne.n	8001dfc <TIM_Base_SetConfig+0x98>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001df4:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001df6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001dfa:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001dfc:	694a      	ldr	r2, [r1, #20]
 8001dfe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e02:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001e04:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e06:	688b      	ldr	r3, [r1, #8]
 8001e08:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001e0a:	680b      	ldr	r3, [r1, #0]
 8001e0c:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e0e:	4b06      	ldr	r3, [pc, #24]	; (8001e28 <TIM_Base_SetConfig+0xc4>)
 8001e10:	4298      	cmp	r0, r3
 8001e12:	d003      	beq.n	8001e1c <TIM_Base_SetConfig+0xb8>
 8001e14:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e18:	4298      	cmp	r0, r3
 8001e1a:	d101      	bne.n	8001e20 <TIM_Base_SetConfig+0xbc>
    TIMx->RCR = Structure->RepetitionCounter;
 8001e1c:	690b      	ldr	r3, [r1, #16]
 8001e1e:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8001e20:	2301      	movs	r3, #1
 8001e22:	6143      	str	r3, [r0, #20]
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	40010000 	.word	0x40010000
 8001e2c:	40014000 	.word	0x40014000

08001e30 <HAL_TIM_Base_Init>:
{
 8001e30:	b510      	push	{r4, lr}
  if (htim == NULL)
 8001e32:	4604      	mov	r4, r0
 8001e34:	b1a0      	cbz	r0, 8001e60 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001e36:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001e3a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001e3e:	b91b      	cbnz	r3, 8001e48 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001e40:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001e44:	f001 fa4c 	bl	80032e0 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001e48:	2302      	movs	r3, #2
 8001e4a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e4e:	6820      	ldr	r0, [r4, #0]
 8001e50:	1d21      	adds	r1, r4, #4
 8001e52:	f7ff ff87 	bl	8001d64 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8001e56:	2301      	movs	r3, #1
 8001e58:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001e5c:	2000      	movs	r0, #0
 8001e5e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001e60:	2001      	movs	r0, #1
}
 8001e62:	bd10      	pop	{r4, pc}

08001e64 <HAL_TIM_PWM_Init>:
{
 8001e64:	b510      	push	{r4, lr}
  if (htim == NULL)
 8001e66:	4604      	mov	r4, r0
 8001e68:	b1a0      	cbz	r0, 8001e94 <HAL_TIM_PWM_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001e6a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001e6e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001e72:	b91b      	cbnz	r3, 8001e7c <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001e74:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8001e78:	f001 fae0 	bl	800343c <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e82:	6820      	ldr	r0, [r4, #0]
 8001e84:	1d21      	adds	r1, r4, #4
 8001e86:	f7ff ff6d 	bl	8001d64 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001e90:	2000      	movs	r0, #0
 8001e92:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001e94:	2001      	movs	r0, #1
}
 8001e96:	bd10      	pop	{r4, pc}

08001e98 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e98:	6a03      	ldr	r3, [r0, #32]
 8001e9a:	f023 0310 	bic.w	r3, r3, #16
 8001e9e:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001ea0:	6a03      	ldr	r3, [r0, #32]
{
 8001ea2:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 =  TIMx->CR2;
 8001ea4:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8001ea6:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001ea8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001eaa:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001eae:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001eb2:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8001eb4:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001eb8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001ebc:	4d10      	ldr	r5, [pc, #64]	; (8001f00 <TIM_OC2_SetConfig+0x68>)
 8001ebe:	42a8      	cmp	r0, r5
 8001ec0:	d003      	beq.n	8001eca <TIM_OC2_SetConfig+0x32>
 8001ec2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001ec6:	42a8      	cmp	r0, r5
 8001ec8:	d114      	bne.n	8001ef4 <TIM_OC2_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001eca:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8001ecc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001ed0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001ed4:	4d0a      	ldr	r5, [pc, #40]	; (8001f00 <TIM_OC2_SetConfig+0x68>)
 8001ed6:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 8001ed8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001edc:	d003      	beq.n	8001ee6 <TIM_OC2_SetConfig+0x4e>
 8001ede:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001ee2:	42a8      	cmp	r0, r5
 8001ee4:	d106      	bne.n	8001ef4 <TIM_OC2_SetConfig+0x5c>
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001ee6:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001ee8:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001eea:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001eee:	4335      	orrs	r5, r6
 8001ef0:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8001ef4:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001ef6:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8001ef8:	684a      	ldr	r2, [r1, #4]
 8001efa:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8001efc:	6203      	str	r3, [r0, #32]
 8001efe:	bd70      	pop	{r4, r5, r6, pc}
 8001f00:	40010000 	.word	0x40010000

08001f04 <HAL_TIM_PWM_ConfigChannel>:
{
 8001f04:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8001f06:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001f0a:	2b01      	cmp	r3, #1
{
 8001f0c:	4604      	mov	r4, r0
 8001f0e:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001f12:	d025      	beq.n	8001f60 <HAL_TIM_PWM_ConfigChannel+0x5c>
 8001f14:	2301      	movs	r3, #1
 8001f16:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8001f1a:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  switch (Channel)
 8001f1e:	2a0c      	cmp	r2, #12
 8001f20:	d818      	bhi.n	8001f54 <HAL_TIM_PWM_ConfigChannel+0x50>
 8001f22:	e8df f002 	tbb	[pc, r2]
 8001f26:	1707      	.short	0x1707
 8001f28:	171e1717 	.word	0x171e1717
 8001f2c:	172f1717 	.word	0x172f1717
 8001f30:	1717      	.short	0x1717
 8001f32:	40          	.byte	0x40
 8001f33:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001f34:	6820      	ldr	r0, [r4, #0]
 8001f36:	f7ff fdcf 	bl	8001ad8 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001f3a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001f3c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001f3e:	699a      	ldr	r2, [r3, #24]
 8001f40:	f042 0208 	orr.w	r2, r2, #8
 8001f44:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001f46:	699a      	ldr	r2, [r3, #24]
 8001f48:	f022 0204 	bic.w	r2, r2, #4
 8001f4c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001f4e:	699a      	ldr	r2, [r3, #24]
 8001f50:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001f52:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8001f54:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001f56:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001f58:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001f5c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001f60:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001f62:	6820      	ldr	r0, [r4, #0]
 8001f64:	f7ff ff98 	bl	8001e98 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001f68:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001f6a:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001f6c:	699a      	ldr	r2, [r3, #24]
 8001f6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001f74:	699a      	ldr	r2, [r3, #24]
 8001f76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001f7c:	699a      	ldr	r2, [r3, #24]
 8001f7e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001f82:	e7e6      	b.n	8001f52 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001f84:	6820      	ldr	r0, [r4, #0]
 8001f86:	f7ff fdd9 	bl	8001b3c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001f8a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001f8c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001f8e:	69da      	ldr	r2, [r3, #28]
 8001f90:	f042 0208 	orr.w	r2, r2, #8
 8001f94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001f96:	69da      	ldr	r2, [r3, #28]
 8001f98:	f022 0204 	bic.w	r2, r2, #4
 8001f9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001f9e:	69da      	ldr	r2, [r3, #28]
 8001fa0:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001fa2:	61da      	str	r2, [r3, #28]
      break;
 8001fa4:	e7d6      	b.n	8001f54 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001fa6:	6820      	ldr	r0, [r4, #0]
 8001fa8:	f7ff fdfe 	bl	8001ba8 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001fac:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001fae:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001fb0:	69da      	ldr	r2, [r3, #28]
 8001fb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001fb6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001fb8:	69da      	ldr	r2, [r3, #28]
 8001fba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fbe:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001fc0:	69da      	ldr	r2, [r3, #28]
 8001fc2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001fc6:	e7ec      	b.n	8001fa2 <HAL_TIM_PWM_ConfigChannel+0x9e>

08001fc8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001fc8:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001fca:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001fcc:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001fce:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001fd2:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8001fd6:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001fd8:	6083      	str	r3, [r0, #8]
 8001fda:	bd10      	pop	{r4, pc}

08001fdc <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001fdc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001fe0:	2b01      	cmp	r3, #1
{
 8001fe2:	b570      	push	{r4, r5, r6, lr}
 8001fe4:	4604      	mov	r4, r0
 8001fe6:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001fea:	d019      	beq.n	8002020 <HAL_TIM_ConfigClockSource+0x44>
  htim->State = HAL_TIM_STATE_BUSY;
 8001fec:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8001ff0:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8001ff8:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001ffa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001ffe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8002002:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8002004:	680b      	ldr	r3, [r1, #0]
 8002006:	2b40      	cmp	r3, #64	; 0x40
 8002008:	d065      	beq.n	80020d6 <HAL_TIM_ConfigClockSource+0xfa>
 800200a:	d815      	bhi.n	8002038 <HAL_TIM_ConfigClockSource+0x5c>
 800200c:	2b10      	cmp	r3, #16
 800200e:	d00c      	beq.n	800202a <HAL_TIM_ConfigClockSource+0x4e>
 8002010:	d807      	bhi.n	8002022 <HAL_TIM_ConfigClockSource+0x46>
 8002012:	b153      	cbz	r3, 800202a <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 8002014:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8002016:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002018:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800201c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002020:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8002022:	2b20      	cmp	r3, #32
 8002024:	d001      	beq.n	800202a <HAL_TIM_ConfigClockSource+0x4e>
 8002026:	2b30      	cmp	r3, #48	; 0x30
 8002028:	d1f4      	bne.n	8002014 <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = TIMx->SMCR;
 800202a:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800202c:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8002030:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002034:	4313      	orrs	r3, r2
 8002036:	e01a      	b.n	800206e <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 8002038:	2b60      	cmp	r3, #96	; 0x60
 800203a:	d034      	beq.n	80020a6 <HAL_TIM_ConfigClockSource+0xca>
 800203c:	d819      	bhi.n	8002072 <HAL_TIM_ConfigClockSource+0x96>
 800203e:	2b50      	cmp	r3, #80	; 0x50
 8002040:	d1e8      	bne.n	8002014 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002042:	684a      	ldr	r2, [r1, #4]
 8002044:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002046:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002048:	6a05      	ldr	r5, [r0, #32]
 800204a:	f025 0501 	bic.w	r5, r5, #1
 800204e:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002050:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002052:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002056:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800205a:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 800205e:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8002060:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002062:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002064:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002066:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800206a:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 800206e:	6083      	str	r3, [r0, #8]
 8002070:	e7d0      	b.n	8002014 <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 8002072:	2b70      	cmp	r3, #112	; 0x70
 8002074:	d00c      	beq.n	8002090 <HAL_TIM_ConfigClockSource+0xb4>
 8002076:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800207a:	d1cb      	bne.n	8002014 <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 800207c:	68cb      	ldr	r3, [r1, #12]
 800207e:	684a      	ldr	r2, [r1, #4]
 8002080:	6889      	ldr	r1, [r1, #8]
 8002082:	f7ff ffa1 	bl	8001fc8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002086:	6822      	ldr	r2, [r4, #0]
 8002088:	6893      	ldr	r3, [r2, #8]
 800208a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800208e:	e008      	b.n	80020a2 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 8002090:	68cb      	ldr	r3, [r1, #12]
 8002092:	684a      	ldr	r2, [r1, #4]
 8002094:	6889      	ldr	r1, [r1, #8]
 8002096:	f7ff ff97 	bl	8001fc8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800209a:	6822      	ldr	r2, [r4, #0]
 800209c:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800209e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80020a2:	6093      	str	r3, [r2, #8]
      break;
 80020a4:	e7b6      	b.n	8002014 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80020a6:	684d      	ldr	r5, [r1, #4]
 80020a8:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80020aa:	6a01      	ldr	r1, [r0, #32]
 80020ac:	f021 0110 	bic.w	r1, r1, #16
 80020b0:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80020b2:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 80020b4:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80020b6:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80020ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80020be:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80020c2:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80020c6:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80020c8:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80020ca:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80020cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80020d0:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 80020d4:	e7cb      	b.n	800206e <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80020d6:	684a      	ldr	r2, [r1, #4]
 80020d8:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80020da:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80020dc:	6a05      	ldr	r5, [r0, #32]
 80020de:	f025 0501 	bic.w	r5, r5, #1
 80020e2:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80020e4:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80020e6:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80020ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80020ee:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 80020f2:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 80020f4:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80020f6:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80020f8:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80020fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80020fe:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8002102:	e7b4      	b.n	800206e <HAL_TIM_ConfigClockSource+0x92>

08002104 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002104:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002108:	2b01      	cmp	r3, #1
{
 800210a:	b530      	push	{r4, r5, lr}
 800210c:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8002110:	d035      	beq.n	800217e <HAL_TIMEx_MasterConfigSynchronization+0x7a>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002112:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002116:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002118:	680d      	ldr	r5, [r1, #0]
  tmpcr2 = htim->Instance->CR2;
 800211a:	685c      	ldr	r4, [r3, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 800211c:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  __HAL_LOCK(htim);
 8002120:	2201      	movs	r2, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002122:	432c      	orrs	r4, r5
  __HAL_LOCK(htim);
 8002124:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8002128:	689a      	ldr	r2, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800212a:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800212c:	4c15      	ldr	r4, [pc, #84]	; (8002184 <HAL_TIMEx_MasterConfigSynchronization+0x80>)
 800212e:	42a3      	cmp	r3, r4
 8002130:	d01a      	beq.n	8002168 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8002132:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002136:	d017      	beq.n	8002168 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8002138:	f5a4 447c 	sub.w	r4, r4, #64512	; 0xfc00
 800213c:	42a3      	cmp	r3, r4
 800213e:	d013      	beq.n	8002168 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8002140:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002144:	42a3      	cmp	r3, r4
 8002146:	d00f      	beq.n	8002168 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8002148:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800214c:	42a3      	cmp	r3, r4
 800214e:	d00b      	beq.n	8002168 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8002150:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 8002154:	42a3      	cmp	r3, r4
 8002156:	d007      	beq.n	8002168 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8002158:	f504 5470 	add.w	r4, r4, #15360	; 0x3c00
 800215c:	42a3      	cmp	r3, r4
 800215e:	d003      	beq.n	8002168 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8002160:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 8002164:	42a3      	cmp	r3, r4
 8002166:	d104      	bne.n	8002172 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002168:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800216a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800216e:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002170:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002172:	2301      	movs	r3, #1
 8002174:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002178:	2300      	movs	r3, #0
 800217a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 800217e:	4618      	mov	r0, r3

  return HAL_OK;
}
 8002180:	bd30      	pop	{r4, r5, pc}
 8002182:	bf00      	nop
 8002184:	40010000 	.word	0x40010000

08002188 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002188:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800218c:	2b01      	cmp	r3, #1
 800218e:	d01f      	beq.n	80021d0 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002190:	68cb      	ldr	r3, [r1, #12]
 8002192:	688a      	ldr	r2, [r1, #8]
 8002194:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002198:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800219a:	684a      	ldr	r2, [r1, #4]
 800219c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80021a0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80021a2:	680a      	ldr	r2, [r1, #0]
 80021a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80021a8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80021aa:	690a      	ldr	r2, [r1, #16]
 80021ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80021b0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80021b2:	694a      	ldr	r2, [r1, #20]
 80021b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80021b8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80021ba:	69ca      	ldr	r2, [r1, #28]
 80021bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80021c0:	4313      	orrs	r3, r2


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80021c2:	6802      	ldr	r2, [r0, #0]
 80021c4:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80021c6:	2300      	movs	r3, #0
 80021c8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 80021cc:	4618      	mov	r0, r3
 80021ce:	4770      	bx	lr
  __HAL_LOCK(htim);
 80021d0:	2002      	movs	r0, #2
}
 80021d2:	4770      	bx	lr

080021d4 <HAL_TIMEx_CommutCallback>:
 80021d4:	4770      	bx	lr

080021d6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80021d6:	4770      	bx	lr

080021d8 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80021d8:	6803      	ldr	r3, [r0, #0]
 80021da:	68da      	ldr	r2, [r3, #12]
 80021dc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80021e0:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021e2:	695a      	ldr	r2, [r3, #20]
 80021e4:	f022 0201 	bic.w	r2, r2, #1
 80021e8:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80021ea:	2320      	movs	r3, #32
 80021ec:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 80021f0:	4770      	bx	lr
	...

080021f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80021f4:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021f6:	6803      	ldr	r3, [r0, #0]
 80021f8:	68c1      	ldr	r1, [r0, #12]
 80021fa:	691a      	ldr	r2, [r3, #16]
{
 80021fc:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021fe:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002202:	430a      	orrs	r2, r1
 8002204:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002206:	6925      	ldr	r5, [r4, #16]
 8002208:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1,
 800220a:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800220c:	69c0      	ldr	r0, [r0, #28]
 800220e:	432a      	orrs	r2, r5
 8002210:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8002212:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002216:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 8002218:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800221c:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 800221e:	430a      	orrs	r2, r1
 8002220:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002222:	695a      	ldr	r2, [r3, #20]
 8002224:	69a1      	ldr	r1, [r4, #24]
 8002226:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800222a:	430a      	orrs	r2, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800222c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002230:	615a      	str	r2, [r3, #20]
 8002232:	4a25      	ldr	r2, [pc, #148]	; (80022c8 <UART_SetConfig+0xd4>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002234:	d129      	bne.n	800228a <UART_SetConfig+0x96>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002236:	4293      	cmp	r3, r2
 8002238:	d003      	beq.n	8002242 <UART_SetConfig+0x4e>
 800223a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800223e:	4293      	cmp	r3, r2
 8002240:	d120      	bne.n	8002284 <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002242:	f7fe ff91 	bl	8001168 <HAL_RCC_GetPCLK2Freq>
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002246:	6862      	ldr	r2, [r4, #4]
 8002248:	6825      	ldr	r5, [r4, #0]
 800224a:	1892      	adds	r2, r2, r2
 800224c:	f04f 0300 	mov.w	r3, #0
 8002250:	f04f 0119 	mov.w	r1, #25
 8002254:	415b      	adcs	r3, r3
 8002256:	fba0 0101 	umull	r0, r1, r0, r1
 800225a:	f7fd ffd3 	bl	8000204 <__aeabi_uldivmod>
 800225e:	2164      	movs	r1, #100	; 0x64
 8002260:	fbb0 f4f1 	udiv	r4, r0, r1
 8002264:	fb01 0314 	mls	r3, r1, r4, r0
 8002268:	00db      	lsls	r3, r3, #3
 800226a:	3332      	adds	r3, #50	; 0x32
 800226c:	fbb3 f3f1 	udiv	r3, r3, r1
 8002270:	f003 0207 	and.w	r2, r3, #7
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 800227a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800227e:	4413      	add	r3, r2
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002280:	60ab      	str	r3, [r5, #8]
 8002282:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 8002284:	f7fe ff60 	bl	8001148 <HAL_RCC_GetPCLK1Freq>
 8002288:	e7dd      	b.n	8002246 <UART_SetConfig+0x52>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800228a:	4293      	cmp	r3, r2
 800228c:	d002      	beq.n	8002294 <UART_SetConfig+0xa0>
 800228e:	4a0f      	ldr	r2, [pc, #60]	; (80022cc <UART_SetConfig+0xd8>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d116      	bne.n	80022c2 <UART_SetConfig+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002294:	f7fe ff68 	bl	8001168 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002298:	6863      	ldr	r3, [r4, #4]
 800229a:	6825      	ldr	r5, [r4, #0]
 800229c:	2119      	movs	r1, #25
 800229e:	009a      	lsls	r2, r3, #2
 80022a0:	fba0 0101 	umull	r0, r1, r0, r1
 80022a4:	0f9b      	lsrs	r3, r3, #30
 80022a6:	f7fd ffad 	bl	8000204 <__aeabi_uldivmod>
 80022aa:	2264      	movs	r2, #100	; 0x64
 80022ac:	fbb0 f1f2 	udiv	r1, r0, r2
 80022b0:	fb02 0311 	mls	r3, r2, r1, r0
 80022b4:	011b      	lsls	r3, r3, #4
 80022b6:	3332      	adds	r3, #50	; 0x32
 80022b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80022bc:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80022c0:	e7de      	b.n	8002280 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK1Freq();
 80022c2:	f7fe ff41 	bl	8001148 <HAL_RCC_GetPCLK1Freq>
 80022c6:	e7e7      	b.n	8002298 <UART_SetConfig+0xa4>
 80022c8:	40011000 	.word	0x40011000
 80022cc:	40011400 	.word	0x40011400

080022d0 <HAL_UART_Init>:
{
 80022d0:	b510      	push	{r4, lr}
  if (huart == NULL)
 80022d2:	4604      	mov	r4, r0
 80022d4:	b340      	cbz	r0, 8002328 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80022d6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80022da:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80022de:	b91b      	cbnz	r3, 80022e8 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80022e0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80022e4:	f001 f9d8 	bl	8003698 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80022e8:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80022ea:	2324      	movs	r3, #36	; 0x24
 80022ec:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80022f0:	68d3      	ldr	r3, [r2, #12]
 80022f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80022f6:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80022f8:	4620      	mov	r0, r4
 80022fa:	f7ff ff7b 	bl	80021f4 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022fe:	6823      	ldr	r3, [r4, #0]
 8002300:	691a      	ldr	r2, [r3, #16]
 8002302:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002306:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002308:	695a      	ldr	r2, [r3, #20]
 800230a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800230e:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8002310:	68da      	ldr	r2, [r3, #12]
 8002312:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002316:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002318:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800231a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800231c:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800231e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002322:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8002326:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002328:	2001      	movs	r0, #1
}
 800232a:	bd10      	pop	{r4, pc}

0800232c <HAL_UART_Transmit_DMA>:
{
 800232c:	b538      	push	{r3, r4, r5, lr}
 800232e:	4604      	mov	r4, r0
 8002330:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8002332:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8002336:	2a20      	cmp	r2, #32
 8002338:	d12a      	bne.n	8002390 <HAL_UART_Transmit_DMA+0x64>
    if ((pData == NULL) || (Size == 0U))
 800233a:	b339      	cbz	r1, 800238c <HAL_UART_Transmit_DMA+0x60>
 800233c:	b333      	cbz	r3, 800238c <HAL_UART_Transmit_DMA+0x60>
    __HAL_LOCK(huart);
 800233e:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8002342:	2a01      	cmp	r2, #1
 8002344:	d024      	beq.n	8002390 <HAL_UART_Transmit_DMA+0x64>
 8002346:	2201      	movs	r2, #1
 8002348:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800234c:	6b20      	ldr	r0, [r4, #48]	; 0x30
    huart->TxXferCount = Size;
 800234e:	84e3      	strh	r3, [r4, #38]	; 0x26
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002350:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002352:	2221      	movs	r2, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002354:	63e5      	str	r5, [r4, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002356:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800235a:	4a0e      	ldr	r2, [pc, #56]	; (8002394 <HAL_UART_Transmit_DMA+0x68>)
    huart->TxXferSize = Size;
 800235c:	84a3      	strh	r3, [r4, #36]	; 0x24
    huart->pTxBuffPtr = pData;
 800235e:	6221      	str	r1, [r4, #32]
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002360:	63c2      	str	r2, [r0, #60]	; 0x3c
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002362:	4a0d      	ldr	r2, [pc, #52]	; (8002398 <HAL_UART_Transmit_DMA+0x6c>)
 8002364:	6402      	str	r2, [r0, #64]	; 0x40
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002366:	4a0d      	ldr	r2, [pc, #52]	; (800239c <HAL_UART_Transmit_DMA+0x70>)
 8002368:	64c2      	str	r2, [r0, #76]	; 0x4c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800236a:	6822      	ldr	r2, [r4, #0]
    huart->hdmatx->XferAbortCallback = NULL;
 800236c:	6505      	str	r5, [r0, #80]	; 0x50
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800236e:	3204      	adds	r2, #4
 8002370:	f7fe fb7a 	bl	8000a68 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8002374:	6823      	ldr	r3, [r4, #0]
 8002376:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800237a:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800237c:	695a      	ldr	r2, [r3, #20]
    __HAL_UNLOCK(huart);
 800237e:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002382:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002386:	615a      	str	r2, [r3, #20]
    return HAL_OK;
 8002388:	4628      	mov	r0, r5
 800238a:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 800238c:	2001      	movs	r0, #1
 800238e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_BUSY;
 8002390:	2002      	movs	r0, #2
}
 8002392:	bd38      	pop	{r3, r4, r5, pc}
 8002394:	08002431 	.word	0x08002431
 8002398:	0800245f 	.word	0x0800245f
 800239c:	0800252b 	.word	0x0800252b

080023a0 <HAL_UART_Receive_DMA>:
{
 80023a0:	4613      	mov	r3, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 80023a2:	f890 203a 	ldrb.w	r2, [r0, #58]	; 0x3a
 80023a6:	2a20      	cmp	r2, #32
{
 80023a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80023aa:	4605      	mov	r5, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 80023ac:	d138      	bne.n	8002420 <HAL_UART_Receive_DMA+0x80>
    if ((pData == NULL) || (Size == 0U))
 80023ae:	2900      	cmp	r1, #0
 80023b0:	d034      	beq.n	800241c <HAL_UART_Receive_DMA+0x7c>
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d032      	beq.n	800241c <HAL_UART_Receive_DMA+0x7c>
    __HAL_LOCK(huart);
 80023b6:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 80023ba:	2a01      	cmp	r2, #1
 80023bc:	d030      	beq.n	8002420 <HAL_UART_Receive_DMA+0x80>
 80023be:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023c0:	2400      	movs	r4, #0
    __HAL_LOCK(huart);
 80023c2:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80023c6:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023c8:	63c4      	str	r4, [r0, #60]	; 0x3c
    huart->pRxBuffPtr = pData;
 80023ca:	6281      	str	r1, [r0, #40]	; 0x28
    huart->RxXferSize = Size;
 80023cc:	8583      	strh	r3, [r0, #44]	; 0x2c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80023ce:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80023d2:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80023d4:	4a13      	ldr	r2, [pc, #76]	; (8002424 <HAL_UART_Receive_DMA+0x84>)
 80023d6:	63c2      	str	r2, [r0, #60]	; 0x3c
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80023d8:	682e      	ldr	r6, [r5, #0]
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80023da:	4a13      	ldr	r2, [pc, #76]	; (8002428 <HAL_UART_Receive_DMA+0x88>)
 80023dc:	6402      	str	r2, [r0, #64]	; 0x40
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80023de:	4a13      	ldr	r2, [pc, #76]	; (800242c <HAL_UART_Receive_DMA+0x8c>)
 80023e0:	64c2      	str	r2, [r0, #76]	; 0x4c
    huart->hdmarx->XferAbortCallback = NULL;
 80023e2:	6504      	str	r4, [r0, #80]	; 0x50
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80023e4:	460a      	mov	r2, r1
 80023e6:	1d31      	adds	r1, r6, #4
 80023e8:	f7fe fb3e 	bl	8000a68 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_OREFLAG(huart);
 80023ec:	682b      	ldr	r3, [r5, #0]
 80023ee:	9401      	str	r4, [sp, #4]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	9201      	str	r2, [sp, #4]
 80023f4:	685a      	ldr	r2, [r3, #4]
 80023f6:	9201      	str	r2, [sp, #4]
 80023f8:	9a01      	ldr	r2, [sp, #4]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80023fa:	68da      	ldr	r2, [r3, #12]
    __HAL_UNLOCK(huart);
 80023fc:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002400:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002404:	60da      	str	r2, [r3, #12]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002406:	695a      	ldr	r2, [r3, #20]
 8002408:	f042 0201 	orr.w	r2, r2, #1
 800240c:	615a      	str	r2, [r3, #20]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800240e:	695a      	ldr	r2, [r3, #20]
 8002410:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002414:	615a      	str	r2, [r3, #20]
    return HAL_OK;
 8002416:	4620      	mov	r0, r4
}
 8002418:	b002      	add	sp, #8
 800241a:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800241c:	2001      	movs	r0, #1
 800241e:	e7fb      	b.n	8002418 <HAL_UART_Receive_DMA+0x78>
    return HAL_BUSY;
 8002420:	2002      	movs	r0, #2
 8002422:	e7f9      	b.n	8002418 <HAL_UART_Receive_DMA+0x78>
 8002424:	0800246b 	.word	0x0800246b
 8002428:	08002521 	.word	0x08002521
 800242c:	0800252b 	.word	0x0800252b

08002430 <UART_DMATransmitCplt>:
{
 8002430:	b508      	push	{r3, lr}
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002432:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002434:	6b82      	ldr	r2, [r0, #56]	; 0x38
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 800243c:	d10a      	bne.n	8002454 <UART_DMATransmitCplt+0x24>
    huart->TxXferCount = 0x00U;
 800243e:	84d3      	strh	r3, [r2, #38]	; 0x26
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002440:	6813      	ldr	r3, [r2, #0]
 8002442:	695a      	ldr	r2, [r3, #20]
 8002444:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002448:	615a      	str	r2, [r3, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800244a:	68da      	ldr	r2, [r3, #12]
 800244c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002450:	60da      	str	r2, [r3, #12]
 8002452:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8002454:	4610      	mov	r0, r2
 8002456:	f000 fdf5 	bl	8003044 <HAL_UART_TxCpltCallback>
 800245a:	bd08      	pop	{r3, pc}

0800245c <HAL_UART_TxHalfCpltCallback>:
 800245c:	4770      	bx	lr

0800245e <UART_DMATxHalfCplt>:
{
 800245e:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8002460:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8002462:	f7ff fffb 	bl	800245c <HAL_UART_TxHalfCpltCallback>
 8002466:	bd08      	pop	{r3, pc}

08002468 <HAL_UART_RxCpltCallback>:
 8002468:	4770      	bx	lr

0800246a <UART_DMAReceiveCplt>:
{
 800246a:	b508      	push	{r3, lr}
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800246c:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800246e:	6b82      	ldr	r2, [r0, #56]	; 0x38
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8002476:	d110      	bne.n	800249a <UART_DMAReceiveCplt+0x30>
    huart->RxXferCount = 0U;
 8002478:	85d3      	strh	r3, [r2, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800247a:	6813      	ldr	r3, [r2, #0]
 800247c:	68d9      	ldr	r1, [r3, #12]
 800247e:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8002482:	60d9      	str	r1, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002484:	6959      	ldr	r1, [r3, #20]
 8002486:	f021 0101 	bic.w	r1, r1, #1
 800248a:	6159      	str	r1, [r3, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800248c:	6959      	ldr	r1, [r3, #20]
 800248e:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8002492:	6159      	str	r1, [r3, #20]
    huart->RxState = HAL_UART_STATE_READY;
 8002494:	2320      	movs	r3, #32
 8002496:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
  HAL_UART_RxCpltCallback(huart);
 800249a:	4610      	mov	r0, r2
 800249c:	f7ff ffe4 	bl	8002468 <HAL_UART_RxCpltCallback>
 80024a0:	bd08      	pop	{r3, pc}

080024a2 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80024a2:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80024a6:	2b22      	cmp	r3, #34	; 0x22
{
 80024a8:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80024aa:	d136      	bne.n	800251a <UART_Receive_IT+0x78>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80024ac:	6883      	ldr	r3, [r0, #8]
 80024ae:	6901      	ldr	r1, [r0, #16]
 80024b0:	6802      	ldr	r2, [r0, #0]
 80024b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024b6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80024b8:	d123      	bne.n	8002502 <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80024ba:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80024bc:	b9e9      	cbnz	r1, 80024fa <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80024be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80024c2:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 80024c6:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 80024c8:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 80024ca:	3c01      	subs	r4, #1
 80024cc:	b2a4      	uxth	r4, r4
 80024ce:	85c4      	strh	r4, [r0, #46]	; 0x2e
 80024d0:	b98c      	cbnz	r4, 80024f6 <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80024d2:	6803      	ldr	r3, [r0, #0]
 80024d4:	68da      	ldr	r2, [r3, #12]
 80024d6:	f022 0220 	bic.w	r2, r2, #32
 80024da:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80024dc:	68da      	ldr	r2, [r3, #12]
 80024de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80024e2:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80024e4:	695a      	ldr	r2, [r3, #20]
 80024e6:	f022 0201 	bic.w	r2, r2, #1
 80024ea:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80024ec:	2320      	movs	r3, #32
 80024ee:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 80024f2:	f7ff ffb9 	bl	8002468 <HAL_UART_RxCpltCallback>
    if (--huart->RxXferCount == 0U)
 80024f6:	2000      	movs	r0, #0
}
 80024f8:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80024fa:	b2d2      	uxtb	r2, r2
 80024fc:	f823 2b01 	strh.w	r2, [r3], #1
 8002500:	e7e1      	b.n	80024c6 <UART_Receive_IT+0x24>
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002502:	b921      	cbnz	r1, 800250e <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002504:	1c59      	adds	r1, r3, #1
 8002506:	6852      	ldr	r2, [r2, #4]
 8002508:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800250a:	701a      	strb	r2, [r3, #0]
 800250c:	e7dc      	b.n	80024c8 <UART_Receive_IT+0x26>
 800250e:	6852      	ldr	r2, [r2, #4]
 8002510:	1c59      	adds	r1, r3, #1
 8002512:	6281      	str	r1, [r0, #40]	; 0x28
 8002514:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002518:	e7f7      	b.n	800250a <UART_Receive_IT+0x68>
    return HAL_BUSY;
 800251a:	2002      	movs	r0, #2
 800251c:	bd10      	pop	{r4, pc}

0800251e <HAL_UART_RxHalfCpltCallback>:
 800251e:	4770      	bx	lr

08002520 <UART_DMARxHalfCplt>:
{
 8002520:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart);
 8002522:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8002524:	f7ff fffb 	bl	800251e <HAL_UART_RxHalfCpltCallback>
 8002528:	bd08      	pop	{r3, pc}

0800252a <UART_DMAError>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800252a:	6b81      	ldr	r1, [r0, #56]	; 0x38
{
 800252c:	b508      	push	{r3, lr}
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800252e:	680b      	ldr	r3, [r1, #0]
 8002530:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002532:	f891 0039 	ldrb.w	r0, [r1, #57]	; 0x39
 8002536:	2821      	cmp	r0, #33	; 0x21
 8002538:	d10a      	bne.n	8002550 <UART_DMAError+0x26>
 800253a:	0612      	lsls	r2, r2, #24
 800253c:	d508      	bpl.n	8002550 <UART_DMAError+0x26>
    huart->TxXferCount = 0x00U;
 800253e:	2200      	movs	r2, #0
 8002540:	84ca      	strh	r2, [r1, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002542:	68da      	ldr	r2, [r3, #12]
 8002544:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002548:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800254a:	2220      	movs	r2, #32
 800254c:	f881 2039 	strb.w	r2, [r1, #57]	; 0x39
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002550:	695b      	ldr	r3, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002552:	f891 203a 	ldrb.w	r2, [r1, #58]	; 0x3a
 8002556:	2a22      	cmp	r2, #34	; 0x22
 8002558:	d106      	bne.n	8002568 <UART_DMAError+0x3e>
 800255a:	065b      	lsls	r3, r3, #25
 800255c:	d504      	bpl.n	8002568 <UART_DMAError+0x3e>
    huart->RxXferCount = 0x00U;
 800255e:	2300      	movs	r3, #0
 8002560:	85cb      	strh	r3, [r1, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002562:	4608      	mov	r0, r1
 8002564:	f7ff fe38 	bl	80021d8 <UART_EndRxTransfer>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002568:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800256a:	f043 0310 	orr.w	r3, r3, #16
 800256e:	63cb      	str	r3, [r1, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8002570:	4608      	mov	r0, r1
 8002572:	f000 fd15 	bl	8002fa0 <HAL_UART_ErrorCallback>
 8002576:	bd08      	pop	{r3, pc}

08002578 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002578:	6803      	ldr	r3, [r0, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800257c:	68d9      	ldr	r1, [r3, #12]
{
 800257e:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 8002580:	0716      	lsls	r6, r2, #28
{
 8002582:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002584:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8002586:	d107      	bne.n	8002598 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002588:	0696      	lsls	r6, r2, #26
 800258a:	d55c      	bpl.n	8002646 <HAL_UART_IRQHandler+0xce>
 800258c:	068d      	lsls	r5, r1, #26
 800258e:	d55a      	bpl.n	8002646 <HAL_UART_IRQHandler+0xce>
}
 8002590:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8002594:	f7ff bf85 	b.w	80024a2 <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002598:	f015 0501 	ands.w	r5, r5, #1
 800259c:	d102      	bne.n	80025a4 <HAL_UART_IRQHandler+0x2c>
 800259e:	f411 7f90 	tst.w	r1, #288	; 0x120
 80025a2:	d050      	beq.n	8002646 <HAL_UART_IRQHandler+0xce>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80025a4:	07d0      	lsls	r0, r2, #31
 80025a6:	d505      	bpl.n	80025b4 <HAL_UART_IRQHandler+0x3c>
 80025a8:	05cb      	lsls	r3, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80025aa:	bf42      	ittt	mi
 80025ac:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 80025ae:	f043 0301 	orrmi.w	r3, r3, #1
 80025b2:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80025b4:	0756      	lsls	r6, r2, #29
 80025b6:	d504      	bpl.n	80025c2 <HAL_UART_IRQHandler+0x4a>
 80025b8:	b11d      	cbz	r5, 80025c2 <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80025ba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80025bc:	f043 0302 	orr.w	r3, r3, #2
 80025c0:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80025c2:	0790      	lsls	r0, r2, #30
 80025c4:	d504      	bpl.n	80025d0 <HAL_UART_IRQHandler+0x58>
 80025c6:	b11d      	cbz	r5, 80025d0 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80025c8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80025ca:	f043 0304 	orr.w	r3, r3, #4
 80025ce:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80025d0:	0713      	lsls	r3, r2, #28
 80025d2:	d506      	bpl.n	80025e2 <HAL_UART_IRQHandler+0x6a>
 80025d4:	068e      	lsls	r6, r1, #26
 80025d6:	d400      	bmi.n	80025da <HAL_UART_IRQHandler+0x62>
 80025d8:	b11d      	cbz	r5, 80025e2 <HAL_UART_IRQHandler+0x6a>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80025da:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80025dc:	f043 0308 	orr.w	r3, r3, #8
 80025e0:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80025e2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d066      	beq.n	80026b6 <HAL_UART_IRQHandler+0x13e>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80025e8:	0695      	lsls	r5, r2, #26
 80025ea:	d504      	bpl.n	80025f6 <HAL_UART_IRQHandler+0x7e>
 80025ec:	0688      	lsls	r0, r1, #26
 80025ee:	d502      	bpl.n	80025f6 <HAL_UART_IRQHandler+0x7e>
        UART_Receive_IT(huart);
 80025f0:	4620      	mov	r0, r4
 80025f2:	f7ff ff56 	bl	80024a2 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80025f6:	6823      	ldr	r3, [r4, #0]
 80025f8:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80025fa:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80025fc:	0711      	lsls	r1, r2, #28
        UART_EndRxTransfer(huart);
 80025fe:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002600:	d402      	bmi.n	8002608 <HAL_UART_IRQHandler+0x90>
 8002602:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8002606:	d01a      	beq.n	800263e <HAL_UART_IRQHandler+0xc6>
        UART_EndRxTransfer(huart);
 8002608:	f7ff fde6 	bl	80021d8 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800260c:	6823      	ldr	r3, [r4, #0]
 800260e:	695a      	ldr	r2, [r3, #20]
 8002610:	0652      	lsls	r2, r2, #25
 8002612:	d510      	bpl.n	8002636 <HAL_UART_IRQHandler+0xbe>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002614:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8002616:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002618:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800261c:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 800261e:	b150      	cbz	r0, 8002636 <HAL_UART_IRQHandler+0xbe>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002620:	4b25      	ldr	r3, [pc, #148]	; (80026b8 <HAL_UART_IRQHandler+0x140>)
 8002622:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002624:	f7fe fa5a 	bl	8000adc <HAL_DMA_Abort_IT>
 8002628:	2800      	cmp	r0, #0
 800262a:	d044      	beq.n	80026b6 <HAL_UART_IRQHandler+0x13e>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800262c:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 800262e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002632:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002634:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8002636:	4620      	mov	r0, r4
 8002638:	f000 fcb2 	bl	8002fa0 <HAL_UART_ErrorCallback>
 800263c:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 800263e:	f000 fcaf 	bl	8002fa0 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002642:	63e5      	str	r5, [r4, #60]	; 0x3c
 8002644:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002646:	0616      	lsls	r6, r2, #24
 8002648:	d527      	bpl.n	800269a <HAL_UART_IRQHandler+0x122>
 800264a:	060d      	lsls	r5, r1, #24
 800264c:	d525      	bpl.n	800269a <HAL_UART_IRQHandler+0x122>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800264e:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8002652:	2a21      	cmp	r2, #33	; 0x21
 8002654:	d12f      	bne.n	80026b6 <HAL_UART_IRQHandler+0x13e>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002656:	68a2      	ldr	r2, [r4, #8]
 8002658:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800265c:	6a22      	ldr	r2, [r4, #32]
 800265e:	d117      	bne.n	8002690 <HAL_UART_IRQHandler+0x118>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002660:	8811      	ldrh	r1, [r2, #0]
 8002662:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8002666:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002668:	6921      	ldr	r1, [r4, #16]
 800266a:	b979      	cbnz	r1, 800268c <HAL_UART_IRQHandler+0x114>
        huart->pTxBuffPtr += 2U;
 800266c:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 800266e:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 8002670:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8002672:	3a01      	subs	r2, #1
 8002674:	b292      	uxth	r2, r2
 8002676:	84e2      	strh	r2, [r4, #38]	; 0x26
 8002678:	b9ea      	cbnz	r2, 80026b6 <HAL_UART_IRQHandler+0x13e>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800267a:	68da      	ldr	r2, [r3, #12]
 800267c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002680:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002682:	68da      	ldr	r2, [r3, #12]
 8002684:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002688:	60da      	str	r2, [r3, #12]
 800268a:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 800268c:	3201      	adds	r2, #1
 800268e:	e7ee      	b.n	800266e <HAL_UART_IRQHandler+0xf6>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002690:	1c51      	adds	r1, r2, #1
 8002692:	6221      	str	r1, [r4, #32]
 8002694:	7812      	ldrb	r2, [r2, #0]
 8002696:	605a      	str	r2, [r3, #4]
 8002698:	e7ea      	b.n	8002670 <HAL_UART_IRQHandler+0xf8>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800269a:	0650      	lsls	r0, r2, #25
 800269c:	d50b      	bpl.n	80026b6 <HAL_UART_IRQHandler+0x13e>
 800269e:	064a      	lsls	r2, r1, #25
 80026a0:	d509      	bpl.n	80026b6 <HAL_UART_IRQHandler+0x13e>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80026a2:	68da      	ldr	r2, [r3, #12]
 80026a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026a8:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80026aa:	2320      	movs	r3, #32
 80026ac:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 80026b0:	4620      	mov	r0, r4
 80026b2:	f000 fcc7 	bl	8003044 <HAL_UART_TxCpltCallback>
 80026b6:	bd70      	pop	{r4, r5, r6, pc}
 80026b8:	080026bd 	.word	0x080026bd

080026bc <UART_DMAAbortOnError>:
{
 80026bc:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026be:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 80026c0:	2300      	movs	r3, #0
 80026c2:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80026c4:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80026c6:	f000 fc6b 	bl	8002fa0 <HAL_UART_ErrorCallback>
 80026ca:	bd08      	pop	{r3, pc}

080026cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026cc:	b530      	push	{r4, r5, lr}
 80026ce:	b0ad      	sub	sp, #180	; 0xb4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026d0:	2234      	movs	r2, #52	; 0x34
 80026d2:	2100      	movs	r1, #0
 80026d4:	a808      	add	r0, sp, #32
 80026d6:	f001 f9cd 	bl	8003a74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026da:	2214      	movs	r2, #20
 80026dc:	2100      	movs	r1, #0
 80026de:	a803      	add	r0, sp, #12
 80026e0:	f001 f9c8 	bl	8003a74 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026e4:	2100      	movs	r1, #0
 80026e6:	225c      	movs	r2, #92	; 0x5c
 80026e8:	a815      	add	r0, sp, #84	; 0x54
 80026ea:	f001 f9c3 	bl	8003a74 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80026ee:	2400      	movs	r4, #0
 80026f0:	4b21      	ldr	r3, [pc, #132]	; (8002778 <SystemClock_Config+0xac>)
 80026f2:	9401      	str	r4, [sp, #4]
 80026f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026f6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80026fa:	641a      	str	r2, [r3, #64]	; 0x40
 80026fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002702:	9301      	str	r3, [sp, #4]
 8002704:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002706:	4b1d      	ldr	r3, [pc, #116]	; (800277c <SystemClock_Config+0xb0>)
 8002708:	9402      	str	r4, [sp, #8]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002710:	601a      	str	r2, [r3, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 8002714:	940a      	str	r4, [sp, #40]	; 0x28
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002716:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800271a:	9302      	str	r3, [sp, #8]
 800271c:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800271e:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8002720:	230a      	movs	r3, #10
 8002722:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002724:	2301      	movs	r3, #1
 8002726:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002728:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 8;
 800272a:	2308      	movs	r3, #8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800272c:	2210      	movs	r2, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800272e:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002730:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002732:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLN = 180;
 8002734:	23b4      	movs	r3, #180	; 0xb4
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002736:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLN = 180;
 8002738:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800273a:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800273c:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800273e:	9513      	str	r5, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002740:	9514      	str	r5, [sp, #80]	; 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002742:	f7fe ff71 	bl	8001628 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002746:	f7fe fc27 	bl	8000f98 <HAL_PWREx_EnableOverDrive>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800274a:	230f      	movs	r3, #15
 800274c:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800274e:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002750:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002754:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002756:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002758:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800275a:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800275c:	9405      	str	r4, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800275e:	f7fe fc57 	bl	8001010 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002762:	2320      	movs	r3, #32
 8002764:	9315      	str	r3, [sp, #84]	; 0x54
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002766:	a815      	add	r0, sp, #84	; 0x54
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002768:	f44f 7300 	mov.w	r3, #512	; 0x200
 800276c:	9325      	str	r3, [sp, #148]	; 0x94
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800276e:	f7fe fd0b 	bl	8001188 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8002772:	b02d      	add	sp, #180	; 0xb4
 8002774:	bd30      	pop	{r4, r5, pc}
 8002776:	bf00      	nop
 8002778:	40023800 	.word	0x40023800
 800277c:	40007000 	.word	0x40007000

08002780 <main>:
{
 8002780:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8002784:	f5ad 5d23 	sub.w	sp, sp, #10432	; 0x28c0
 8002788:	b08b      	sub	sp, #44	; 0x2c
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800278a:	2400      	movs	r4, #0
 800278c:	4db5      	ldr	r5, [pc, #724]	; (8002a64 <main+0x2e4>)
  htim2.Instance = TIM2;
 800278e:	f8df 831c 	ldr.w	r8, [pc, #796]	; 8002aac <main+0x32c>
  htim3.Instance = TIM3;
 8002792:	4fb5      	ldr	r7, [pc, #724]	; (8002a68 <main+0x2e8>)
  HAL_Init();
 8002794:	f7fd fee2 	bl	800055c <HAL_Init>
  SystemClock_Config();
 8002798:	f7ff ff98 	bl	80026cc <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800279c:	2214      	movs	r2, #20
 800279e:	2100      	movs	r1, #0
 80027a0:	a815      	add	r0, sp, #84	; 0x54
 80027a2:	f001 f967 	bl	8003a74 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80027a6:	9403      	str	r4, [sp, #12]
 80027a8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 80027aa:	48b0      	ldr	r0, [pc, #704]	; (8002a6c <main+0x2ec>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80027ac:	f043 0304 	orr.w	r3, r3, #4
 80027b0:	632b      	str	r3, [r5, #48]	; 0x30
 80027b2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80027b4:	f003 0304 	and.w	r3, r3, #4
 80027b8:	9303      	str	r3, [sp, #12]
 80027ba:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80027bc:	9404      	str	r4, [sp, #16]
 80027be:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80027c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027c4:	632b      	str	r3, [r5, #48]	; 0x30
 80027c6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80027c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027cc:	9304      	str	r3, [sp, #16]
 80027ce:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027d0:	9405      	str	r4, [sp, #20]
 80027d2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80027d4:	f043 0301 	orr.w	r3, r3, #1
 80027d8:	632b      	str	r3, [r5, #48]	; 0x30
 80027da:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80027dc:	f003 0301 	and.w	r3, r3, #1
 80027e0:	9305      	str	r3, [sp, #20]
 80027e2:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027e4:	9406      	str	r4, [sp, #24]
 80027e6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80027e8:	f043 0302 	orr.w	r3, r3, #2
 80027ec:	632b      	str	r3, [r5, #48]	; 0x30
 80027ee:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80027f0:	f003 0302 	and.w	r3, r3, #2
 80027f4:	9306      	str	r3, [sp, #24]
 80027f6:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80027f8:	9407      	str	r4, [sp, #28]
 80027fa:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80027fc:	f043 0308 	orr.w	r3, r3, #8
 8002800:	632b      	str	r3, [r5, #48]	; 0x30
 8002802:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002804:	f003 0308 	and.w	r3, r3, #8
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8002808:	4622      	mov	r2, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800280a:	9307      	str	r3, [sp, #28]
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 800280c:	2101      	movs	r1, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800280e:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8002810:	f7fe fb0a 	bl	8000e28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, IO_OUT_1_Pin|IO_OUT_2_Pin, GPIO_PIN_RESET);
 8002814:	4622      	mov	r2, r4
 8002816:	2109      	movs	r1, #9
 8002818:	4895      	ldr	r0, [pc, #596]	; (8002a70 <main+0x2f0>)
 800281a:	f7fe fb05 	bl	8000e28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 800281e:	4622      	mov	r2, r4
 8002820:	f241 0110 	movw	r1, #4112	; 0x1010
 8002824:	4893      	ldr	r0, [pc, #588]	; (8002a74 <main+0x2f4>)
 8002826:	f7fe faff 	bl	8000e28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USR_BUTT_Pin */
  GPIO_InitStruct.Pin = USR_BUTT_Pin;
 800282a:	f44f 5b00 	mov.w	fp, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USR_BUTT_GPIO_Port, &GPIO_InitStruct);
 800282e:	a915      	add	r1, sp, #84	; 0x54
 8002830:	488f      	ldr	r0, [pc, #572]	; (8002a70 <main+0x2f0>)
  GPIO_InitStruct.Pin = USR_BUTT_Pin;
 8002832:	f8cd b054 	str.w	fp, [sp, #84]	; 0x54

  /*Configure GPIO pin : LED4_Pin */
  GPIO_InitStruct.Pin = LED4_Pin;
 8002836:	2601      	movs	r6, #1
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002838:	9416      	str	r4, [sp, #88]	; 0x58
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800283a:	9417      	str	r4, [sp, #92]	; 0x5c
  HAL_GPIO_Init(USR_BUTT_GPIO_Port, &GPIO_InitStruct);
 800283c:	f7fe fa1a 	bl	8000c74 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 8002840:	a915      	add	r1, sp, #84	; 0x54
 8002842:	488a      	ldr	r0, [pc, #552]	; (8002a6c <main+0x2ec>)
  GPIO_InitStruct.Pin = LED4_Pin;
 8002844:	9615      	str	r6, [sp, #84]	; 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002846:	9616      	str	r6, [sp, #88]	; 0x58
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002848:	9417      	str	r4, [sp, #92]	; 0x5c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800284a:	9418      	str	r4, [sp, #96]	; 0x60
  HAL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 800284c:	f7fe fa12 	bl	8000c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : IO_IN_2_Pin */
  GPIO_InitStruct.Pin = IO_IN_2_Pin;
 8002850:	2302      	movs	r3, #2
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(IO_IN_2_GPIO_Port, &GPIO_InitStruct);
 8002852:	a915      	add	r1, sp, #84	; 0x54
 8002854:	4885      	ldr	r0, [pc, #532]	; (8002a6c <main+0x2ec>)
  GPIO_InitStruct.Pin = IO_IN_2_Pin;
 8002856:	9315      	str	r3, [sp, #84]	; 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002858:	9416      	str	r4, [sp, #88]	; 0x58
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285a:	9417      	str	r4, [sp, #92]	; 0x5c
  HAL_GPIO_Init(IO_IN_2_GPIO_Port, &GPIO_InitStruct);
 800285c:	f7fe fa0a 	bl	8000c74 <HAL_GPIO_Init>

  /*Configure GPIO pins : IO_OUT_1_Pin IO_OUT_2_Pin */
  GPIO_InitStruct.Pin = IO_OUT_1_Pin|IO_OUT_2_Pin;
 8002860:	2309      	movs	r3, #9
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002862:	a915      	add	r1, sp, #84	; 0x54
 8002864:	4882      	ldr	r0, [pc, #520]	; (8002a70 <main+0x2f0>)
  GPIO_InitStruct.Pin = IO_OUT_1_Pin|IO_OUT_2_Pin;
 8002866:	9315      	str	r3, [sp, #84]	; 0x54

  /*Configure GPIO pin : ADC_IN_Pin */
  GPIO_InitStruct.Pin = ADC_IN_Pin;
 8002868:	f04f 0910 	mov.w	r9, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800286c:	9616      	str	r6, [sp, #88]	; 0x58
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286e:	9417      	str	r4, [sp, #92]	; 0x5c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002870:	9418      	str	r4, [sp, #96]	; 0x60
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002872:	f7fe f9ff 	bl	8000c74 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002876:	2303      	movs	r3, #3
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(ADC_IN_GPIO_Port, &GPIO_InitStruct);
 8002878:	a915      	add	r1, sp, #84	; 0x54
 800287a:	487f      	ldr	r0, [pc, #508]	; (8002a78 <main+0x2f8>)
  GPIO_InitStruct.Pin = ADC_IN_Pin;
 800287c:	f8cd 9054 	str.w	r9, [sp, #84]	; 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002880:	9316      	str	r3, [sp, #88]	; 0x58
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002882:	9417      	str	r4, [sp, #92]	; 0x5c
  HAL_GPIO_Init(ADC_IN_GPIO_Port, &GPIO_InitStruct);
 8002884:	f7fe f9f6 	bl	8000c74 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 8002888:	f241 0310 	movw	r3, #4112	; 0x1010
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800288c:	a915      	add	r1, sp, #84	; 0x54
 800288e:	4879      	ldr	r0, [pc, #484]	; (8002a74 <main+0x2f4>)
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 8002890:	9315      	str	r3, [sp, #84]	; 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002892:	9616      	str	r6, [sp, #88]	; 0x58
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002894:	9417      	str	r4, [sp, #92]	; 0x5c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002896:	9418      	str	r4, [sp, #96]	; 0x60
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002898:	f7fe f9ec 	bl	8000c74 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800289c:	9402      	str	r4, [sp, #8]
 800289e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80028a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80028a4:	632b      	str	r3, [r5, #48]	; 0x30
 80028a6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  hadc1.Instance = ADC1;
 80028a8:	4d74      	ldr	r5, [pc, #464]	; (8002a7c <main+0x2fc>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 80028aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80028ae:	4622      	mov	r2, r4
 80028b0:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 80028b2:	9302      	str	r3, [sp, #8]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80028b4:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 80028b6:	9b02      	ldr	r3, [sp, #8]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80028b8:	f7fd ffea 	bl	8000890 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80028bc:	200b      	movs	r0, #11
 80028be:	f7fe f81b 	bl	80008f8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80028c2:	4622      	mov	r2, r4
 80028c4:	4621      	mov	r1, r4
 80028c6:	200d      	movs	r0, #13
 80028c8:	f7fd ffe2 	bl	8000890 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80028cc:	200d      	movs	r0, #13
 80028ce:	f7fe f813 	bl	80008f8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80028d2:	4622      	mov	r2, r4
 80028d4:	4621      	mov	r1, r4
 80028d6:	200e      	movs	r0, #14
 80028d8:	f7fd ffda 	bl	8000890 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80028dc:	200e      	movs	r0, #14
 80028de:	f7fe f80b 	bl	80008f8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80028e2:	4622      	mov	r2, r4
 80028e4:	4621      	mov	r1, r4
 80028e6:	200f      	movs	r0, #15
 80028e8:	f7fd ffd2 	bl	8000890 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80028ec:	200f      	movs	r0, #15
 80028ee:	f7fe f803 	bl	80008f8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80028f2:	4622      	mov	r2, r4
 80028f4:	4621      	mov	r1, r4
 80028f6:	4648      	mov	r0, r9
 80028f8:	f7fd ffca 	bl	8000890 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80028fc:	4648      	mov	r0, r9
 80028fe:	f7fd fffb 	bl	80008f8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002902:	4622      	mov	r2, r4
 8002904:	4621      	mov	r1, r4
 8002906:	2011      	movs	r0, #17
 8002908:	f7fd ffc2 	bl	8000890 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800290c:	2011      	movs	r0, #17
 800290e:	f7fd fff3 	bl	80008f8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8002912:	4622      	mov	r2, r4
 8002914:	4621      	mov	r1, r4
 8002916:	202f      	movs	r0, #47	; 0x2f
 8002918:	f7fd ffba 	bl	8000890 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 800291c:	202f      	movs	r0, #47	; 0x2f
 800291e:	f7fd ffeb 	bl	80008f8 <HAL_NVIC_EnableIRQ>
  ADC_ChannelConfTypeDef sConfig = {0};
 8002922:	464a      	mov	r2, r9
 8002924:	4621      	mov	r1, r4
 8002926:	a815      	add	r0, sp, #84	; 0x54
 8002928:	f001 f8a4 	bl	8003a74 <memset>
  hadc1.Instance = ADC1;
 800292c:	4b54      	ldr	r3, [pc, #336]	; (8002a80 <main+0x300>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800292e:	60ac      	str	r4, [r5, #8]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002930:	e885 0018 	stmia.w	r5, {r3, r4}
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002934:	4628      	mov	r0, r5
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002936:	4b53      	ldr	r3, [pc, #332]	; (8002a84 <main+0x304>)
 8002938:	62ab      	str	r3, [r5, #40]	; 0x28
  sConfig.Channel = ADC_CHANNEL_4;
 800293a:	f04f 0a04 	mov.w	sl, #4
  hadc1.Init.ScanConvMode = DISABLE;
 800293e:	612c      	str	r4, [r5, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002940:	762c      	strb	r4, [r5, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002942:	f885 4020 	strb.w	r4, [r5, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002946:	62ec      	str	r4, [r5, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002948:	60ec      	str	r4, [r5, #12]
  hadc1.Init.NbrOfConversion = 1;
 800294a:	61ee      	str	r6, [r5, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800294c:	f885 4030 	strb.w	r4, [r5, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002950:	616e      	str	r6, [r5, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002952:	f7fd fe43 	bl	80005dc <HAL_ADC_Init>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002956:	a915      	add	r1, sp, #84	; 0x54
 8002958:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_4;
 800295a:	f8cd a054 	str.w	sl, [sp, #84]	; 0x54
  sConfig.Rank = 1;
 800295e:	9616      	str	r6, [sp, #88]	; 0x58
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002960:	9417      	str	r4, [sp, #92]	; 0x5c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002962:	f7fd fee1 	bl	8000728 <HAL_ADC_ConfigChannel>
  hi2c1.Instance = I2C1;
 8002966:	4848      	ldr	r0, [pc, #288]	; (8002a88 <main+0x308>)
  hi2c1.Init.ClockSpeed = 100000;
 8002968:	4a48      	ldr	r2, [pc, #288]	; (8002a8c <main+0x30c>)
 800296a:	4b49      	ldr	r3, [pc, #292]	; (8002a90 <main+0x310>)
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800296c:	6084      	str	r4, [r0, #8]
  hi2c1.Init.ClockSpeed = 100000;
 800296e:	e880 000c 	stmia.w	r0, {r2, r3}
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002972:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c1.Init.OwnAddress1 = 0;
 8002976:	60c4      	str	r4, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002978:	6103      	str	r3, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800297a:	6144      	str	r4, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800297c:	6184      	str	r4, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800297e:	61c4      	str	r4, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002980:	6204      	str	r4, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002982:	f7fe fa5d 	bl	8000e40 <HAL_I2C_Init>
  hrtc.Instance = RTC;
 8002986:	4843      	ldr	r0, [pc, #268]	; (8002a94 <main+0x314>)
 8002988:	4b43      	ldr	r3, [pc, #268]	; (8002a98 <main+0x318>)
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800298a:	6104      	str	r4, [r0, #16]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800298c:	e880 0018 	stmia.w	r0, {r3, r4}
  hrtc.Init.AsynchPrediv = 127;
 8002990:	237f      	movs	r3, #127	; 0x7f
 8002992:	6083      	str	r3, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 8002994:	23ff      	movs	r3, #255	; 0xff
 8002996:	60c3      	str	r3, [r0, #12]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002998:	6144      	str	r4, [r0, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800299a:	6184      	str	r4, [r0, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800299c:	f7ff f810 	bl	80019c0 <HAL_RTC_Init>
  hspi2.Instance = SPI2;
 80029a0:	483e      	ldr	r0, [pc, #248]	; (8002a9c <main+0x31c>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80029a2:	493f      	ldr	r1, [pc, #252]	; (8002aa0 <main+0x320>)
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80029a4:	6084      	str	r4, [r0, #8]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80029a6:	f44f 7382 	mov.w	r3, #260	; 0x104
 80029aa:	e880 000a 	stmia.w	r0, {r1, r3}
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80029ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029b2:	6183      	str	r3, [r0, #24]
  hspi2.Init.CRCPolynomial = 10;
 80029b4:	230a      	movs	r3, #10
 80029b6:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80029b8:	60c4      	str	r4, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80029ba:	6104      	str	r4, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80029bc:	6144      	str	r4, [r0, #20]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80029be:	61c4      	str	r4, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80029c0:	6204      	str	r4, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80029c2:	6244      	str	r4, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029c4:	6284      	str	r4, [r0, #40]	; 0x28
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80029c6:	f7ff f849 	bl	8001a5c <HAL_SPI_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029ca:	464a      	mov	r2, r9
 80029cc:	4621      	mov	r1, r4
 80029ce:	a80a      	add	r0, sp, #40	; 0x28
 80029d0:	f001 f850 	bl	8003a74 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80029d4:	4621      	mov	r1, r4
 80029d6:	221c      	movs	r2, #28
 80029d8:	a80e      	add	r0, sp, #56	; 0x38
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029da:	9408      	str	r4, [sp, #32]
 80029dc:	9409      	str	r4, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 80029de:	f001 f849 	bl	8003a74 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80029e2:	2220      	movs	r2, #32
 80029e4:	4621      	mov	r1, r4
 80029e6:	a815      	add	r0, sp, #84	; 0x54
  htim1.Instance = TIM1;
 80029e8:	4e2e      	ldr	r6, [pc, #184]	; (8002aa4 <main+0x324>)
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80029ea:	f001 f843 	bl	8003a74 <memset>
  htim1.Init.Prescaler = 89;
 80029ee:	482e      	ldr	r0, [pc, #184]	; (8002aa8 <main+0x328>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029f0:	60b4      	str	r4, [r6, #8]
  htim1.Init.Prescaler = 89;
 80029f2:	2359      	movs	r3, #89	; 0x59
 80029f4:	e886 0009 	stmia.w	r6, {r0, r3}
  htim1.Init.Period = 20000;
 80029f8:	f644 6320 	movw	r3, #20000	; 0x4e20
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80029fc:	4630      	mov	r0, r6
  htim1.Init.Period = 20000;
 80029fe:	60f3      	str	r3, [r6, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a00:	6134      	str	r4, [r6, #16]
  htim1.Init.RepetitionCounter = 0;
 8002a02:	6174      	str	r4, [r6, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a04:	61b4      	str	r4, [r6, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002a06:	f7ff fa13 	bl	8001e30 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002a0e:	a90a      	add	r1, sp, #40	; 0x28
 8002a10:	4630      	mov	r0, r6
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a12:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002a14:	f7ff fae2 	bl	8001fdc <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002a18:	4630      	mov	r0, r6
 8002a1a:	f7ff fa23 	bl	8001e64 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002a1e:	a908      	add	r1, sp, #32
 8002a20:	4630      	mov	r0, r6
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a22:	9408      	str	r4, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a24:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002a26:	f7ff fb6d 	bl	8002104 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a2a:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a2c:	4622      	mov	r2, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a2e:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a30:	a90e      	add	r1, sp, #56	; 0x38
  sConfigOC.Pulse = 1500;
 8002a32:	f240 53dc 	movw	r3, #1500	; 0x5dc
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a36:	4630      	mov	r0, r6
  sConfigOC.Pulse = 1500;
 8002a38:	930f      	str	r3, [sp, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a3a:	9410      	str	r4, [sp, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002a3c:	9411      	str	r4, [sp, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a3e:	9412      	str	r4, [sp, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002a40:	9413      	str	r4, [sp, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002a42:	9414      	str	r4, [sp, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a44:	f7ff fa5e 	bl	8001f04 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002a48:	4652      	mov	r2, sl
 8002a4a:	a90e      	add	r1, sp, #56	; 0x38
 8002a4c:	4630      	mov	r0, r6
 8002a4e:	f7ff fa59 	bl	8001f04 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002a52:	2208      	movs	r2, #8
 8002a54:	a90e      	add	r1, sp, #56	; 0x38
 8002a56:	4630      	mov	r0, r6
 8002a58:	f7ff fa54 	bl	8001f04 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002a5c:	220c      	movs	r2, #12
 8002a5e:	a90e      	add	r1, sp, #56	; 0x38
 8002a60:	4630      	mov	r0, r6
 8002a62:	e025      	b.n	8002ab0 <main+0x330>
 8002a64:	40023800 	.word	0x40023800
 8002a68:	200002cc 	.word	0x200002cc
 8002a6c:	40021c00 	.word	0x40021c00
 8002a70:	40020800 	.word	0x40020800
 8002a74:	40020400 	.word	0x40020400
 8002a78:	40020000 	.word	0x40020000
 8002a7c:	2000034c 	.word	0x2000034c
 8002a80:	40012000 	.word	0x40012000
 8002a84:	0f000001 	.word	0x0f000001
 8002a88:	20000198 	.word	0x20000198
 8002a8c:	40005400 	.word	0x40005400
 8002a90:	000186a0 	.word	0x000186a0
 8002a94:	20000474 	.word	0x20000474
 8002a98:	40002800 	.word	0x40002800
 8002a9c:	20000100 	.word	0x20000100
 8002aa0:	40003800 	.word	0x40003800
 8002aa4:	20000494 	.word	0x20000494
 8002aa8:	40010000 	.word	0x40010000
 8002aac:	20000514 	.word	0x20000514
 8002ab0:	f7ff fa28 	bl	8001f04 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002ab4:	a915      	add	r1, sp, #84	; 0x54
 8002ab6:	4630      	mov	r0, r6
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002ab8:	9415      	str	r4, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002aba:	9416      	str	r4, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002abc:	9417      	str	r4, [sp, #92]	; 0x5c
  sBreakDeadTimeConfig.DeadTime = 0;
 8002abe:	9418      	str	r4, [sp, #96]	; 0x60
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002ac0:	9419      	str	r4, [sp, #100]	; 0x64
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002ac2:	f8cd b068 	str.w	fp, [sp, #104]	; 0x68
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002ac6:	941c      	str	r4, [sp, #112]	; 0x70
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002ac8:	f7ff fb5e 	bl	8002188 <HAL_TIMEx_ConfigBreakDeadTime>
  HAL_TIM_MspPostInit(&htim1);
 8002acc:	4630      	mov	r0, r6
 8002ace:	f000 fccd 	bl	800346c <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ad2:	464a      	mov	r2, r9
 8002ad4:	4621      	mov	r1, r4
 8002ad6:	a80e      	add	r0, sp, #56	; 0x38
 8002ad8:	f000 ffcc 	bl	8003a74 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002adc:	221c      	movs	r2, #28
 8002ade:	4621      	mov	r1, r4
 8002ae0:	a815      	add	r0, sp, #84	; 0x54
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ae2:	940a      	str	r4, [sp, #40]	; 0x28
 8002ae4:	940b      	str	r4, [sp, #44]	; 0x2c
  htim2.Init.Prescaler = 89;
 8002ae6:	2559      	movs	r5, #89	; 0x59
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ae8:	f000 ffc4 	bl	8003a74 <memset>
  htim2.Init.Prescaler = 89;
 8002aec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002af0:	e888 0028 	stmia.w	r8, {r3, r5}
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002af4:	4640      	mov	r0, r8
  htim2.Init.Period = 20000;
 8002af6:	f644 6320 	movw	r3, #20000	; 0x4e20
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002afa:	f8c8 4008 	str.w	r4, [r8, #8]
  htim2.Init.Period = 20000;
 8002afe:	f8c8 300c 	str.w	r3, [r8, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b02:	f8c8 4010 	str.w	r4, [r8, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b06:	f8c8 4018 	str.w	r4, [r8, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002b0a:	f7ff f991 	bl	8001e30 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002b12:	a90e      	add	r1, sp, #56	; 0x38
 8002b14:	4640      	mov	r0, r8
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b16:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002b18:	f7ff fa60 	bl	8001fdc <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002b1c:	4640      	mov	r0, r8
 8002b1e:	f7ff f9a1 	bl	8001e64 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002b22:	a90a      	add	r1, sp, #40	; 0x28
 8002b24:	4640      	mov	r0, r8
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b26:	940a      	str	r4, [sp, #40]	; 0x28
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b28:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002b2a:	f7ff faeb 	bl	8002104 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b2e:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b30:	4622      	mov	r2, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b32:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b34:	a915      	add	r1, sp, #84	; 0x54
  sConfigOC.Pulse = 1500;
 8002b36:	f240 53dc 	movw	r3, #1500	; 0x5dc
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b3a:	4640      	mov	r0, r8
  sConfigOC.Pulse = 1500;
 8002b3c:	9316      	str	r3, [sp, #88]	; 0x58
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b3e:	9417      	str	r4, [sp, #92]	; 0x5c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b40:	9419      	str	r4, [sp, #100]	; 0x64
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b42:	f7ff f9df 	bl	8001f04 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002b46:	4652      	mov	r2, sl
 8002b48:	a915      	add	r1, sp, #84	; 0x54
 8002b4a:	4640      	mov	r0, r8
 8002b4c:	f7ff f9da 	bl	8001f04 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002b50:	2208      	movs	r2, #8
 8002b52:	a915      	add	r1, sp, #84	; 0x54
 8002b54:	4640      	mov	r0, r8
 8002b56:	f7ff f9d5 	bl	8001f04 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002b5a:	220c      	movs	r2, #12
 8002b5c:	a915      	add	r1, sp, #84	; 0x54
 8002b5e:	4640      	mov	r0, r8
 8002b60:	f7ff f9d0 	bl	8001f04 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim2);
 8002b64:	4640      	mov	r0, r8
 8002b66:	f000 fc81 	bl	800346c <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b6a:	464a      	mov	r2, r9
 8002b6c:	4621      	mov	r1, r4
 8002b6e:	a80e      	add	r0, sp, #56	; 0x38
 8002b70:	f000 ff80 	bl	8003a74 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b74:	221c      	movs	r2, #28
 8002b76:	4621      	mov	r1, r4
 8002b78:	a815      	add	r0, sp, #84	; 0x54
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b7a:	940a      	str	r4, [sp, #40]	; 0x28
 8002b7c:	940b      	str	r4, [sp, #44]	; 0x2c
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b7e:	f000 ff79 	bl	8003a74 <memset>
  htim3.Init.Prescaler = 89;
 8002b82:	4bc4      	ldr	r3, [pc, #784]	; (8002e94 <main+0x714>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b84:	60bc      	str	r4, [r7, #8]
  htim3.Init.Prescaler = 89;
 8002b86:	f04f 0e59 	mov.w	lr, #89	; 0x59
 8002b8a:	e887 4008 	stmia.w	r7, {r3, lr}
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002b8e:	4638      	mov	r0, r7
  htim3.Init.Period = 20000;
 8002b90:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002b94:	60fb      	str	r3, [r7, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b96:	613c      	str	r4, [r7, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b98:	61bc      	str	r4, [r7, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002b9a:	f7ff f949 	bl	8001e30 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002ba2:	a90e      	add	r1, sp, #56	; 0x38
 8002ba4:	4638      	mov	r0, r7
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ba6:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002ba8:	f7ff fa18 	bl	8001fdc <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002bac:	4638      	mov	r0, r7
 8002bae:	f7ff f959 	bl	8001e64 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002bb2:	a90a      	add	r1, sp, #40	; 0x28
 8002bb4:	4638      	mov	r0, r7
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bb6:	940a      	str	r4, [sp, #40]	; 0x28
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bb8:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002bba:	f7ff faa3 	bl	8002104 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002bbe:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002bc0:	4622      	mov	r2, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002bc2:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002bc4:	a915      	add	r1, sp, #84	; 0x54
  sConfigOC.Pulse = 1500;
 8002bc6:	f240 53dc 	movw	r3, #1500	; 0x5dc
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002bca:	4638      	mov	r0, r7
  sConfigOC.Pulse = 1500;
 8002bcc:	9316      	str	r3, [sp, #88]	; 0x58
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002bce:	9417      	str	r4, [sp, #92]	; 0x5c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002bd0:	9419      	str	r4, [sp, #100]	; 0x64
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002bd2:	f7ff f997 	bl	8001f04 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002bd6:	4652      	mov	r2, sl
 8002bd8:	a915      	add	r1, sp, #84	; 0x54
 8002bda:	4638      	mov	r0, r7
 8002bdc:	f7ff f992 	bl	8001f04 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002be0:	2208      	movs	r2, #8
 8002be2:	a915      	add	r1, sp, #84	; 0x54
 8002be4:	4638      	mov	r0, r7
 8002be6:	f7ff f98d 	bl	8001f04 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002bea:	220c      	movs	r2, #12
 8002bec:	a915      	add	r1, sp, #84	; 0x54
 8002bee:	4638      	mov	r0, r7
 8002bf0:	f7ff f988 	bl	8001f04 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim3);
 8002bf4:	4638      	mov	r0, r7
 8002bf6:	f000 fc39 	bl	800346c <HAL_TIM_MspPostInit>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002bfa:	4621      	mov	r1, r4
 8002bfc:	221c      	movs	r2, #28
 8002bfe:	a815      	add	r0, sp, #84	; 0x54
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c00:	940e      	str	r4, [sp, #56]	; 0x38
 8002c02:	940f      	str	r4, [sp, #60]	; 0x3c
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c04:	f000 ff36 	bl	8003a74 <memset>
  htim5.Instance = TIM5;
 8002c08:	4aa3      	ldr	r2, [pc, #652]	; (8002e98 <main+0x718>)
 8002c0a:	4ba4      	ldr	r3, [pc, #656]	; (8002e9c <main+0x71c>)
 8002c0c:	6013      	str	r3, [r2, #0]
  htim5.Init.Prescaler = 89;
 8002c0e:	4613      	mov	r3, r2
 8002c10:	2259      	movs	r2, #89	; 0x59
 8002c12:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002c14:	4618      	mov	r0, r3
  htim5.Init.Period = 20000;
 8002c16:	f644 6220 	movw	r2, #20000	; 0x4e20
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c1a:	609c      	str	r4, [r3, #8]
  htim5.Init.Period = 20000;
 8002c1c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c1e:	611c      	str	r4, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c20:	619c      	str	r4, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002c22:	f7ff f91f 	bl	8001e64 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002c26:	a90e      	add	r1, sp, #56	; 0x38
 8002c28:	489b      	ldr	r0, [pc, #620]	; (8002e98 <main+0x718>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c2a:	940e      	str	r4, [sp, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c2c:	940f      	str	r4, [sp, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002c2e:	f7ff fa69 	bl	8002104 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c32:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c34:	4622      	mov	r2, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c36:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c38:	a915      	add	r1, sp, #84	; 0x54
  sConfigOC.Pulse = 1500;
 8002c3a:	f240 53dc 	movw	r3, #1500	; 0x5dc
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c3e:	4896      	ldr	r0, [pc, #600]	; (8002e98 <main+0x718>)
  sConfigOC.Pulse = 1500;
 8002c40:	9316      	str	r3, [sp, #88]	; 0x58
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c42:	9417      	str	r4, [sp, #92]	; 0x5c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c44:	9419      	str	r4, [sp, #100]	; 0x64
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c46:	f7ff f95d 	bl	8001f04 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002c4a:	4652      	mov	r2, sl
 8002c4c:	a915      	add	r1, sp, #84	; 0x54
 8002c4e:	4892      	ldr	r0, [pc, #584]	; (8002e98 <main+0x718>)
  htim8.Instance = TIM8;
 8002c50:	4d93      	ldr	r5, [pc, #588]	; (8002ea0 <main+0x720>)
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002c52:	f7ff f957 	bl	8001f04 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim5);
 8002c56:	4890      	ldr	r0, [pc, #576]	; (8002e98 <main+0x718>)
 8002c58:	f000 fc08 	bl	800346c <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c5c:	464a      	mov	r2, r9
 8002c5e:	4621      	mov	r1, r4
 8002c60:	a80a      	add	r0, sp, #40	; 0x28
 8002c62:	f000 ff07 	bl	8003a74 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c66:	4621      	mov	r1, r4
 8002c68:	221c      	movs	r2, #28
 8002c6a:	a80e      	add	r0, sp, #56	; 0x38
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c6c:	9408      	str	r4, [sp, #32]
 8002c6e:	9409      	str	r4, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c70:	f000 ff00 	bl	8003a74 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002c74:	2220      	movs	r2, #32
 8002c76:	4621      	mov	r1, r4
 8002c78:	a815      	add	r0, sp, #84	; 0x54
 8002c7a:	f000 fefb 	bl	8003a74 <memset>
  htim8.Init.Prescaler = 89;
 8002c7e:	4b89      	ldr	r3, [pc, #548]	; (8002ea4 <main+0x724>)
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c80:	60ac      	str	r4, [r5, #8]
  htim8.Init.Prescaler = 89;
 8002c82:	f04f 0c59 	mov.w	ip, #89	; 0x59
 8002c86:	e885 1008 	stmia.w	r5, {r3, ip}
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002c8a:	4628      	mov	r0, r5
  htim8.Init.Period = 20000;
 8002c8c:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002c90:	60eb      	str	r3, [r5, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c92:	612c      	str	r4, [r5, #16]
  htim8.Init.RepetitionCounter = 0;
 8002c94:	616c      	str	r4, [r5, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c96:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002c98:	f7ff f8ca 	bl	8001e30 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002ca0:	a90a      	add	r1, sp, #40	; 0x28
 8002ca2:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ca4:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002ca6:	f7ff f999 	bl	8001fdc <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002caa:	4628      	mov	r0, r5
 8002cac:	f7ff f8da 	bl	8001e64 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002cb0:	a908      	add	r1, sp, #32
 8002cb2:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cb4:	9408      	str	r4, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cb6:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002cb8:	f7ff fa24 	bl	8002104 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002cbc:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002cbe:	4622      	mov	r2, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002cc0:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002cc2:	a90e      	add	r1, sp, #56	; 0x38
  sConfigOC.Pulse = 1500;
 8002cc4:	f240 53dc 	movw	r3, #1500	; 0x5dc
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002cc8:	4628      	mov	r0, r5
  sConfigOC.Pulse = 1500;
 8002cca:	930f      	str	r3, [sp, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ccc:	9410      	str	r4, [sp, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002cce:	9411      	str	r4, [sp, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002cd0:	9412      	str	r4, [sp, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002cd2:	9413      	str	r4, [sp, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002cd4:	9414      	str	r4, [sp, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002cd6:	f7ff f915 	bl	8001f04 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002cda:	4652      	mov	r2, sl
 8002cdc:	a90e      	add	r1, sp, #56	; 0x38
 8002cde:	4628      	mov	r0, r5
 8002ce0:	f7ff f910 	bl	8001f04 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002ce4:	2208      	movs	r2, #8
 8002ce6:	a90e      	add	r1, sp, #56	; 0x38
 8002ce8:	4628      	mov	r0, r5
 8002cea:	f7ff f90b 	bl	8001f04 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002cee:	220c      	movs	r2, #12
 8002cf0:	a90e      	add	r1, sp, #56	; 0x38
 8002cf2:	4628      	mov	r0, r5
 8002cf4:	f7ff f906 	bl	8001f04 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002cf8:	a915      	add	r1, sp, #84	; 0x54
 8002cfa:	4628      	mov	r0, r5
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002cfc:	9415      	str	r4, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002cfe:	9416      	str	r4, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002d00:	9417      	str	r4, [sp, #92]	; 0x5c
  sBreakDeadTimeConfig.DeadTime = 0;
 8002d02:	9418      	str	r4, [sp, #96]	; 0x60
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002d04:	9419      	str	r4, [sp, #100]	; 0x64
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002d06:	f8cd b068 	str.w	fp, [sp, #104]	; 0x68
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002d0a:	941c      	str	r4, [sp, #112]	; 0x70
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002d0c:	f7ff fa3c 	bl	8002188 <HAL_TIMEx_ConfigBreakDeadTime>
  HAL_TIM_MspPostInit(&htim8);
 8002d10:	4628      	mov	r0, r5
 8002d12:	f000 fbab 	bl	800346c <HAL_TIM_MspPostInit>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d16:	4621      	mov	r1, r4
 8002d18:	221c      	movs	r2, #28
 8002d1a:	a815      	add	r0, sp, #84	; 0x54
 8002d1c:	f000 feaa 	bl	8003a74 <memset>
  htim10.Instance = TIM10;
 8002d20:	f8df b19c 	ldr.w	fp, [pc, #412]	; 8002ec0 <main+0x740>
  htim10.Init.Prescaler = 89;
 8002d24:	4b60      	ldr	r3, [pc, #384]	; (8002ea8 <main+0x728>)
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d26:	f8cb 4008 	str.w	r4, [fp, #8]
  htim10.Init.Prescaler = 89;
 8002d2a:	f04f 0a59 	mov.w	sl, #89	; 0x59
 8002d2e:	e88b 0408 	stmia.w	fp, {r3, sl}
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002d32:	4658      	mov	r0, fp
  htim10.Init.Period = 20000;
 8002d34:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002d38:	f8cb 300c 	str.w	r3, [fp, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d3c:	f8cb 4010 	str.w	r4, [fp, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d40:	f8cb 4018 	str.w	r4, [fp, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002d44:	f7ff f874 	bl	8001e30 <HAL_TIM_Base_Init>
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8002d48:	4658      	mov	r0, fp
 8002d4a:	f7ff f88b 	bl	8001e64 <HAL_TIM_PWM_Init>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d4e:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d50:	4622      	mov	r2, r4
 8002d52:	a915      	add	r1, sp, #84	; 0x54
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d54:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d56:	4658      	mov	r0, fp
  sConfigOC.Pulse = 1500;
 8002d58:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8002d5c:	9316      	str	r3, [sp, #88]	; 0x58
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d5e:	9417      	str	r4, [sp, #92]	; 0x5c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d60:	9419      	str	r4, [sp, #100]	; 0x64
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d62:	f7ff f8cf 	bl	8001f04 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim10);
 8002d66:	4658      	mov	r0, fp
 8002d68:	f000 fb80 	bl	800346c <HAL_TIM_MspPostInit>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d6c:	4621      	mov	r1, r4
 8002d6e:	221c      	movs	r2, #28
 8002d70:	a815      	add	r0, sp, #84	; 0x54
 8002d72:	f000 fe7f 	bl	8003a74 <memset>
  htim11.Instance = TIM11;
 8002d76:	f8df a14c 	ldr.w	sl, [pc, #332]	; 8002ec4 <main+0x744>
  htim11.Init.Prescaler = 89;
 8002d7a:	4a4c      	ldr	r2, [pc, #304]	; (8002eac <main+0x72c>)
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d7c:	f8ca 4008 	str.w	r4, [sl, #8]
  htim11.Init.Prescaler = 89;
 8002d80:	2359      	movs	r3, #89	; 0x59
 8002d82:	e88a 000c 	stmia.w	sl, {r2, r3}
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002d86:	4650      	mov	r0, sl
  htim11.Init.Period = 20000;
 8002d88:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002d8c:	f8ca 300c 	str.w	r3, [sl, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d90:	f8ca 4010 	str.w	r4, [sl, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d94:	f8ca 4018 	str.w	r4, [sl, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002d98:	f7ff f84a 	bl	8001e30 <HAL_TIM_Base_Init>
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8002d9c:	4650      	mov	r0, sl
 8002d9e:	f7ff f861 	bl	8001e64 <HAL_TIM_PWM_Init>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002da2:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002da4:	4622      	mov	r2, r4
 8002da6:	a915      	add	r1, sp, #84	; 0x54
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002da8:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002daa:	4650      	mov	r0, sl
  sConfigOC.Pulse = 1500;
 8002dac:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8002db0:	9316      	str	r3, [sp, #88]	; 0x58
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002db2:	9417      	str	r4, [sp, #92]	; 0x5c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002db4:	9419      	str	r4, [sp, #100]	; 0x64
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002db6:	f7ff f8a5 	bl	8001f04 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim11);
 8002dba:	4650      	mov	r0, sl
 8002dbc:	f000 fb56 	bl	800346c <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002dc0:	464a      	mov	r2, r9
 8002dc2:	4621      	mov	r1, r4
 8002dc4:	a80e      	add	r0, sp, #56	; 0x38
 8002dc6:	f000 fe55 	bl	8003a74 <memset>
  htim12.Instance = TIM12;
 8002dca:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 8002ec8 <main+0x748>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002dce:	221c      	movs	r2, #28
 8002dd0:	4621      	mov	r1, r4
 8002dd2:	a815      	add	r0, sp, #84	; 0x54
 8002dd4:	f000 fe4e 	bl	8003a74 <memset>
  htim12.Instance = TIM12;
 8002dd8:	4b35      	ldr	r3, [pc, #212]	; (8002eb0 <main+0x730>)
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dda:	f8c9 4008 	str.w	r4, [r9, #8]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8002dde:	4648      	mov	r0, r9
  htim12.Init.Prescaler = 0;
 8002de0:	e889 0018 	stmia.w	r9, {r3, r4}
  htim12.Init.Period = 0;
 8002de4:	f8c9 400c 	str.w	r4, [r9, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002de8:	f8c9 4010 	str.w	r4, [r9, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dec:	f8c9 4018 	str.w	r4, [r9, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8002df0:	f7ff f81e 	bl	8001e30 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002df4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8002df8:	a90e      	add	r1, sp, #56	; 0x38
 8002dfa:	4648      	mov	r0, r9
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002dfc:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8002dfe:	f7ff f8ed 	bl	8001fdc <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8002e02:	4648      	mov	r0, r9
 8002e04:	f7ff f82e 	bl	8001e64 <HAL_TIM_PWM_Init>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e08:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e0a:	4622      	mov	r2, r4
 8002e0c:	a915      	add	r1, sp, #84	; 0x54
 8002e0e:	4648      	mov	r0, r9
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e10:	9315      	str	r3, [sp, #84]	; 0x54
  sConfigOC.Pulse = 0;
 8002e12:	9416      	str	r4, [sp, #88]	; 0x58
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e14:	9417      	str	r4, [sp, #92]	; 0x5c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e16:	9419      	str	r4, [sp, #100]	; 0x64
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e18:	f7ff f874 	bl	8001f04 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim12);
 8002e1c:	4648      	mov	r0, r9
 8002e1e:	f000 fb25 	bl	800346c <HAL_TIM_MspPostInit>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e22:	221c      	movs	r2, #28
 8002e24:	4621      	mov	r1, r4
 8002e26:	a815      	add	r0, sp, #84	; 0x54
 8002e28:	f000 fe24 	bl	8003a74 <memset>
  htim14.Instance = TIM14;
 8002e2c:	f8df 909c 	ldr.w	r9, [pc, #156]	; 8002ecc <main+0x74c>
  htim14.Init.Prescaler = 89;
 8002e30:	4920      	ldr	r1, [pc, #128]	; (8002eb4 <main+0x734>)
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e32:	f8c9 4008 	str.w	r4, [r9, #8]
  htim14.Init.Prescaler = 89;
 8002e36:	2359      	movs	r3, #89	; 0x59
 8002e38:	e889 000a 	stmia.w	r9, {r1, r3}
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002e3c:	4648      	mov	r0, r9
  htim14.Init.Period = 20000;
 8002e3e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002e42:	f8c9 300c 	str.w	r3, [r9, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e46:	f8c9 4010 	str.w	r4, [r9, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e4a:	f8c9 4018 	str.w	r4, [r9, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002e4e:	f7fe ffef 	bl	8001e30 <HAL_TIM_Base_Init>
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8002e52:	4648      	mov	r0, r9
 8002e54:	f7ff f806 	bl	8001e64 <HAL_TIM_PWM_Init>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e58:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e5a:	4622      	mov	r2, r4
 8002e5c:	a915      	add	r1, sp, #84	; 0x54
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e5e:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e60:	4648      	mov	r0, r9
  sConfigOC.Pulse = 1500;
 8002e62:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8002e66:	9316      	str	r3, [sp, #88]	; 0x58
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e68:	9417      	str	r4, [sp, #92]	; 0x5c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e6a:	9419      	str	r4, [sp, #100]	; 0x64
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e6c:	f7ff f84a 	bl	8001f04 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim14);
 8002e70:	4648      	mov	r0, r9
 8002e72:	f000 fafb 	bl	800346c <HAL_TIM_MspPostInit>
  huart4.Instance = UART4;
 8002e76:	4b10      	ldr	r3, [pc, #64]	; (8002eb8 <main+0x738>)
 8002e78:	4a10      	ldr	r2, [pc, #64]	; (8002ebc <main+0x73c>)
 8002e7a:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8002e7c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002e80:	220c      	movs	r2, #12
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002e82:	4618      	mov	r0, r3
  huart4.Init.BaudRate = 9600;
 8002e84:	6059      	str	r1, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002e86:	609c      	str	r4, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002e88:	60dc      	str	r4, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002e8a:	611c      	str	r4, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002e8c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e8e:	619c      	str	r4, [r3, #24]
 8002e90:	e01e      	b.n	8002ed0 <main+0x750>
 8002e92:	bf00      	nop
 8002e94:	40000400 	.word	0x40000400
 8002e98:	2000028c 	.word	0x2000028c
 8002e9c:	40000c00 	.word	0x40000c00
 8002ea0:	20000158 	.word	0x20000158
 8002ea4:	40010400 	.word	0x40010400
 8002ea8:	40014400 	.word	0x40014400
 8002eac:	40014800 	.word	0x40014800
 8002eb0:	40001800 	.word	0x40001800
 8002eb4:	40002000 	.word	0x40002000
 8002eb8:	200004d4 	.word	0x200004d4
 8002ebc:	40004c00 	.word	0x40004c00
 8002ec0:	200001ec 	.word	0x200001ec
 8002ec4:	20000434 	.word	0x20000434
 8002ec8:	20000634 	.word	0x20000634
 8002ecc:	200005f4 	.word	0x200005f4
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ed0:	61dc      	str	r4, [r3, #28]
  huart4.Init.BaudRate = 9600;
 8002ed2:	9100      	str	r1, [sp, #0]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002ed4:	9301      	str	r3, [sp, #4]
 8002ed6:	f7ff f9fb 	bl	80022d0 <HAL_UART_Init>
  huart5.Instance = UART5;
 8002eda:	4829      	ldr	r0, [pc, #164]	; (8002f80 <main+0x800>)
 8002edc:	4a29      	ldr	r2, [pc, #164]	; (8002f84 <main+0x804>)
  huart5.Init.BaudRate = 9600;
 8002ede:	9900      	ldr	r1, [sp, #0]
  huart5.Instance = UART5;
 8002ee0:	6002      	str	r2, [r0, #0]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002ee2:	230c      	movs	r3, #12
  huart5.Init.BaudRate = 9600;
 8002ee4:	6041      	str	r1, [r0, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002ee6:	6084      	str	r4, [r0, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002ee8:	60c4      	str	r4, [r0, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002eea:	6104      	str	r4, [r0, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002eec:	6143      	str	r3, [r0, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002eee:	6184      	str	r4, [r0, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ef0:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002ef2:	f7ff f9ed 	bl	80022d0 <HAL_UART_Init>
  huart2.Instance = USART2;
 8002ef6:	4824      	ldr	r0, [pc, #144]	; (8002f88 <main+0x808>)
  huart2.Init.BaudRate = 9600;
 8002ef8:	9900      	ldr	r1, [sp, #0]
  huart2.Instance = USART2;
 8002efa:	4a24      	ldr	r2, [pc, #144]	; (8002f8c <main+0x80c>)
  huart2.Init.BaudRate = 9600;
 8002efc:	6041      	str	r1, [r0, #4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002efe:	230c      	movs	r3, #12
  huart2.Instance = USART2;
 8002f00:	6002      	str	r2, [r0, #0]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002f02:	6084      	str	r4, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002f04:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002f06:	6104      	str	r4, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002f08:	6143      	str	r3, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f0a:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f0c:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f0e:	f7ff f9df 	bl	80022d0 <HAL_UART_Init>
  htim13.Init.Prescaler = 89;
 8002f12:	4a1f      	ldr	r2, [pc, #124]	; (8002f90 <main+0x810>)
  htim13.Instance = TIM13;
 8002f14:	481f      	ldr	r0, [pc, #124]	; (8002f94 <main+0x814>)
  htim13.Init.Prescaler = 89;
 8002f16:	2359      	movs	r3, #89	; 0x59
 8002f18:	e880 000c 	stmia.w	r0, {r2, r3}
  htim13.Init.Period = 20000;
 8002f1c:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002f20:	60c3      	str	r3, [r0, #12]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f22:	6084      	str	r4, [r0, #8]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f24:	6104      	str	r4, [r0, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f26:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002f28:	f7fe ff82 	bl	8001e30 <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start_IT(&htim1);
 8002f2c:	4630      	mov	r0, r6
 8002f2e:	f7fe fe61 	bl	8001bf4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8002f32:	4640      	mov	r0, r8
 8002f34:	f7fe fe5e 	bl	8001bf4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8002f38:	4638      	mov	r0, r7
 8002f3a:	f7fe fe5b 	bl	8001bf4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim5);
 8002f3e:	4816      	ldr	r0, [pc, #88]	; (8002f98 <main+0x818>)
 8002f40:	f7fe fe58 	bl	8001bf4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim8);
 8002f44:	4628      	mov	r0, r5
 8002f46:	f7fe fe55 	bl	8001bf4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim10);
 8002f4a:	4658      	mov	r0, fp
 8002f4c:	f7fe fe52 	bl	8001bf4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim11);
 8002f50:	4650      	mov	r0, sl
 8002f52:	f7fe fe4f 	bl	8001bf4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim14);
 8002f56:	4648      	mov	r0, r9
 8002f58:	f7fe fe4c 	bl	8001bf4 <HAL_TIM_Base_Start_IT>
  HAL_Serial_Init(&huart4, &FTDI_hserial);
 8002f5c:	9b01      	ldr	r3, [sp, #4]
 8002f5e:	a915      	add	r1, sp, #84	; 0x54
 8002f60:	4618      	mov	r0, r3
 8002f62:	f000 f84b 	bl	8002ffc <HAL_Serial_Init>
    HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8002f66:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8002f6a:	f504 3401 	add.w	r4, r4, #132096	; 0x20400
 8002f6e:	4620      	mov	r0, r4
 8002f70:	2110      	movs	r1, #16
 8002f72:	f7fd ff5e 	bl	8000e32 <HAL_GPIO_TogglePin>
    HAL_Delay(200);
 8002f76:	20c8      	movs	r0, #200	; 0xc8
 8002f78:	f7fd fb1c 	bl	80005b4 <HAL_Delay>
 8002f7c:	e7f7      	b.n	8002f6e <main+0x7ee>
 8002f7e:	bf00      	nop
 8002f80:	2000030c 	.word	0x2000030c
 8002f84:	40005000 	.word	0x40005000
 8002f88:	20000554 	.word	0x20000554
 8002f8c:	40004400 	.word	0x40004400
 8002f90:	40001c00 	.word	0x40001c00
 8002f94:	200003f4 	.word	0x200003f4
 8002f98:	2000028c 	.word	0x2000028c

08002f9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f9c:	4770      	bx	lr
	...

08002fa0 <HAL_UART_ErrorCallback>:
 *
 */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
  static int id = 0;
  for(id=0;id!=serial_counter;++id)
 8002fa0:	4913      	ldr	r1, [pc, #76]	; (8002ff0 <HAL_UART_ErrorCallback+0x50>)
 8002fa2:	4a14      	ldr	r2, [pc, #80]	; (8002ff4 <HAL_UART_ErrorCallback+0x54>)
{
 8002fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
  for(id=0;id!=serial_counter;++id)
 8002fa6:	2300      	movs	r3, #0
  {
    if(hserial_table[id]->huart == huart)
 8002fa8:	f8df e04c 	ldr.w	lr, [pc, #76]	; 8002ff8 <HAL_UART_ErrorCallback+0x58>
  for(id=0;id!=serial_counter;++id)
 8002fac:	680d      	ldr	r5, [r1, #0]
 8002fae:	6013      	str	r3, [r2, #0]
{
 8002fb0:	4607      	mov	r7, r0
  for(id=0;id!=serial_counter;++id)
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	429d      	cmp	r5, r3
 8002fb6:	461e      	mov	r6, r3
 8002fb8:	d102      	bne.n	8002fc0 <HAL_UART_ErrorCallback+0x20>
 8002fba:	b101      	cbz	r1, 8002fbe <HAL_UART_ErrorCallback+0x1e>
 8002fbc:	6015      	str	r5, [r2, #0]
 8002fbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(hserial_table[id]->huart == huart)
 8002fc0:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 8002fc4:	6820      	ldr	r0, [r4, #0]
 8002fc6:	42b8      	cmp	r0, r7
 8002fc8:	f103 0301 	add.w	r3, r3, #1
 8002fcc:	d10d      	bne.n	8002fea <HAL_UART_ErrorCallback+0x4a>
 8002fce:	b101      	cbz	r1, 8002fd2 <HAL_UART_ErrorCallback+0x32>
 8002fd0:	6016      	str	r6, [r2, #0]
    {
      hserial_table[id]->rx_tail_ptr = hserial_table[id]->rx_circular_buffer;
 8002fd2:	f504 5102 	add.w	r1, r4, #8320	; 0x2080
 8002fd6:	f642 0390 	movw	r3, #10384	; 0x2890
 8002fda:	3110      	adds	r1, #16
 8002fdc:	50e1      	str	r1, [r4, r3]
      HAL_UART_Receive_DMA(hserial_table[id]->huart, hserial_table[id]->rx_circular_buffer,size_of_rx_circular_buffer);
 8002fde:	f44f 6200 	mov.w	r2, #2048	; 0x800
       break;
    }
  }
}
 8002fe2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      HAL_UART_Receive_DMA(hserial_table[id]->huart, hserial_table[id]->rx_circular_buffer,size_of_rx_circular_buffer);
 8002fe6:	f7ff b9db 	b.w	80023a0 <HAL_UART_Receive_DMA>
 8002fea:	2101      	movs	r1, #1
 8002fec:	e7e2      	b.n	8002fb4 <HAL_UART_ErrorCallback+0x14>
 8002fee:	bf00      	nop
 8002ff0:	20000038 	.word	0x20000038
 8002ff4:	20000030 	.word	0x20000030
 8002ff8:	20000028 	.word	0x20000028

08002ffc <HAL_Serial_Init>:

/**********************************************************
 *
 */
void HAL_Serial_Init(UART_HandleTypeDef * huart, HAL_Serial_Handler * hserial)
{
 8002ffc:	460b      	mov	r3, r1
    // register this handle
    hserial_table[serial_counter++]=hserial;
 8002ffe:	490f      	ldr	r1, [pc, #60]	; (800303c <HAL_Serial_Init+0x40>)
 8003000:	680a      	ldr	r2, [r1, #0]
{
 8003002:	b410      	push	{r4}
    hserial_table[serial_counter++]=hserial;
 8003004:	1c54      	adds	r4, r2, #1
 8003006:	600c      	str	r4, [r1, #0]
 8003008:	490d      	ldr	r1, [pc, #52]	; (8003040 <HAL_Serial_Init+0x44>)
    // reset rx circular buffer
    hserial->rx_tail_ptr = hserial->rx_circular_buffer;

    // start rx DMA
    HAL_UART_Receive_DMA(hserial->huart, hserial->rx_circular_buffer,size_of_rx_circular_buffer);
}
 800300a:	f85d 4b04 	ldr.w	r4, [sp], #4
    hserial_table[serial_counter++]=hserial;
 800300e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
    hserial->tx_head_position = 0;
 8003012:	f242 0184 	movw	r1, #8324	; 0x2084
 8003016:	2200      	movs	r2, #0
    hserial->huart = huart;
 8003018:	6018      	str	r0, [r3, #0]
    hserial->tx_head_position = 0;
 800301a:	505a      	str	r2, [r3, r1]
    hserial->tx_tail_position = 0;
 800301c:	f242 0188 	movw	r1, #8328	; 0x2088
 8003020:	505a      	str	r2, [r3, r1]
    hserial->tx_dma = 0;
 8003022:	f242 018c 	movw	r1, #8332	; 0x208c
 8003026:	505a      	str	r2, [r3, r1]
    hserial->rx_tail_ptr = hserial->rx_circular_buffer;
 8003028:	f642 0290 	movw	r2, #10384	; 0x2890
 800302c:	f503 5102 	add.w	r1, r3, #8320	; 0x2080
 8003030:	3110      	adds	r1, #16
 8003032:	5099      	str	r1, [r3, r2]
    HAL_UART_Receive_DMA(hserial->huart, hserial->rx_circular_buffer,size_of_rx_circular_buffer);
 8003034:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003038:	f7ff b9b2 	b.w	80023a0 <HAL_UART_Receive_DMA>
 800303c:	20000038 	.word	0x20000038
 8003040:	20000028 	.word	0x20000028

08003044 <HAL_UART_TxCpltCallback>:

/**********************************************************
 *
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  static int id = 0;
  for(id=0;id!=serial_counter;++id)
 8003046:	4a1f      	ldr	r2, [pc, #124]	; (80030c4 <HAL_UART_TxCpltCallback+0x80>)
 8003048:	4d1f      	ldr	r5, [pc, #124]	; (80030c8 <HAL_UART_TxCpltCallback+0x84>)
  {
    if(hserial_table[id]->huart == huart && hserial_table[id]->tx_dma == 1)
 800304a:	4f20      	ldr	r7, [pc, #128]	; (80030cc <HAL_UART_TxCpltCallback+0x88>)
  for(id=0;id!=serial_counter;++id)
 800304c:	6811      	ldr	r1, [r2, #0]
 800304e:	2300      	movs	r3, #0
{
 8003050:	4606      	mov	r6, r0
  for(id=0;id!=serial_counter;++id)
 8003052:	602b      	str	r3, [r5, #0]
 8003054:	461a      	mov	r2, r3
    if(hserial_table[id]->huart == huart && hserial_table[id]->tx_dma == 1)
 8003056:	f242 0e8c 	movw	lr, #8332	; 0x208c
  for(id=0;id!=serial_counter;++id)
 800305a:	4299      	cmp	r1, r3
 800305c:	d102      	bne.n	8003064 <HAL_UART_TxCpltCallback+0x20>
 800305e:	b102      	cbz	r2, 8003062 <HAL_UART_TxCpltCallback+0x1e>
 8003060:	6029      	str	r1, [r5, #0]
 8003062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(hserial_table[id]->huart == huart && hserial_table[id]->tx_dma == 1)
 8003064:	f857 4023 	ldr.w	r4, [r7, r3, lsl #2]
 8003068:	6820      	ldr	r0, [r4, #0]
 800306a:	42b0      	cmp	r0, r6
 800306c:	d126      	bne.n	80030bc <HAL_UART_TxCpltCallback+0x78>
 800306e:	f854 c00e 	ldr.w	ip, [r4, lr]
 8003072:	f1bc 0f01 	cmp.w	ip, #1
 8003076:	d121      	bne.n	80030bc <HAL_UART_TxCpltCallback+0x78>
 8003078:	b102      	cbz	r2, 800307c <HAL_UART_TxCpltCallback+0x38>
 800307a:	602b      	str	r3, [r5, #0]
    {
      // tx buffer from pool waiting for transmission ?
      if(hserial_table[id]->tx_head_position!=hserial_table[id]->tx_tail_position)
 800307c:	f242 0688 	movw	r6, #8328	; 0x2088
 8003080:	f242 0284 	movw	r2, #8324	; 0x2084
 8003084:	59a3      	ldr	r3, [r4, r6]
 8003086:	58a2      	ldr	r2, [r4, r2]
 8003088:	429a      	cmp	r2, r3
 800308a:	d012      	beq.n	80030b2 <HAL_UART_TxCpltCallback+0x6e>
        //{
        //result =
        HAL_UART_Transmit_DMA(
              hserial_table[id]->huart,
              hserial_table[id]->tx_buffer_pool[hserial_table[id]->tx_tail_position].data,
              hserial_table[id]->tx_buffer_pool[hserial_table[id]->tx_tail_position].length
 800308c:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003090:	4359      	muls	r1, r3
 8003092:	1863      	adds	r3, r4, r1
              hserial_table[id]->tx_buffer_pool[hserial_table[id]->tx_tail_position].data,
 8003094:	3104      	adds	r1, #4
        HAL_UART_Transmit_DMA(
 8003096:	f8b3 2104 	ldrh.w	r2, [r3, #260]	; 0x104
 800309a:	4421      	add	r1, r4
 800309c:	f7ff f946 	bl	800232c <HAL_UART_Transmit_DMA>
              );
            //}
            //while(result!=HAL_OK);

        // inc tail
        hserial_table[id]->tx_tail_position = (hserial_table[id]->tx_tail_position + 1 ) % size_of_tx_pool;
 80030a0:	682b      	ldr	r3, [r5, #0]
 80030a2:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
 80030a6:	5993      	ldr	r3, [r2, r6]
 80030a8:	3301      	adds	r3, #1
 80030aa:	f003 031f 	and.w	r3, r3, #31
 80030ae:	5193      	str	r3, [r2, r6]
 80030b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      }
      else
      {
        // reset tx dma
        hserial_table[id]->tx_dma = 0;
 80030b2:	f242 038c 	movw	r3, #8332	; 0x208c
 80030b6:	2200      	movs	r2, #0
 80030b8:	50e2      	str	r2, [r4, r3]
 80030ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80030bc:	3301      	adds	r3, #1
 80030be:	2201      	movs	r2, #1
 80030c0:	e7cb      	b.n	800305a <HAL_UART_TxCpltCallback+0x16>
 80030c2:	bf00      	nop
 80030c4:	20000038 	.word	0x20000038
 80030c8:	20000034 	.word	0x20000034
 80030cc:	20000028 	.word	0x20000028

080030d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030d0:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030d2:	4b0c      	ldr	r3, [pc, #48]	; (8003104 <HAL_MspInit+0x34>)
 80030d4:	2100      	movs	r1, #0
 80030d6:	9100      	str	r1, [sp, #0]
 80030d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030de:	645a      	str	r2, [r3, #68]	; 0x44
 80030e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030e2:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80030e6:	9200      	str	r2, [sp, #0]
 80030e8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80030ea:	9101      	str	r1, [sp, #4]
 80030ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030ee:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80030f2:	641a      	str	r2, [r3, #64]	; 0x40
 80030f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030fa:	9301      	str	r3, [sp, #4]
 80030fc:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80030fe:	b002      	add	sp, #8
 8003100:	4770      	bx	lr
 8003102:	bf00      	nop
 8003104:	40023800 	.word	0x40023800

08003108 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003108:	b510      	push	{r4, lr}
 800310a:	4604      	mov	r4, r0
 800310c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800310e:	2214      	movs	r2, #20
 8003110:	2100      	movs	r1, #0
 8003112:	a803      	add	r0, sp, #12
 8003114:	f000 fcae 	bl	8003a74 <memset>
  if(hadc->Instance==ADC1)
 8003118:	6822      	ldr	r2, [r4, #0]
 800311a:	4b12      	ldr	r3, [pc, #72]	; (8003164 <HAL_ADC_MspInit+0x5c>)
 800311c:	429a      	cmp	r2, r3
 800311e:	d11e      	bne.n	800315e <HAL_ADC_MspInit+0x56>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003120:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8003124:	2100      	movs	r1, #0
 8003126:	9101      	str	r1, [sp, #4]
 8003128:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    PA4     ------> ADC1_IN4 
    */
    GPIO_InitStruct.Pin = ADC_IN_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(ADC_IN_GPIO_Port, &GPIO_InitStruct);
 800312a:	480f      	ldr	r0, [pc, #60]	; (8003168 <HAL_ADC_MspInit+0x60>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 800312c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003130:	645a      	str	r2, [r3, #68]	; 0x44
 8003132:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003134:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8003138:	9201      	str	r2, [sp, #4]
 800313a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800313c:	9102      	str	r1, [sp, #8]
 800313e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003140:	f042 0201 	orr.w	r2, r2, #1
 8003144:	631a      	str	r2, [r3, #48]	; 0x30
 8003146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003148:	f003 0301 	and.w	r3, r3, #1
 800314c:	9302      	str	r3, [sp, #8]
 800314e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = ADC_IN_Pin;
 8003150:	2310      	movs	r3, #16
 8003152:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(ADC_IN_GPIO_Port, &GPIO_InitStruct);
 8003154:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003156:	2303      	movs	r3, #3
 8003158:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(ADC_IN_GPIO_Port, &GPIO_InitStruct);
 800315a:	f7fd fd8b 	bl	8000c74 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800315e:	b008      	add	sp, #32
 8003160:	bd10      	pop	{r4, pc}
 8003162:	bf00      	nop
 8003164:	40012000 	.word	0x40012000
 8003168:	40020000 	.word	0x40020000

0800316c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800316c:	b530      	push	{r4, r5, lr}
 800316e:	4604      	mov	r4, r0
 8003170:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003172:	2214      	movs	r2, #20
 8003174:	2100      	movs	r1, #0
 8003176:	a803      	add	r0, sp, #12
 8003178:	f000 fc7c 	bl	8003a74 <memset>
  if(hi2c->Instance==I2C1)
 800317c:	6822      	ldr	r2, [r4, #0]
 800317e:	4b14      	ldr	r3, [pc, #80]	; (80031d0 <HAL_I2C_MspInit+0x64>)
 8003180:	429a      	cmp	r2, r3
 8003182:	d123      	bne.n	80031cc <HAL_I2C_MspInit+0x60>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003184:	4c13      	ldr	r4, [pc, #76]	; (80031d4 <HAL_I2C_MspInit+0x68>)
    GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SCA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003186:	4814      	ldr	r0, [pc, #80]	; (80031d8 <HAL_I2C_MspInit+0x6c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003188:	2500      	movs	r5, #0
 800318a:	9501      	str	r5, [sp, #4]
 800318c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800318e:	f043 0302 	orr.w	r3, r3, #2
 8003192:	6323      	str	r3, [r4, #48]	; 0x30
 8003194:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003196:	f003 0302 	and.w	r3, r3, #2
 800319a:	9301      	str	r3, [sp, #4]
 800319c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SCA_Pin;
 800319e:	23c0      	movs	r3, #192	; 0xc0
 80031a0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80031a2:	2312      	movs	r3, #18
 80031a4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80031a6:	2301      	movs	r3, #1
 80031a8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031aa:	2303      	movs	r3, #3
 80031ac:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031ae:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80031b0:	2304      	movs	r3, #4
 80031b2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031b4:	f7fd fd5e 	bl	8000c74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80031b8:	9502      	str	r5, [sp, #8]
 80031ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80031bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80031c0:	6423      	str	r3, [r4, #64]	; 0x40
 80031c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80031c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031c8:	9302      	str	r3, [sp, #8]
 80031ca:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80031cc:	b009      	add	sp, #36	; 0x24
 80031ce:	bd30      	pop	{r4, r5, pc}
 80031d0:	40005400 	.word	0x40005400
 80031d4:	40023800 	.word	0x40023800
 80031d8:	40020400 	.word	0x40020400

080031dc <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 80031dc:	6802      	ldr	r2, [r0, #0]
 80031de:	4b03      	ldr	r3, [pc, #12]	; (80031ec <HAL_RTC_MspInit+0x10>)
 80031e0:	429a      	cmp	r2, r3
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80031e2:	bf02      	ittt	eq
 80031e4:	4b02      	ldreq	r3, [pc, #8]	; (80031f0 <HAL_RTC_MspInit+0x14>)
 80031e6:	2201      	moveq	r2, #1
 80031e8:	601a      	streq	r2, [r3, #0]
 80031ea:	4770      	bx	lr
 80031ec:	40002800 	.word	0x40002800
 80031f0:	42470e3c 	.word	0x42470e3c

080031f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80031f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031f8:	4606      	mov	r6, r0
 80031fa:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031fc:	2214      	movs	r2, #20
 80031fe:	2100      	movs	r1, #0
 8003200:	a803      	add	r0, sp, #12
 8003202:	f000 fc37 	bl	8003a74 <memset>
  if(hspi->Instance==SPI2)
 8003206:	6832      	ldr	r2, [r6, #0]
 8003208:	4b30      	ldr	r3, [pc, #192]	; (80032cc <HAL_SPI_MspInit+0xd8>)
 800320a:	429a      	cmp	r2, r3
 800320c:	d15a      	bne.n	80032c4 <HAL_SPI_MspInit+0xd0>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800320e:	2500      	movs	r5, #0
 8003210:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8003214:	9500      	str	r5, [sp, #0]
 8003216:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003218:	482d      	ldr	r0, [pc, #180]	; (80032d0 <HAL_SPI_MspInit+0xdc>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 800321a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800321e:	641a      	str	r2, [r3, #64]	; 0x40
 8003220:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003222:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003226:	9200      	str	r2, [sp, #0]
 8003228:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800322a:	9501      	str	r5, [sp, #4]
 800322c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800322e:	f042 0204 	orr.w	r2, r2, #4
 8003232:	631a      	str	r2, [r3, #48]	; 0x30
 8003234:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003236:	f002 0204 	and.w	r2, r2, #4
 800323a:	9201      	str	r2, [sp, #4]
 800323c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800323e:	9502      	str	r5, [sp, #8]
 8003240:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003242:	f042 0202 	orr.w	r2, r2, #2
 8003246:	631a      	str	r2, [r3, #48]	; 0x30
 8003248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324a:	f003 0302 	and.w	r3, r3, #2
 800324e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003250:	2402      	movs	r4, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003252:	2703      	movs	r7, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003254:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003256:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8003258:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800325a:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800325c:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 800325e:	9307      	str	r3, [sp, #28]

    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003260:	f04f 0805 	mov.w	r8, #5
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003264:	9706      	str	r7, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003266:	f7fd fd05 	bl	8000c74 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800326a:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800326c:	a903      	add	r1, sp, #12
 800326e:	4818      	ldr	r0, [pc, #96]	; (80032d0 <HAL_SPI_MspInit+0xdc>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003270:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003272:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003274:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003276:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003278:	f8cd 801c 	str.w	r8, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800327c:	f7fd fcfa 	bl	8000c74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003280:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003284:	4813      	ldr	r0, [pc, #76]	; (80032d4 <HAL_SPI_MspInit+0xe0>)
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003286:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003288:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800328a:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800328c:	9505      	str	r5, [sp, #20]

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 800328e:	4c12      	ldr	r4, [pc, #72]	; (80032d8 <HAL_SPI_MspInit+0xe4>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003290:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003292:	f8cd 801c 	str.w	r8, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003296:	f7fd fced 	bl	8000c74 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 800329a:	4b10      	ldr	r3, [pc, #64]	; (80032dc <HAL_SPI_MspInit+0xe8>)
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800329c:	60a5      	str	r5, [r4, #8]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 800329e:	e884 0028 	stmia.w	r4, {r3, r5}
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80032a2:	4620      	mov	r0, r4
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80032a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80032a8:	60e5      	str	r5, [r4, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80032aa:	6123      	str	r3, [r4, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80032ac:	6165      	str	r5, [r4, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80032ae:	61a5      	str	r5, [r4, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 80032b0:	61e5      	str	r5, [r4, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80032b2:	6225      	str	r5, [r4, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80032b4:	6265      	str	r5, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80032b6:	f7fd fb59 	bl	800096c <HAL_DMA_Init>
 80032ba:	b108      	cbz	r0, 80032c0 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 80032bc:	f7ff fe6e 	bl	8002f9c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 80032c0:	64f4      	str	r4, [r6, #76]	; 0x4c
 80032c2:	63a6      	str	r6, [r4, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80032c4:	b008      	add	sp, #32
 80032c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80032ca:	bf00      	nop
 80032cc:	40003800 	.word	0x40003800
 80032d0:	40020800 	.word	0x40020800
 80032d4:	40020400 	.word	0x40020400
 80032d8:	2000022c 	.word	0x2000022c
 80032dc:	40026058 	.word	0x40026058

080032e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80032e0:	b500      	push	{lr}
  if(htim_base->Instance==TIM1)
 80032e2:	6803      	ldr	r3, [r0, #0]
 80032e4:	4a4c      	ldr	r2, [pc, #304]	; (8003418 <HAL_TIM_Base_MspInit+0x138>)
 80032e6:	4293      	cmp	r3, r2
{
 80032e8:	b08b      	sub	sp, #44	; 0x2c
  if(htim_base->Instance==TIM1)
 80032ea:	d10e      	bne.n	800330a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80032ec:	2300      	movs	r3, #0
 80032ee:	9301      	str	r3, [sp, #4]
 80032f0:	4b4a      	ldr	r3, [pc, #296]	; (800341c <HAL_TIM_Base_MspInit+0x13c>)
 80032f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032f4:	f042 0201 	orr.w	r2, r2, #1
 80032f8:	645a      	str	r2, [r3, #68]	; 0x44
 80032fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032fc:	f003 0301 	and.w	r3, r3, #1
 8003300:	9301      	str	r3, [sp, #4]
 8003302:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8003304:	b00b      	add	sp, #44	; 0x2c
 8003306:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(htim_base->Instance==TIM2)
 800330a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800330e:	d10c      	bne.n	800332a <HAL_TIM_Base_MspInit+0x4a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003310:	2300      	movs	r3, #0
 8003312:	9302      	str	r3, [sp, #8]
 8003314:	4b41      	ldr	r3, [pc, #260]	; (800341c <HAL_TIM_Base_MspInit+0x13c>)
 8003316:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003318:	f042 0201 	orr.w	r2, r2, #1
 800331c:	641a      	str	r2, [r3, #64]	; 0x40
 800331e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003320:	f003 0301 	and.w	r3, r3, #1
 8003324:	9302      	str	r3, [sp, #8]
 8003326:	9b02      	ldr	r3, [sp, #8]
 8003328:	e7ec      	b.n	8003304 <HAL_TIM_Base_MspInit+0x24>
  else if(htim_base->Instance==TIM3)
 800332a:	4a3d      	ldr	r2, [pc, #244]	; (8003420 <HAL_TIM_Base_MspInit+0x140>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d10c      	bne.n	800334a <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003330:	2300      	movs	r3, #0
 8003332:	9303      	str	r3, [sp, #12]
 8003334:	4b39      	ldr	r3, [pc, #228]	; (800341c <HAL_TIM_Base_MspInit+0x13c>)
 8003336:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003338:	f042 0202 	orr.w	r2, r2, #2
 800333c:	641a      	str	r2, [r3, #64]	; 0x40
 800333e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003340:	f003 0302 	and.w	r3, r3, #2
 8003344:	9303      	str	r3, [sp, #12]
 8003346:	9b03      	ldr	r3, [sp, #12]
 8003348:	e7dc      	b.n	8003304 <HAL_TIM_Base_MspInit+0x24>
  else if(htim_base->Instance==TIM8)
 800334a:	4a36      	ldr	r2, [pc, #216]	; (8003424 <HAL_TIM_Base_MspInit+0x144>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d113      	bne.n	8003378 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003350:	4b32      	ldr	r3, [pc, #200]	; (800341c <HAL_TIM_Base_MspInit+0x13c>)
 8003352:	2200      	movs	r2, #0
 8003354:	9204      	str	r2, [sp, #16]
 8003356:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003358:	f041 0102 	orr.w	r1, r1, #2
 800335c:	6459      	str	r1, [r3, #68]	; 0x44
 800335e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003360:	f003 0302 	and.w	r3, r3, #2
 8003364:	9304      	str	r3, [sp, #16]
 8003366:	9b04      	ldr	r3, [sp, #16]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8003368:	4611      	mov	r1, r2
 800336a:	202c      	movs	r0, #44	; 0x2c
 800336c:	f7fd fa90 	bl	8000890 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8003370:	202c      	movs	r0, #44	; 0x2c
 8003372:	f7fd fac1 	bl	80008f8 <HAL_NVIC_EnableIRQ>
 8003376:	e7c5      	b.n	8003304 <HAL_TIM_Base_MspInit+0x24>
  else if(htim_base->Instance==TIM10)
 8003378:	4a2b      	ldr	r2, [pc, #172]	; (8003428 <HAL_TIM_Base_MspInit+0x148>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d10c      	bne.n	8003398 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800337e:	2300      	movs	r3, #0
 8003380:	9305      	str	r3, [sp, #20]
 8003382:	4b26      	ldr	r3, [pc, #152]	; (800341c <HAL_TIM_Base_MspInit+0x13c>)
 8003384:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003386:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800338a:	645a      	str	r2, [r3, #68]	; 0x44
 800338c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800338e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003392:	9305      	str	r3, [sp, #20]
 8003394:	9b05      	ldr	r3, [sp, #20]
 8003396:	e7b5      	b.n	8003304 <HAL_TIM_Base_MspInit+0x24>
  else if(htim_base->Instance==TIM11)
 8003398:	4a24      	ldr	r2, [pc, #144]	; (800342c <HAL_TIM_Base_MspInit+0x14c>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d10c      	bne.n	80033b8 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800339e:	2300      	movs	r3, #0
 80033a0:	9306      	str	r3, [sp, #24]
 80033a2:	4b1e      	ldr	r3, [pc, #120]	; (800341c <HAL_TIM_Base_MspInit+0x13c>)
 80033a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033a6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80033aa:	645a      	str	r2, [r3, #68]	; 0x44
 80033ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033b2:	9306      	str	r3, [sp, #24]
 80033b4:	9b06      	ldr	r3, [sp, #24]
 80033b6:	e7a5      	b.n	8003304 <HAL_TIM_Base_MspInit+0x24>
  else if(htim_base->Instance==TIM12)
 80033b8:	4a1d      	ldr	r2, [pc, #116]	; (8003430 <HAL_TIM_Base_MspInit+0x150>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d10c      	bne.n	80033d8 <HAL_TIM_Base_MspInit+0xf8>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80033be:	2300      	movs	r3, #0
 80033c0:	9307      	str	r3, [sp, #28]
 80033c2:	4b16      	ldr	r3, [pc, #88]	; (800341c <HAL_TIM_Base_MspInit+0x13c>)
 80033c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033ca:	641a      	str	r2, [r3, #64]	; 0x40
 80033cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033d2:	9307      	str	r3, [sp, #28]
 80033d4:	9b07      	ldr	r3, [sp, #28]
 80033d6:	e795      	b.n	8003304 <HAL_TIM_Base_MspInit+0x24>
  else if(htim_base->Instance==TIM13)
 80033d8:	4a16      	ldr	r2, [pc, #88]	; (8003434 <HAL_TIM_Base_MspInit+0x154>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d10c      	bne.n	80033f8 <HAL_TIM_Base_MspInit+0x118>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80033de:	4b0f      	ldr	r3, [pc, #60]	; (800341c <HAL_TIM_Base_MspInit+0x13c>)
 80033e0:	2200      	movs	r2, #0
 80033e2:	9208      	str	r2, [sp, #32]
 80033e4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80033e6:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80033ea:	6419      	str	r1, [r3, #64]	; 0x40
 80033ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033f2:	9308      	str	r3, [sp, #32]
 80033f4:	9b08      	ldr	r3, [sp, #32]
 80033f6:	e7b7      	b.n	8003368 <HAL_TIM_Base_MspInit+0x88>
  else if(htim_base->Instance==TIM14)
 80033f8:	4a0f      	ldr	r2, [pc, #60]	; (8003438 <HAL_TIM_Base_MspInit+0x158>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d182      	bne.n	8003304 <HAL_TIM_Base_MspInit+0x24>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80033fe:	2300      	movs	r3, #0
 8003400:	9309      	str	r3, [sp, #36]	; 0x24
 8003402:	4b06      	ldr	r3, [pc, #24]	; (800341c <HAL_TIM_Base_MspInit+0x13c>)
 8003404:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003406:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800340a:	641a      	str	r2, [r3, #64]	; 0x40
 800340c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003412:	9309      	str	r3, [sp, #36]	; 0x24
 8003414:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
 8003416:	e775      	b.n	8003304 <HAL_TIM_Base_MspInit+0x24>
 8003418:	40010000 	.word	0x40010000
 800341c:	40023800 	.word	0x40023800
 8003420:	40000400 	.word	0x40000400
 8003424:	40010400 	.word	0x40010400
 8003428:	40014400 	.word	0x40014400
 800342c:	40014800 	.word	0x40014800
 8003430:	40001800 	.word	0x40001800
 8003434:	40001c00 	.word	0x40001c00
 8003438:	40002000 	.word	0x40002000

0800343c <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM5)
 800343c:	6802      	ldr	r2, [r0, #0]
 800343e:	4b09      	ldr	r3, [pc, #36]	; (8003464 <HAL_TIM_PWM_MspInit+0x28>)
 8003440:	429a      	cmp	r2, r3
{
 8003442:	b082      	sub	sp, #8
  if(htim_pwm->Instance==TIM5)
 8003444:	d10b      	bne.n	800345e <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003446:	2300      	movs	r3, #0
 8003448:	9301      	str	r3, [sp, #4]
 800344a:	4b07      	ldr	r3, [pc, #28]	; (8003468 <HAL_TIM_PWM_MspInit+0x2c>)
 800344c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800344e:	f042 0208 	orr.w	r2, r2, #8
 8003452:	641a      	str	r2, [r3, #64]	; 0x40
 8003454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003456:	f003 0308 	and.w	r3, r3, #8
 800345a:	9301      	str	r3, [sp, #4]
 800345c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800345e:	b002      	add	sp, #8
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop
 8003464:	40000c00 	.word	0x40000c00
 8003468:	40023800 	.word	0x40023800

0800346c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800346c:	b570      	push	{r4, r5, r6, lr}
 800346e:	4604      	mov	r4, r0
 8003470:	b090      	sub	sp, #64	; 0x40
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003472:	2214      	movs	r2, #20
 8003474:	2100      	movs	r1, #0
 8003476:	a80b      	add	r0, sp, #44	; 0x2c
 8003478:	f000 fafc 	bl	8003a74 <memset>
  if(htim->Instance==TIM1)
 800347c:	6823      	ldr	r3, [r4, #0]
 800347e:	4a7a      	ldr	r2, [pc, #488]	; (8003668 <HAL_TIM_MspPostInit+0x1fc>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d113      	bne.n	80034ac <HAL_TIM_MspPostInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003484:	2300      	movs	r3, #0
 8003486:	9300      	str	r3, [sp, #0]
 8003488:	4b78      	ldr	r3, [pc, #480]	; (800366c <HAL_TIM_MspPostInit+0x200>)
 800348a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800348c:	f042 0201 	orr.w	r2, r2, #1
 8003490:	631a      	str	r2, [r3, #48]	; 0x30
 8003492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003494:	f003 0301 	and.w	r3, r3, #1
 8003498:	9300      	str	r3, [sp, #0]
 800349a:	9b00      	ldr	r3, [sp, #0]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = S15i2_Pin|S09x2_Pin|S18_Pin|S17_Pin;
 800349c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80034a0:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034a2:	2302      	movs	r3, #2
 80034a4:	930c      	str	r3, [sp, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80034a6:	2301      	movs	r3, #1
    */
    GPIO_InitStruct.Pin = S11_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 80034a8:	930f      	str	r3, [sp, #60]	; 0x3c
 80034aa:	e02b      	b.n	8003504 <HAL_TIM_MspPostInit+0x98>
  else if(htim->Instance==TIM2)
 80034ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034b0:	d12b      	bne.n	800350a <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034b2:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 80034b6:	2400      	movs	r4, #0
 80034b8:	9401      	str	r4, [sp, #4]
 80034ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034bc:	486c      	ldr	r0, [pc, #432]	; (8003670 <HAL_TIM_MspPostInit+0x204>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034be:	f042 0202 	orr.w	r2, r2, #2
 80034c2:	631a      	str	r2, [r3, #48]	; 0x30
 80034c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034c6:	f002 0202 	and.w	r2, r2, #2
 80034ca:	9201      	str	r2, [sp, #4]
 80034cc:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034ce:	9402      	str	r4, [sp, #8]
 80034d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034d2:	f042 0201 	orr.w	r2, r2, #1
 80034d6:	631a      	str	r2, [r3, #48]	; 0x30
 80034d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034da:	f003 0301 	and.w	r3, r3, #1
 80034de:	9302      	str	r3, [sp, #8]
 80034e0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034e2:	2602      	movs	r6, #2
    GPIO_InitStruct.Pin = S02_Pin|S03_Pin|S14x3_Pin;
 80034e4:	f240 430c 	movw	r3, #1036	; 0x40c
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80034e8:	2501      	movs	r5, #1
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034ea:	a90b      	add	r1, sp, #44	; 0x2c
    GPIO_InitStruct.Pin = S02_Pin|S03_Pin|S14x3_Pin;
 80034ec:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034ee:	960c      	str	r6, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80034f0:	950f      	str	r5, [sp, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034f2:	f7fd fbbf 	bl	8000c74 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = S19i3_Pin;
 80034f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034fa:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034fc:	960c      	str	r6, [sp, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034fe:	940d      	str	r4, [sp, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003500:	940e      	str	r4, [sp, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003502:	950f      	str	r5, [sp, #60]	; 0x3c
    HAL_GPIO_Init(S11_GPIO_Port, &GPIO_InitStruct);
 8003504:	a90b      	add	r1, sp, #44	; 0x2c
 8003506:	485b      	ldr	r0, [pc, #364]	; (8003674 <HAL_TIM_MspPostInit+0x208>)
 8003508:	e056      	b.n	80035b8 <HAL_TIM_MspPostInit+0x14c>
  else if(htim->Instance==TIM3)
 800350a:	4a5b      	ldr	r2, [pc, #364]	; (8003678 <HAL_TIM_MspPostInit+0x20c>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d127      	bne.n	8003560 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003510:	4b56      	ldr	r3, [pc, #344]	; (800366c <HAL_TIM_MspPostInit+0x200>)
    HAL_GPIO_Init(S05i5_GPIO_Port, &GPIO_InitStruct);
 8003512:	4858      	ldr	r0, [pc, #352]	; (8003674 <HAL_TIM_MspPostInit+0x208>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003514:	2500      	movs	r5, #0
 8003516:	9503      	str	r5, [sp, #12]
 8003518:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800351a:	f042 0201 	orr.w	r2, r2, #1
 800351e:	631a      	str	r2, [r3, #48]	; 0x30
 8003520:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003522:	f002 0201 	and.w	r2, r2, #1
 8003526:	9203      	str	r2, [sp, #12]
 8003528:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800352a:	9504      	str	r5, [sp, #16]
 800352c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800352e:	f042 0202 	orr.w	r2, r2, #2
 8003532:	631a      	str	r2, [r3, #48]	; 0x30
 8003534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003536:	f003 0302 	and.w	r3, r3, #2
 800353a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800353c:	2402      	movs	r4, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800353e:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003540:	940c      	str	r4, [sp, #48]	; 0x30
    GPIO_InitStruct.Pin = S05i5_Pin;
 8003542:	2340      	movs	r3, #64	; 0x40
    HAL_GPIO_Init(S05i5_GPIO_Port, &GPIO_InitStruct);
 8003544:	a90b      	add	r1, sp, #44	; 0x2c
    GPIO_InitStruct.Pin = S05i5_Pin;
 8003546:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003548:	940f      	str	r4, [sp, #60]	; 0x3c
    HAL_GPIO_Init(S05i5_GPIO_Port, &GPIO_InitStruct);
 800354a:	f7fd fb93 	bl	8000c74 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = S10_Pin|S01_Pin|S13x5_Pin;
 800354e:	2323      	movs	r3, #35	; 0x23
 8003550:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003552:	940c      	str	r4, [sp, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003554:	950d      	str	r5, [sp, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003556:	950e      	str	r5, [sp, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003558:	940f      	str	r4, [sp, #60]	; 0x3c
    HAL_GPIO_Init(S22i1_GPIO_Port, &GPIO_InitStruct);
 800355a:	a90b      	add	r1, sp, #44	; 0x2c
 800355c:	4844      	ldr	r0, [pc, #272]	; (8003670 <HAL_TIM_MspPostInit+0x204>)
 800355e:	e02b      	b.n	80035b8 <HAL_TIM_MspPostInit+0x14c>
  else if(htim->Instance==TIM5)
 8003560:	4a46      	ldr	r2, [pc, #280]	; (800367c <HAL_TIM_MspPostInit+0x210>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d110      	bne.n	8003588 <HAL_TIM_MspPostInit+0x11c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003566:	2300      	movs	r3, #0
 8003568:	9305      	str	r3, [sp, #20]
 800356a:	4b40      	ldr	r3, [pc, #256]	; (800366c <HAL_TIM_MspPostInit+0x200>)
 800356c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800356e:	f042 0201 	orr.w	r2, r2, #1
 8003572:	631a      	str	r2, [r3, #48]	; 0x30
 8003574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003576:	f003 0301 	and.w	r3, r3, #1
 800357a:	9305      	str	r3, [sp, #20]
 800357c:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = S21i4_Pin|S04x4_Pin;
 800357e:	2303      	movs	r3, #3
 8003580:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003582:	2302      	movs	r3, #2
 8003584:	930c      	str	r3, [sp, #48]	; 0x30
 8003586:	e78f      	b.n	80034a8 <HAL_TIM_MspPostInit+0x3c>
  else if(htim->Instance==TIM8)
 8003588:	4a3d      	ldr	r2, [pc, #244]	; (8003680 <HAL_TIM_MspPostInit+0x214>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d118      	bne.n	80035c0 <HAL_TIM_MspPostInit+0x154>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800358e:	2300      	movs	r3, #0
 8003590:	9306      	str	r3, [sp, #24]
 8003592:	4b36      	ldr	r3, [pc, #216]	; (800366c <HAL_TIM_MspPostInit+0x200>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003594:	483b      	ldr	r0, [pc, #236]	; (8003684 <HAL_TIM_MspPostInit+0x218>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003596:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003598:	f042 0204 	orr.w	r2, r2, #4
 800359c:	631a      	str	r2, [r3, #48]	; 0x30
 800359e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a0:	f003 0304 	and.w	r3, r3, #4
 80035a4:	9306      	str	r3, [sp, #24]
 80035a6:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = S20i6_Pin|S06x6_Pin|S07_Pin|S08_Pin;
 80035a8:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80035ac:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ae:	2302      	movs	r3, #2
 80035b0:	930c      	str	r3, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80035b2:	2303      	movs	r3, #3
 80035b4:	930f      	str	r3, [sp, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035b6:	a90b      	add	r1, sp, #44	; 0x2c
    HAL_GPIO_Init(S11_GPIO_Port, &GPIO_InitStruct);
 80035b8:	f7fd fb5c 	bl	8000c74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 80035bc:	b010      	add	sp, #64	; 0x40
 80035be:	bd70      	pop	{r4, r5, r6, pc}
  else if(htim->Instance==TIM10)
 80035c0:	4a31      	ldr	r2, [pc, #196]	; (8003688 <HAL_TIM_MspPostInit+0x21c>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d113      	bne.n	80035ee <HAL_TIM_MspPostInit+0x182>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035c6:	2300      	movs	r3, #0
 80035c8:	9307      	str	r3, [sp, #28]
 80035ca:	4b28      	ldr	r3, [pc, #160]	; (800366c <HAL_TIM_MspPostInit+0x200>)
 80035cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035ce:	f042 0202 	orr.w	r2, r2, #2
 80035d2:	631a      	str	r2, [r3, #48]	; 0x30
 80035d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d6:	f003 0302 	and.w	r3, r3, #2
 80035da:	9307      	str	r3, [sp, #28]
 80035dc:	9b07      	ldr	r3, [sp, #28]
    GPIO_InitStruct.Pin = S16_Pin;
 80035de:	f44f 7380 	mov.w	r3, #256	; 0x100
    GPIO_InitStruct.Pin = S12_Pin;
 80035e2:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035e4:	2302      	movs	r3, #2
 80035e6:	930c      	str	r3, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 80035e8:	2303      	movs	r3, #3
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80035ea:	930f      	str	r3, [sp, #60]	; 0x3c
 80035ec:	e7b5      	b.n	800355a <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM11)
 80035ee:	4a27      	ldr	r2, [pc, #156]	; (800368c <HAL_TIM_MspPostInit+0x220>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d10e      	bne.n	8003612 <HAL_TIM_MspPostInit+0x1a6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035f4:	2300      	movs	r3, #0
 80035f6:	9308      	str	r3, [sp, #32]
 80035f8:	4b1c      	ldr	r3, [pc, #112]	; (800366c <HAL_TIM_MspPostInit+0x200>)
 80035fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035fc:	f042 0202 	orr.w	r2, r2, #2
 8003600:	631a      	str	r2, [r3, #48]	; 0x30
 8003602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003604:	f003 0302 	and.w	r3, r3, #2
 8003608:	9308      	str	r3, [sp, #32]
 800360a:	9b08      	ldr	r3, [sp, #32]
    GPIO_InitStruct.Pin = S12_Pin;
 800360c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003610:	e7e7      	b.n	80035e2 <HAL_TIM_MspPostInit+0x176>
  else if(htim->Instance==TIM12)
 8003612:	4a1f      	ldr	r2, [pc, #124]	; (8003690 <HAL_TIM_MspPostInit+0x224>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d112      	bne.n	800363e <HAL_TIM_MspPostInit+0x1d2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003618:	2300      	movs	r3, #0
 800361a:	9309      	str	r3, [sp, #36]	; 0x24
 800361c:	4b13      	ldr	r3, [pc, #76]	; (800366c <HAL_TIM_MspPostInit+0x200>)
 800361e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003620:	f042 0202 	orr.w	r2, r2, #2
 8003624:	631a      	str	r2, [r3, #48]	; 0x30
 8003626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003628:	f003 0302 	and.w	r3, r3, #2
 800362c:	9309      	str	r3, [sp, #36]	; 0x24
 800362e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Pin = S22i1_Pin;
 8003630:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003634:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003636:	2302      	movs	r3, #2
 8003638:	930c      	str	r3, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800363a:	2309      	movs	r3, #9
 800363c:	e7d5      	b.n	80035ea <HAL_TIM_MspPostInit+0x17e>
  else if(htim->Instance==TIM14)
 800363e:	4a15      	ldr	r2, [pc, #84]	; (8003694 <HAL_TIM_MspPostInit+0x228>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d1bb      	bne.n	80035bc <HAL_TIM_MspPostInit+0x150>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003644:	2300      	movs	r3, #0
 8003646:	930a      	str	r3, [sp, #40]	; 0x28
 8003648:	4b08      	ldr	r3, [pc, #32]	; (800366c <HAL_TIM_MspPostInit+0x200>)
 800364a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800364c:	f042 0201 	orr.w	r2, r2, #1
 8003650:	631a      	str	r2, [r3, #48]	; 0x30
 8003652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003654:	f003 0301 	and.w	r3, r3, #1
 8003658:	930a      	str	r3, [sp, #40]	; 0x28
 800365a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = S11_Pin;
 800365c:	2380      	movs	r3, #128	; 0x80
 800365e:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003660:	2302      	movs	r3, #2
 8003662:	930c      	str	r3, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8003664:	2309      	movs	r3, #9
 8003666:	e71f      	b.n	80034a8 <HAL_TIM_MspPostInit+0x3c>
 8003668:	40010000 	.word	0x40010000
 800366c:	40023800 	.word	0x40023800
 8003670:	40020400 	.word	0x40020400
 8003674:	40020000 	.word	0x40020000
 8003678:	40000400 	.word	0x40000400
 800367c:	40000c00 	.word	0x40000c00
 8003680:	40010400 	.word	0x40010400
 8003684:	40020800 	.word	0x40020800
 8003688:	40014400 	.word	0x40014400
 800368c:	40014800 	.word	0x40014800
 8003690:	40001800 	.word	0x40001800
 8003694:	40002000 	.word	0x40002000

08003698 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003698:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800369c:	4605      	mov	r5, r0
 800369e:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036a0:	2214      	movs	r2, #20
 80036a2:	2100      	movs	r1, #0
 80036a4:	a807      	add	r0, sp, #28
 80036a6:	f000 f9e5 	bl	8003a74 <memset>
  if(huart->Instance==UART4)
 80036aa:	682b      	ldr	r3, [r5, #0]
 80036ac:	4a8c      	ldr	r2, [pc, #560]	; (80038e0 <HAL_UART_MspInit+0x248>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d161      	bne.n	8003776 <HAL_UART_MspInit+0xde>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80036b2:	2600      	movs	r6, #0
 80036b4:	4b8b      	ldr	r3, [pc, #556]	; (80038e4 <HAL_UART_MspInit+0x24c>)
 80036b6:	9600      	str	r6, [sp, #0]
 80036b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = FTDI_TX_Pin|FTDI_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036ba:	488b      	ldr	r0, [pc, #556]	; (80038e8 <HAL_UART_MspInit+0x250>)

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 80036bc:	4c8b      	ldr	r4, [pc, #556]	; (80038ec <HAL_UART_MspInit+0x254>)
    __HAL_RCC_UART4_CLK_ENABLE();
 80036be:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80036c2:	641a      	str	r2, [r3, #64]	; 0x40
 80036c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036c6:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 80036ca:	9200      	str	r2, [sp, #0]
 80036cc:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80036ce:	9601      	str	r6, [sp, #4]
 80036d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036d2:	f042 0204 	orr.w	r2, r2, #4
 80036d6:	631a      	str	r2, [r3, #48]	; 0x30
 80036d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036da:	f003 0304 	and.w	r3, r3, #4
 80036de:	9301      	str	r3, [sp, #4]
 80036e0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = FTDI_TX_Pin|FTDI_RX_Pin;
 80036e2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80036e6:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036e8:	2302      	movs	r3, #2
 80036ea:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80036ec:	2301      	movs	r3, #1
 80036ee:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036f0:	2303      	movs	r3, #3
 80036f2:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036f4:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80036f6:	2308      	movs	r3, #8
 80036f8:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036fa:	f7fd fabb 	bl	8000c74 <HAL_GPIO_Init>
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 80036fe:	4b7c      	ldr	r3, [pc, #496]	; (80038f0 <HAL_UART_MspInit+0x258>)
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003700:	60a6      	str	r6, [r4, #8]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8003702:	f04f 6800 	mov.w	r8, #134217728	; 0x8000000
 8003706:	e884 0108 	stmia.w	r4, {r3, r8}
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 800370a:	4620      	mov	r0, r4
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800370c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003710:	60e6      	str	r6, [r4, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003712:	6123      	str	r3, [r4, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003714:	6166      	str	r6, [r4, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003716:	61a6      	str	r6, [r4, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8003718:	61e6      	str	r6, [r4, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800371a:	6226      	str	r6, [r4, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800371c:	6266      	str	r6, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 800371e:	f7fd f925 	bl	800096c <HAL_DMA_Init>
 8003722:	b108      	cbz	r0, 8003728 <HAL_UART_MspInit+0x90>
    {
      Error_Handler();
 8003724:	f7ff fc3a 	bl	8002f9c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8003728:	636c      	str	r4, [r5, #52]	; 0x34

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800372a:	4b72      	ldr	r3, [pc, #456]	; (80038f4 <HAL_UART_MspInit+0x25c>)
    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 800372c:	63a5      	str	r5, [r4, #56]	; 0x38
    hdma_uart4_tx.Instance = DMA1_Stream4;
 800372e:	4c72      	ldr	r4, [pc, #456]	; (80038f8 <HAL_UART_MspInit+0x260>)
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003730:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
 8003734:	f04f 0e40 	mov.w	lr, #64	; 0x40
 8003738:	e884 5008 	stmia.w	r4, {r3, ip, lr}
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800373c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003740:	2300      	movs	r3, #0
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8003742:	4620      	mov	r0, r4
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003744:	60e3      	str	r3, [r4, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003746:	6122      	str	r2, [r4, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003748:	6163      	str	r3, [r4, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800374a:	61a3      	str	r3, [r4, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 800374c:	61e3      	str	r3, [r4, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800374e:	6223      	str	r3, [r4, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003750:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8003752:	f7fd f90b 	bl	800096c <HAL_DMA_Init>
 8003756:	b108      	cbz	r0, 800375c <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8003758:	f7ff fc20 	bl	8002f9c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800375c:	2200      	movs	r2, #0
    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 800375e:	632c      	str	r4, [r5, #48]	; 0x30
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8003760:	2034      	movs	r0, #52	; 0x34
 8003762:	4611      	mov	r1, r2
    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8003764:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8003766:	f7fd f893 	bl	8000890 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800376a:	2034      	movs	r0, #52	; 0x34
 800376c:	f7fd f8c4 	bl	80008f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003770:	b00d      	add	sp, #52	; 0x34
 8003772:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  else if(huart->Instance==UART5)
 8003776:	4a61      	ldr	r2, [pc, #388]	; (80038fc <HAL_UART_MspInit+0x264>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d171      	bne.n	8003860 <HAL_UART_MspInit+0x1c8>
    __HAL_RCC_UART5_CLK_ENABLE();
 800377c:	2600      	movs	r6, #0
 800377e:	4b59      	ldr	r3, [pc, #356]	; (80038e4 <HAL_UART_MspInit+0x24c>)
 8003780:	9602      	str	r6, [sp, #8]
 8003782:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(UART5_TX_GPIO_Port, &GPIO_InitStruct);
 8003784:	4858      	ldr	r0, [pc, #352]	; (80038e8 <HAL_UART_MspInit+0x250>)
    __HAL_RCC_UART5_CLK_ENABLE();
 8003786:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800378a:	641a      	str	r2, [r3, #64]	; 0x40
 800378c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800378e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003792:	9202      	str	r2, [sp, #8]
 8003794:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003796:	9603      	str	r6, [sp, #12]
 8003798:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800379a:	f042 0204 	orr.w	r2, r2, #4
 800379e:	631a      	str	r2, [r3, #48]	; 0x30
 80037a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037a2:	f002 0204 	and.w	r2, r2, #4
 80037a6:	9203      	str	r2, [sp, #12]
 80037a8:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80037aa:	9604      	str	r6, [sp, #16]
 80037ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037ae:	f042 0208 	orr.w	r2, r2, #8
 80037b2:	631a      	str	r2, [r3, #48]	; 0x30
 80037b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b6:	f003 0308 	and.w	r3, r3, #8
 80037ba:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80037bc:	2408      	movs	r4, #8
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80037be:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80037c0:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Pin = UART5_TX_Pin;
 80037c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037c6:	f04f 0902 	mov.w	r9, #2
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80037ca:	f04f 0801 	mov.w	r8, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037ce:	2703      	movs	r7, #3
    HAL_GPIO_Init(UART5_TX_GPIO_Port, &GPIO_InitStruct);
 80037d0:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Pin = UART5_TX_Pin;
 80037d2:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037d4:	f8cd 9020 	str.w	r9, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80037d8:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037dc:	970a      	str	r7, [sp, #40]	; 0x28
    HAL_GPIO_Init(UART5_TX_GPIO_Port, &GPIO_InitStruct);
 80037de:	f7fd fa49 	bl	8000c74 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = UART5_RX_Pin;
 80037e2:	2304      	movs	r3, #4
    HAL_GPIO_Init(UART5_RX_GPIO_Port, &GPIO_InitStruct);
 80037e4:	a907      	add	r1, sp, #28
 80037e6:	4846      	ldr	r0, [pc, #280]	; (8003900 <HAL_UART_MspInit+0x268>)
    GPIO_InitStruct.Pin = UART5_RX_Pin;
 80037e8:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80037ea:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037ec:	f8cd 9020 	str.w	r9, [sp, #32]
    hdma_uart5_rx.Instance = DMA1_Stream0;
 80037f0:	4c44      	ldr	r4, [pc, #272]	; (8003904 <HAL_UART_MspInit+0x26c>)
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80037f2:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037f6:	970a      	str	r7, [sp, #40]	; 0x28
    HAL_GPIO_Init(UART5_RX_GPIO_Port, &GPIO_InitStruct);
 80037f8:	f7fd fa3c 	bl	8000c74 <HAL_GPIO_Init>
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 80037fc:	4942      	ldr	r1, [pc, #264]	; (8003908 <HAL_UART_MspInit+0x270>)
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80037fe:	60a6      	str	r6, [r4, #8]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8003800:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003804:	e884 000a 	stmia.w	r4, {r1, r3}
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8003808:	4620      	mov	r0, r4
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 800380a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800380e:	60e6      	str	r6, [r4, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003810:	6123      	str	r3, [r4, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003812:	6166      	str	r6, [r4, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003814:	61a6      	str	r6, [r4, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8003816:	61e6      	str	r6, [r4, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003818:	6226      	str	r6, [r4, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800381a:	6266      	str	r6, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 800381c:	f7fd f8a6 	bl	800096c <HAL_DMA_Init>
 8003820:	b108      	cbz	r0, 8003826 <HAL_UART_MspInit+0x18e>
      Error_Handler();
 8003822:	f7ff fbbb 	bl	8002f9c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8003826:	636c      	str	r4, [r5, #52]	; 0x34
    hdma_uart5_tx.Instance = DMA1_Stream7;
 8003828:	4b38      	ldr	r3, [pc, #224]	; (800390c <HAL_UART_MspInit+0x274>)
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 800382a:	63a5      	str	r5, [r4, #56]	; 0x38
    hdma_uart5_tx.Instance = DMA1_Stream7;
 800382c:	4c38      	ldr	r4, [pc, #224]	; (8003910 <HAL_UART_MspInit+0x278>)
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800382e:	6023      	str	r3, [r4, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8003830:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003834:	6063      	str	r3, [r4, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003836:	2340      	movs	r3, #64	; 0x40
 8003838:	60a3      	str	r3, [r4, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800383a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800383e:	2300      	movs	r3, #0
 8003840:	60e3      	str	r3, [r4, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003842:	6122      	str	r2, [r4, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003844:	6163      	str	r3, [r4, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003846:	61a3      	str	r3, [r4, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003848:	61e3      	str	r3, [r4, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800384a:	6223      	str	r3, [r4, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800384c:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800384e:	4620      	mov	r0, r4
 8003850:	f7fd f88c 	bl	800096c <HAL_DMA_Init>
 8003854:	b108      	cbz	r0, 800385a <HAL_UART_MspInit+0x1c2>
      Error_Handler();
 8003856:	f7ff fba1 	bl	8002f9c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800385a:	632c      	str	r4, [r5, #48]	; 0x30
 800385c:	63a5      	str	r5, [r4, #56]	; 0x38
}
 800385e:	e787      	b.n	8003770 <HAL_UART_MspInit+0xd8>
  else if(huart->Instance==USART2)
 8003860:	4a2c      	ldr	r2, [pc, #176]	; (8003914 <HAL_UART_MspInit+0x27c>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d184      	bne.n	8003770 <HAL_UART_MspInit+0xd8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003866:	2600      	movs	r6, #0
 8003868:	4b1e      	ldr	r3, [pc, #120]	; (80038e4 <HAL_UART_MspInit+0x24c>)
 800386a:	9605      	str	r6, [sp, #20]
 800386c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800386e:	482a      	ldr	r0, [pc, #168]	; (8003918 <HAL_UART_MspInit+0x280>)
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003870:	4c2a      	ldr	r4, [pc, #168]	; (800391c <HAL_UART_MspInit+0x284>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8003872:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003876:	641a      	str	r2, [r3, #64]	; 0x40
 8003878:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800387a:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800387e:	9205      	str	r2, [sp, #20]
 8003880:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003882:	9606      	str	r6, [sp, #24]
 8003884:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003886:	f042 0201 	orr.w	r2, r2, #1
 800388a:	631a      	str	r2, [r3, #48]	; 0x30
 800388c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800388e:	f003 0301 	and.w	r3, r3, #1
 8003892:	9306      	str	r3, [sp, #24]
 8003894:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = UART2_TX_Pin|UART2_RX_Pin;
 8003896:	230c      	movs	r3, #12
 8003898:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800389a:	2302      	movs	r3, #2
 800389c:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800389e:	2303      	movs	r3, #3
 80038a0:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038a2:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80038a4:	2307      	movs	r3, #7
 80038a6:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038a8:	f7fd f9e4 	bl	8000c74 <HAL_GPIO_Init>
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80038ac:	4a1c      	ldr	r2, [pc, #112]	; (8003920 <HAL_UART_MspInit+0x288>)
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80038ae:	60a6      	str	r6, [r4, #8]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80038b0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80038b4:	e884 000c 	stmia.w	r4, {r2, r3}
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80038b8:	4620      	mov	r0, r4
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80038ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80038be:	60e6      	str	r6, [r4, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80038c0:	6123      	str	r3, [r4, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80038c2:	6166      	str	r6, [r4, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80038c4:	61a6      	str	r6, [r4, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80038c6:	61e6      	str	r6, [r4, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80038c8:	6226      	str	r6, [r4, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80038ca:	6266      	str	r6, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80038cc:	f7fd f84e 	bl	800096c <HAL_DMA_Init>
 80038d0:	b108      	cbz	r0, 80038d6 <HAL_UART_MspInit+0x23e>
      Error_Handler();
 80038d2:	f7ff fb63 	bl	8002f9c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80038d6:	636c      	str	r4, [r5, #52]	; 0x34
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80038d8:	4b12      	ldr	r3, [pc, #72]	; (8003924 <HAL_UART_MspInit+0x28c>)
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80038da:	63a5      	str	r5, [r4, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80038dc:	4c12      	ldr	r4, [pc, #72]	; (8003928 <HAL_UART_MspInit+0x290>)
 80038de:	e7a6      	b.n	800382e <HAL_UART_MspInit+0x196>
 80038e0:	40004c00 	.word	0x40004c00
 80038e4:	40023800 	.word	0x40023800
 80038e8:	40020800 	.word	0x40020800
 80038ec:	20000040 	.word	0x20000040
 80038f0:	40026040 	.word	0x40026040
 80038f4:	40026070 	.word	0x40026070
 80038f8:	20000674 	.word	0x20000674
 80038fc:	40005000 	.word	0x40005000
 8003900:	40020c00 	.word	0x40020c00
 8003904:	20000594 	.word	0x20000594
 8003908:	40026010 	.word	0x40026010
 800390c:	400260b8 	.word	0x400260b8
 8003910:	200006d4 	.word	0x200006d4
 8003914:	40004400 	.word	0x40004400
 8003918:	40020000 	.word	0x40020000
 800391c:	200000a0 	.word	0x200000a0
 8003920:	40026088 	.word	0x40026088
 8003924:	400260a0 	.word	0x400260a0
 8003928:	20000394 	.word	0x20000394

0800392c <NMI_Handler>:
 800392c:	4770      	bx	lr

0800392e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800392e:	e7fe      	b.n	800392e <HardFault_Handler>

08003930 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003930:	e7fe      	b.n	8003930 <MemManage_Handler>

08003932 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003932:	e7fe      	b.n	8003932 <BusFault_Handler>

08003934 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003934:	e7fe      	b.n	8003934 <UsageFault_Handler>

08003936 <SVC_Handler>:
 8003936:	4770      	bx	lr

08003938 <DebugMon_Handler>:
 8003938:	4770      	bx	lr

0800393a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800393a:	4770      	bx	lr

0800393c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800393c:	f7fc be28 	b.w	8000590 <HAL_IncTick>

08003940 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8003940:	4801      	ldr	r0, [pc, #4]	; (8003948 <DMA1_Stream0_IRQHandler+0x8>)
 8003942:	f7fd b8dd 	b.w	8000b00 <HAL_DMA_IRQHandler>
 8003946:	bf00      	nop
 8003948:	20000594 	.word	0x20000594

0800394c <DMA1_Stream2_IRQHandler>:
void DMA1_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 800394c:	4801      	ldr	r0, [pc, #4]	; (8003954 <DMA1_Stream2_IRQHandler+0x8>)
 800394e:	f7fd b8d7 	b.w	8000b00 <HAL_DMA_IRQHandler>
 8003952:	bf00      	nop
 8003954:	20000040 	.word	0x20000040

08003958 <DMA1_Stream3_IRQHandler>:
void DMA1_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8003958:	4801      	ldr	r0, [pc, #4]	; (8003960 <DMA1_Stream3_IRQHandler+0x8>)
 800395a:	f7fd b8d1 	b.w	8000b00 <HAL_DMA_IRQHandler>
 800395e:	bf00      	nop
 8003960:	2000022c 	.word	0x2000022c

08003964 <DMA1_Stream4_IRQHandler>:
void DMA1_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8003964:	4801      	ldr	r0, [pc, #4]	; (800396c <DMA1_Stream4_IRQHandler+0x8>)
 8003966:	f7fd b8cb 	b.w	8000b00 <HAL_DMA_IRQHandler>
 800396a:	bf00      	nop
 800396c:	20000674 	.word	0x20000674

08003970 <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003970:	4801      	ldr	r0, [pc, #4]	; (8003978 <DMA1_Stream5_IRQHandler+0x8>)
 8003972:	f7fd b8c5 	b.w	8000b00 <HAL_DMA_IRQHandler>
 8003976:	bf00      	nop
 8003978:	200000a0 	.word	0x200000a0

0800397c <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800397c:	4801      	ldr	r0, [pc, #4]	; (8003984 <DMA1_Stream6_IRQHandler+0x8>)
 800397e:	f7fd b8bf 	b.w	8000b00 <HAL_DMA_IRQHandler>
 8003982:	bf00      	nop
 8003984:	20000394 	.word	0x20000394

08003988 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8003988:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800398a:	4804      	ldr	r0, [pc, #16]	; (800399c <TIM8_UP_TIM13_IRQHandler+0x14>)
 800398c:	f7fe f947 	bl	8001c1e <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 8003990:	4803      	ldr	r0, [pc, #12]	; (80039a0 <TIM8_UP_TIM13_IRQHandler+0x18>)
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8003992:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim13);
 8003996:	f7fe b942 	b.w	8001c1e <HAL_TIM_IRQHandler>
 800399a:	bf00      	nop
 800399c:	20000158 	.word	0x20000158
 80039a0:	200003f4 	.word	0x200003f4

080039a4 <DMA1_Stream7_IRQHandler>:
void DMA1_Stream7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 80039a4:	4801      	ldr	r0, [pc, #4]	; (80039ac <DMA1_Stream7_IRQHandler+0x8>)
 80039a6:	f7fd b8ab 	b.w	8000b00 <HAL_DMA_IRQHandler>
 80039aa:	bf00      	nop
 80039ac:	200006d4 	.word	0x200006d4

080039b0 <UART4_IRQHandler>:
void UART4_IRQHandler(void)
{
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80039b0:	4801      	ldr	r0, [pc, #4]	; (80039b8 <UART4_IRQHandler+0x8>)
 80039b2:	f7fe bde1 	b.w	8002578 <HAL_UART_IRQHandler>
 80039b6:	bf00      	nop
 80039b8:	200004d4 	.word	0x200004d4

080039bc <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80039bc:	4b05      	ldr	r3, [pc, #20]	; (80039d4 <SystemInit+0x18>)
 80039be:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80039c2:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80039c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80039ca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80039ce:	609a      	str	r2, [r3, #8]
 80039d0:	4770      	bx	lr
 80039d2:	bf00      	nop
 80039d4:	e000ed00 	.word	0xe000ed00

080039d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80039d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003a10 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80039dc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80039de:	e003      	b.n	80039e8 <LoopCopyDataInit>

080039e0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80039e0:	4b0c      	ldr	r3, [pc, #48]	; (8003a14 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80039e2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80039e4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80039e6:	3104      	adds	r1, #4

080039e8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80039e8:	480b      	ldr	r0, [pc, #44]	; (8003a18 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80039ea:	4b0c      	ldr	r3, [pc, #48]	; (8003a1c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80039ec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80039ee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80039f0:	d3f6      	bcc.n	80039e0 <CopyDataInit>
  ldr  r2, =_sbss
 80039f2:	4a0b      	ldr	r2, [pc, #44]	; (8003a20 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80039f4:	e002      	b.n	80039fc <LoopFillZerobss>

080039f6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80039f6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80039f8:	f842 3b04 	str.w	r3, [r2], #4

080039fc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80039fc:	4b09      	ldr	r3, [pc, #36]	; (8003a24 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80039fe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003a00:	d3f9      	bcc.n	80039f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003a02:	f7ff ffdb 	bl	80039bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003a06:	f000 f811 	bl	8003a2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003a0a:	f7fe feb9 	bl	8002780 <main>
  bx  lr    
 8003a0e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003a10:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003a14:	08003acc 	.word	0x08003acc
  ldr  r0, =_sdata
 8003a18:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003a1c:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8003a20:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8003a24:	20000734 	.word	0x20000734

08003a28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003a28:	e7fe      	b.n	8003a28 <ADC_IRQHandler>
	...

08003a2c <__libc_init_array>:
 8003a2c:	b570      	push	{r4, r5, r6, lr}
 8003a2e:	4e0d      	ldr	r6, [pc, #52]	; (8003a64 <__libc_init_array+0x38>)
 8003a30:	4c0d      	ldr	r4, [pc, #52]	; (8003a68 <__libc_init_array+0x3c>)
 8003a32:	1ba4      	subs	r4, r4, r6
 8003a34:	10a4      	asrs	r4, r4, #2
 8003a36:	2500      	movs	r5, #0
 8003a38:	42a5      	cmp	r5, r4
 8003a3a:	d109      	bne.n	8003a50 <__libc_init_array+0x24>
 8003a3c:	4e0b      	ldr	r6, [pc, #44]	; (8003a6c <__libc_init_array+0x40>)
 8003a3e:	4c0c      	ldr	r4, [pc, #48]	; (8003a70 <__libc_init_array+0x44>)
 8003a40:	f000 f820 	bl	8003a84 <_init>
 8003a44:	1ba4      	subs	r4, r4, r6
 8003a46:	10a4      	asrs	r4, r4, #2
 8003a48:	2500      	movs	r5, #0
 8003a4a:	42a5      	cmp	r5, r4
 8003a4c:	d105      	bne.n	8003a5a <__libc_init_array+0x2e>
 8003a4e:	bd70      	pop	{r4, r5, r6, pc}
 8003a50:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003a54:	4798      	blx	r3
 8003a56:	3501      	adds	r5, #1
 8003a58:	e7ee      	b.n	8003a38 <__libc_init_array+0xc>
 8003a5a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003a5e:	4798      	blx	r3
 8003a60:	3501      	adds	r5, #1
 8003a62:	e7f2      	b.n	8003a4a <__libc_init_array+0x1e>
 8003a64:	08003ac4 	.word	0x08003ac4
 8003a68:	08003ac4 	.word	0x08003ac4
 8003a6c:	08003ac4 	.word	0x08003ac4
 8003a70:	08003ac8 	.word	0x08003ac8

08003a74 <memset>:
 8003a74:	4402      	add	r2, r0
 8003a76:	4603      	mov	r3, r0
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d100      	bne.n	8003a7e <memset+0xa>
 8003a7c:	4770      	bx	lr
 8003a7e:	f803 1b01 	strb.w	r1, [r3], #1
 8003a82:	e7f9      	b.n	8003a78 <memset+0x4>

08003a84 <_init>:
 8003a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a86:	bf00      	nop
 8003a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a8a:	bc08      	pop	{r3}
 8003a8c:	469e      	mov	lr, r3
 8003a8e:	4770      	bx	lr

08003a90 <_fini>:
 8003a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a92:	bf00      	nop
 8003a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a96:	bc08      	pop	{r3}
 8003a98:	469e      	mov	lr, r3
 8003a9a:	4770      	bx	lr
